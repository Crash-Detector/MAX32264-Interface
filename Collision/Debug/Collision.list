
Collision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008650  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  08008810  08008810  00018810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d18  08008d18  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d18  08008d18  00018d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d20  08008d20  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d24  08008d24  00018d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  200001dc  08008f04  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08008f04  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd69  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fa5  00000000  00000000  0002ff75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d48  00000000  00000000  00031f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c40  00000000  00000000  00032c68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a847  00000000  00000000  000338a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acd7  00000000  00000000  0005e0ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00100cb4  00000000  00000000  00068dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00169a7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000464c  00000000  00000000  00169af8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080087f8 	.word	0x080087f8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	080087f8 	.word	0x080087f8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b972 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	4688      	mov	r8, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14b      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4615      	mov	r5, r2
 8000c1a:	d967      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0720 	rsb	r7, r2, #32
 8000c26:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c2e:	4095      	lsls	r5, r2
 8000c30:	ea47 0803 	orr.w	r8, r7, r3
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c48:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5a:	f080 811b 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8118 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c64:	3f02      	subs	r7, #2
 8000c66:	442b      	add	r3, r5
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	f080 8107 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	f240 8104 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c90:	3802      	subs	r0, #2
 8000c92:	442c      	add	r4, r5
 8000c94:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c98:	eba4 040c 	sub.w	r4, r4, ip
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	b11e      	cbz	r6, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c6 4300 	strd	r4, r3, [r6]
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0xbe>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80eb 	beq.w	8000e8e <__udivmoddi4+0x286>
 8000cb8:	2700      	movs	r7, #0
 8000cba:	e9c6 0100 	strd	r0, r1, [r6]
 8000cbe:	4638      	mov	r0, r7
 8000cc0:	4639      	mov	r1, r7
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	fab3 f783 	clz	r7, r3
 8000cca:	2f00      	cmp	r7, #0
 8000ccc:	d147      	bne.n	8000d5e <__udivmoddi4+0x156>
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d302      	bcc.n	8000cd8 <__udivmoddi4+0xd0>
 8000cd2:	4282      	cmp	r2, r0
 8000cd4:	f200 80fa 	bhi.w	8000ecc <__udivmoddi4+0x2c4>
 8000cd8:	1a84      	subs	r4, r0, r2
 8000cda:	eb61 0303 	sbc.w	r3, r1, r3
 8000cde:	2001      	movs	r0, #1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d0e0      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000ce6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cea:	e7dd      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000cec:	b902      	cbnz	r2, 8000cf0 <__udivmoddi4+0xe8>
 8000cee:	deff      	udf	#255	; 0xff
 8000cf0:	fab2 f282 	clz	r2, r2
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f040 808f 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cfa:	1b49      	subs	r1, r1, r5
 8000cfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d00:	fa1f f885 	uxth.w	r8, r5
 8000d04:	2701      	movs	r7, #1
 8000d06:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d14:	fb08 f10c 	mul.w	r1, r8, ip
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1c:	18eb      	adds	r3, r5, r3
 8000d1e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4299      	cmp	r1, r3
 8000d26:	f200 80cd 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d2a:	4684      	mov	ip, r0
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	b2a3      	uxth	r3, r4
 8000d30:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d34:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d38:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d3c:	fb08 f800 	mul.w	r8, r8, r0
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0x14c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x14a>
 8000d4c:	45a0      	cmp	r8, r4
 8000d4e:	f200 80b6 	bhi.w	8000ebe <__udivmoddi4+0x2b6>
 8000d52:	4618      	mov	r0, r3
 8000d54:	eba4 0408 	sub.w	r4, r4, r8
 8000d58:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d5c:	e79f      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d5e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d62:	40bb      	lsls	r3, r7
 8000d64:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d68:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d6c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d70:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d74:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d78:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d7c:	4325      	orrs	r5, r4
 8000d7e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	fb08 3319 	mls	r3, r8, r9, r3
 8000d88:	fa1f fa8e 	uxth.w	sl, lr
 8000d8c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d90:	fb09 f40a 	mul.w	r4, r9, sl
 8000d94:	429c      	cmp	r4, r3
 8000d96:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1e 0303 	adds.w	r3, lr, r3
 8000da4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000da8:	f080 8087 	bcs.w	8000eba <__udivmoddi4+0x2b2>
 8000dac:	429c      	cmp	r4, r3
 8000dae:	f240 8084 	bls.w	8000eba <__udivmoddi4+0x2b2>
 8000db2:	f1a9 0902 	sub.w	r9, r9, #2
 8000db6:	4473      	add	r3, lr
 8000db8:	1b1b      	subs	r3, r3, r4
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dc8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dcc:	45a2      	cmp	sl, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	d26b      	bcs.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dda:	45a2      	cmp	sl, r4
 8000ddc:	d969      	bls.n	8000eb2 <__udivmoddi4+0x2aa>
 8000dde:	3802      	subs	r0, #2
 8000de0:	4474      	add	r4, lr
 8000de2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000de6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dea:	eba4 040a 	sub.w	r4, r4, sl
 8000dee:	454c      	cmp	r4, r9
 8000df0:	46c2      	mov	sl, r8
 8000df2:	464b      	mov	r3, r9
 8000df4:	d354      	bcc.n	8000ea0 <__udivmoddi4+0x298>
 8000df6:	d051      	beq.n	8000e9c <__udivmoddi4+0x294>
 8000df8:	2e00      	cmp	r6, #0
 8000dfa:	d069      	beq.n	8000ed0 <__udivmoddi4+0x2c8>
 8000dfc:	ebb1 050a 	subs.w	r5, r1, sl
 8000e00:	eb64 0403 	sbc.w	r4, r4, r3
 8000e04:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e08:	40fd      	lsrs	r5, r7
 8000e0a:	40fc      	lsrs	r4, r7
 8000e0c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e10:	e9c6 5400 	strd	r5, r4, [r6]
 8000e14:	2700      	movs	r7, #0
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e20:	4095      	lsls	r5, r2
 8000e22:	fa01 f002 	lsl.w	r0, r1, r2
 8000e26:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e2e:	4338      	orrs	r0, r7
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e36:	fa1f f885 	uxth.w	r8, r5
 8000e3a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb07 f308 	mul.w	r3, r7, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	fa04 f402 	lsl.w	r4, r4, r2
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x256>
 8000e4e:	1869      	adds	r1, r5, r1
 8000e50:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e54:	d22f      	bcs.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e56:	428b      	cmp	r3, r1
 8000e58:	d92d      	bls.n	8000eb6 <__udivmoddi4+0x2ae>
 8000e5a:	3f02      	subs	r7, #2
 8000e5c:	4429      	add	r1, r5
 8000e5e:	1acb      	subs	r3, r1, r3
 8000e60:	b281      	uxth	r1, r0
 8000e62:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e66:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e6e:	fb00 f308 	mul.w	r3, r0, r8
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x27e>
 8000e76:	1869      	adds	r1, r5, r1
 8000e78:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e7c:	d217      	bcs.n	8000eae <__udivmoddi4+0x2a6>
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	d915      	bls.n	8000eae <__udivmoddi4+0x2a6>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4429      	add	r1, r5
 8000e86:	1ac9      	subs	r1, r1, r3
 8000e88:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e8c:	e73b      	b.n	8000d06 <__udivmoddi4+0xfe>
 8000e8e:	4637      	mov	r7, r6
 8000e90:	4630      	mov	r0, r6
 8000e92:	e709      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e94:	4607      	mov	r7, r0
 8000e96:	e6e7      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e98:	4618      	mov	r0, r3
 8000e9a:	e6fb      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e9c:	4541      	cmp	r1, r8
 8000e9e:	d2ab      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	4613      	mov	r3, r2
 8000eac:	e7a4      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	e7e9      	b.n	8000e86 <__udivmoddi4+0x27e>
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	e795      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb6:	4667      	mov	r7, ip
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x256>
 8000eba:	4681      	mov	r9, r0
 8000ebc:	e77c      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	442c      	add	r4, r5
 8000ec2:	e747      	b.n	8000d54 <__udivmoddi4+0x14c>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	442b      	add	r3, r5
 8000eca:	e72f      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ecc:	4638      	mov	r0, r7
 8000ece:	e708      	b.n	8000ce2 <__udivmoddi4+0xda>
 8000ed0:	4637      	mov	r7, r6
 8000ed2:	e6e9      	b.n	8000ca8 <__udivmoddi4+0xa0>

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eda:	f5ad 2d9c 	sub.w	sp, sp, #319488	; 0x4e000
 8000ede:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 8000ee2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f001 fb77 	bl	80025d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f001 f810 	bl	8001f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f001 f900 	bl	80020f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ef0:	f001 f874 	bl	8001fdc <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000ef4:	f001 f8b0 	bl	8002058 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  HAL_StatusTypeDef ret;
  uint8_t buf[65536];
  #define Write_HM 0xAA
  #define Read_HM 0xAB
  int samples = 0x0F;
 8000ef8:	230f      	movs	r3, #15
 8000efa:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8000efe:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8000f02:	6013      	str	r3, [r2, #0]
  /*Program the bootloader*/
  //PD0 = RTSN
  //PD1 = MFIO
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2101      	movs	r1, #1
 8000f08:	48ae      	ldr	r0, [pc, #696]	; (80011c4 <main+0x2ec>)
 8000f0a:	f001 fe73 	bl	8002bf4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,  0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2102      	movs	r1, #2
 8000f12:	48ac      	ldr	r0, [pc, #688]	; (80011c4 <main+0x2ec>)
 8000f14:	f001 fe6e 	bl	8002bf4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000f18:	200a      	movs	r0, #10
 8000f1a:	f001 fbd1 	bl	80026c0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2101      	movs	r1, #1
 8000f22:	48a8      	ldr	r0, [pc, #672]	; (80011c4 <main+0x2ec>)
 8000f24:	f001 fe66 	bl	8002bf4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000f28:	2032      	movs	r0, #50	; 0x32
 8000f2a:	f001 fbc9 	bl	80026c0 <HAL_Delay>
  HAL_Delay(1000);
 8000f2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f32:	f001 fbc5 	bl	80026c0 <HAL_Delay>
  FILE *ptr;

  ptr = fopen("algorithm.msbl","rb");  // r for read, b for binary
 8000f36:	49a4      	ldr	r1, [pc, #656]	; (80011c8 <main+0x2f0>)
 8000f38:	48a4      	ldr	r0, [pc, #656]	; (80011cc <main+0x2f4>)
 8000f3a:	f004 fe9f 	bl	8005c7c <fopen>
 8000f3e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8000f42:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f46:	6018      	str	r0, [r3, #0]
  uint8_t byteF[254449];
  fread(byteF,sizeof(byteF),1,ptr); // read 213408 bytes to our buffer
 8000f48:	f507 7014 	add.w	r0, r7, #592	; 0x250
 8000f4c:	f5a0 7013 	sub.w	r0, r0, #588	; 0x24c
 8000f50:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8000f54:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	499c      	ldr	r1, [pc, #624]	; (80011d0 <main+0x2f8>)
 8000f5e:	f004 fee5 	bl	8005d2c <fread>

  buf[0] = 0x01;
 8000f62:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8000f66:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8000f6a:	3b58      	subs	r3, #88	; 0x58
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 8000f70:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8000f74:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8000f78:	3b58      	subs	r3, #88	; 0x58
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x08;
 8000f7e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8000f82:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8000f86:	3b58      	subs	r3, #88	; 0x58
 8000f88:	2208      	movs	r2, #8
 8000f8a:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8000f8c:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8000f90:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8000f94:	3a58      	subs	r2, #88	; 0x58
 8000f96:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	21aa      	movs	r1, #170	; 0xaa
 8000fa0:	488c      	ldr	r0, [pc, #560]	; (80011d4 <main+0x2fc>)
 8000fa2:	f001 fecf 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8000fac:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8000fb0:	7013      	strb	r3, [r2, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8000fb2:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8000fb6:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8000fba:	3a58      	subs	r2, #88	; 0x58
 8000fbc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	21ab      	movs	r1, #171	; 0xab
 8000fc6:	4883      	ldr	r0, [pc, #524]	; (80011d4 <main+0x2fc>)
 8000fc8:	f001 ffb0 	bl	8002f2c <HAL_I2C_Master_Receive>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8000fd2:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8000fd6:	7013      	strb	r3, [r2, #0]
  if(buf[0] != 0x00 || ret != HAL_OK ){
 8000fd8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8000fdc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8000fe0:	3b58      	subs	r3, #88	; 0x58
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d106      	bne.n	8000ff6 <main+0x11e>
 8000fe8:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8000fec:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d009      	beq.n	800100a <main+0x132>
  	  printf("Error setting bootloader: code %x\n", buf[0]);
 8000ff6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8000ffa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8000ffe:	3b58      	subs	r3, #88	; 0x58
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	4619      	mov	r1, r3
 8001004:	4874      	ldr	r0, [pc, #464]	; (80011d8 <main+0x300>)
 8001006:	f005 fce3 	bl	80069d0 <iprintf>
    }

  buf[0] = 0x02;
 800100a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800100e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001012:	3b58      	subs	r3, #88	; 0x58
 8001014:	2202      	movs	r2, #2
 8001016:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 8001018:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800101c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001020:	3b58      	subs	r3, #88	; 0x58
 8001022:	2200      	movs	r2, #0
 8001024:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001026:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800102a:	f502 7214 	add.w	r2, r2, #592	; 0x250
 800102e:	3a58      	subs	r2, #88	; 0x58
 8001030:	f241 3388 	movw	r3, #5000	; 0x1388
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2302      	movs	r3, #2
 8001038:	21aa      	movs	r1, #170	; 0xaa
 800103a:	4866      	ldr	r0, [pc, #408]	; (80011d4 <main+0x2fc>)
 800103c:	f001 fe82 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001040:	4603      	mov	r3, r0
 8001042:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001046:	f202 221f 	addw	r2, r2, #543	; 0x21f
 800104a:	7013      	strb	r3, [r2, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 800104c:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001050:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001054:	3a58      	subs	r2, #88	; 0x58
 8001056:	f241 3388 	movw	r3, #5000	; 0x1388
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2302      	movs	r3, #2
 800105e:	21ab      	movs	r1, #171	; 0xab
 8001060:	485c      	ldr	r0, [pc, #368]	; (80011d4 <main+0x2fc>)
 8001062:	f001 ff63 	bl	8002f2c <HAL_I2C_Master_Receive>
 8001066:	4603      	mov	r3, r0
 8001068:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800106c:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001070:	7013      	strb	r3, [r2, #0]
  printf("error code: %x mode: %x\n", buf[0],buf[1]);
 8001072:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001076:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800107a:	3b58      	subs	r3, #88	; 0x58
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001084:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001088:	3b58      	subs	r3, #88	; 0x58
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	461a      	mov	r2, r3
 800108e:	4853      	ldr	r0, [pc, #332]	; (80011dc <main+0x304>)
 8001090:	f005 fc9e 	bl	80069d0 <iprintf>


  int page_count = byteF[0x44];
 8001094:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001098:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800109c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010a0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80010a4:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80010a8:	6013      	str	r3, [r2, #0]
  int page_size = 8192 + 16;
 80010aa:	f242 0310 	movw	r3, #8208	; 0x2010
 80010ae:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80010b2:	f502 7205 	add.w	r2, r2, #532	; 0x214
 80010b6:	6013      	str	r3, [r2, #0]
  buf[0] = 0x80;
 80010b8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80010bc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80010c0:	3b58      	subs	r3, #88	; 0x58
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x02;
 80010c6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80010ca:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80010ce:	3b58      	subs	r3, #88	; 0x58
 80010d0:	2202      	movs	r2, #2
 80010d2:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x00;
 80010d4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80010d8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80010dc:	3b58      	subs	r3, #88	; 0x58
 80010de:	2200      	movs	r2, #0
 80010e0:	709a      	strb	r2, [r3, #2]
  buf[3] = byteF[0x44];
 80010e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80010e6:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80010ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80010ee:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80010f2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80010f6:	3b58      	subs	r3, #88	; 0x58
 80010f8:	70da      	strb	r2, [r3, #3]

  printf("%d pages", byteF[0x44]);
 80010fa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80010fe:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8001102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001106:	4619      	mov	r1, r3
 8001108:	4835      	ldr	r0, [pc, #212]	; (80011e0 <main+0x308>)
 800110a:	f005 fc61 	bl	80069d0 <iprintf>
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 4, 5000);
 800110e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001112:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001116:	3a58      	subs	r2, #88	; 0x58
 8001118:	f241 3388 	movw	r3, #5000	; 0x1388
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2304      	movs	r3, #4
 8001120:	21aa      	movs	r1, #170	; 0xaa
 8001122:	482c      	ldr	r0, [pc, #176]	; (80011d4 <main+0x2fc>)
 8001124:	f001 fe0e 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001128:	4603      	mov	r3, r0
 800112a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800112e:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001132:	7013      	strb	r3, [r2, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001134:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001138:	f502 7214 	add.w	r2, r2, #592	; 0x250
 800113c:	3a58      	subs	r2, #88	; 0x58
 800113e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	21ab      	movs	r1, #171	; 0xab
 8001148:	4822      	ldr	r0, [pc, #136]	; (80011d4 <main+0x2fc>)
 800114a:	f001 feef 	bl	8002f2c <HAL_I2C_Master_Receive>
 800114e:	4603      	mov	r3, r0
 8001150:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001154:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001158:	7013      	strb	r3, [r2, #0]
  if(buf[0] != 0x00 || ret != HAL_OK ){
 800115a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800115e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001162:	3b58      	subs	r3, #88	; 0x58
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <main+0x2a0>
 800116a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800116e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d009      	beq.n	800118c <main+0x2b4>
    	  printf("Error setting page num: code %x\n", buf[0]);
 8001178:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800117c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001180:	3b58      	subs	r3, #88	; 0x58
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	4817      	ldr	r0, [pc, #92]	; (80011e4 <main+0x30c>)
 8001188:	f005 fc22 	bl	80069d0 <iprintf>
   }

  /*initialization vector*/
  int byte_count = 0x32-0x28;
 800118c:	230a      	movs	r3, #10
 800118e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001192:	f502 7204 	add.w	r2, r2, #528	; 0x210
 8001196:	6013      	str	r3, [r2, #0]
  buf[0] = 0x80;
 8001198:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800119c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80011a0:	3b58      	subs	r3, #88	; 0x58
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 80011a6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80011aa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80011ae:	3b58      	subs	r3, #88	; 0x58
 80011b0:	2200      	movs	r2, #0
 80011b2:	705a      	strb	r2, [r3, #1]
  for(int i = 0; i < byte_count; ++i){
 80011b4:	2300      	movs	r3, #0
 80011b6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80011ba:	f502 7213 	add.w	r2, r2, #588	; 0x24c
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e035      	b.n	800122e <main+0x356>
 80011c2:	bf00      	nop
 80011c4:	48000c00 	.word	0x48000c00
 80011c8:	08008810 	.word	0x08008810
 80011cc:	08008814 	.word	0x08008814
 80011d0:	0003e1f1 	.word	0x0003e1f1
 80011d4:	20000204 	.word	0x20000204
 80011d8:	08008824 	.word	0x08008824
 80011dc:	08008848 	.word	0x08008848
 80011e0:	08008864 	.word	0x08008864
 80011e4:	08008870 	.word	0x08008870
	  buf[2+i] = byteF[0x28+i];
 80011e8:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80011ec:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80011f6:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80011fa:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	1c9a      	adds	r2, r3, #2
 8001202:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001206:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800120a:	5c59      	ldrb	r1, [r3, r1]
 800120c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001210:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001214:	3b58      	subs	r3, #88	; 0x58
 8001216:	5499      	strb	r1, [r3, r2]
  for(int i = 0; i < byte_count; ++i){
 8001218:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800121c:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001228:	f502 7213 	add.w	r2, r2, #588	; 0x24c
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001232:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800123c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	dbd0      	blt.n	80011e8 <main+0x310>
  }
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2 + byte_count, 5000);
 8001246:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800124a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	b29b      	uxth	r3, r3
 8001252:	3302      	adds	r3, #2
 8001254:	b299      	uxth	r1, r3
 8001256:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800125a:	f502 7214 	add.w	r2, r2, #592	; 0x250
 800125e:	3a58      	subs	r2, #88	; 0x58
 8001260:	f241 3388 	movw	r3, #5000	; 0x1388
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	460b      	mov	r3, r1
 8001268:	21aa      	movs	r1, #170	; 0xaa
 800126a:	488c      	ldr	r0, [pc, #560]	; (800149c <main+0x5c4>)
 800126c:	f001 fd6a 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001270:	4603      	mov	r3, r0
 8001272:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001276:	f202 221f 	addw	r2, r2, #543	; 0x21f
 800127a:	7013      	strb	r3, [r2, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 800127c:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001280:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001284:	3a58      	subs	r2, #88	; 0x58
 8001286:	f241 3388 	movw	r3, #5000	; 0x1388
 800128a:	9300      	str	r3, [sp, #0]
 800128c:	2301      	movs	r3, #1
 800128e:	21ab      	movs	r1, #171	; 0xab
 8001290:	4882      	ldr	r0, [pc, #520]	; (800149c <main+0x5c4>)
 8001292:	f001 fe4b 	bl	8002f2c <HAL_I2C_Master_Receive>
 8001296:	4603      	mov	r3, r0
 8001298:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800129c:	f202 221f 	addw	r2, r2, #543	; 0x21f
 80012a0:	7013      	strb	r3, [r2, #0]
  if(buf[0] != 0x00 || ret != HAL_OK ){
 80012a2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80012a6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80012aa:	3b58      	subs	r3, #88	; 0x58
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d106      	bne.n	80012c0 <main+0x3e8>
 80012b2:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80012b6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d009      	beq.n	80012d4 <main+0x3fc>
      	  printf("Error setting page num: code %x\n", buf[0]);
 80012c0:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80012c4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80012c8:	3b58      	subs	r3, #88	; 0x58
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	4874      	ldr	r0, [pc, #464]	; (80014a0 <main+0x5c8>)
 80012d0:	f005 fb7e 	bl	80069d0 <iprintf>
     }
/*authentication bytes*/
  byte_count = 0x43-0x34;
 80012d4:	230f      	movs	r3, #15
 80012d6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80012da:	f502 7204 	add.w	r2, r2, #528	; 0x210
 80012de:	6013      	str	r3, [r2, #0]
	buf[0] = 0x80;
 80012e0:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80012e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80012e8:	3b58      	subs	r3, #88	; 0x58
 80012ea:	2280      	movs	r2, #128	; 0x80
 80012ec:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x01;
 80012ee:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80012f2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80012f6:	3b58      	subs	r3, #88	; 0x58
 80012f8:	2201      	movs	r2, #1
 80012fa:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < byte_count; ++i){
 80012fc:	2300      	movs	r3, #0
 80012fe:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001302:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e022      	b.n	8001350 <main+0x478>
	  buf[2+i] = byteF[0x34+i];
 800130a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800130e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001318:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800131c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	1c9a      	adds	r2, r3, #2
 8001324:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8001328:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800132c:	5c59      	ldrb	r1, [r3, r1]
 800132e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001332:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001336:	3b58      	subs	r3, #88	; 0x58
 8001338:	5499      	strb	r1, [r3, r2]
	for(int i = 0; i < byte_count; ++i){
 800133a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800133e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800134a:	f502 7212 	add.w	r2, r2, #584	; 0x248
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001354:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800135e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbd0      	blt.n	800130a <main+0x432>
	}
	ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2 + byte_count, 5000);
 8001368:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800136c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	3302      	adds	r3, #2
 8001376:	b299      	uxth	r1, r3
 8001378:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800137c:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001380:	3a58      	subs	r2, #88	; 0x58
 8001382:	f241 3388 	movw	r3, #5000	; 0x1388
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	460b      	mov	r3, r1
 800138a:	21aa      	movs	r1, #170	; 0xaa
 800138c:	4843      	ldr	r0, [pc, #268]	; (800149c <main+0x5c4>)
 800138e:	f001 fcd9 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001392:	4603      	mov	r3, r0
 8001394:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001398:	f202 221f 	addw	r2, r2, #543	; 0x21f
 800139c:	7013      	strb	r3, [r2, #0]
	ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 800139e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80013a2:	f502 7214 	add.w	r2, r2, #592	; 0x250
 80013a6:	3a58      	subs	r2, #88	; 0x58
 80013a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2301      	movs	r3, #1
 80013b0:	21ab      	movs	r1, #171	; 0xab
 80013b2:	483a      	ldr	r0, [pc, #232]	; (800149c <main+0x5c4>)
 80013b4:	f001 fdba 	bl	8002f2c <HAL_I2C_Master_Receive>
 80013b8:	4603      	mov	r3, r0
 80013ba:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80013be:	f202 221f 	addw	r2, r2, #543	; 0x21f
 80013c2:	7013      	strb	r3, [r2, #0]
	if(buf[0] != 0x00 || ret != HAL_OK ){
 80013c4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80013c8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80013cc:	3b58      	subs	r3, #88	; 0x58
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d106      	bne.n	80013e2 <main+0x50a>
 80013d4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80013d8:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <main+0x51e>
			  printf("Error setting page num: code %x\n", buf[0]);
 80013e2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80013e6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80013ea:	3b58      	subs	r3, #88	; 0x58
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	482b      	ldr	r0, [pc, #172]	; (80014a0 <main+0x5c8>)
 80013f2:	f005 faed 	bl	80069d0 <iprintf>
	   }

	/*erase application*/

	buf[0] = 0x80;
 80013f6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80013fa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80013fe:	3b58      	subs	r3, #88	; 0x58
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x03;
 8001404:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001408:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800140c:	3b58      	subs	r3, #88	; 0x58
 800140e:	2203      	movs	r2, #3
 8001410:	705a      	strb	r2, [r3, #1]
	//ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
	//ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
	if(buf[0] != 0x00 || ret != HAL_OK ){
 8001412:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001416:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800141a:	3b58      	subs	r3, #88	; 0x58
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <main+0x558>
 8001422:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001426:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d009      	beq.n	8001444 <main+0x56c>
			  printf("Error setting page num: code %x\n", buf[0]);
 8001430:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001434:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001438:	3b58      	subs	r3, #88	; 0x58
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <main+0x5c8>)
 8001440:	f005 fac6 	bl	80069d0 <iprintf>
	   }
//int start = 0x4c;
	int current = 0x4c;
 8001444:	234c      	movs	r3, #76	; 0x4c
 8001446:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800144a:	f502 7211 	add.w	r2, r2, #580	; 0x244
 800144e:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < page_count; ++i){
 8001450:	2300      	movs	r3, #0
 8001452:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001456:	f502 7210 	add.w	r2, r2, #576	; 0x240
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e0c9      	b.n	80015f2 <main+0x71a>
//int current = start;
		int count = 2;
 800145e:	2302      	movs	r3, #2
 8001460:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001464:	f502 720f 	add.w	r2, r2, #572	; 0x23c
 8001468:	6013      	str	r3, [r2, #0]
		buf[0] = 0x8;
 800146a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800146e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001472:	3b58      	subs	r3, #88	; 0x58
 8001474:	2208      	movs	r2, #8
 8001476:	701a      	strb	r2, [r3, #0]
		buf[1] = 0x04;
 8001478:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800147c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001480:	3b58      	subs	r3, #88	; 0x58
 8001482:	2204      	movs	r2, #4
 8001484:	705a      	strb	r2, [r3, #1]
		for(int j = current; j < (current + page_size); ++j){
 8001486:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800148a:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001494:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e031      	b.n	8001500 <main+0x628>
 800149c:	20000204 	.word	0x20000204
 80014a0:	08008870 	.word	0x08008870
			buf[count] = byteF[j];
 80014a4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80014a8:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80014ac:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80014b0:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	7819      	ldrb	r1, [r3, #0]
 80014ba:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80014be:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80014c2:	3b58      	subs	r3, #88	; 0x58
 80014c4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80014c8:	f502 720f 	add.w	r2, r2, #572	; 0x23c
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	460a      	mov	r2, r1
 80014d2:	701a      	strb	r2, [r3, #0]
			++count;
 80014d4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80014d8:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80014e4:	f502 720f 	add.w	r2, r2, #572	; 0x23c
 80014e8:	6013      	str	r3, [r2, #0]
		for(int j = current; j < (current + page_size); ++j){
 80014ea:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80014ee:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	3301      	adds	r3, #1
 80014f6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80014fa:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001504:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800150e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4413      	add	r3, r2
 8001516:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800151a:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	dbbf      	blt.n	80014a4 <main+0x5cc>
		}
		current = current + page_size;
 8001524:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001528:	f503 7311 	add.w	r3, r3, #580	; 0x244
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001532:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4413      	add	r3, r2
 800153a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800153e:	f502 7211 	add.w	r2, r2, #580	; 0x244
 8001542:	6013      	str	r3, [r2, #0]

		ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2 + page_size, 5000);
 8001544:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001548:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	3302      	adds	r3, #2
 8001552:	b299      	uxth	r1, r3
 8001554:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001558:	f502 7214 	add.w	r2, r2, #592	; 0x250
 800155c:	3a58      	subs	r2, #88	; 0x58
 800155e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	460b      	mov	r3, r1
 8001566:	21aa      	movs	r1, #170	; 0xaa
 8001568:	48e1      	ldr	r0, [pc, #900]	; (80018f0 <main+0xa18>)
 800156a:	f001 fbeb 	bl	8002d44 <HAL_I2C_Master_Transmit>
 800156e:	4603      	mov	r3, r0
 8001570:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001574:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001578:	7013      	strb	r3, [r2, #0]
		ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 800157a:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800157e:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001582:	3a58      	subs	r2, #88	; 0x58
 8001584:	f241 3388 	movw	r3, #5000	; 0x1388
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2301      	movs	r3, #1
 800158c:	21ab      	movs	r1, #171	; 0xab
 800158e:	48d8      	ldr	r0, [pc, #864]	; (80018f0 <main+0xa18>)
 8001590:	f001 fccc 	bl	8002f2c <HAL_I2C_Master_Receive>
 8001594:	4603      	mov	r3, r0
 8001596:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800159a:	f202 221f 	addw	r2, r2, #543	; 0x21f
 800159e:	7013      	strb	r3, [r2, #0]
		if(buf[0] != 0x00 || ret != HAL_OK ){
 80015a0:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80015a4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80015a8:	3b58      	subs	r3, #88	; 0x58
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d106      	bne.n	80015be <main+0x6e6>
 80015b0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80015b4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00e      	beq.n	80015dc <main+0x704>
					  printf("Error setting page %d : code %x\n", i, buf[0]);
 80015be:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80015c2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80015c6:	3b58      	subs	r3, #88	; 0x58
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80015d0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80015d4:	6819      	ldr	r1, [r3, #0]
 80015d6:	48c7      	ldr	r0, [pc, #796]	; (80018f4 <main+0xa1c>)
 80015d8:	f005 f9fa 	bl	80069d0 <iprintf>
	for(int i = 0; i < page_count; ++i){
 80015dc:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80015e0:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80015ec:	f502 7210 	add.w	r2, r2, #576	; 0x240
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80015f6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001600:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	f6ff af29 	blt.w	800145e <main+0x586>
//  HAL_Delay(1000);



  /*set our mode to both raw and algorithm*/
  buf[0] = 0x02;
 800160c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001610:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001614:	3b58      	subs	r3, #88	; 0x58
 8001616:	2202      	movs	r2, #2
 8001618:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 800161a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800161e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001622:	3b58      	subs	r3, #88	; 0x58
 8001624:	2200      	movs	r2, #0
 8001626:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001628:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800162c:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001630:	3a58      	subs	r2, #88	; 0x58
 8001632:	f241 3388 	movw	r3, #5000	; 0x1388
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2302      	movs	r3, #2
 800163a:	21aa      	movs	r1, #170	; 0xaa
 800163c:	48ac      	ldr	r0, [pc, #688]	; (80018f0 <main+0xa18>)
 800163e:	f001 fb81 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001642:	4603      	mov	r3, r0
 8001644:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001648:	f202 221f 	addw	r2, r2, #543	; 0x21f
 800164c:	7013      	strb	r3, [r2, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 800164e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001652:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001656:	3a58      	subs	r2, #88	; 0x58
 8001658:	f241 3388 	movw	r3, #5000	; 0x1388
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	2302      	movs	r3, #2
 8001660:	21ab      	movs	r1, #171	; 0xab
 8001662:	48a3      	ldr	r0, [pc, #652]	; (80018f0 <main+0xa18>)
 8001664:	f001 fc62 	bl	8002f2c <HAL_I2C_Master_Receive>
 8001668:	4603      	mov	r3, r0
 800166a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800166e:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001672:	7013      	strb	r3, [r2, #0]
  printf("error code: %x mode: %x\n", buf[0],buf[1]);
 8001674:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001678:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800167c:	3b58      	subs	r3, #88	; 0x58
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001686:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800168a:	3b58      	subs	r3, #88	; 0x58
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	461a      	mov	r2, r3
 8001690:	4899      	ldr	r0, [pc, #612]	; (80018f8 <main+0xa20>)
 8001692:	f005 f99d 	bl	80069d0 <iprintf>

  buf[0] = 0xFF;
 8001696:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800169a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800169e:	3b58      	subs	r3, #88	; 0x58
 80016a0:	22ff      	movs	r2, #255	; 0xff
 80016a2:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x03;
 80016a4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80016a8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80016ac:	3b58      	subs	r3, #88	; 0x58
 80016ae:	2203      	movs	r2, #3
 80016b0:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 80016b2:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80016b6:	f502 7214 	add.w	r2, r2, #592	; 0x250
 80016ba:	3a58      	subs	r2, #88	; 0x58
 80016bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2302      	movs	r3, #2
 80016c4:	21aa      	movs	r1, #170	; 0xaa
 80016c6:	488a      	ldr	r0, [pc, #552]	; (80018f0 <main+0xa18>)
 80016c8:	f001 fb3c 	bl	8002d44 <HAL_I2C_Master_Transmit>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80016d2:	f202 221f 	addw	r2, r2, #543	; 0x21f
 80016d6:	7013      	strb	r3, [r2, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 5, 5000);
 80016d8:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80016dc:	f502 7214 	add.w	r2, r2, #592	; 0x250
 80016e0:	3a58      	subs	r2, #88	; 0x58
 80016e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2305      	movs	r3, #5
 80016ea:	21ab      	movs	r1, #171	; 0xab
 80016ec:	4880      	ldr	r0, [pc, #512]	; (80018f0 <main+0xa18>)
 80016ee:	f001 fc1d 	bl	8002f2c <HAL_I2C_Master_Receive>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80016f8:	f202 221f 	addw	r2, r2, #543	; 0x21f
 80016fc:	7013      	strb	r3, [r2, #0]
  printf("error code: %x mode: %x %x %x %x\n", buf[0],buf[1], buf[2], buf[3],buf[4]);
 80016fe:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001702:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001706:	3b58      	subs	r3, #88	; 0x58
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001710:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001714:	3b58      	subs	r3, #88	; 0x58
 8001716:	785b      	ldrb	r3, [r3, #1]
 8001718:	4618      	mov	r0, r3
 800171a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800171e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001722:	3b58      	subs	r3, #88	; 0x58
 8001724:	789b      	ldrb	r3, [r3, #2]
 8001726:	461c      	mov	r4, r3
 8001728:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800172c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001730:	3b58      	subs	r3, #88	; 0x58
 8001732:	78db      	ldrb	r3, [r3, #3]
 8001734:	461a      	mov	r2, r3
 8001736:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800173a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800173e:	3b58      	subs	r3, #88	; 0x58
 8001740:	791b      	ldrb	r3, [r3, #4]
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	9200      	str	r2, [sp, #0]
 8001746:	4623      	mov	r3, r4
 8001748:	4602      	mov	r2, r0
 800174a:	486c      	ldr	r0, [pc, #432]	; (80018fc <main+0xa24>)
 800174c:	f005 f940 	bl	80069d0 <iprintf>


  buf[0] = 0x10;
 8001750:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001754:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001758:	3b58      	subs	r3, #88	; 0x58
 800175a:	2210      	movs	r2, #16
 800175c:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 800175e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001762:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001766:	3b58      	subs	r3, #88	; 0x58
 8001768:	2200      	movs	r2, #0
 800176a:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x03;
 800176c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001770:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001774:	3b58      	subs	r3, #88	; 0x58
 8001776:	2203      	movs	r2, #3
 8001778:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 800177a:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800177e:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001782:	3a58      	subs	r2, #88	; 0x58
 8001784:	f241 3388 	movw	r3, #5000	; 0x1388
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2303      	movs	r3, #3
 800178c:	21aa      	movs	r1, #170	; 0xaa
 800178e:	4858      	ldr	r0, [pc, #352]	; (80018f0 <main+0xa18>)
 8001790:	f001 fad8 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001794:	4603      	mov	r3, r0
 8001796:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800179a:	f202 221f 	addw	r2, r2, #543	; 0x21f
 800179e:	7013      	strb	r3, [r2, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80017a0:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80017a4:	f502 7214 	add.w	r2, r2, #592	; 0x250
 80017a8:	3a58      	subs	r2, #88	; 0x58
 80017aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2301      	movs	r3, #1
 80017b2:	21ab      	movs	r1, #171	; 0xab
 80017b4:	484e      	ldr	r0, [pc, #312]	; (80018f0 <main+0xa18>)
 80017b6:	f001 fbb9 	bl	8002f2c <HAL_I2C_Master_Receive>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80017c0:	f202 221f 	addw	r2, r2, #543	; 0x21f
 80017c4:	7013      	strb	r3, [r2, #0]
  if(buf[0] != 0x00 || ret != HAL_OK ){
 80017c6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80017ca:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80017ce:	3b58      	subs	r3, #88	; 0x58
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d106      	bne.n	80017e4 <main+0x90c>
 80017d6:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80017da:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d009      	beq.n	80017f8 <main+0x920>
	  printf("Error setting mode: code %x\n", buf[0]);
 80017e4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80017e8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80017ec:	3b58      	subs	r3, #88	; 0x58
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	4843      	ldr	r0, [pc, #268]	; (8001900 <main+0xa28>)
 80017f4:	f005 f8ec 	bl	80069d0 <iprintf>
  }

  /*Set FIFO threshold as almost full at 0x0F*/
  buf[0] = 0x10;
 80017f8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80017fc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001800:	3b58      	subs	r3, #88	; 0x58
 8001802:	2210      	movs	r2, #16
 8001804:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x01;
 8001806:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800180a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800180e:	3b58      	subs	r3, #88	; 0x58
 8001810:	2201      	movs	r2, #1
 8001812:	705a      	strb	r2, [r3, #1]
  buf[2] = samples;
 8001814:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001818:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001824:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001828:	3b58      	subs	r3, #88	; 0x58
 800182a:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 800182c:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001830:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001834:	3a58      	subs	r2, #88	; 0x58
 8001836:	f241 3388 	movw	r3, #5000	; 0x1388
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2303      	movs	r3, #3
 800183e:	21aa      	movs	r1, #170	; 0xaa
 8001840:	482b      	ldr	r0, [pc, #172]	; (80018f0 <main+0xa18>)
 8001842:	f001 fa7f 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001846:	4603      	mov	r3, r0
 8001848:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800184c:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001850:	7013      	strb	r3, [r2, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001852:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001856:	f502 7214 	add.w	r2, r2, #592	; 0x250
 800185a:	3a58      	subs	r2, #88	; 0x58
 800185c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	2301      	movs	r3, #1
 8001864:	21ab      	movs	r1, #171	; 0xab
 8001866:	4822      	ldr	r0, [pc, #136]	; (80018f0 <main+0xa18>)
 8001868:	f001 fb60 	bl	8002f2c <HAL_I2C_Master_Receive>
 800186c:	4603      	mov	r3, r0
 800186e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001872:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001876:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 8001878:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800187c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001880:	3b58      	subs	r3, #88	; 0x58
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d106      	bne.n	8001896 <main+0x9be>
 8001888:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800188c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <main+0x9d2>
  	  printf("Error setting FIFO threshold code: %x\n", buf[0]);
 8001896:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800189a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800189e:	3b58      	subs	r3, #88	; 0x58
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	4817      	ldr	r0, [pc, #92]	; (8001904 <main+0xa2c>)
 80018a6:	f005 f893 	bl	80069d0 <iprintf>
    }


  /*Enable the sensor*/
  buf[0] = 0x44;
 80018aa:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80018ae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80018b2:	3b58      	subs	r3, #88	; 0x58
 80018b4:	2244      	movs	r2, #68	; 0x44
 80018b6:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x03;
 80018b8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80018bc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80018c0:	3b58      	subs	r3, #88	; 0x58
 80018c2:	2203      	movs	r2, #3
 80018c4:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x01;
 80018c6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80018ca:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80018ce:	3b58      	subs	r3, #88	; 0x58
 80018d0:	2201      	movs	r2, #1
 80018d2:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 80018d4:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80018d8:	f502 7214 	add.w	r2, r2, #592	; 0x250
 80018dc:	3a58      	subs	r2, #88	; 0x58
 80018de:	f241 3388 	movw	r3, #5000	; 0x1388
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2303      	movs	r3, #3
 80018e6:	21aa      	movs	r1, #170	; 0xaa
 80018e8:	4801      	ldr	r0, [pc, #4]	; (80018f0 <main+0xa18>)
 80018ea:	f001 fa2b 	bl	8002d44 <HAL_I2C_Master_Transmit>
 80018ee:	e00b      	b.n	8001908 <main+0xa30>
 80018f0:	20000204 	.word	0x20000204
 80018f4:	08008894 	.word	0x08008894
 80018f8:	08008848 	.word	0x08008848
 80018fc:	080088b8 	.word	0x080088b8
 8001900:	080088dc 	.word	0x080088dc
 8001904:	080088fc 	.word	0x080088fc
 8001908:	4603      	mov	r3, r0
 800190a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800190e:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001912:	7013      	strb	r3, [r2, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001914:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001918:	f502 7214 	add.w	r2, r2, #592	; 0x250
 800191c:	3a58      	subs	r2, #88	; 0x58
 800191e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	21ab      	movs	r1, #171	; 0xab
 8001928:	48c6      	ldr	r0, [pc, #792]	; (8001c44 <main+0xd6c>)
 800192a:	f001 faff 	bl	8002f2c <HAL_I2C_Master_Receive>
 800192e:	4603      	mov	r3, r0
 8001930:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001934:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001938:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 800193a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800193e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001942:	3b58      	subs	r3, #88	; 0x58
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <main+0xa80>
 800194a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800194e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <main+0xa94>
  	  printf("Error enabling sensor code: %x\n", buf[0]);
 8001958:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800195c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001960:	3b58      	subs	r3, #88	; 0x58
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	48b8      	ldr	r0, [pc, #736]	; (8001c48 <main+0xd70>)
 8001968:	f005 f832 	bl	80069d0 <iprintf>
    }


  /*Enable the algorithm*/
  buf[0] = 0x52;
 800196c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001970:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001974:	3b58      	subs	r3, #88	; 0x58
 8001976:	2252      	movs	r2, #82	; 0x52
 8001978:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x02;
 800197a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800197e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001982:	3b58      	subs	r3, #88	; 0x58
 8001984:	2202      	movs	r2, #2
 8001986:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x01;
 8001988:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800198c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001990:	3b58      	subs	r3, #88	; 0x58
 8001992:	2201      	movs	r2, #1
 8001994:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8001996:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800199a:	f502 7214 	add.w	r2, r2, #592	; 0x250
 800199e:	3a58      	subs	r2, #88	; 0x58
 80019a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2303      	movs	r3, #3
 80019a8:	21aa      	movs	r1, #170	; 0xaa
 80019aa:	48a6      	ldr	r0, [pc, #664]	; (8001c44 <main+0xd6c>)
 80019ac:	f001 f9ca 	bl	8002d44 <HAL_I2C_Master_Transmit>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80019b6:	f202 221f 	addw	r2, r2, #543	; 0x21f
 80019ba:	7013      	strb	r3, [r2, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80019bc:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80019c0:	f502 7214 	add.w	r2, r2, #592	; 0x250
 80019c4:	3a58      	subs	r2, #88	; 0x58
 80019c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2301      	movs	r3, #1
 80019ce:	21ab      	movs	r1, #171	; 0xab
 80019d0:	489c      	ldr	r0, [pc, #624]	; (8001c44 <main+0xd6c>)
 80019d2:	f001 faab 	bl	8002f2c <HAL_I2C_Master_Receive>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80019dc:	f202 221f 	addw	r2, r2, #543	; 0x21f
 80019e0:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 80019e2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80019e6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80019ea:	3b58      	subs	r3, #88	; 0x58
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <main+0xb28>
 80019f2:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80019f6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <main+0xb3c>
  	  printf("Error Enabling Algorithm code: %x\n", buf[0]);
 8001a00:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001a04:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001a08:	3b58      	subs	r3, #88	; 0x58
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	488f      	ldr	r0, [pc, #572]	; (8001c4c <main+0xd74>)
 8001a10:	f004 ffde 	bl	80069d0 <iprintf>
    }




  float heart_rate = 0;
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001a1c:	f502 720d 	add.w	r2, r2, #564	; 0x234
 8001a20:	6013      	str	r3, [r2, #0]
  float SpO2 = 0;
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001a2a:	f502 720c 	add.w	r2, r2, #560	; 0x230
 8001a2e:	6013      	str	r3, [r2, #0]

  while (1)
  {
	  HAL_Delay(1000);
 8001a30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a34:	f000 fe44 	bl	80026c0 <HAL_Delay>
	  int error = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001a3e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001a42:	6013      	str	r3, [r2, #0]
	  /*read sensor hub status*/
	  buf[0] = 0x00;
 8001a44:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001a48:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001a4c:	3b58      	subs	r3, #88	; 0x58
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
	  buf[1] = 0x00;
 8001a52:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001a56:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001a5a:	3b58      	subs	r3, #88	; 0x58
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	705a      	strb	r2, [r3, #1]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001a60:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001a64:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001a68:	3a58      	subs	r2, #88	; 0x58
 8001a6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2302      	movs	r3, #2
 8001a72:	21aa      	movs	r1, #170	; 0xaa
 8001a74:	4873      	ldr	r0, [pc, #460]	; (8001c44 <main+0xd6c>)
 8001a76:	f001 f965 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001a80:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001a84:	7013      	strb	r3, [r2, #0]
	  if ( ret != HAL_OK ) {
 8001a86:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001a8a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <main+0xbd0>
	  	  	printf("Error sensor write\r\n");
 8001a94:	486e      	ldr	r0, [pc, #440]	; (8001c50 <main+0xd78>)
 8001a96:	f005 f80f 	bl	8006ab8 <puts>
	  	  	error = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001aa0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001aa4:	6013      	str	r3, [r2, #0]
	  	  	continue;
 8001aa6:	e229      	b.n	8001efc <main+0x1024>
	  	  	} else {
	  	  		ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 8001aa8:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001aac:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001ab0:	3a58      	subs	r2, #88	; 0x58
 8001ab2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	21ab      	movs	r1, #171	; 0xab
 8001abc:	4861      	ldr	r0, [pc, #388]	; (8001c44 <main+0xd6c>)
 8001abe:	f001 fa35 	bl	8002f2c <HAL_I2C_Master_Receive>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001ac8:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001acc:	7013      	strb	r3, [r2, #0]
	  	  		if(buf[1] != 0x08){
 8001ace:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ad2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ad6:	3b58      	subs	r3, #88	; 0x58
 8001ad8:	785b      	ldrb	r3, [r3, #1]
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d00a      	beq.n	8001af4 <main+0xc1c>
	  	  		printf("Data bit not ready %x \n", buf[2]);
 8001ade:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ae2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ae6:	3b58      	subs	r3, #88	; 0x58
 8001ae8:	789b      	ldrb	r3, [r3, #2]
 8001aea:	4619      	mov	r1, r3
 8001aec:	4859      	ldr	r0, [pc, #356]	; (8001c54 <main+0xd7c>)
 8001aee:	f004 ff6f 	bl	80069d0 <iprintf>
	  	  			continue;
 8001af2:	e203      	b.n	8001efc <main+0x1024>

	  	  		}
	  	  		if(buf[0] != 0x0){
 8001af4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001af8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001afc:	3b58      	subs	r3, #88	; 0x58
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <main+0xc42>
				printf(" %x error \n", buf[1]);
 8001b04:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001b08:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b0c:	3b58      	subs	r3, #88	; 0x58
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	4619      	mov	r1, r3
 8001b12:	4851      	ldr	r0, [pc, #324]	; (8001c58 <main+0xd80>)
 8001b14:	f004 ff5c 	bl	80069d0 <iprintf>
					continue;
 8001b18:	e1f0      	b.n	8001efc <main+0x1024>
				}

	  	  		/*read FIFO hub status*/
	  	  		buf[0] = 0x12;
 8001b1a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001b1e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b22:	3b58      	subs	r3, #88	; 0x58
 8001b24:	2212      	movs	r2, #18
 8001b26:	701a      	strb	r2, [r3, #0]
	  	  		buf[1] = 0x00;
 8001b28:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001b2c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001b30:	3b58      	subs	r3, #88	; 0x58
 8001b32:	2200      	movs	r2, #0
 8001b34:	705a      	strb	r2, [r3, #1]
	  	  		ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001b36:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001b3a:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001b3e:	3a58      	subs	r2, #88	; 0x58
 8001b40:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2302      	movs	r3, #2
 8001b48:	21aa      	movs	r1, #170	; 0xaa
 8001b4a:	483e      	ldr	r0, [pc, #248]	; (8001c44 <main+0xd6c>)
 8001b4c:	f001 f8fa 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001b56:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001b5a:	7013      	strb	r3, [r2, #0]
	  	  	 if ( ret != HAL_OK ) {
 8001b5c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001b60:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <main+0xca6>
	  	  		  	  	printf("Error algorithm write\r\n");
 8001b6a:	483c      	ldr	r0, [pc, #240]	; (8001c5c <main+0xd84>)
 8001b6c:	f004 ffa4 	bl	8006ab8 <puts>
	  	  		  	  	error = 1;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001b76:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001b7a:	6013      	str	r3, [r2, #0]
	  	  		  	  	continue;
 8001b7c:	e1be      	b.n	8001efc <main+0x1024>
	  	  		  	  	} else {

	  	  		  	  		ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 8001b7e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001b82:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001b86:	3a58      	subs	r2, #88	; 0x58
 8001b88:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	21ab      	movs	r1, #171	; 0xab
 8001b92:	482c      	ldr	r0, [pc, #176]	; (8001c44 <main+0xd6c>)
 8001b94:	f001 f9ca 	bl	8002f2c <HAL_I2C_Master_Receive>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001b9e:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001ba2:	7013      	strb	r3, [r2, #0]
	  	  		  	  		int sample_size = buf[1];
 8001ba4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ba8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001bac:	3b58      	subs	r3, #88	; 0x58
 8001bae:	785b      	ldrb	r3, [r3, #1]
 8001bb0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001bb4:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8001bb8:	6013      	str	r3, [r2, #0]
	  	  		  	  		if(buf[0] != 0x0){
 8001bba:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001bbe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001bc2:	3b58      	subs	r3, #88	; 0x58
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00a      	beq.n	8001be0 <main+0xd08>
	  	  		  	  	  	  	printf(" %x error \n", buf[1]);
 8001bca:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001bce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001bd2:	3b58      	subs	r3, #88	; 0x58
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	481f      	ldr	r0, [pc, #124]	; (8001c58 <main+0xd80>)
 8001bda:	f004 fef9 	bl	80069d0 <iprintf>
	  	  		  	  	  	  	continue;
 8001bde:	e18d      	b.n	8001efc <main+0x1024>
	  	  		  	  	  	  	}

	  	  		  	  /*read the data*/
							buf[0] = 0x12;
 8001be0:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001be4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001be8:	3b58      	subs	r3, #88	; 0x58
 8001bea:	2212      	movs	r2, #18
 8001bec:	701a      	strb	r2, [r3, #0]
							buf[1] = 0x01;
 8001bee:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001bf2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001bf6:	3b58      	subs	r3, #88	; 0x58
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	705a      	strb	r2, [r3, #1]
							ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001bfc:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001c00:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001c04:	3a58      	subs	r2, #88	; 0x58
 8001c06:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	21aa      	movs	r1, #170	; 0xaa
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <main+0xd6c>)
 8001c12:	f001 f897 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001c1c:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001c20:	7013      	strb	r3, [r2, #0]
				if ( ret != HAL_OK ) {
 8001c22:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001c26:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d019      	beq.n	8001c64 <main+0xd8c>
								printf("Error algorithm read\r\n");
 8001c30:	480b      	ldr	r0, [pc, #44]	; (8001c60 <main+0xd88>)
 8001c32:	f004 ff41 	bl	8006ab8 <puts>
								error = 1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001c3c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001c40:	6013      	str	r3, [r2, #0]
								continue;
 8001c42:	e15b      	b.n	8001efc <main+0x1024>
 8001c44:	20000204 	.word	0x20000204
 8001c48:	08008924 	.word	0x08008924
 8001c4c:	08008944 	.word	0x08008944
 8001c50:	08008968 	.word	0x08008968
 8001c54:	0800897c 	.word	0x0800897c
 8001c58:	08008994 	.word	0x08008994
 8001c5c:	080089a0 	.word	0x080089a0
 8001c60:	080089b8 	.word	0x080089b8
								} else {

								int length_of_data = 1 + 18*sample_size;
 8001c64:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001c68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4413      	add	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	3301      	adds	r3, #1
 8001c78:	f107 1204 	add.w	r2, r7, #262148	; 0x40004
 8001c7c:	f502 4262 	add.w	r2, r2, #57856	; 0xe200
 8001c80:	6013      	str	r3, [r2, #0]
								ret = HAL_I2C_Master_Transmit(&hi2c1, Read_HM, &buf[0],length_of_data, 5000);
 8001c82:	f107 1304 	add.w	r3, r7, #262148	; 0x40004
 8001c86:	f503 4362 	add.w	r3, r3, #57856	; 0xe200
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b299      	uxth	r1, r3
 8001c8e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001c92:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001c96:	3a58      	subs	r2, #88	; 0x58
 8001c98:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	21ab      	movs	r1, #171	; 0xab
 8001ca2:	4897      	ldr	r0, [pc, #604]	; (8001f00 <main+0x1028>)
 8001ca4:	f001 f84e 	bl	8002d44 <HAL_I2C_Master_Transmit>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001cae:	f202 221f 	addw	r2, r2, #543	; 0x21f
 8001cb2:	7013      	strb	r3, [r2, #0]
								if(buf[0] != 0x0){
 8001cb4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001cb8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001cbc:	3b58      	subs	r3, #88	; 0x58
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00a      	beq.n	8001cda <main+0xe02>
									printf(" %x error \n", buf[1]);
 8001cc4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001cc8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001ccc:	3b58      	subs	r3, #88	; 0x58
 8001cce:	785b      	ldrb	r3, [r3, #1]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	488c      	ldr	r0, [pc, #560]	; (8001f04 <main+0x102c>)
 8001cd4:	f004 fe7c 	bl	80069d0 <iprintf>
									continue;
 8001cd8:	e110      	b.n	8001efc <main+0x1024>
									}



								/*this gets us our data for heart_rate and SpO2*/
								float viable = 0.0; //counts how many viable samples we have
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001ce2:	f502 720b 	add.w	r2, r2, #556	; 0x22c
 8001ce6:	6013      	str	r3, [r2, #0]
								for(int i = 13; i < length_of_data; i = i + 18){
 8001ce8:	230d      	movs	r3, #13
 8001cea:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001cee:	f502 720a 	add.w	r2, r2, #552	; 0x228
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	e0b4      	b.n	8001e60 <main+0xf88>
										int temp_heart = (buf[i]<<8) + buf[i+1];
 8001cf6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001cfa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001cfe:	3b58      	subs	r3, #88	; 0x58
 8001d00:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d04:	f502 720a 	add.w	r2, r2, #552	; 0x228
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	021a      	lsls	r2, r3, #8
 8001d10:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001d14:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	1c59      	adds	r1, r3, #1
 8001d1c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001d20:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d24:	3b58      	subs	r3, #88	; 0x58
 8001d26:	5c5b      	ldrb	r3, [r3, r1]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d2e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001d32:	6013      	str	r3, [r2, #0]
										temp_heart = temp_heart >> 1; //need to change to account for the 0.1
 8001d34:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001d38:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	105b      	asrs	r3, r3, #1
 8001d40:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d44:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001d48:	6013      	str	r3, [r2, #0]
										int temp_SpO2 = (buf[i+3]<<8) + buf[i+4];
 8001d4a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001d4e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1cda      	adds	r2, r3, #3
 8001d56:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001d5a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d5e:	3b58      	subs	r3, #88	; 0x58
 8001d60:	5c9b      	ldrb	r3, [r3, r2]
 8001d62:	021a      	lsls	r2, r3, #8
 8001d64:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001d68:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	1d19      	adds	r1, r3, #4
 8001d70:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001d74:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d78:	3b58      	subs	r3, #88	; 0x58
 8001d7a:	5c5b      	ldrb	r3, [r3, r1]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d82:	f502 72fe 	add.w	r2, r2, #508	; 0x1fc
 8001d86:	6013      	str	r3, [r2, #0]
										temp_heart = temp_heart >> 1; //need to change to account for the 0.1
 8001d88:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001d8c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	105b      	asrs	r3, r3, #1
 8001d94:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d98:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001d9c:	6013      	str	r3, [r2, #0]
										int finger_status = buf[i+5];
 8001d9e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001da2:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	1d5a      	adds	r2, r3, #5
 8001daa:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001dae:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001db2:	3b58      	subs	r3, #88	; 0x58
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001dba:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 8001dbe:	6013      	str	r3, [r2, #0]
										if(finger_status == 3){
 8001dc0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001dc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d13d      	bne.n	8001e4a <main+0xf72>
											++viable;
 8001dce:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001dd2:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001de2:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001de6:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8001dea:	edc3 7a00 	vstr	s15, [r3]
											heart_rate += temp_heart;
 8001dee:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001df2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e00:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e04:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8001e08:	ed93 7a00 	vldr	s14, [r3]
 8001e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e10:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e14:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8001e18:	edc3 7a00 	vstr	s15, [r3]
											SpO2 += temp_SpO2;
 8001e1c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e20:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e32:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001e36:	ed93 7a00 	vldr	s14, [r3]
 8001e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e3e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e42:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001e46:	edc3 7a00 	vstr	s15, [r3]
								for(int i = 13; i < length_of_data; i = i + 18){
 8001e4a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e4e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3312      	adds	r3, #18
 8001e56:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001e5a:	f502 720a 	add.w	r2, r2, #552	; 0x228
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e64:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	f107 1304 	add.w	r3, r7, #262148	; 0x40004
 8001e6e:	f503 4362 	add.w	r3, r3, #57856	; 0xe200
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f6ff af3e 	blt.w	8001cf6 <main+0xe1e>
										}



								}
								heart_rate = heart_rate / viable;
 8001e7a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e7e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8001e82:	edd3 6a00 	vldr	s13, [r3]
 8001e86:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e8a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e96:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e9a:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8001e9e:	edc3 7a00 	vstr	s15, [r3]
								SpO2 = SpO2 / viable; //average out our sample value
 8001ea2:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001ea6:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001eaa:	edd3 6a00 	vldr	s13, [r3]
 8001eae:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001eb2:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ebe:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001ec2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001ec6:	edc3 7a00 	vstr	s15, [r3]

								printf("heart: %f, SpO2: %f", heart_rate, SpO2);
 8001eca:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001ece:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	f7fe fb50 	bl	8000578 <__aeabi_f2d>
 8001ed8:	4605      	mov	r5, r0
 8001eda:	460e      	mov	r6, r1
 8001edc:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001ee0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	f7fe fb47 	bl	8000578 <__aeabi_f2d>
 8001eea:	4603      	mov	r3, r0
 8001eec:	460c      	mov	r4, r1
 8001eee:	e9cd 3400 	strd	r3, r4, [sp]
 8001ef2:	462a      	mov	r2, r5
 8001ef4:	4633      	mov	r3, r6
 8001ef6:	4804      	ldr	r0, [pc, #16]	; (8001f08 <main+0x1030>)
 8001ef8:	f004 fd6a 	bl	80069d0 <iprintf>
  {
 8001efc:	e598      	b.n	8001a30 <main+0xb58>
 8001efe:	bf00      	nop
 8001f00:	20000204 	.word	0x20000204
 8001f04:	08008994 	.word	0x08008994
 8001f08:	080089d0 	.word	0x080089d0

08001f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0bc      	sub	sp, #240	; 0xf0
 8001f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f16:	2244      	movs	r2, #68	; 0x44
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 f839 	bl	8005f92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2294      	movs	r2, #148	; 0x94
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 f82b 	bl	8005f92 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f40:	f001 fb82 	bl	8003648 <HAL_PWREx_ControlVoltageScaling>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001f4a:	f000 f957 	bl	80021fc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001f4e:	2310      	movs	r3, #16
 8001f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f60:	2360      	movs	r3, #96	; 0x60
 8001f62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f70:	4618      	mov	r0, r3
 8001f72:	f001 fc1d 	bl	80037b0 <HAL_RCC_OscConfig>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001f7c:	f000 f93e 	bl	80021fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f80:	230f      	movs	r3, #15
 8001f82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f9e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 f829 	bl	8003ffc <HAL_RCC_ClockConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001fb0:	f000 f924 	bl	80021fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8001fb4:	2360      	movs	r3, #96	; 0x60
 8001fb6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f002 faca 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001fce:	f000 f915 	bl	80021fc <Error_Handler>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	37f0      	adds	r7, #240	; 0xf0
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <MX_I2C1_Init+0x74>)
 8001fe2:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <MX_I2C1_Init+0x78>)
 8001fe4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <MX_I2C1_Init+0x74>)
 8001fe8:	f640 6214 	movw	r2, #3604	; 0xe14
 8001fec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <MX_I2C1_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <MX_I2C1_Init+0x74>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_I2C1_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_I2C1_Init+0x74>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <MX_I2C1_Init+0x74>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_I2C1_Init+0x74>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <MX_I2C1_Init+0x74>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <MX_I2C1_Init+0x74>)
 800201a:	f000 fe03 	bl	8002c24 <HAL_I2C_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002024:	f000 f8ea 	bl	80021fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002028:	2100      	movs	r1, #0
 800202a:	4809      	ldr	r0, [pc, #36]	; (8002050 <MX_I2C1_Init+0x74>)
 800202c:	f001 fa54 	bl	80034d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002036:	f000 f8e1 	bl	80021fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800203a:	2100      	movs	r1, #0
 800203c:	4804      	ldr	r0, [pc, #16]	; (8002050 <MX_I2C1_Init+0x74>)
 800203e:	f001 fa96 	bl	800356e <HAL_I2CEx_ConfigDigitalFilter>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002048:	f000 f8d8 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000204 	.word	0x20000204
 8002054:	40005400 	.word	0x40005400

08002058 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800205c:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 800205e:	4a23      	ldr	r2, [pc, #140]	; (80020ec <MX_LPUART1_UART_Init+0x94>)
 8002060:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 8002064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002068:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800206a:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002076:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 800207e:	220c      	movs	r2, #12
 8002080:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 800208a:	2200      	movs	r2, #0
 800208c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 8002096:	2200      	movs	r2, #0
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80020a0:	4811      	ldr	r0, [pc, #68]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 80020a2:	f002 ff63 	bl	8004f6c <HAL_UART_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80020ac:	f000 f8a6 	bl	80021fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020b0:	2100      	movs	r1, #0
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 80020b4:	f003 fcb7 	bl	8005a26 <HAL_UARTEx_SetTxFifoThreshold>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020be:	f000 f89d 	bl	80021fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c2:	2100      	movs	r1, #0
 80020c4:	4808      	ldr	r0, [pc, #32]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 80020c6:	f003 fcec 	bl	8005aa2 <HAL_UARTEx_SetRxFifoThreshold>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020d0:	f000 f894 	bl	80021fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80020d4:	4804      	ldr	r0, [pc, #16]	; (80020e8 <MX_LPUART1_UART_Init+0x90>)
 80020d6:	f003 fc6d 	bl	80059b4 <HAL_UARTEx_DisableFifoMode>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020e0:	f000 f88c 	bl	80021fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000250 	.word	0x20000250
 80020ec:	40008000 	.word	0x40008000

080020f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f6:	f107 0314 	add.w	r3, r7, #20
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002106:	4b31      	ldr	r3, [pc, #196]	; (80021cc <MX_GPIO_Init+0xdc>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	4a30      	ldr	r2, [pc, #192]	; (80021cc <MX_GPIO_Init+0xdc>)
 800210c:	f043 0304 	orr.w	r3, r3, #4
 8002110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002112:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <MX_GPIO_Init+0xdc>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800211e:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <MX_GPIO_Init+0xdc>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	4a2a      	ldr	r2, [pc, #168]	; (80021cc <MX_GPIO_Init+0xdc>)
 8002124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800212a:	4b28      	ldr	r3, [pc, #160]	; (80021cc <MX_GPIO_Init+0xdc>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8002136:	f001 fb2b 	bl	8003790 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <MX_GPIO_Init+0xdc>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	4a23      	ldr	r2, [pc, #140]	; (80021cc <MX_GPIO_Init+0xdc>)
 8002140:	f043 0308 	orr.w	r3, r3, #8
 8002144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <MX_GPIO_Init+0xdc>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <MX_GPIO_Init+0xdc>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <MX_GPIO_Init+0xdc>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215e:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <MX_GPIO_Init+0xdc>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800216a:	2303      	movs	r3, #3
 800216c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800216e:	2312      	movs	r3, #18
 8002170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002172:	2301      	movs	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002176:	2303      	movs	r3, #3
 8002178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800217a:	2304      	movs	r3, #4
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4812      	ldr	r0, [pc, #72]	; (80021d0 <MX_GPIO_Init+0xe0>)
 8002186:	f000 fba3 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800218a:	2303      	movs	r3, #3
 800218c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <MX_GPIO_Init+0xe4>)
 800219e:	f000 fb97 	bl	80028d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80021a2:	2360      	movs	r3, #96	; 0x60
 80021a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021b2:	2307      	movs	r3, #7
 80021b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_GPIO_Init+0xe4>)
 80021be:	f000 fb87 	bl	80028d0 <HAL_GPIO_Init>

}
 80021c2:	bf00      	nop
 80021c4:	3728      	adds	r7, #40	; 0x28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	48000800 	.word	0x48000800
 80021d4:	48000c00 	.word	0x48000c00

080021d8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80021e0:	1d39      	adds	r1, r7, #4
 80021e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e6:	2201      	movs	r2, #1
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <__io_putchar+0x20>)
 80021ea:	f002 ff0f 	bl	800500c <HAL_UART_Transmit>
  return ch;
 80021ee:	687b      	ldr	r3, [r7, #4]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000250 	.word	0x20000250

080021fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002200:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002202:	e7fe      	b.n	8002202 <Error_Handler+0x6>

08002204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_MspInit+0x44>)
 800220c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800220e:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <HAL_MspInit+0x44>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6613      	str	r3, [r2, #96]	; 0x60
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_MspInit+0x44>)
 8002218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <HAL_MspInit+0x44>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	4a08      	ldr	r2, [pc, #32]	; (8002248 <HAL_MspInit+0x44>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	6593      	str	r3, [r2, #88]	; 0x58
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_MspInit+0x44>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000

0800224c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_I2C_MspInit+0x7c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d128      	bne.n	80022c0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <HAL_I2C_MspInit+0x80>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	4a16      	ldr	r2, [pc, #88]	; (80022cc <HAL_I2C_MspInit+0x80>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_I2C_MspInit+0x80>)
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002286:	f44f 7340 	mov.w	r3, #768	; 0x300
 800228a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800228c:	2312      	movs	r3, #18
 800228e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002290:	2301      	movs	r3, #1
 8002292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002294:	2303      	movs	r3, #3
 8002296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002298:	2304      	movs	r3, #4
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	4619      	mov	r1, r3
 80022a2:	480b      	ldr	r0, [pc, #44]	; (80022d0 <HAL_I2C_MspInit+0x84>)
 80022a4:	f000 fb14 	bl	80028d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_I2C_MspInit+0x80>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_I2C_MspInit+0x80>)
 80022ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022b2:	6593      	str	r3, [r2, #88]	; 0x58
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_I2C_MspInit+0x80>)
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022c0:	bf00      	nop
 80022c2:	3728      	adds	r7, #40	; 0x28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40005400 	.word	0x40005400
 80022cc:	40021000 	.word	0x40021000
 80022d0:	48000400 	.word	0x48000400

080022d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_UART_MspInit+0x80>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d12a      	bne.n	800234c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_UART_MspInit+0x84>)
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	4a17      	ldr	r2, [pc, #92]	; (8002358 <HAL_UART_MspInit+0x84>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_UART_MspInit+0x84>)
 8002304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_UART_MspInit+0x84>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_UART_MspInit+0x84>)
 8002314:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_UART_MspInit+0x84>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002326:	f001 fa33 	bl	8003790 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800232a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800232e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800233c:	2308      	movs	r3, #8
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	4619      	mov	r1, r3
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <HAL_UART_MspInit+0x88>)
 8002348:	f000 fac2 	bl	80028d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800234c:	bf00      	nop
 800234e:	3728      	adds	r7, #40	; 0x28
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40008000 	.word	0x40008000
 8002358:	40021000 	.word	0x40021000
 800235c:	48001800 	.word	0x48001800

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002364:	e7fe      	b.n	8002364 <NMI_Handler+0x4>

08002366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <UsageFault_Handler+0x4>

0800237e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ac:	f000 f968 	bl	8002680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	e00a      	b.n	80023dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023c6:	f3af 8000 	nop.w
 80023ca:	4601      	mov	r1, r0
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	60ba      	str	r2, [r7, #8]
 80023d2:	b2ca      	uxtb	r2, r1
 80023d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3301      	adds	r3, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	dbf0      	blt.n	80023c6 <_read+0x12>
	}

return len;
 80023e4:	687b      	ldr	r3, [r7, #4]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e009      	b.n	8002414 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	60ba      	str	r2, [r7, #8]
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fee5 	bl	80021d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	429a      	cmp	r2, r3
 800241a:	dbf1      	blt.n	8002400 <_write+0x12>
	}
	return len;
 800241c:	687b      	ldr	r3, [r7, #4]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <_close>:

int _close(int file)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
	return -1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002432:	4618      	mov	r0, r3
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800244e:	605a      	str	r2, [r3, #4]
	return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <_isatty>:

int _isatty(int file)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
	return 1;
 8002466:	2301      	movs	r3, #1
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
	return 0;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <_open>:

int _open(char *path, int flags, ...)
{
 800248e:	b40e      	push	{r1, r2, r3}
 8002490:	b480      	push	{r7}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	b003      	add	sp, #12
 80024a8:	4770      	bx	lr
	...

080024ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <_sbrk+0x5c>)
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <_sbrk+0x60>)
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <_sbrk+0x64>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <_sbrk+0x64>)
 80024ca:	4a12      	ldr	r2, [pc, #72]	; (8002514 <_sbrk+0x68>)
 80024cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024dc:	f003 fb88 	bl	8005bf0 <__errno>
 80024e0:	4602      	mov	r2, r0
 80024e2:	230c      	movs	r3, #12
 80024e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80024e6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ea:	e009      	b.n	8002500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024ec:	4b08      	ldr	r3, [pc, #32]	; (8002510 <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <_sbrk+0x64>)
 80024fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fe:	68fb      	ldr	r3, [r7, #12]
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200a0000 	.word	0x200a0000
 800250c:	00000400 	.word	0x00000400
 8002510:	200001f8 	.word	0x200001f8
 8002514:	200002e8 	.word	0x200002e8

08002518 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800251c:	4b17      	ldr	r3, [pc, #92]	; (800257c <SystemInit+0x64>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002522:	4a16      	ldr	r2, [pc, #88]	; (800257c <SystemInit+0x64>)
 8002524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <SystemInit+0x68>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <SystemInit+0x68>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <SystemInit+0x68>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <SystemInit+0x68>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <SystemInit+0x68>)
 8002544:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002548:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800254c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800254e:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <SystemInit+0x68>)
 8002550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002554:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002556:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <SystemInit+0x68>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a09      	ldr	r2, [pc, #36]	; (8002580 <SystemInit+0x68>)
 800255c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002560:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <SystemInit+0x68>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <SystemInit+0x64>)
 800256a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800256e:	609a      	str	r2, [r3, #8]
#endif
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000ed00 	.word	0xe000ed00
 8002580:	40021000 	.word	0x40021000

08002584 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002588:	f7ff ffc6 	bl	8002518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800258c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800258e:	e003      	b.n	8002598 <LoopCopyDataInit>

08002590 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002592:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002594:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002596:	3104      	adds	r1, #4

08002598 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002598:	480a      	ldr	r0, [pc, #40]	; (80025c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800259c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800259e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025a0:	d3f6      	bcc.n	8002590 <CopyDataInit>
	ldr	r2, =_sbss
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80025a4:	e002      	b.n	80025ac <LoopFillZerobss>

080025a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025a8:	f842 3b04 	str.w	r3, [r2], #4

080025ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <LoopForever+0x16>)
	cmp	r2, r3
 80025ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80025b0:	d3f9      	bcc.n	80025a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025b2:	f003 fc5b 	bl	8005e6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025b6:	f7fe fc8f 	bl	8000ed8 <main>

080025ba <LoopForever>:

LoopForever:
    b LoopForever
 80025ba:	e7fe      	b.n	80025ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025bc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80025c0:	08008d28 	.word	0x08008d28
	ldr	r0, =_sdata
 80025c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80025c8:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80025cc:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80025d0:	200002e4 	.word	0x200002e4

080025d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <ADC1_IRQHandler>

080025d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025e0:	2003      	movs	r0, #3
 80025e2:	f000 f941 	bl	8002868 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025e6:	2000      	movs	r0, #0
 80025e8:	f000 f80e 	bl	8002608 <HAL_InitTick>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d002      	beq.n	80025f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	e001      	b.n	80025fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025f8:	f7ff fe04 	bl	8002204 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025fc:	79fb      	ldrb	r3, [r7, #7]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <HAL_InitTick+0x6c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d023      	beq.n	8002664 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_InitTick+0x70>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <HAL_InitTick+0x6c>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	4619      	mov	r1, r3
 8002626:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800262a:	fbb3 f3f1 	udiv	r3, r3, r1
 800262e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f93f 	bl	80028b6 <HAL_SYSTICK_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d809      	bhi.n	8002658 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002644:	2200      	movs	r2, #0
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f000 f917 	bl	800287e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002650:	4a0a      	ldr	r2, [pc, #40]	; (800267c <HAL_InitTick+0x74>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e007      	b.n	8002668 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	e004      	b.n	8002668 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e001      	b.n	8002668 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000008 	.word	0x20000008
 8002678:	20000000 	.word	0x20000000
 800267c:	20000004 	.word	0x20000004

08002680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_IncTick+0x20>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	461a      	mov	r2, r3
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_IncTick+0x24>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4413      	add	r3, r2
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <HAL_IncTick+0x24>)
 8002692:	6013      	str	r3, [r2, #0]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000008 	.word	0x20000008
 80026a4:	200002dc 	.word	0x200002dc

080026a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return uwTick;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_GetTick+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	200002dc 	.word	0x200002dc

080026c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7ff ffee 	bl	80026a8 <HAL_GetTick>
 80026cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d8:	d005      	beq.n	80026e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_Delay+0x40>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e6:	bf00      	nop
 80026e8:	f7ff ffde 	bl	80026a8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d8f7      	bhi.n	80026e8 <HAL_Delay+0x28>
  {
  }
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000008 	.word	0x20000008

08002704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800272c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002736:	4a04      	ldr	r2, [pc, #16]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60d3      	str	r3, [r2, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <__NVIC_GetPriorityGrouping+0x18>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f003 0307 	and.w	r3, r3, #7
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	6039      	str	r1, [r7, #0]
 8002772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	2b00      	cmp	r3, #0
 800277a:	db0a      	blt.n	8002792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	490c      	ldr	r1, [pc, #48]	; (80027b4 <__NVIC_SetPriority+0x4c>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	0112      	lsls	r2, r2, #4
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	440b      	add	r3, r1
 800278c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002790:	e00a      	b.n	80027a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4908      	ldr	r1, [pc, #32]	; (80027b8 <__NVIC_SetPriority+0x50>)
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	3b04      	subs	r3, #4
 80027a0:	0112      	lsls	r2, r2, #4
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	440b      	add	r3, r1
 80027a6:	761a      	strb	r2, [r3, #24]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000e100 	.word	0xe000e100
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f1c3 0307 	rsb	r3, r3, #7
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	bf28      	it	cs
 80027da:	2304      	movcs	r3, #4
 80027dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3304      	adds	r3, #4
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d902      	bls.n	80027ec <NVIC_EncodePriority+0x30>
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3b03      	subs	r3, #3
 80027ea:	e000      	b.n	80027ee <NVIC_EncodePriority+0x32>
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	f04f 32ff 	mov.w	r2, #4294967295
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43da      	mvns	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	401a      	ands	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002804:	f04f 31ff 	mov.w	r1, #4294967295
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	43d9      	mvns	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	4313      	orrs	r3, r2
         );
}
 8002816:	4618      	mov	r0, r3
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002834:	d301      	bcc.n	800283a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002836:	2301      	movs	r3, #1
 8002838:	e00f      	b.n	800285a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <SysTick_Config+0x40>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002842:	210f      	movs	r1, #15
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f7ff ff8e 	bl	8002768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <SysTick_Config+0x40>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <SysTick_Config+0x40>)
 8002854:	2207      	movs	r2, #7
 8002856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	e000e010 	.word	0xe000e010

08002868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff47 	bl	8002704 <__NVIC_SetPriorityGrouping>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002890:	f7ff ff5c 	bl	800274c <__NVIC_GetPriorityGrouping>
 8002894:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f7ff ff8e 	bl	80027bc <NVIC_EncodePriority>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff5d 	bl	8002768 <__NVIC_SetPriority>
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffb0 	bl	8002824 <SysTick_Config>
 80028c4:	4603      	mov	r3, r0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028de:	e166      	b.n	8002bae <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 8158 	beq.w	8002ba8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d00b      	beq.n	8002918 <HAL_GPIO_Init+0x48>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d007      	beq.n	8002918 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800290c:	2b11      	cmp	r3, #17
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b12      	cmp	r3, #18
 8002916:	d130      	bne.n	800297a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	4313      	orrs	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800294e:	2201      	movs	r2, #1
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 0201 	and.w	r2, r3, #1
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2203      	movs	r2, #3
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0xea>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d123      	bne.n	8002a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0307 	and.w	r3, r3, #7
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	6939      	ldr	r1, [r7, #16]
 80029fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 0203 	and.w	r2, r3, #3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80b2 	beq.w	8002ba8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a44:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <HAL_GPIO_Init+0x2fc>)
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	4a60      	ldr	r2, [pc, #384]	; (8002bcc <HAL_GPIO_Init+0x2fc>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6613      	str	r3, [r2, #96]	; 0x60
 8002a50:	4b5e      	ldr	r3, [pc, #376]	; (8002bcc <HAL_GPIO_Init+0x2fc>)
 8002a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a5c:	4a5c      	ldr	r2, [pc, #368]	; (8002bd0 <HAL_GPIO_Init+0x300>)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	089b      	lsrs	r3, r3, #2
 8002a62:	3302      	adds	r3, #2
 8002a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	220f      	movs	r2, #15
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a86:	d02b      	beq.n	8002ae0 <HAL_GPIO_Init+0x210>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_GPIO_Init+0x304>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d025      	beq.n	8002adc <HAL_GPIO_Init+0x20c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a51      	ldr	r2, [pc, #324]	; (8002bd8 <HAL_GPIO_Init+0x308>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d01f      	beq.n	8002ad8 <HAL_GPIO_Init+0x208>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a50      	ldr	r2, [pc, #320]	; (8002bdc <HAL_GPIO_Init+0x30c>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d019      	beq.n	8002ad4 <HAL_GPIO_Init+0x204>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a4f      	ldr	r2, [pc, #316]	; (8002be0 <HAL_GPIO_Init+0x310>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <HAL_GPIO_Init+0x200>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a4e      	ldr	r2, [pc, #312]	; (8002be4 <HAL_GPIO_Init+0x314>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00d      	beq.n	8002acc <HAL_GPIO_Init+0x1fc>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a4d      	ldr	r2, [pc, #308]	; (8002be8 <HAL_GPIO_Init+0x318>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d007      	beq.n	8002ac8 <HAL_GPIO_Init+0x1f8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a4c      	ldr	r2, [pc, #304]	; (8002bec <HAL_GPIO_Init+0x31c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d101      	bne.n	8002ac4 <HAL_GPIO_Init+0x1f4>
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	e00e      	b.n	8002ae2 <HAL_GPIO_Init+0x212>
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	e00c      	b.n	8002ae2 <HAL_GPIO_Init+0x212>
 8002ac8:	2306      	movs	r3, #6
 8002aca:	e00a      	b.n	8002ae2 <HAL_GPIO_Init+0x212>
 8002acc:	2305      	movs	r3, #5
 8002ace:	e008      	b.n	8002ae2 <HAL_GPIO_Init+0x212>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	e006      	b.n	8002ae2 <HAL_GPIO_Init+0x212>
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e004      	b.n	8002ae2 <HAL_GPIO_Init+0x212>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e002      	b.n	8002ae2 <HAL_GPIO_Init+0x212>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_GPIO_Init+0x212>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	f002 0203 	and.w	r2, r2, #3
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	4093      	lsls	r3, r2
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002af2:	4937      	ldr	r1, [pc, #220]	; (8002bd0 <HAL_GPIO_Init+0x300>)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	3302      	adds	r3, #2
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b00:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_GPIO_Init+0x320>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b24:	4a32      	ldr	r2, [pc, #200]	; (8002bf0 <HAL_GPIO_Init+0x320>)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b2a:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_GPIO_Init+0x320>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b4e:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <HAL_GPIO_Init+0x320>)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b54:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <HAL_GPIO_Init+0x320>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4013      	ands	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b78:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <HAL_GPIO_Init+0x320>)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_GPIO_Init+0x320>)
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	43db      	mvns	r3, r3
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ba2:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <HAL_GPIO_Init+0x320>)
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	3301      	adds	r3, #1
 8002bac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f ae91 	bne.w	80028e0 <HAL_GPIO_Init+0x10>
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	48000400 	.word	0x48000400
 8002bd8:	48000800 	.word	0x48000800
 8002bdc:	48000c00 	.word	0x48000c00
 8002be0:	48001000 	.word	0x48001000
 8002be4:	48001400 	.word	0x48001400
 8002be8:	48001800 	.word	0x48001800
 8002bec:	48001c00 	.word	0x48001c00
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
 8002c00:	4613      	mov	r3, r2
 8002c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c10:	e002      	b.n	8002c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e081      	b.n	8002d3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff fafe 	bl	800224c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2224      	movs	r2, #36	; 0x24
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0201 	bic.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d107      	bne.n	8002c9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	e006      	b.n	8002cac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002caa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d104      	bne.n	8002cbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ce0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	691a      	ldr	r2, [r3, #16]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	ea42 0103 	orr.w	r1, r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	021a      	lsls	r2, r3, #8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69d9      	ldr	r1, [r3, #28]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	817b      	strh	r3, [r7, #10]
 8002d54:	4613      	mov	r3, r2
 8002d56:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	f040 80da 	bne.w	8002f1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_I2C_Master_Transmit+0x30>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e0d3      	b.n	8002f1c <HAL_I2C_Master_Transmit+0x1d8>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d7c:	f7ff fc94 	bl	80026a8 <HAL_GetTick>
 8002d80:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2319      	movs	r3, #25
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f9e6 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0be      	b.n	8002f1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2221      	movs	r2, #33	; 0x21
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2210      	movs	r2, #16
 8002daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	893a      	ldrh	r2, [r7, #8]
 8002dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2bff      	cmp	r3, #255	; 0xff
 8002dce:	d90e      	bls.n	8002dee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	22ff      	movs	r2, #255	; 0xff
 8002dd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	8979      	ldrh	r1, [r7, #10]
 8002dde:	4b51      	ldr	r3, [pc, #324]	; (8002f24 <HAL_I2C_Master_Transmit+0x1e0>)
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fb48 	bl	800347c <I2C_TransferConfig>
 8002dec:	e06c      	b.n	8002ec8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	8979      	ldrh	r1, [r7, #10]
 8002e00:	4b48      	ldr	r3, [pc, #288]	; (8002f24 <HAL_I2C_Master_Transmit+0x1e0>)
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fb37 	bl	800347c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e0e:	e05b      	b.n	8002ec8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	6a39      	ldr	r1, [r7, #32]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f9e3 	bl	80031e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e07b      	b.n	8002f1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	781a      	ldrb	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d034      	beq.n	8002ec8 <HAL_I2C_Master_Transmit+0x184>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d130      	bne.n	8002ec8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2180      	movs	r1, #128	; 0x80
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f975 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e04d      	b.n	8002f1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2bff      	cmp	r3, #255	; 0xff
 8002e88:	d90e      	bls.n	8002ea8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	22ff      	movs	r2, #255	; 0xff
 8002e8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	8979      	ldrh	r1, [r7, #10]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 faeb 	bl	800347c <I2C_TransferConfig>
 8002ea6:	e00f      	b.n	8002ec8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	8979      	ldrh	r1, [r7, #10]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fada 	bl	800347c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d19e      	bne.n	8002e10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	6a39      	ldr	r1, [r7, #32]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f9c2 	bl	8003260 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e01a      	b.n	8002f1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2220      	movs	r2, #32
 8002eec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_I2C_Master_Transmit+0x1e4>)
 8002efa:	400b      	ands	r3, r1
 8002efc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e000      	b.n	8002f1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002f1a:	2302      	movs	r3, #2
  }
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	80002000 	.word	0x80002000
 8002f28:	fe00e800 	.word	0xfe00e800

08002f2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	461a      	mov	r2, r3
 8002f38:	460b      	mov	r3, r1
 8002f3a:	817b      	strh	r3, [r7, #10]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	f040 80db 	bne.w	8003104 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_I2C_Master_Receive+0x30>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0d4      	b.n	8003106 <HAL_I2C_Master_Receive+0x1da>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f64:	f7ff fba0 	bl	80026a8 <HAL_GetTick>
 8002f68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2319      	movs	r3, #25
 8002f70:	2201      	movs	r2, #1
 8002f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8f2 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0bf      	b.n	8003106 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2222      	movs	r2, #34	; 0x22
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2210      	movs	r2, #16
 8002f92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	893a      	ldrh	r2, [r7, #8]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	2bff      	cmp	r3, #255	; 0xff
 8002fb6:	d90e      	bls.n	8002fd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	22ff      	movs	r2, #255	; 0xff
 8002fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	8979      	ldrh	r1, [r7, #10]
 8002fc6:	4b52      	ldr	r3, [pc, #328]	; (8003110 <HAL_I2C_Master_Receive+0x1e4>)
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fa54 	bl	800347c <I2C_TransferConfig>
 8002fd4:	e06d      	b.n	80030b2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	8979      	ldrh	r1, [r7, #10]
 8002fe8:	4b49      	ldr	r3, [pc, #292]	; (8003110 <HAL_I2C_Master_Receive+0x1e4>)
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fa43 	bl	800347c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002ff6:	e05c      	b.n	80030b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	6a39      	ldr	r1, [r7, #32]
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f96b 	bl	80032d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e07c      	b.n	8003106 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d034      	beq.n	80030b2 <HAL_I2C_Master_Receive+0x186>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d130      	bne.n	80030b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	2200      	movs	r2, #0
 8003058:	2180      	movs	r1, #128	; 0x80
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f880 	bl	8003160 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e04d      	b.n	8003106 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306e:	b29b      	uxth	r3, r3
 8003070:	2bff      	cmp	r3, #255	; 0xff
 8003072:	d90e      	bls.n	8003092 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	22ff      	movs	r2, #255	; 0xff
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	b2da      	uxtb	r2, r3
 8003080:	8979      	ldrh	r1, [r7, #10]
 8003082:	2300      	movs	r3, #0
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f000 f9f6 	bl	800347c <I2C_TransferConfig>
 8003090:	e00f      	b.n	80030b2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	8979      	ldrh	r1, [r7, #10]
 80030a4:	2300      	movs	r3, #0
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f9e5 	bl	800347c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d19d      	bne.n	8002ff8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	6a39      	ldr	r1, [r7, #32]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f8cd 	bl	8003260 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e01a      	b.n	8003106 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2220      	movs	r2, #32
 80030d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <HAL_I2C_Master_Receive+0x1e8>)
 80030e4:	400b      	ands	r3, r1
 80030e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e000      	b.n	8003106 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003104:	2302      	movs	r3, #2
  }
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	80002400 	.word	0x80002400
 8003114:	fe00e800 	.word	0xfe00e800

08003118 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b02      	cmp	r3, #2
 800312c:	d103      	bne.n	8003136 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d007      	beq.n	8003154 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0201 	orr.w	r2, r2, #1
 8003152:	619a      	str	r2, [r3, #24]
  }
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003170:	e022      	b.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d01e      	beq.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7ff fa95 	bl	80026a8 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnFlagUntilTimeout+0x30>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d113      	bne.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	f043 0220 	orr.w	r2, r3, #32
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e00f      	b.n	80031d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699a      	ldr	r2, [r3, #24]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	4013      	ands	r3, r2
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d0cd      	beq.n	8003172 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031ec:	e02c      	b.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f8dc 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e02a      	b.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d01e      	beq.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7ff fa4d 	bl	80026a8 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d113      	bne.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003224:	f043 0220 	orr.w	r2, r3, #32
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e007      	b.n	8003258 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d1cb      	bne.n	80031ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800326c:	e028      	b.n	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f89c 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e026      	b.n	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003282:	f7ff fa11 	bl	80026a8 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d113      	bne.n	80032c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e007      	b.n	80032d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d1cf      	bne.n	800326e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e4:	e055      	b.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 f860 	bl	80033b0 <I2C_IsAcknowledgeFailed>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e053      	b.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b20      	cmp	r3, #32
 8003306:	d129      	bne.n	800335c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	2b04      	cmp	r3, #4
 8003314:	d105      	bne.n	8003322 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	e03f      	b.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2220      	movs	r2, #32
 8003328:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003336:	400b      	ands	r3, r1
 8003338:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e022      	b.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7ff f9a4 	bl	80026a8 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e007      	b.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d1a2      	bne.n	80032e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	fe00e800 	.word	0xfe00e800

080033b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b10      	cmp	r3, #16
 80033c8:	d151      	bne.n	800346e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ca:	e022      	b.n	8003412 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d2:	d01e      	beq.n	8003412 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7ff f968 	bl	80026a8 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d302      	bcc.n	80033ea <I2C_IsAcknowledgeFailed+0x3a>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d113      	bne.n	8003412 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ee:	f043 0220 	orr.w	r2, r3, #32
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e02e      	b.n	8003470 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b20      	cmp	r3, #32
 800341e:	d1d5      	bne.n	80033cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2210      	movs	r2, #16
 8003426:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2220      	movs	r2, #32
 800342e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7ff fe71 	bl	8003118 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <I2C_IsAcknowledgeFailed+0xc8>)
 8003442:	400b      	ands	r3, r1
 8003444:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	f043 0204 	orr.w	r2, r3, #4
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	fe00e800 	.word	0xfe00e800

0800347c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	817b      	strh	r3, [r7, #10]
 800348a:	4613      	mov	r3, r2
 800348c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	0d5b      	lsrs	r3, r3, #21
 8003498:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800349c:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <I2C_TransferConfig+0x58>)
 800349e:	430b      	orrs	r3, r1
 80034a0:	43db      	mvns	r3, r3
 80034a2:	ea02 0103 	and.w	r1, r2, r3
 80034a6:	897b      	ldrh	r3, [r7, #10]
 80034a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034ac:	7a7b      	ldrb	r3, [r7, #9]
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	03ff63ff 	.word	0x03ff63ff

080034d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d138      	bne.n	8003560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e032      	b.n	8003562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	; 0x24
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800352a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b20      	cmp	r3, #32
 8003582:	d139      	bne.n	80035f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800358e:	2302      	movs	r3, #2
 8003590:	e033      	b.n	80035fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2224      	movs	r2, #36	; 0x24
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800360c:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_PWREx_GetVoltageRange+0x3c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003618:	d102      	bne.n	8003620 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800361a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800361e:	e00b      	b.n	8003638 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003622:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362e:	d102      	bne.n	8003636 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003634:	e000      	b.n	8003638 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003636:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40007000 	.word	0x40007000

08003648 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d141      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003656:	4b4b      	ldr	r3, [pc, #300]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d131      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003664:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366a:	4a46      	ldr	r2, [pc, #280]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003670:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003674:	4b43      	ldr	r3, [pc, #268]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800367c:	4a41      	ldr	r2, [pc, #260]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003682:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003684:	4b40      	ldr	r3, [pc, #256]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2232      	movs	r2, #50	; 0x32
 800368a:	fb02 f303 	mul.w	r3, r2, r3
 800368e:	4a3f      	ldr	r2, [pc, #252]	; (800378c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	0c9b      	lsrs	r3, r3, #18
 8003696:	3301      	adds	r3, #1
 8003698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800369a:	e002      	b.n	80036a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3b01      	subs	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036a2:	4b38      	ldr	r3, [pc, #224]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ae:	d102      	bne.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f2      	bne.n	800369c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036b6:	4b33      	ldr	r3, [pc, #204]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c2:	d158      	bne.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e057      	b.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036c8:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ce:	4a2d      	ldr	r2, [pc, #180]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036d8:	e04d      	b.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e0:	d141      	bne.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036e2:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ee:	d131      	bne.n	8003754 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036f0:	4b24      	ldr	r3, [pc, #144]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f6:	4a23      	ldr	r2, [pc, #140]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003700:	4b20      	ldr	r3, [pc, #128]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003708:	4a1e      	ldr	r2, [pc, #120]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800370a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800370e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003710:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2232      	movs	r2, #50	; 0x32
 8003716:	fb02 f303 	mul.w	r3, r2, r3
 800371a:	4a1c      	ldr	r2, [pc, #112]	; (800378c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800371c:	fba2 2303 	umull	r2, r3, r2, r3
 8003720:	0c9b      	lsrs	r3, r3, #18
 8003722:	3301      	adds	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003726:	e002      	b.n	800372e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3b01      	subs	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800372e:	4b15      	ldr	r3, [pc, #84]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373a:	d102      	bne.n	8003742 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f2      	bne.n	8003728 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003742:	4b10      	ldr	r3, [pc, #64]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374e:	d112      	bne.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e011      	b.n	8003778 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800375a:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003760:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003764:	e007      	b.n	8003776 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800376e:	4a05      	ldr	r2, [pc, #20]	; (8003784 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003770:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003774:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	40007000 	.word	0x40007000
 8003788:	20000000 	.word	0x20000000
 800378c:	431bde83 	.word	0x431bde83

08003790 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_PWREx_EnableVddIO2+0x1c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	4a04      	ldr	r2, [pc, #16]	; (80037ac <HAL_PWREx_EnableVddIO2+0x1c>)
 800379a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800379e:	6053      	str	r3, [r2, #4]
}
 80037a0:	bf00      	nop
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40007000 	.word	0x40007000

080037b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d102      	bne.n	80037c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f000 bc16 	b.w	8003ff0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c4:	4ba0      	ldr	r3, [pc, #640]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ce:	4b9e      	ldr	r3, [pc, #632]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80e4 	beq.w	80039ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <HAL_RCC_OscConfig+0x4c>
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	f040 808b 	bne.w	800390a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	f040 8087 	bne.w	800390a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037fc:	4b92      	ldr	r3, [pc, #584]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d005      	beq.n	8003814 <HAL_RCC_OscConfig+0x64>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e3ed      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1a      	ldr	r2, [r3, #32]
 8003818:	4b8b      	ldr	r3, [pc, #556]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_RCC_OscConfig+0x7e>
 8003824:	4b88      	ldr	r3, [pc, #544]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382c:	e005      	b.n	800383a <HAL_RCC_OscConfig+0x8a>
 800382e:	4b86      	ldr	r3, [pc, #536]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383a:	4293      	cmp	r3, r2
 800383c:	d223      	bcs.n	8003886 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fdc8 	bl	80043d8 <RCC_SetFlashLatencyFromMSIRange>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e3ce      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003852:	4b7d      	ldr	r3, [pc, #500]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a7c      	ldr	r2, [pc, #496]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003858:	f043 0308 	orr.w	r3, r3, #8
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	4b7a      	ldr	r3, [pc, #488]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	4977      	ldr	r1, [pc, #476]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003870:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	4972      	ldr	r1, [pc, #456]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003880:	4313      	orrs	r3, r2
 8003882:	604b      	str	r3, [r1, #4]
 8003884:	e025      	b.n	80038d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003886:	4b70      	ldr	r3, [pc, #448]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a6f      	ldr	r2, [pc, #444]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 800388c:	f043 0308 	orr.w	r3, r3, #8
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b6d      	ldr	r3, [pc, #436]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	496a      	ldr	r1, [pc, #424]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038a4:	4b68      	ldr	r3, [pc, #416]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	4965      	ldr	r1, [pc, #404]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fd88 	bl	80043d8 <RCC_SetFlashLatencyFromMSIRange>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e38e      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038d2:	f000 fcbf 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80038d6:	4601      	mov	r1, r0
 80038d8:	4b5b      	ldr	r3, [pc, #364]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	4a5a      	ldr	r2, [pc, #360]	; (8003a4c <HAL_RCC_OscConfig+0x29c>)
 80038e4:	5cd3      	ldrb	r3, [r2, r3]
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	fa21 f303 	lsr.w	r3, r1, r3
 80038ee:	4a58      	ldr	r2, [pc, #352]	; (8003a50 <HAL_RCC_OscConfig+0x2a0>)
 80038f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038f2:	4b58      	ldr	r3, [pc, #352]	; (8003a54 <HAL_RCC_OscConfig+0x2a4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe fe86 	bl	8002608 <HAL_InitTick>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d052      	beq.n	80039ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	e372      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d032      	beq.n	8003978 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003912:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a4c      	ldr	r2, [pc, #304]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800391e:	f7fe fec3 	bl	80026a8 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003926:	f7fe febf 	bl	80026a8 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e35b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003938:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003944:	4b40      	ldr	r3, [pc, #256]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a3f      	ldr	r2, [pc, #252]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 800394a:	f043 0308 	orr.w	r3, r3, #8
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b3d      	ldr	r3, [pc, #244]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	493a      	ldr	r1, [pc, #232]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 800395e:	4313      	orrs	r3, r2
 8003960:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003962:	4b39      	ldr	r3, [pc, #228]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	021b      	lsls	r3, r3, #8
 8003970:	4935      	ldr	r1, [pc, #212]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003972:	4313      	orrs	r3, r2
 8003974:	604b      	str	r3, [r1, #4]
 8003976:	e01a      	b.n	80039ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003978:	4b33      	ldr	r3, [pc, #204]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a32      	ldr	r2, [pc, #200]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003984:	f7fe fe90 	bl	80026a8 <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800398c:	f7fe fe8c 	bl	80026a8 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e328      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800399e:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x1dc>
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d073      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d005      	beq.n	80039cc <HAL_RCC_OscConfig+0x21c>
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b0c      	cmp	r3, #12
 80039c4:	d10e      	bne.n	80039e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d10b      	bne.n	80039e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d063      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x2f0>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d15f      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e305      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ec:	d106      	bne.n	80039fc <HAL_RCC_OscConfig+0x24c>
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 80039f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e01d      	b.n	8003a38 <HAL_RCC_OscConfig+0x288>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x270>
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a0f      	ldr	r2, [pc, #60]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a0c      	ldr	r2, [pc, #48]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e00b      	b.n	8003a38 <HAL_RCC_OscConfig+0x288>
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <HAL_RCC_OscConfig+0x298>)
 8003a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01b      	beq.n	8003a78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fe fe32 	bl	80026a8 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a46:	e010      	b.n	8003a6a <HAL_RCC_OscConfig+0x2ba>
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	080089f4 	.word	0x080089f4
 8003a50:	20000000 	.word	0x20000000
 8003a54:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a58:	f7fe fe26 	bl	80026a8 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e2c2      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a6a:	4baf      	ldr	r3, [pc, #700]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f0      	beq.n	8003a58 <HAL_RCC_OscConfig+0x2a8>
 8003a76:	e014      	b.n	8003aa2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fe fe16 	bl	80026a8 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a80:	f7fe fe12 	bl	80026a8 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b64      	cmp	r3, #100	; 0x64
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e2ae      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a92:	4ba5      	ldr	r3, [pc, #660]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x2d0>
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d060      	beq.n	8003b70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x310>
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b0c      	cmp	r3, #12
 8003ab8:	d119      	bne.n	8003aee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d116      	bne.n	8003aee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac0:	4b99      	ldr	r3, [pc, #612]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x328>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e28b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	4b93      	ldr	r3, [pc, #588]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	4990      	ldr	r1, [pc, #576]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aec:	e040      	b.n	8003b70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d023      	beq.n	8003b3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af6:	4b8c      	ldr	r3, [pc, #560]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a8b      	ldr	r2, [pc, #556]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b02:	f7fe fdd1 	bl	80026a8 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0a:	f7fe fdcd 	bl	80026a8 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e269      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b1c:	4b82      	ldr	r3, [pc, #520]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b28:	4b7f      	ldr	r3, [pc, #508]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	061b      	lsls	r3, r3, #24
 8003b36:	497c      	ldr	r1, [pc, #496]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	604b      	str	r3, [r1, #4]
 8003b3c:	e018      	b.n	8003b70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b3e:	4b7a      	ldr	r3, [pc, #488]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a79      	ldr	r2, [pc, #484]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fe fdad 	bl	80026a8 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fe fda9 	bl	80026a8 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e245      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b64:	4b70      	ldr	r3, [pc, #448]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f0      	bne.n	8003b52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d03c      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b84:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b8a:	4a67      	ldr	r2, [pc, #412]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fe fd88 	bl	80026a8 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fe fd84 	bl	80026a8 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e220      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bae:	4b5e      	ldr	r3, [pc, #376]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0ef      	beq.n	8003b9c <HAL_RCC_OscConfig+0x3ec>
 8003bbc:	e01b      	b.n	8003bf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbe:	4b5a      	ldr	r3, [pc, #360]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc4:	4a58      	ldr	r2, [pc, #352]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003bc6:	f023 0301 	bic.w	r3, r3, #1
 8003bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bce:	f7fe fd6b 	bl	80026a8 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bd6:	f7fe fd67 	bl	80026a8 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e203      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be8:	4b4f      	ldr	r3, [pc, #316]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1ef      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 80a6 	beq.w	8003d50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c04:	2300      	movs	r3, #0
 8003c06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003c08:	4b47      	ldr	r3, [pc, #284]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10d      	bne.n	8003c30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c14:	4b44      	ldr	r3, [pc, #272]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	4a43      	ldr	r2, [pc, #268]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c20:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c30:	4b3e      	ldr	r3, [pc, #248]	; (8003d2c <HAL_RCC_OscConfig+0x57c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d118      	bne.n	8003c6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_RCC_OscConfig+0x57c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a3a      	ldr	r2, [pc, #232]	; (8003d2c <HAL_RCC_OscConfig+0x57c>)
 8003c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c48:	f7fe fd2e 	bl	80026a8 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c50:	f7fe fd2a 	bl	80026a8 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e1c6      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c62:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_RCC_OscConfig+0x57c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d108      	bne.n	8003c88 <HAL_RCC_OscConfig+0x4d8>
 8003c76:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7c:	4a2a      	ldr	r2, [pc, #168]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003c7e:	f043 0301 	orr.w	r3, r3, #1
 8003c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c86:	e024      	b.n	8003cd2 <HAL_RCC_OscConfig+0x522>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b05      	cmp	r3, #5
 8003c8e:	d110      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x502>
 8003c90:	4b25      	ldr	r3, [pc, #148]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	4a24      	ldr	r2, [pc, #144]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003c98:	f043 0304 	orr.w	r3, r3, #4
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca0:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	4a20      	ldr	r2, [pc, #128]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cb0:	e00f      	b.n	8003cd2 <HAL_RCC_OscConfig+0x522>
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003cba:	f023 0301 	bic.w	r3, r3, #1
 8003cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003cca:	f023 0304 	bic.w	r3, r3, #4
 8003cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d016      	beq.n	8003d08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cda:	f7fe fce5 	bl	80026a8 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce2:	f7fe fce1 	bl	80026a8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e17b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_RCC_OscConfig+0x578>)
 8003cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ed      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x532>
 8003d06:	e01a      	b.n	8003d3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fe fcce 	bl	80026a8 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d0e:	e00f      	b.n	8003d30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d10:	f7fe fcca 	bl	80026a8 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d906      	bls.n	8003d30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e164      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d30:	4ba8      	ldr	r3, [pc, #672]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1e8      	bne.n	8003d10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d3e:	7ffb      	ldrb	r3, [r7, #31]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d105      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d44:	4ba3      	ldr	r3, [pc, #652]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	4aa2      	ldr	r2, [pc, #648]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d03c      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01c      	beq.n	8003d9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d64:	4b9b      	ldr	r3, [pc, #620]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d6a:	4a9a      	ldr	r2, [pc, #616]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fe fc98 	bl	80026a8 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d7c:	f7fe fc94 	bl	80026a8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e130      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d8e:	4b91      	ldr	r3, [pc, #580]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ef      	beq.n	8003d7c <HAL_RCC_OscConfig+0x5cc>
 8003d9c:	e01b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d9e:	4b8d      	ldr	r3, [pc, #564]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003da0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da4:	4a8b      	ldr	r2, [pc, #556]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dae:	f7fe fc7b 	bl	80026a8 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003db6:	f7fe fc77 	bl	80026a8 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e113      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc8:	4b82      	ldr	r3, [pc, #520]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1ef      	bne.n	8003db6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 8107 	beq.w	8003fee <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	f040 80cb 	bne.w	8003f80 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dea:	4b7a      	ldr	r3, [pc, #488]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0203 	and.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d12c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d123      	bne.n	8003e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d11b      	bne.n	8003e58 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d113      	bne.n	8003e58 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d109      	bne.n	8003e58 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	085b      	lsrs	r3, r3, #1
 8003e50:	3b01      	subs	r3, #1
 8003e52:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d06d      	beq.n	8003f34 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d068      	beq.n	8003f30 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e5e:	4b5d      	ldr	r3, [pc, #372]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d105      	bne.n	8003e76 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003e6a:	4b5a      	ldr	r3, [pc, #360]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0ba      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e7a:	4b56      	ldr	r3, [pc, #344]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a55      	ldr	r2, [pc, #340]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003e80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e84:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e86:	f7fe fc0f 	bl	80026a8 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fe fc0b 	bl	80026a8 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e0a7      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea0:	4b4c      	ldr	r3, [pc, #304]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eac:	4b49      	ldr	r3, [pc, #292]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	4b49      	ldr	r3, [pc, #292]	; (8003fd8 <HAL_RCC_OscConfig+0x828>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ebc:	3a01      	subs	r2, #1
 8003ebe:	0112      	lsls	r2, r2, #4
 8003ec0:	4311      	orrs	r1, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ec6:	0212      	lsls	r2, r2, #8
 8003ec8:	4311      	orrs	r1, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ece:	0852      	lsrs	r2, r2, #1
 8003ed0:	3a01      	subs	r2, #1
 8003ed2:	0552      	lsls	r2, r2, #21
 8003ed4:	4311      	orrs	r1, r2
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003eda:	0852      	lsrs	r2, r2, #1
 8003edc:	3a01      	subs	r2, #1
 8003ede:	0652      	lsls	r2, r2, #25
 8003ee0:	4311      	orrs	r1, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ee6:	06d2      	lsls	r2, r2, #27
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	493a      	ldr	r1, [pc, #232]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ef0:	4b38      	ldr	r3, [pc, #224]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a37      	ldr	r2, [pc, #220]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003efa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003efc:	4b35      	ldr	r3, [pc, #212]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f06:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f08:	f7fe fbce 	bl	80026a8 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fe fbca 	bl	80026a8 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e066      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f22:	4b2c      	ldr	r3, [pc, #176]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f2e:	e05e      	b.n	8003fee <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e05d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f34:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d156      	bne.n	8003fee <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f40:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a23      	ldr	r2, [pc, #140]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f4c:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	4a20      	ldr	r2, [pc, #128]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f58:	f7fe fba6 	bl	80026a8 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f60:	f7fe fba2 	bl	80026a8 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e03e      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f72:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x7b0>
 8003f7e:	e036      	b.n	8003fee <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d031      	beq.n	8003fea <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f86:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f90:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d105      	bne.n	8003faa <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	4a0c      	ldr	r2, [pc, #48]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003fa4:	f023 0303 	bic.w	r3, r3, #3
 8003fa8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003faa:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <HAL_RCC_OscConfig+0x824>)
 8003fb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fe fb75 	bl	80026a8 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fc0:	e00c      	b.n	8003fdc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fe fb71 	bl	80026a8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d905      	bls.n	8003fdc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e00d      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x848>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1ec      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x812>
 8003fe8:	e001      	b.n	8003fee <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e10f      	b.n	8004234 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b89      	ldr	r3, [pc, #548]	; (800423c <HAL_RCC_ClockConfig+0x240>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d910      	bls.n	8004044 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b86      	ldr	r3, [pc, #536]	; (800423c <HAL_RCC_ClockConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 020f 	bic.w	r2, r3, #15
 800402a:	4984      	ldr	r1, [pc, #528]	; (800423c <HAL_RCC_ClockConfig+0x240>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b82      	ldr	r3, [pc, #520]	; (800423c <HAL_RCC_ClockConfig+0x240>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0f7      	b.n	8004234 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8089 	beq.w	8004164 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d133      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405a:	4b79      	ldr	r3, [pc, #484]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e0e4      	b.n	8004234 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800406a:	f000 fa0f 	bl	800448c <RCC_GetSysClockFreqFromPLLSource>
 800406e:	4602      	mov	r2, r0
 8004070:	4b74      	ldr	r3, [pc, #464]	; (8004244 <HAL_RCC_ClockConfig+0x248>)
 8004072:	429a      	cmp	r2, r3
 8004074:	d955      	bls.n	8004122 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004076:	4b72      	ldr	r3, [pc, #456]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10a      	bne.n	8004098 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004082:	4b6f      	ldr	r3, [pc, #444]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800408a:	4a6d      	ldr	r2, [pc, #436]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 800408c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004090:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e044      	b.n	8004122 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03e      	beq.n	8004122 <HAL_RCC_ClockConfig+0x126>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d13a      	bne.n	8004122 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80040ac:	4b64      	ldr	r3, [pc, #400]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040b4:	4a62      	ldr	r2, [pc, #392]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 80040b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ba:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e02f      	b.n	8004122 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ca:	4b5d      	ldr	r3, [pc, #372]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d115      	bne.n	8004102 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0ac      	b.n	8004234 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040e2:	4b57      	ldr	r3, [pc, #348]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0a0      	b.n	8004234 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f2:	4b53      	ldr	r3, [pc, #332]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e098      	b.n	8004234 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004102:	f000 f8a7 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004106:	4602      	mov	r2, r0
 8004108:	4b4e      	ldr	r3, [pc, #312]	; (8004244 <HAL_RCC_ClockConfig+0x248>)
 800410a:	429a      	cmp	r2, r3
 800410c:	d909      	bls.n	8004122 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800410e:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004116:	4a4a      	ldr	r2, [pc, #296]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 8004118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004122:	4b47      	ldr	r3, [pc, #284]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 0203 	bic.w	r2, r3, #3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4944      	ldr	r1, [pc, #272]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 8004130:	4313      	orrs	r3, r2
 8004132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004134:	f7fe fab8 	bl	80026a8 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	e00a      	b.n	8004152 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800413c:	f7fe fab4 	bl	80026a8 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	f241 3288 	movw	r2, #5000	; 0x1388
 800414a:	4293      	cmp	r3, r2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e070      	b.n	8004234 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	4b3b      	ldr	r3, [pc, #236]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 020c 	and.w	r2, r3, #12
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	429a      	cmp	r2, r3
 8004162:	d1eb      	bne.n	800413c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004170:	4b33      	ldr	r3, [pc, #204]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4930      	ldr	r1, [pc, #192]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
 8004182:	e008      	b.n	8004196 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b80      	cmp	r3, #128	; 0x80
 8004188:	d105      	bne.n	8004196 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800418a:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	4a2c      	ldr	r2, [pc, #176]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 8004190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004194:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004196:	4b29      	ldr	r3, [pc, #164]	; (800423c <HAL_RCC_ClockConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d210      	bcs.n	80041c6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_RCC_ClockConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f023 020f 	bic.w	r2, r3, #15
 80041ac:	4923      	ldr	r1, [pc, #140]	; (800423c <HAL_RCC_ClockConfig+0x240>)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b4:	4b21      	ldr	r3, [pc, #132]	; (800423c <HAL_RCC_ClockConfig+0x240>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d001      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e036      	b.n	8004234 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d2:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	4918      	ldr	r1, [pc, #96]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d009      	beq.n	8004204 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f0:	4b13      	ldr	r3, [pc, #76]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4910      	ldr	r1, [pc, #64]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 8004200:	4313      	orrs	r3, r2
 8004202:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004204:	f000 f826 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004208:	4601      	mov	r1, r0
 800420a:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <HAL_RCC_ClockConfig+0x244>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	4a0c      	ldr	r2, [pc, #48]	; (8004248 <HAL_RCC_ClockConfig+0x24c>)
 8004216:	5cd3      	ldrb	r3, [r2, r3]
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	fa21 f303 	lsr.w	r3, r1, r3
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_RCC_ClockConfig+0x250>)
 8004222:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <HAL_RCC_ClockConfig+0x254>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fe f9ed 	bl	8002608 <HAL_InitTick>
 800422e:	4603      	mov	r3, r0
 8004230:	73fb      	strb	r3, [r7, #15]

  return status;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	40022000 	.word	0x40022000
 8004240:	40021000 	.word	0x40021000
 8004244:	04c4b400 	.word	0x04c4b400
 8004248:	080089f4 	.word	0x080089f4
 800424c:	20000000 	.word	0x20000000
 8004250:	20000004 	.word	0x20000004

08004254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	61fb      	str	r3, [r7, #28]
 800425e:	2300      	movs	r3, #0
 8004260:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004262:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <HAL_RCC_GetSysClockFreq+0x104>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800426c:	4b3a      	ldr	r3, [pc, #232]	; (8004358 <HAL_RCC_GetSysClockFreq+0x104>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0303 	and.w	r3, r3, #3
 8004274:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x34>
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	2b0c      	cmp	r3, #12
 8004280:	d121      	bne.n	80042c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d11e      	bne.n	80042c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004288:	4b33      	ldr	r3, [pc, #204]	; (8004358 <HAL_RCC_GetSysClockFreq+0x104>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d107      	bne.n	80042a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004294:	4b30      	ldr	r3, [pc, #192]	; (8004358 <HAL_RCC_GetSysClockFreq+0x104>)
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	61fb      	str	r3, [r7, #28]
 80042a2:	e005      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80042a4:	4b2c      	ldr	r3, [pc, #176]	; (8004358 <HAL_RCC_GetSysClockFreq+0x104>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042b0:	4a2a      	ldr	r2, [pc, #168]	; (800435c <HAL_RCC_GetSysClockFreq+0x108>)
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042c4:	e00a      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d102      	bne.n	80042d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042cc:	4b24      	ldr	r3, [pc, #144]	; (8004360 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	e004      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042d8:	4b22      	ldr	r3, [pc, #136]	; (8004364 <HAL_RCC_GetSysClockFreq+0x110>)
 80042da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	2b0c      	cmp	r3, #12
 80042e0:	d133      	bne.n	800434a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042e2:	4b1d      	ldr	r3, [pc, #116]	; (8004358 <HAL_RCC_GetSysClockFreq+0x104>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d002      	beq.n	80042f8 <HAL_RCC_GetSysClockFreq+0xa4>
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d003      	beq.n	80042fe <HAL_RCC_GetSysClockFreq+0xaa>
 80042f6:	e005      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_RCC_GetSysClockFreq+0x10c>)
 80042fa:	617b      	str	r3, [r7, #20]
      break;
 80042fc:	e005      	b.n	800430a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042fe:	4b19      	ldr	r3, [pc, #100]	; (8004364 <HAL_RCC_GetSysClockFreq+0x110>)
 8004300:	617b      	str	r3, [r7, #20]
      break;
 8004302:	e002      	b.n	800430a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	617b      	str	r3, [r7, #20]
      break;
 8004308:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800430a:	4b13      	ldr	r3, [pc, #76]	; (8004358 <HAL_RCC_GetSysClockFreq+0x104>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	3301      	adds	r3, #1
 8004316:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <HAL_RCC_GetSysClockFreq+0x104>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	0a1b      	lsrs	r3, r3, #8
 800431e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	fb02 f203 	mul.w	r2, r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_RCC_GetSysClockFreq+0x104>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	0e5b      	lsrs	r3, r3, #25
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	3301      	adds	r3, #1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800434a:	69bb      	ldr	r3, [r7, #24]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3724      	adds	r7, #36	; 0x24
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40021000 	.word	0x40021000
 800435c:	08008a0c 	.word	0x08008a0c
 8004360:	00f42400 	.word	0x00f42400
 8004364:	007a1200 	.word	0x007a1200

08004368 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800436c:	4b03      	ldr	r3, [pc, #12]	; (800437c <HAL_RCC_GetHCLKFreq+0x14>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000000 	.word	0x20000000

08004380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004384:	f7ff fff0 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 8004388:	4601      	mov	r1, r0
 800438a:	4b06      	ldr	r3, [pc, #24]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	0a1b      	lsrs	r3, r3, #8
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004396:	5cd3      	ldrb	r3, [r2, r3]
 8004398:	f003 031f 	and.w	r3, r3, #31
 800439c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40021000 	.word	0x40021000
 80043a8:	08008a04 	.word	0x08008a04

080043ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043b0:	f7ff ffda 	bl	8004368 <HAL_RCC_GetHCLKFreq>
 80043b4:	4601      	mov	r1, r0
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0adb      	lsrs	r3, r3, #11
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4a04      	ldr	r2, [pc, #16]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043c2:	5cd3      	ldrb	r3, [r2, r3]
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000
 80043d4:	08008a04 	.word	0x08008a04

080043d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043e0:	2300      	movs	r3, #0
 80043e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043e4:	4b27      	ldr	r3, [pc, #156]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043f0:	f7ff f90a 	bl	8003608 <HAL_PWREx_GetVoltageRange>
 80043f4:	6178      	str	r0, [r7, #20]
 80043f6:	e014      	b.n	8004422 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043f8:	4b22      	ldr	r3, [pc, #136]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	4a21      	ldr	r2, [pc, #132]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80043fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004402:	6593      	str	r3, [r2, #88]	; 0x58
 8004404:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004410:	f7ff f8fa 	bl	8003608 <HAL_PWREx_GetVoltageRange>
 8004414:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	4a1a      	ldr	r2, [pc, #104]	; (8004484 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800441c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004420:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004428:	d10b      	bne.n	8004442 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b80      	cmp	r3, #128	; 0x80
 800442e:	d913      	bls.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2ba0      	cmp	r3, #160	; 0xa0
 8004434:	d902      	bls.n	800443c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004436:	2302      	movs	r3, #2
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	e00d      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800443c:	2301      	movs	r3, #1
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	e00a      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b7f      	cmp	r3, #127	; 0x7f
 8004446:	d902      	bls.n	800444e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004448:	2302      	movs	r3, #2
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e004      	b.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b70      	cmp	r3, #112	; 0x70
 8004452:	d101      	bne.n	8004458 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004454:	2301      	movs	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004458:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 020f 	bic.w	r2, r3, #15
 8004460:	4909      	ldr	r1, [pc, #36]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	429a      	cmp	r2, r3
 8004474:	d001      	beq.n	800447a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000
 8004488:	40022000 	.word	0x40022000

0800448c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004496:	4b2d      	ldr	r3, [pc, #180]	; (800454c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d118      	bne.n	80044d4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044a2:	4b2a      	ldr	r3, [pc, #168]	; (800454c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d107      	bne.n	80044be <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044ae:	4b27      	ldr	r3, [pc, #156]	; (800454c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e005      	b.n	80044ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044be:	4b23      	ldr	r3, [pc, #140]	; (800454c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044ca:	4a21      	ldr	r2, [pc, #132]	; (8004550 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044d2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044d4:	4b1d      	ldr	r3, [pc, #116]	; (800454c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d002      	beq.n	80044ea <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d003      	beq.n	80044f0 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80044e8:	e005      	b.n	80044f6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80044ea:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80044ec:	613b      	str	r3, [r7, #16]
    break;
 80044ee:	e005      	b.n	80044fc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80044f0:	4b19      	ldr	r3, [pc, #100]	; (8004558 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80044f2:	613b      	str	r3, [r7, #16]
    break;
 80044f4:	e002      	b.n	80044fc <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	613b      	str	r3, [r7, #16]
    break;
 80044fa:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044fc:	4b13      	ldr	r3, [pc, #76]	; (800454c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	3301      	adds	r3, #1
 8004508:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	fb02 f203 	mul.w	r2, r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	0e5b      	lsrs	r3, r3, #25
 8004528:	f003 0303 	and.w	r3, r3, #3
 800452c:	3301      	adds	r3, #1
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800453c:	683b      	ldr	r3, [r7, #0]
}
 800453e:	4618      	mov	r0, r3
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40021000 	.word	0x40021000
 8004550:	08008a0c 	.word	0x08008a0c
 8004554:	00f42400 	.word	0x00f42400
 8004558:	007a1200 	.word	0x007a1200

0800455c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004564:	2300      	movs	r3, #0
 8004566:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004568:	2300      	movs	r3, #0
 800456a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004574:	2b00      	cmp	r3, #0
 8004576:	d03d      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800457c:	2b40      	cmp	r3, #64	; 0x40
 800457e:	d00b      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004580:	2b40      	cmp	r3, #64	; 0x40
 8004582:	d804      	bhi.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00e      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004588:	2b20      	cmp	r3, #32
 800458a:	d015      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800458c:	e01d      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800458e:	2b60      	cmp	r3, #96	; 0x60
 8004590:	d01e      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004592:	2b80      	cmp	r3, #128	; 0x80
 8004594:	d01c      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004596:	e018      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004598:	4b86      	ldr	r3, [pc, #536]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a85      	ldr	r2, [pc, #532]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800459e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045a4:	e015      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3304      	adds	r3, #4
 80045aa:	2100      	movs	r1, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fafd 	bl	8004bac <RCCEx_PLLSAI1_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045b6:	e00c      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3320      	adds	r3, #32
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fbe4 	bl	8004d8c <RCCEx_PLLSAI2_Config>
 80045c4:	4603      	mov	r3, r0
 80045c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045c8:	e003      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	74fb      	strb	r3, [r7, #19]
      break;
 80045ce:	e000      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80045d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d2:	7cfb      	ldrb	r3, [r7, #19]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10b      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045d8:	4b76      	ldr	r3, [pc, #472]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045de:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	4973      	ldr	r1, [pc, #460]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80045ee:	e001      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f0:	7cfb      	ldrb	r3, [r7, #19]
 80045f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d042      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004608:	d00f      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800460a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460e:	d805      	bhi.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8004610:	2b00      	cmp	r3, #0
 8004612:	d011      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004618:	d017      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xee>
 800461a:	e01f      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x100>
 800461c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004620:	d01f      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004626:	d01c      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004628:	e018      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800462a:	4b62      	ldr	r3, [pc, #392]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4a61      	ldr	r2, [pc, #388]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004634:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004636:	e015      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fab4 	bl	8004bac <RCCEx_PLLSAI1_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004648:	e00c      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3320      	adds	r3, #32
 800464e:	2100      	movs	r1, #0
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fb9b 	bl	8004d8c <RCCEx_PLLSAI2_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800465a:	e003      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	74fb      	strb	r3, [r7, #19]
      break;
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8004662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004664:	7cfb      	ldrb	r3, [r7, #19]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10b      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800466a:	4b52      	ldr	r3, [pc, #328]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800466c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004670:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	494e      	ldr	r1, [pc, #312]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004680:	e001      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	f000 809f 	beq.w	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004694:	2300      	movs	r3, #0
 8004696:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004698:	4b46      	ldr	r3, [pc, #280]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046a8:	2300      	movs	r3, #0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00d      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	4a40      	ldr	r2, [pc, #256]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6593      	str	r3, [r2, #88]	; 0x58
 80046ba:	4b3e      	ldr	r3, [pc, #248]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c6:	2301      	movs	r3, #1
 80046c8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3a      	ldr	r2, [pc, #232]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046d6:	f7fd ffe7 	bl	80026a8 <HAL_GetTick>
 80046da:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046dc:	e009      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fd ffe3 	bl	80026a8 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d902      	bls.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	74fb      	strb	r3, [r7, #19]
        break;
 80046f0:	e005      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046f2:	4b31      	ldr	r3, [pc, #196]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ef      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d15b      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800470e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d01f      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	429a      	cmp	r2, r3
 8004720:	d019      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004722:	4b24      	ldr	r3, [pc, #144]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800472e:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800474e:	4a19      	ldr	r2, [pc, #100]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d016      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fd ffa2 	bl	80026a8 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004766:	e00b      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004768:	f7fd ff9e 	bl	80026a8 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d902      	bls.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	74fb      	strb	r3, [r7, #19]
            break;
 800477e:	e006      	b.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0ec      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800478e:	7cfb      	ldrb	r3, [r7, #19]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10c      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004794:	4b07      	ldr	r3, [pc, #28]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	4903      	ldr	r1, [pc, #12]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047ac:	e008      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	74bb      	strb	r3, [r7, #18]
 80047b2:	e005      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047c0:	7c7b      	ldrb	r3, [r7, #17]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d105      	bne.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c6:	4ba0      	ldr	r3, [pc, #640]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ca:	4a9f      	ldr	r2, [pc, #636]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047de:	4b9a      	ldr	r3, [pc, #616]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e4:	f023 0203 	bic.w	r2, r3, #3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ec:	4996      	ldr	r1, [pc, #600]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004800:	4b91      	ldr	r3, [pc, #580]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004806:	f023 020c 	bic.w	r2, r3, #12
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	498e      	ldr	r1, [pc, #568]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004822:	4b89      	ldr	r3, [pc, #548]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004830:	4985      	ldr	r1, [pc, #532]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004844:	4b80      	ldr	r3, [pc, #512]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004852:	497d      	ldr	r1, [pc, #500]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0310 	and.w	r3, r3, #16
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004866:	4b78      	ldr	r3, [pc, #480]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004874:	4974      	ldr	r1, [pc, #464]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0320 	and.w	r3, r3, #32
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004888:	4b6f      	ldr	r3, [pc, #444]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004896:	496c      	ldr	r1, [pc, #432]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048aa:	4b67      	ldr	r3, [pc, #412]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b8:	4963      	ldr	r1, [pc, #396]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048cc:	4b5e      	ldr	r3, [pc, #376]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048da:	495b      	ldr	r1, [pc, #364]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048ee:	4b56      	ldr	r3, [pc, #344]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	4952      	ldr	r1, [pc, #328]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004910:	4b4d      	ldr	r3, [pc, #308]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491e:	494a      	ldr	r1, [pc, #296]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004932:	4b45      	ldr	r3, [pc, #276]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	4941      	ldr	r1, [pc, #260]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004954:	4b3c      	ldr	r3, [pc, #240]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800495a:	f023 0203 	bic.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004962:	4939      	ldr	r1, [pc, #228]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d028      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004976:	4b34      	ldr	r3, [pc, #208]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004984:	4930      	ldr	r1, [pc, #192]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004994:	d106      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004996:	4b2c      	ldr	r3, [pc, #176]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4a2b      	ldr	r2, [pc, #172]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049a0:	60d3      	str	r3, [r2, #12]
 80049a2:	e011      	b.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3304      	adds	r3, #4
 80049b2:	2101      	movs	r1, #1
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f8f9 	bl	8004bac <RCCEx_PLLSAI1_Config>
 80049ba:	4603      	mov	r3, r0
 80049bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049be:	7cfb      	ldrb	r3, [r7, #19]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80049c4:	7cfb      	ldrb	r3, [r7, #19]
 80049c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d04d      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049dc:	d108      	bne.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80049de:	4b1a      	ldr	r3, [pc, #104]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e4:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80049ee:	e012      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80049f0:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049f6:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a0e:	490e      	ldr	r1, [pc, #56]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a1e:	d106      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2a:	60d3      	str	r3, [r2, #12]
 8004a2c:	e020      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a36:	d109      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a38:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a02      	ldr	r2, [pc, #8]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a42:	60d3      	str	r3, [r2, #12]
 8004a44:	e014      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a46:	bf00      	nop
 8004a48:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 f8a5 	bl	8004bac <RCCEx_PLLSAI1_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a66:	7cfb      	ldrb	r3, [r7, #19]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a6c:	7cfb      	ldrb	r3, [r7, #19]
 8004a6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d028      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a7c:	4b4a      	ldr	r3, [pc, #296]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8a:	4947      	ldr	r1, [pc, #284]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a9a:	d106      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9c:	4b42      	ldr	r3, [pc, #264]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a41      	ldr	r2, [pc, #260]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aa6:	60d3      	str	r3, [r2, #12]
 8004aa8:	e011      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ab2:	d10c      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 f876 	bl	8004bac <RCCEx_PLLSAI1_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8004aca:	7cfb      	ldrb	r3, [r7, #19]
 8004acc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01e      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ada:	4b33      	ldr	r3, [pc, #204]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aea:	492f      	ldr	r1, [pc, #188]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2102      	movs	r1, #2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f851 	bl	8004bac <RCCEx_PLLSAI1_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00b      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b24:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b2a:	f023 0204 	bic.w	r2, r3, #4
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b34:	491c      	ldr	r1, [pc, #112]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00b      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004b48:	4b17      	ldr	r3, [pc, #92]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b4e:	f023 0218 	bic.w	r2, r3, #24
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	4913      	ldr	r1, [pc, #76]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d017      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7c:	490a      	ldr	r1, [pc, #40]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40021000 	.word	0x40021000

08004bac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bba:	4b70      	ldr	r3, [pc, #448]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00e      	beq.n	8004be4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	f003 0203 	and.w	r2, r3, #3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d103      	bne.n	8004bde <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d13f      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	73fb      	strb	r3, [r7, #15]
 8004be2:	e03c      	b.n	8004c5e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d00c      	beq.n	8004c06 <RCCEx_PLLSAI1_Config+0x5a>
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d013      	beq.n	8004c18 <RCCEx_PLLSAI1_Config+0x6c>
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d120      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bf4:	4b61      	ldr	r3, [pc, #388]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d11d      	bne.n	8004c3c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c04:	e01a      	b.n	8004c3c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c06:	4b5d      	ldr	r3, [pc, #372]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d116      	bne.n	8004c40 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c16:	e013      	b.n	8004c40 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c18:	4b58      	ldr	r3, [pc, #352]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10f      	bne.n	8004c44 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c24:	4b55      	ldr	r3, [pc, #340]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d109      	bne.n	8004c44 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c34:	e006      	b.n	8004c44 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
      break;
 8004c3a:	e004      	b.n	8004c46 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004c3c:	bf00      	nop
 8004c3e:	e002      	b.n	8004c46 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004c40:	bf00      	nop
 8004c42:	e000      	b.n	8004c46 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004c44:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d108      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004c4c:	4b4b      	ldr	r3, [pc, #300]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f023 0203 	bic.w	r2, r3, #3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4948      	ldr	r1, [pc, #288]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 8086 	bne.w	8004d72 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c66:	4b45      	ldr	r3, [pc, #276]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a44      	ldr	r2, [pc, #272]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c72:	f7fd fd19 	bl	80026a8 <HAL_GetTick>
 8004c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c78:	e009      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c7a:	f7fd fd15 	bl	80026a8 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d902      	bls.n	8004c8e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	73fb      	strb	r3, [r7, #15]
        break;
 8004c8c:	e005      	b.n	8004c9a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c8e:	4b3b      	ldr	r3, [pc, #236]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ef      	bne.n	8004c7a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d168      	bne.n	8004d72 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d113      	bne.n	8004cce <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ca6:	4b35      	ldr	r3, [pc, #212]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	4b35      	ldr	r3, [pc, #212]	; (8004d80 <RCCEx_PLLSAI1_Config+0x1d4>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	6892      	ldr	r2, [r2, #8]
 8004cb2:	0211      	lsls	r1, r2, #8
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	68d2      	ldr	r2, [r2, #12]
 8004cb8:	06d2      	lsls	r2, r2, #27
 8004cba:	4311      	orrs	r1, r2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6852      	ldr	r2, [r2, #4]
 8004cc0:	3a01      	subs	r2, #1
 8004cc2:	0112      	lsls	r2, r2, #4
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	492d      	ldr	r1, [pc, #180]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	610b      	str	r3, [r1, #16]
 8004ccc:	e02d      	b.n	8004d2a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d115      	bne.n	8004d00 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cd4:	4b29      	ldr	r3, [pc, #164]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6892      	ldr	r2, [r2, #8]
 8004ce0:	0211      	lsls	r1, r2, #8
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6912      	ldr	r2, [r2, #16]
 8004ce6:	0852      	lsrs	r2, r2, #1
 8004ce8:	3a01      	subs	r2, #1
 8004cea:	0552      	lsls	r2, r2, #21
 8004cec:	4311      	orrs	r1, r2
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6852      	ldr	r2, [r2, #4]
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	0112      	lsls	r2, r2, #4
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	4920      	ldr	r1, [pc, #128]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	610b      	str	r3, [r1, #16]
 8004cfe:	e014      	b.n	8004d2a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6892      	ldr	r2, [r2, #8]
 8004d0c:	0211      	lsls	r1, r2, #8
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6952      	ldr	r2, [r2, #20]
 8004d12:	0852      	lsrs	r2, r2, #1
 8004d14:	3a01      	subs	r2, #1
 8004d16:	0652      	lsls	r2, r2, #25
 8004d18:	4311      	orrs	r1, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6852      	ldr	r2, [r2, #4]
 8004d1e:	3a01      	subs	r2, #1
 8004d20:	0112      	lsls	r2, r2, #4
 8004d22:	430a      	orrs	r2, r1
 8004d24:	4915      	ldr	r1, [pc, #84]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d2a:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a13      	ldr	r2, [pc, #76]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d36:	f7fd fcb7 	bl	80026a8 <HAL_GetTick>
 8004d3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d3c:	e009      	b.n	8004d52 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d3e:	f7fd fcb3 	bl	80026a8 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d902      	bls.n	8004d52 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	73fb      	strb	r3, [r7, #15]
          break;
 8004d50:	e005      	b.n	8004d5e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d52:	4b0a      	ldr	r3, [pc, #40]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0ef      	beq.n	8004d3e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d106      	bne.n	8004d72 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d66:	691a      	ldr	r2, [r3, #16]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	4903      	ldr	r1, [pc, #12]	; (8004d7c <RCCEx_PLLSAI1_Config+0x1d0>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	07ff800f 	.word	0x07ff800f
 8004d84:	ff9f800f 	.word	0xff9f800f
 8004d88:	f9ff800f 	.word	0xf9ff800f

08004d8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d9a:	4b70      	ldr	r3, [pc, #448]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00e      	beq.n	8004dc4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004da6:	4b6d      	ldr	r3, [pc, #436]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0203 	and.w	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d103      	bne.n	8004dbe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
       ||
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d13f      	bne.n	8004e3e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
 8004dc2:	e03c      	b.n	8004e3e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d00c      	beq.n	8004de6 <RCCEx_PLLSAI2_Config+0x5a>
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d013      	beq.n	8004df8 <RCCEx_PLLSAI2_Config+0x6c>
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d120      	bne.n	8004e16 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dd4:	4b61      	ldr	r3, [pc, #388]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d11d      	bne.n	8004e1c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de4:	e01a      	b.n	8004e1c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004de6:	4b5d      	ldr	r3, [pc, #372]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d116      	bne.n	8004e20 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004df6:	e013      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004df8:	4b58      	ldr	r3, [pc, #352]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10f      	bne.n	8004e24 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e04:	4b55      	ldr	r3, [pc, #340]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e14:	e006      	b.n	8004e24 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1a:	e004      	b.n	8004e26 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004e1c:	bf00      	nop
 8004e1e:	e002      	b.n	8004e26 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004e24:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d108      	bne.n	8004e3e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004e2c:	4b4b      	ldr	r3, [pc, #300]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f023 0203 	bic.w	r2, r3, #3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4948      	ldr	r1, [pc, #288]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 8086 	bne.w	8004f52 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e46:	4b45      	ldr	r3, [pc, #276]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a44      	ldr	r2, [pc, #272]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e52:	f7fd fc29 	bl	80026a8 <HAL_GetTick>
 8004e56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e58:	e009      	b.n	8004e6e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e5a:	f7fd fc25 	bl	80026a8 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d902      	bls.n	8004e6e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e6c:	e005      	b.n	8004e7a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1ef      	bne.n	8004e5a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d168      	bne.n	8004f52 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d113      	bne.n	8004eae <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e86:	4b35      	ldr	r3, [pc, #212]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004e88:	695a      	ldr	r2, [r3, #20]
 8004e8a:	4b35      	ldr	r3, [pc, #212]	; (8004f60 <RCCEx_PLLSAI2_Config+0x1d4>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6892      	ldr	r2, [r2, #8]
 8004e92:	0211      	lsls	r1, r2, #8
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	68d2      	ldr	r2, [r2, #12]
 8004e98:	06d2      	lsls	r2, r2, #27
 8004e9a:	4311      	orrs	r1, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6852      	ldr	r2, [r2, #4]
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	0112      	lsls	r2, r2, #4
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	492d      	ldr	r1, [pc, #180]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	614b      	str	r3, [r1, #20]
 8004eac:	e02d      	b.n	8004f0a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d115      	bne.n	8004ee0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eb4:	4b29      	ldr	r3, [pc, #164]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6892      	ldr	r2, [r2, #8]
 8004ec0:	0211      	lsls	r1, r2, #8
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6912      	ldr	r2, [r2, #16]
 8004ec6:	0852      	lsrs	r2, r2, #1
 8004ec8:	3a01      	subs	r2, #1
 8004eca:	0552      	lsls	r2, r2, #21
 8004ecc:	4311      	orrs	r1, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6852      	ldr	r2, [r2, #4]
 8004ed2:	3a01      	subs	r2, #1
 8004ed4:	0112      	lsls	r2, r2, #4
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	4920      	ldr	r1, [pc, #128]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	614b      	str	r3, [r1, #20]
 8004ede:	e014      	b.n	8004f0a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ee0:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004ee2:	695a      	ldr	r2, [r3, #20]
 8004ee4:	4b20      	ldr	r3, [pc, #128]	; (8004f68 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6892      	ldr	r2, [r2, #8]
 8004eec:	0211      	lsls	r1, r2, #8
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6952      	ldr	r2, [r2, #20]
 8004ef2:	0852      	lsrs	r2, r2, #1
 8004ef4:	3a01      	subs	r2, #1
 8004ef6:	0652      	lsls	r2, r2, #25
 8004ef8:	4311      	orrs	r1, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6852      	ldr	r2, [r2, #4]
 8004efe:	3a01      	subs	r2, #1
 8004f00:	0112      	lsls	r2, r2, #4
 8004f02:	430a      	orrs	r2, r1
 8004f04:	4915      	ldr	r1, [pc, #84]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f0a:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f16:	f7fd fbc7 	bl	80026a8 <HAL_GetTick>
 8004f1a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f1c:	e009      	b.n	8004f32 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f1e:	f7fd fbc3 	bl	80026a8 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d902      	bls.n	8004f32 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	73fb      	strb	r3, [r7, #15]
          break;
 8004f30:	e005      	b.n	8004f3e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f32:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0ef      	beq.n	8004f1e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	4903      	ldr	r1, [pc, #12]	; (8004f5c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	07ff800f 	.word	0x07ff800f
 8004f64:	ff9f800f 	.word	0xff9f800f
 8004f68:	f9ff800f 	.word	0xf9ff800f

08004f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e042      	b.n	8005004 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d106      	bne.n	8004f96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7fd f99f 	bl	80022d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2224      	movs	r2, #36	; 0x24
 8004f9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8c4 	bl	800513c <UART_SetConfig>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d101      	bne.n	8004fbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e022      	b.n	8005004 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fb8a 	bl	80056e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 fc11 	bl	8005824 <UART_CheckIdleState>
 8005002:	4603      	mov	r3, r0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b08a      	sub	sp, #40	; 0x28
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005022:	2b20      	cmp	r3, #32
 8005024:	f040 8084 	bne.w	8005130 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_UART_Transmit+0x28>
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e07c      	b.n	8005132 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_UART_Transmit+0x3a>
 8005042:	2302      	movs	r3, #2
 8005044:	e075      	b.n	8005132 <HAL_UART_Transmit+0x126>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2221      	movs	r2, #33	; 0x21
 800505a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800505e:	f7fd fb23 	bl	80026a8 <HAL_GetTick>
 8005062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507c:	d108      	bne.n	8005090 <HAL_UART_Transmit+0x84>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e003      	b.n	8005098 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005094:	2300      	movs	r3, #0
 8005096:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80050a0:	e02d      	b.n	80050fe <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2180      	movs	r1, #128	; 0x80
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 fc01 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e03a      	b.n	8005132 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	881a      	ldrh	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050ce:	b292      	uxth	r2, r2
 80050d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	3302      	adds	r3, #2
 80050d6:	61bb      	str	r3, [r7, #24]
 80050d8:	e008      	b.n	80050ec <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	781a      	ldrb	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	b292      	uxth	r2, r2
 80050e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	3301      	adds	r3, #1
 80050ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1cb      	bne.n	80050a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2200      	movs	r2, #0
 8005112:	2140      	movs	r1, #64	; 0x40
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fbcd 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e006      	b.n	8005132 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800513c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005140:	b088      	sub	sp, #32
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	4313      	orrs	r3, r2
 8005160:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	4313      	orrs	r3, r2
 800516a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4bb1      	ldr	r3, [pc, #708]	; (8005438 <UART_SetConfig+0x2fc>)
 8005174:	4013      	ands	r3, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	69f9      	ldr	r1, [r7, #28]
 800517c:	430b      	orrs	r3, r1
 800517e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4aa6      	ldr	r2, [pc, #664]	; (800543c <UART_SetConfig+0x300>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	69fa      	ldr	r2, [r7, #28]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	69f9      	ldr	r1, [r7, #28]
 80051c4:	430b      	orrs	r3, r1
 80051c6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	f023 010f 	bic.w	r1, r3, #15
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a97      	ldr	r2, [pc, #604]	; (8005440 <UART_SetConfig+0x304>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d121      	bne.n	800522c <UART_SetConfig+0xf0>
 80051e8:	4b96      	ldr	r3, [pc, #600]	; (8005444 <UART_SetConfig+0x308>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d816      	bhi.n	8005224 <UART_SetConfig+0xe8>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <UART_SetConfig+0xc0>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	0800520d 	.word	0x0800520d
 8005200:	08005219 	.word	0x08005219
 8005204:	08005213 	.word	0x08005213
 8005208:	0800521f 	.word	0x0800521f
 800520c:	2301      	movs	r3, #1
 800520e:	76fb      	strb	r3, [r7, #27]
 8005210:	e0e8      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005212:	2302      	movs	r3, #2
 8005214:	76fb      	strb	r3, [r7, #27]
 8005216:	e0e5      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005218:	2304      	movs	r3, #4
 800521a:	76fb      	strb	r3, [r7, #27]
 800521c:	e0e2      	b.n	80053e4 <UART_SetConfig+0x2a8>
 800521e:	2308      	movs	r3, #8
 8005220:	76fb      	strb	r3, [r7, #27]
 8005222:	e0df      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005224:	2310      	movs	r3, #16
 8005226:	76fb      	strb	r3, [r7, #27]
 8005228:	bf00      	nop
 800522a:	e0db      	b.n	80053e4 <UART_SetConfig+0x2a8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a85      	ldr	r2, [pc, #532]	; (8005448 <UART_SetConfig+0x30c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d134      	bne.n	80052a0 <UART_SetConfig+0x164>
 8005236:	4b83      	ldr	r3, [pc, #524]	; (8005444 <UART_SetConfig+0x308>)
 8005238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	2b0c      	cmp	r3, #12
 8005242:	d829      	bhi.n	8005298 <UART_SetConfig+0x15c>
 8005244:	a201      	add	r2, pc, #4	; (adr r2, 800524c <UART_SetConfig+0x110>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	08005281 	.word	0x08005281
 8005250:	08005299 	.word	0x08005299
 8005254:	08005299 	.word	0x08005299
 8005258:	08005299 	.word	0x08005299
 800525c:	0800528d 	.word	0x0800528d
 8005260:	08005299 	.word	0x08005299
 8005264:	08005299 	.word	0x08005299
 8005268:	08005299 	.word	0x08005299
 800526c:	08005287 	.word	0x08005287
 8005270:	08005299 	.word	0x08005299
 8005274:	08005299 	.word	0x08005299
 8005278:	08005299 	.word	0x08005299
 800527c:	08005293 	.word	0x08005293
 8005280:	2300      	movs	r3, #0
 8005282:	76fb      	strb	r3, [r7, #27]
 8005284:	e0ae      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005286:	2302      	movs	r3, #2
 8005288:	76fb      	strb	r3, [r7, #27]
 800528a:	e0ab      	b.n	80053e4 <UART_SetConfig+0x2a8>
 800528c:	2304      	movs	r3, #4
 800528e:	76fb      	strb	r3, [r7, #27]
 8005290:	e0a8      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005292:	2308      	movs	r3, #8
 8005294:	76fb      	strb	r3, [r7, #27]
 8005296:	e0a5      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005298:	2310      	movs	r3, #16
 800529a:	76fb      	strb	r3, [r7, #27]
 800529c:	bf00      	nop
 800529e:	e0a1      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a69      	ldr	r2, [pc, #420]	; (800544c <UART_SetConfig+0x310>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d120      	bne.n	80052ec <UART_SetConfig+0x1b0>
 80052aa:	4b66      	ldr	r3, [pc, #408]	; (8005444 <UART_SetConfig+0x308>)
 80052ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d00f      	beq.n	80052d8 <UART_SetConfig+0x19c>
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d802      	bhi.n	80052c2 <UART_SetConfig+0x186>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <UART_SetConfig+0x190>
 80052c0:	e010      	b.n	80052e4 <UART_SetConfig+0x1a8>
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d005      	beq.n	80052d2 <UART_SetConfig+0x196>
 80052c6:	2b30      	cmp	r3, #48	; 0x30
 80052c8:	d009      	beq.n	80052de <UART_SetConfig+0x1a2>
 80052ca:	e00b      	b.n	80052e4 <UART_SetConfig+0x1a8>
 80052cc:	2300      	movs	r3, #0
 80052ce:	76fb      	strb	r3, [r7, #27]
 80052d0:	e088      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80052d2:	2302      	movs	r3, #2
 80052d4:	76fb      	strb	r3, [r7, #27]
 80052d6:	e085      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80052d8:	2304      	movs	r3, #4
 80052da:	76fb      	strb	r3, [r7, #27]
 80052dc:	e082      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80052de:	2308      	movs	r3, #8
 80052e0:	76fb      	strb	r3, [r7, #27]
 80052e2:	e07f      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80052e4:	2310      	movs	r3, #16
 80052e6:	76fb      	strb	r3, [r7, #27]
 80052e8:	bf00      	nop
 80052ea:	e07b      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a57      	ldr	r2, [pc, #348]	; (8005450 <UART_SetConfig+0x314>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d120      	bne.n	8005338 <UART_SetConfig+0x1fc>
 80052f6:	4b53      	ldr	r3, [pc, #332]	; (8005444 <UART_SetConfig+0x308>)
 80052f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005300:	2b40      	cmp	r3, #64	; 0x40
 8005302:	d00f      	beq.n	8005324 <UART_SetConfig+0x1e8>
 8005304:	2b40      	cmp	r3, #64	; 0x40
 8005306:	d802      	bhi.n	800530e <UART_SetConfig+0x1d2>
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <UART_SetConfig+0x1dc>
 800530c:	e010      	b.n	8005330 <UART_SetConfig+0x1f4>
 800530e:	2b80      	cmp	r3, #128	; 0x80
 8005310:	d005      	beq.n	800531e <UART_SetConfig+0x1e2>
 8005312:	2bc0      	cmp	r3, #192	; 0xc0
 8005314:	d009      	beq.n	800532a <UART_SetConfig+0x1ee>
 8005316:	e00b      	b.n	8005330 <UART_SetConfig+0x1f4>
 8005318:	2300      	movs	r3, #0
 800531a:	76fb      	strb	r3, [r7, #27]
 800531c:	e062      	b.n	80053e4 <UART_SetConfig+0x2a8>
 800531e:	2302      	movs	r3, #2
 8005320:	76fb      	strb	r3, [r7, #27]
 8005322:	e05f      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005324:	2304      	movs	r3, #4
 8005326:	76fb      	strb	r3, [r7, #27]
 8005328:	e05c      	b.n	80053e4 <UART_SetConfig+0x2a8>
 800532a:	2308      	movs	r3, #8
 800532c:	76fb      	strb	r3, [r7, #27]
 800532e:	e059      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005330:	2310      	movs	r3, #16
 8005332:	76fb      	strb	r3, [r7, #27]
 8005334:	bf00      	nop
 8005336:	e055      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a45      	ldr	r2, [pc, #276]	; (8005454 <UART_SetConfig+0x318>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d124      	bne.n	800538c <UART_SetConfig+0x250>
 8005342:	4b40      	ldr	r3, [pc, #256]	; (8005444 <UART_SetConfig+0x308>)
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005350:	d012      	beq.n	8005378 <UART_SetConfig+0x23c>
 8005352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005356:	d802      	bhi.n	800535e <UART_SetConfig+0x222>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <UART_SetConfig+0x230>
 800535c:	e012      	b.n	8005384 <UART_SetConfig+0x248>
 800535e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005362:	d006      	beq.n	8005372 <UART_SetConfig+0x236>
 8005364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005368:	d009      	beq.n	800537e <UART_SetConfig+0x242>
 800536a:	e00b      	b.n	8005384 <UART_SetConfig+0x248>
 800536c:	2300      	movs	r3, #0
 800536e:	76fb      	strb	r3, [r7, #27]
 8005370:	e038      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005372:	2302      	movs	r3, #2
 8005374:	76fb      	strb	r3, [r7, #27]
 8005376:	e035      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005378:	2304      	movs	r3, #4
 800537a:	76fb      	strb	r3, [r7, #27]
 800537c:	e032      	b.n	80053e4 <UART_SetConfig+0x2a8>
 800537e:	2308      	movs	r3, #8
 8005380:	76fb      	strb	r3, [r7, #27]
 8005382:	e02f      	b.n	80053e4 <UART_SetConfig+0x2a8>
 8005384:	2310      	movs	r3, #16
 8005386:	76fb      	strb	r3, [r7, #27]
 8005388:	bf00      	nop
 800538a:	e02b      	b.n	80053e4 <UART_SetConfig+0x2a8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2a      	ldr	r2, [pc, #168]	; (800543c <UART_SetConfig+0x300>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d124      	bne.n	80053e0 <UART_SetConfig+0x2a4>
 8005396:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <UART_SetConfig+0x308>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a4:	d012      	beq.n	80053cc <UART_SetConfig+0x290>
 80053a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053aa:	d802      	bhi.n	80053b2 <UART_SetConfig+0x276>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <UART_SetConfig+0x284>
 80053b0:	e012      	b.n	80053d8 <UART_SetConfig+0x29c>
 80053b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b6:	d006      	beq.n	80053c6 <UART_SetConfig+0x28a>
 80053b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053bc:	d009      	beq.n	80053d2 <UART_SetConfig+0x296>
 80053be:	e00b      	b.n	80053d8 <UART_SetConfig+0x29c>
 80053c0:	2300      	movs	r3, #0
 80053c2:	76fb      	strb	r3, [r7, #27]
 80053c4:	e00e      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80053c6:	2302      	movs	r3, #2
 80053c8:	76fb      	strb	r3, [r7, #27]
 80053ca:	e00b      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80053cc:	2304      	movs	r3, #4
 80053ce:	76fb      	strb	r3, [r7, #27]
 80053d0:	e008      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80053d2:	2308      	movs	r3, #8
 80053d4:	76fb      	strb	r3, [r7, #27]
 80053d6:	e005      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80053d8:	2310      	movs	r3, #16
 80053da:	76fb      	strb	r3, [r7, #27]
 80053dc:	bf00      	nop
 80053de:	e001      	b.n	80053e4 <UART_SetConfig+0x2a8>
 80053e0:	2310      	movs	r3, #16
 80053e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a14      	ldr	r2, [pc, #80]	; (800543c <UART_SetConfig+0x300>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	f040 80a1 	bne.w	8005532 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80053f0:	7efb      	ldrb	r3, [r7, #27]
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d836      	bhi.n	8005464 <UART_SetConfig+0x328>
 80053f6:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <UART_SetConfig+0x2c0>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005465 	.word	0x08005465
 8005404:	08005429 	.word	0x08005429
 8005408:	08005465 	.word	0x08005465
 800540c:	0800542f 	.word	0x0800542f
 8005410:	08005465 	.word	0x08005465
 8005414:	08005465 	.word	0x08005465
 8005418:	08005465 	.word	0x08005465
 800541c:	0800545d 	.word	0x0800545d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005420:	f7fe ffae 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8005424:	6178      	str	r0, [r7, #20]
        break;
 8005426:	e022      	b.n	800546e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <UART_SetConfig+0x31c>)
 800542a:	617b      	str	r3, [r7, #20]
        break;
 800542c:	e01f      	b.n	800546e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800542e:	f7fe ff11 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8005432:	6178      	str	r0, [r7, #20]
        break;
 8005434:	e01b      	b.n	800546e <UART_SetConfig+0x332>
 8005436:	bf00      	nop
 8005438:	cfff69f3 	.word	0xcfff69f3
 800543c:	40008000 	.word	0x40008000
 8005440:	40013800 	.word	0x40013800
 8005444:	40021000 	.word	0x40021000
 8005448:	40004400 	.word	0x40004400
 800544c:	40004800 	.word	0x40004800
 8005450:	40004c00 	.word	0x40004c00
 8005454:	40005000 	.word	0x40005000
 8005458:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800545c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005460:	617b      	str	r3, [r7, #20]
        break;
 8005462:	e004      	b.n	800546e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	76bb      	strb	r3, [r7, #26]
        break;
 800546c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 811d 	beq.w	80056b0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	4a97      	ldr	r2, [pc, #604]	; (80056d8 <UART_SetConfig+0x59c>)
 800547c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005480:	461a      	mov	r2, r3
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	fbb3 f3f2 	udiv	r3, r3, r2
 8005488:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4413      	add	r3, r2
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	429a      	cmp	r2, r3
 8005498:	d305      	bcc.n	80054a6 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d902      	bls.n	80054ac <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	76bb      	strb	r3, [r7, #26]
 80054aa:	e101      	b.n	80056b0 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f04f 0100 	mov.w	r1, #0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	4a87      	ldr	r2, [pc, #540]	; (80056d8 <UART_SetConfig+0x59c>)
 80054ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f04f 0400 	mov.w	r4, #0
 80054c4:	461a      	mov	r2, r3
 80054c6:	4623      	mov	r3, r4
 80054c8:	f7fb fb86 	bl	8000bd8 <__aeabi_uldivmod>
 80054cc:	4603      	mov	r3, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	4619      	mov	r1, r3
 80054d2:	4622      	mov	r2, r4
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	f04f 0400 	mov.w	r4, #0
 80054dc:	0214      	lsls	r4, r2, #8
 80054de:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80054e2:	020b      	lsls	r3, r1, #8
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6852      	ldr	r2, [r2, #4]
 80054e8:	0852      	lsrs	r2, r2, #1
 80054ea:	4611      	mov	r1, r2
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	eb13 0b01 	adds.w	fp, r3, r1
 80054f4:	eb44 0c02 	adc.w	ip, r4, r2
 80054f8:	4658      	mov	r0, fp
 80054fa:	4661      	mov	r1, ip
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	461a      	mov	r2, r3
 8005506:	4623      	mov	r3, r4
 8005508:	f7fb fb66 	bl	8000bd8 <__aeabi_uldivmod>
 800550c:	4603      	mov	r3, r0
 800550e:	460c      	mov	r4, r1
 8005510:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005518:	d308      	bcc.n	800552c <UART_SetConfig+0x3f0>
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005520:	d204      	bcs.n	800552c <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	e0c1      	b.n	80056b0 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	76bb      	strb	r3, [r7, #26]
 8005530:	e0be      	b.n	80056b0 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553a:	d164      	bne.n	8005606 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 800553c:	7efb      	ldrb	r3, [r7, #27]
 800553e:	2b08      	cmp	r3, #8
 8005540:	d827      	bhi.n	8005592 <UART_SetConfig+0x456>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <UART_SetConfig+0x40c>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	0800556d 	.word	0x0800556d
 800554c:	08005575 	.word	0x08005575
 8005550:	0800557d 	.word	0x0800557d
 8005554:	08005593 	.word	0x08005593
 8005558:	08005583 	.word	0x08005583
 800555c:	08005593 	.word	0x08005593
 8005560:	08005593 	.word	0x08005593
 8005564:	08005593 	.word	0x08005593
 8005568:	0800558b 	.word	0x0800558b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800556c:	f7fe ff08 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 8005570:	6178      	str	r0, [r7, #20]
        break;
 8005572:	e013      	b.n	800559c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005574:	f7fe ff1a 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 8005578:	6178      	str	r0, [r7, #20]
        break;
 800557a:	e00f      	b.n	800559c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800557c:	4b57      	ldr	r3, [pc, #348]	; (80056dc <UART_SetConfig+0x5a0>)
 800557e:	617b      	str	r3, [r7, #20]
        break;
 8005580:	e00c      	b.n	800559c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005582:	f7fe fe67 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8005586:	6178      	str	r0, [r7, #20]
        break;
 8005588:	e008      	b.n	800559c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800558a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800558e:	617b      	str	r3, [r7, #20]
        break;
 8005590:	e004      	b.n	800559c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	76bb      	strb	r3, [r7, #26]
        break;
 800559a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8086 	beq.w	80056b0 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	4a4b      	ldr	r2, [pc, #300]	; (80056d8 <UART_SetConfig+0x59c>)
 80055aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ae:	461a      	mov	r2, r3
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b6:	005a      	lsls	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	441a      	add	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	2b0f      	cmp	r3, #15
 80055d0:	d916      	bls.n	8005600 <UART_SetConfig+0x4c4>
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d8:	d212      	bcs.n	8005600 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f023 030f 	bic.w	r3, r3, #15
 80055e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	89fb      	ldrh	r3, [r7, #14]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	89fa      	ldrh	r2, [r7, #14]
 80055fc:	60da      	str	r2, [r3, #12]
 80055fe:	e057      	b.n	80056b0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	76bb      	strb	r3, [r7, #26]
 8005604:	e054      	b.n	80056b0 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005606:	7efb      	ldrb	r3, [r7, #27]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d828      	bhi.n	800565e <UART_SetConfig+0x522>
 800560c:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <UART_SetConfig+0x4d8>)
 800560e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005612:	bf00      	nop
 8005614:	08005639 	.word	0x08005639
 8005618:	08005641 	.word	0x08005641
 800561c:	08005649 	.word	0x08005649
 8005620:	0800565f 	.word	0x0800565f
 8005624:	0800564f 	.word	0x0800564f
 8005628:	0800565f 	.word	0x0800565f
 800562c:	0800565f 	.word	0x0800565f
 8005630:	0800565f 	.word	0x0800565f
 8005634:	08005657 	.word	0x08005657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fe fea2 	bl	8004380 <HAL_RCC_GetPCLK1Freq>
 800563c:	6178      	str	r0, [r7, #20]
        break;
 800563e:	e013      	b.n	8005668 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005640:	f7fe feb4 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 8005644:	6178      	str	r0, [r7, #20]
        break;
 8005646:	e00f      	b.n	8005668 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005648:	4b24      	ldr	r3, [pc, #144]	; (80056dc <UART_SetConfig+0x5a0>)
 800564a:	617b      	str	r3, [r7, #20]
        break;
 800564c:	e00c      	b.n	8005668 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564e:	f7fe fe01 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8005652:	6178      	str	r0, [r7, #20]
        break;
 8005654:	e008      	b.n	8005668 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800565a:	617b      	str	r3, [r7, #20]
        break;
 800565c:	e004      	b.n	8005668 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	76bb      	strb	r3, [r7, #26]
        break;
 8005666:	bf00      	nop
    }

    if (pclk != 0U)
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d020      	beq.n	80056b0 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	4a19      	ldr	r2, [pc, #100]	; (80056d8 <UART_SetConfig+0x59c>)
 8005674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005678:	461a      	mov	r2, r3
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	441a      	add	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	b29b      	uxth	r3, r3
 8005692:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b0f      	cmp	r3, #15
 8005698:	d908      	bls.n	80056ac <UART_SetConfig+0x570>
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a0:	d204      	bcs.n	80056ac <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	e001      	b.n	80056b0 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80056cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80056d8:	08008a3c 	.word	0x08008a3c
 80056dc:	00f42400 	.word	0x00f42400

080056e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01a      	beq.n	80057f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057de:	d10a      	bne.n	80057f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	430a      	orrs	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
  }
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af02      	add	r7, sp, #8
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005834:	f7fc ff38 	bl	80026a8 <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b08      	cmp	r3, #8
 8005846:	d10e      	bne.n	8005866 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f82c 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e022      	b.n	80058ac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b04      	cmp	r3, #4
 8005872:	d10e      	bne.n	8005892 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f816 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e00c      	b.n	80058ac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c4:	e062      	b.n	800598c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d05e      	beq.n	800598c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fc feeb 	bl	80026a8 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11d      	bne.n	8005920 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058f2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e045      	b.n	80059ac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d02e      	beq.n	800598c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005938:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800593c:	d126      	bne.n	800598c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005946:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005956:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689a      	ldr	r2, [r3, #8]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0201 	bic.w	r2, r2, #1
 8005966:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e00f      	b.n	80059ac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d08d      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_UARTEx_DisableFifoMode+0x16>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e027      	b.n	8005a1a <HAL_UARTEx_DisableFifoMode+0x66>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2224      	movs	r2, #36	; 0x24
 80059d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0201 	bic.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80059f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b084      	sub	sp, #16
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d101      	bne.n	8005a3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	e02d      	b.n	8005a9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2224      	movs	r2, #36	; 0x24
 8005a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0201 	bic.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f850 	bl	8005b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e02d      	b.n	8005b16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2224      	movs	r2, #36	; 0x24
 8005ac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f812 	bl	8005b20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b089      	sub	sp, #36	; 0x24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005b28:	4a2f      	ldr	r2, [pc, #188]	; (8005be8 <UARTEx_SetNbDataToProcess+0xc8>)
 8005b2a:	f107 0314 	add.w	r3, r7, #20
 8005b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b32:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005b36:	4a2d      	ldr	r2, [pc, #180]	; (8005bec <UARTEx_SetNbDataToProcess+0xcc>)
 8005b38:	f107 030c 	add.w	r3, r7, #12
 8005b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b40:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d108      	bne.n	8005b5e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b5c:	e03d      	b.n	8005bda <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b5e:	2308      	movs	r3, #8
 8005b60:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b62:	2308      	movs	r3, #8
 8005b64:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	0e5b      	lsrs	r3, r3, #25
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 0307 	and.w	r3, r3, #7
 8005b74:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	0f5b      	lsrs	r3, r3, #29
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005b86:	7fbb      	ldrb	r3, [r7, #30]
 8005b88:	7f3a      	ldrb	r2, [r7, #28]
 8005b8a:	f107 0120 	add.w	r1, r7, #32
 8005b8e:	440a      	add	r2, r1
 8005b90:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	7f3a      	ldrb	r2, [r7, #28]
 8005b9a:	f107 0120 	add.w	r1, r7, #32
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005bb0:	7ffb      	ldrb	r3, [r7, #31]
 8005bb2:	7f7a      	ldrb	r2, [r7, #29]
 8005bb4:	f107 0120 	add.w	r1, r7, #32
 8005bb8:	440a      	add	r2, r1
 8005bba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005bbe:	fb02 f303 	mul.w	r3, r2, r3
 8005bc2:	7f7a      	ldrb	r2, [r7, #29]
 8005bc4:	f107 0120 	add.w	r1, r7, #32
 8005bc8:	440a      	add	r2, r1
 8005bca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005bce:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005bda:	bf00      	nop
 8005bdc:	3724      	adds	r7, #36	; 0x24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	080089e4 	.word	0x080089e4
 8005bec:	080089ec 	.word	0x080089ec

08005bf0 <__errno>:
 8005bf0:	4b01      	ldr	r3, [pc, #4]	; (8005bf8 <__errno+0x8>)
 8005bf2:	6818      	ldr	r0, [r3, #0]
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	2000000c 	.word	0x2000000c

08005bfc <_fopen_r>:
 8005bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bfe:	460f      	mov	r7, r1
 8005c00:	4611      	mov	r1, r2
 8005c02:	aa01      	add	r2, sp, #4
 8005c04:	4605      	mov	r5, r0
 8005c06:	f002 f8df 	bl	8007dc8 <__sflags>
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	b918      	cbnz	r0, 8005c16 <_fopen_r+0x1a>
 8005c0e:	2400      	movs	r4, #0
 8005c10:	4620      	mov	r0, r4
 8005c12:	b003      	add	sp, #12
 8005c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c16:	4628      	mov	r0, r5
 8005c18:	f002 f898 	bl	8007d4c <__sfp>
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d0f5      	beq.n	8005c0e <_fopen_r+0x12>
 8005c22:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8005c26:	9a01      	ldr	r2, [sp, #4]
 8005c28:	4639      	mov	r1, r7
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f000 febe 	bl	80069ac <_open_r>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	da06      	bge.n	8005c42 <_fopen_r+0x46>
 8005c34:	2500      	movs	r5, #0
 8005c36:	f002 f8c5 	bl	8007dc4 <__sfp_lock_acquire>
 8005c3a:	81a5      	strh	r5, [r4, #12]
 8005c3c:	f002 f8c3 	bl	8007dc6 <__sfp_lock_release>
 8005c40:	e7e5      	b.n	8005c0e <_fopen_r+0x12>
 8005c42:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <_fopen_r+0x70>)
 8005c44:	6263      	str	r3, [r4, #36]	; 0x24
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <_fopen_r+0x74>)
 8005c48:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c4a:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <_fopen_r+0x78>)
 8005c4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c4e:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <_fopen_r+0x7c>)
 8005c50:	6323      	str	r3, [r4, #48]	; 0x30
 8005c52:	05f3      	lsls	r3, r6, #23
 8005c54:	81e0      	strh	r0, [r4, #14]
 8005c56:	81a6      	strh	r6, [r4, #12]
 8005c58:	6224      	str	r4, [r4, #32]
 8005c5a:	d5d9      	bpl.n	8005c10 <_fopen_r+0x14>
 8005c5c:	2302      	movs	r3, #2
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4621      	mov	r1, r4
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 f870 	bl	8005d48 <_fseek_r>
 8005c68:	e7d2      	b.n	8005c10 <_fopen_r+0x14>
 8005c6a:	bf00      	nop
 8005c6c:	08006c15 	.word	0x08006c15
 8005c70:	08006c37 	.word	0x08006c37
 8005c74:	08006c6f 	.word	0x08006c6f
 8005c78:	08006c93 	.word	0x08006c93

08005c7c <fopen>:
 8005c7c:	4b02      	ldr	r3, [pc, #8]	; (8005c88 <fopen+0xc>)
 8005c7e:	460a      	mov	r2, r1
 8005c80:	4601      	mov	r1, r0
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	f7ff bfba 	b.w	8005bfc <_fopen_r>
 8005c88:	2000000c 	.word	0x2000000c

08005c8c <_fread_r>:
 8005c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c90:	4615      	mov	r5, r2
 8005c92:	435d      	muls	r5, r3
 8005c94:	4607      	mov	r7, r0
 8005c96:	4689      	mov	r9, r1
 8005c98:	4693      	mov	fp, r2
 8005c9a:	469a      	mov	sl, r3
 8005c9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c9e:	d03b      	beq.n	8005d18 <_fread_r+0x8c>
 8005ca0:	b118      	cbz	r0, 8005caa <_fread_r+0x1e>
 8005ca2:	6983      	ldr	r3, [r0, #24]
 8005ca4:	b90b      	cbnz	r3, 8005caa <_fread_r+0x1e>
 8005ca6:	f002 f821 	bl	8007cec <__sinit>
 8005caa:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <_fread_r+0x94>)
 8005cac:	429c      	cmp	r4, r3
 8005cae:	d116      	bne.n	8005cde <_fread_r+0x52>
 8005cb0:	687c      	ldr	r4, [r7, #4]
 8005cb2:	6863      	ldr	r3, [r4, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	da01      	bge.n	8005cbc <_fread_r+0x30>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	6063      	str	r3, [r4, #4]
 8005cbc:	462e      	mov	r6, r5
 8005cbe:	e9d4 1800 	ldrd	r1, r8, [r4]
 8005cc2:	45b0      	cmp	r8, r6
 8005cc4:	d315      	bcc.n	8005cf2 <_fread_r+0x66>
 8005cc6:	4632      	mov	r2, r6
 8005cc8:	4648      	mov	r0, r9
 8005cca:	f000 f957 	bl	8005f7c <memcpy>
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	6825      	ldr	r5, [r4, #0]
 8005cd2:	1b9b      	subs	r3, r3, r6
 8005cd4:	4435      	add	r5, r6
 8005cd6:	6025      	str	r5, [r4, #0]
 8005cd8:	6063      	str	r3, [r4, #4]
 8005cda:	4655      	mov	r5, sl
 8005cdc:	e01c      	b.n	8005d18 <_fread_r+0x8c>
 8005cde:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <_fread_r+0x98>)
 8005ce0:	429c      	cmp	r4, r3
 8005ce2:	d101      	bne.n	8005ce8 <_fread_r+0x5c>
 8005ce4:	68bc      	ldr	r4, [r7, #8]
 8005ce6:	e7e4      	b.n	8005cb2 <_fread_r+0x26>
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <_fread_r+0x9c>)
 8005cea:	429c      	cmp	r4, r3
 8005cec:	bf08      	it	eq
 8005cee:	68fc      	ldreq	r4, [r7, #12]
 8005cf0:	e7df      	b.n	8005cb2 <_fread_r+0x26>
 8005cf2:	4648      	mov	r0, r9
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	f000 f941 	bl	8005f7c <memcpy>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	4443      	add	r3, r8
 8005cfe:	6023      	str	r3, [r4, #0]
 8005d00:	4621      	mov	r1, r4
 8005d02:	4638      	mov	r0, r7
 8005d04:	44c1      	add	r9, r8
 8005d06:	eba6 0608 	sub.w	r6, r6, r8
 8005d0a:	f000 fee7 	bl	8006adc <__srefill_r>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d0d5      	beq.n	8005cbe <_fread_r+0x32>
 8005d12:	1bad      	subs	r5, r5, r6
 8005d14:	fbb5 f5fb 	udiv	r5, r5, fp
 8005d18:	4628      	mov	r0, r5
 8005d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1e:	bf00      	nop
 8005d20:	08008abc 	.word	0x08008abc
 8005d24:	08008adc 	.word	0x08008adc
 8005d28:	08008a9c 	.word	0x08008a9c

08005d2c <fread>:
 8005d2c:	b507      	push	{r0, r1, r2, lr}
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	4613      	mov	r3, r2
 8005d32:	460a      	mov	r2, r1
 8005d34:	4601      	mov	r1, r0
 8005d36:	4803      	ldr	r0, [pc, #12]	; (8005d44 <fread+0x18>)
 8005d38:	6800      	ldr	r0, [r0, #0]
 8005d3a:	f7ff ffa7 	bl	8005c8c <_fread_r>
 8005d3e:	b003      	add	sp, #12
 8005d40:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d44:	2000000c 	.word	0x2000000c

08005d48 <_fseek_r>:
 8005d48:	f000 b800 	b.w	8005d4c <_fseeko_r>

08005d4c <_fseeko_r>:
 8005d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d50:	460c      	mov	r4, r1
 8005d52:	4691      	mov	r9, r2
 8005d54:	461e      	mov	r6, r3
 8005d56:	4605      	mov	r5, r0
 8005d58:	b118      	cbz	r0, 8005d62 <_fseeko_r+0x16>
 8005d5a:	6983      	ldr	r3, [r0, #24]
 8005d5c:	b90b      	cbnz	r3, 8005d62 <_fseeko_r+0x16>
 8005d5e:	f001 ffc5 	bl	8007cec <__sinit>
 8005d62:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <_fseeko_r+0x114>)
 8005d64:	429c      	cmp	r4, r3
 8005d66:	d112      	bne.n	8005d8e <_fseeko_r+0x42>
 8005d68:	686c      	ldr	r4, [r5, #4]
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8005d70:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8005d74:	d103      	bne.n	8005d7e <_fseeko_r+0x32>
 8005d76:	4621      	mov	r1, r4
 8005d78:	4628      	mov	r0, r5
 8005d7a:	f001 ff3b 	bl	8007bf4 <_fflush_r>
 8005d7e:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8005d82:	f1b8 0f00 	cmp.w	r8, #0
 8005d86:	d10c      	bne.n	8005da2 <_fseeko_r+0x56>
 8005d88:	231d      	movs	r3, #29
 8005d8a:	602b      	str	r3, [r5, #0]
 8005d8c:	e057      	b.n	8005e3e <_fseeko_r+0xf2>
 8005d8e:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <_fseeko_r+0x118>)
 8005d90:	429c      	cmp	r4, r3
 8005d92:	d101      	bne.n	8005d98 <_fseeko_r+0x4c>
 8005d94:	68ac      	ldr	r4, [r5, #8]
 8005d96:	e7e8      	b.n	8005d6a <_fseeko_r+0x1e>
 8005d98:	4b33      	ldr	r3, [pc, #204]	; (8005e68 <_fseeko_r+0x11c>)
 8005d9a:	429c      	cmp	r4, r3
 8005d9c:	bf08      	it	eq
 8005d9e:	68ec      	ldreq	r4, [r5, #12]
 8005da0:	e7e3      	b.n	8005d6a <_fseeko_r+0x1e>
 8005da2:	2e01      	cmp	r6, #1
 8005da4:	d030      	beq.n	8005e08 <_fseeko_r+0xbc>
 8005da6:	2e02      	cmp	r6, #2
 8005da8:	d001      	beq.n	8005dae <_fseeko_r+0x62>
 8005daa:	2e00      	cmp	r6, #0
 8005dac:	d155      	bne.n	8005e5a <_fseeko_r+0x10e>
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	b91b      	cbnz	r3, 8005dba <_fseeko_r+0x6e>
 8005db2:	4621      	mov	r1, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 f8a1 	bl	8005efc <__smakebuf_r>
 8005dba:	4621      	mov	r1, r4
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f001 ff19 	bl	8007bf4 <_fflush_r>
 8005dc2:	4607      	mov	r7, r0
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d13a      	bne.n	8005e3e <_fseeko_r+0xf2>
 8005dc8:	4633      	mov	r3, r6
 8005dca:	464a      	mov	r2, r9
 8005dcc:	6a21      	ldr	r1, [r4, #32]
 8005dce:	4628      	mov	r0, r5
 8005dd0:	47c0      	blx	r8
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d033      	beq.n	8005e3e <_fseeko_r+0xf2>
 8005dd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dd8:	b141      	cbz	r1, 8005dec <_fseeko_r+0xa0>
 8005dda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dde:	4299      	cmp	r1, r3
 8005de0:	d002      	beq.n	8005de8 <_fseeko_r+0x9c>
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f8de 	bl	8005fa4 <_free_r>
 8005de8:	2300      	movs	r3, #0
 8005dea:	6363      	str	r3, [r4, #52]	; 0x34
 8005dec:	6923      	ldr	r3, [r4, #16]
 8005dee:	6023      	str	r3, [r4, #0]
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	2100      	movs	r1, #0
 8005df4:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8005df8:	6061      	str	r1, [r4, #4]
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e02:	f000 f8c6 	bl	8005f92 <memset>
 8005e06:	e01c      	b.n	8005e42 <_fseeko_r+0xf6>
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	f001 fef2 	bl	8007bf4 <_fflush_r>
 8005e10:	89a2      	ldrh	r2, [r4, #12]
 8005e12:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e16:	d00c      	beq.n	8005e32 <_fseeko_r+0xe6>
 8005e18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	075a      	lsls	r2, r3, #29
 8005e1e:	d513      	bpl.n	8005e48 <_fseeko_r+0xfc>
 8005e20:	6863      	ldr	r3, [r4, #4]
 8005e22:	1ac0      	subs	r0, r0, r3
 8005e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e26:	b10b      	cbz	r3, 8005e2c <_fseeko_r+0xe0>
 8005e28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e2a:	1ac0      	subs	r0, r0, r3
 8005e2c:	4481      	add	r9, r0
 8005e2e:	2600      	movs	r6, #0
 8005e30:	e7bd      	b.n	8005dae <_fseeko_r+0x62>
 8005e32:	6a21      	ldr	r1, [r4, #32]
 8005e34:	4633      	mov	r3, r6
 8005e36:	4628      	mov	r0, r5
 8005e38:	47c0      	blx	r8
 8005e3a:	1c41      	adds	r1, r0, #1
 8005e3c:	d1ed      	bne.n	8005e1a <_fseeko_r+0xce>
 8005e3e:	f04f 37ff 	mov.w	r7, #4294967295
 8005e42:	4638      	mov	r0, r7
 8005e44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e48:	071b      	lsls	r3, r3, #28
 8005e4a:	d5ef      	bpl.n	8005e2c <_fseeko_r+0xe0>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	6922      	ldr	r2, [r4, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0eb      	beq.n	8005e2c <_fseeko_r+0xe0>
 8005e54:	1a9b      	subs	r3, r3, r2
 8005e56:	4418      	add	r0, r3
 8005e58:	e7e8      	b.n	8005e2c <_fseeko_r+0xe0>
 8005e5a:	2316      	movs	r3, #22
 8005e5c:	e795      	b.n	8005d8a <_fseeko_r+0x3e>
 8005e5e:	bf00      	nop
 8005e60:	08008abc 	.word	0x08008abc
 8005e64:	08008adc 	.word	0x08008adc
 8005e68:	08008a9c 	.word	0x08008a9c

08005e6c <__libc_init_array>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4e0d      	ldr	r6, [pc, #52]	; (8005ea4 <__libc_init_array+0x38>)
 8005e70:	4c0d      	ldr	r4, [pc, #52]	; (8005ea8 <__libc_init_array+0x3c>)
 8005e72:	1ba4      	subs	r4, r4, r6
 8005e74:	10a4      	asrs	r4, r4, #2
 8005e76:	2500      	movs	r5, #0
 8005e78:	42a5      	cmp	r5, r4
 8005e7a:	d109      	bne.n	8005e90 <__libc_init_array+0x24>
 8005e7c:	4e0b      	ldr	r6, [pc, #44]	; (8005eac <__libc_init_array+0x40>)
 8005e7e:	4c0c      	ldr	r4, [pc, #48]	; (8005eb0 <__libc_init_array+0x44>)
 8005e80:	f002 fcba 	bl	80087f8 <_init>
 8005e84:	1ba4      	subs	r4, r4, r6
 8005e86:	10a4      	asrs	r4, r4, #2
 8005e88:	2500      	movs	r5, #0
 8005e8a:	42a5      	cmp	r5, r4
 8005e8c:	d105      	bne.n	8005e9a <__libc_init_array+0x2e>
 8005e8e:	bd70      	pop	{r4, r5, r6, pc}
 8005e90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e94:	4798      	blx	r3
 8005e96:	3501      	adds	r5, #1
 8005e98:	e7ee      	b.n	8005e78 <__libc_init_array+0xc>
 8005e9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e9e:	4798      	blx	r3
 8005ea0:	3501      	adds	r5, #1
 8005ea2:	e7f2      	b.n	8005e8a <__libc_init_array+0x1e>
 8005ea4:	08008d20 	.word	0x08008d20
 8005ea8:	08008d20 	.word	0x08008d20
 8005eac:	08008d20 	.word	0x08008d20
 8005eb0:	08008d24 	.word	0x08008d24

08005eb4 <__swhatbuf_r>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	460e      	mov	r6, r1
 8005eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	b096      	sub	sp, #88	; 0x58
 8005ec0:	4614      	mov	r4, r2
 8005ec2:	461d      	mov	r5, r3
 8005ec4:	da07      	bge.n	8005ed6 <__swhatbuf_r+0x22>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	602b      	str	r3, [r5, #0]
 8005eca:	89b3      	ldrh	r3, [r6, #12]
 8005ecc:	061a      	lsls	r2, r3, #24
 8005ece:	d410      	bmi.n	8005ef2 <__swhatbuf_r+0x3e>
 8005ed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ed4:	e00e      	b.n	8005ef4 <__swhatbuf_r+0x40>
 8005ed6:	466a      	mov	r2, sp
 8005ed8:	f001 ffac 	bl	8007e34 <_fstat_r>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	dbf2      	blt.n	8005ec6 <__swhatbuf_r+0x12>
 8005ee0:	9a01      	ldr	r2, [sp, #4]
 8005ee2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ee6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005eea:	425a      	negs	r2, r3
 8005eec:	415a      	adcs	r2, r3
 8005eee:	602a      	str	r2, [r5, #0]
 8005ef0:	e7ee      	b.n	8005ed0 <__swhatbuf_r+0x1c>
 8005ef2:	2340      	movs	r3, #64	; 0x40
 8005ef4:	2000      	movs	r0, #0
 8005ef6:	6023      	str	r3, [r4, #0]
 8005ef8:	b016      	add	sp, #88	; 0x58
 8005efa:	bd70      	pop	{r4, r5, r6, pc}

08005efc <__smakebuf_r>:
 8005efc:	898b      	ldrh	r3, [r1, #12]
 8005efe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f00:	079d      	lsls	r5, r3, #30
 8005f02:	4606      	mov	r6, r0
 8005f04:	460c      	mov	r4, r1
 8005f06:	d507      	bpl.n	8005f18 <__smakebuf_r+0x1c>
 8005f08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f0c:	6023      	str	r3, [r4, #0]
 8005f0e:	6123      	str	r3, [r4, #16]
 8005f10:	2301      	movs	r3, #1
 8005f12:	6163      	str	r3, [r4, #20]
 8005f14:	b002      	add	sp, #8
 8005f16:	bd70      	pop	{r4, r5, r6, pc}
 8005f18:	ab01      	add	r3, sp, #4
 8005f1a:	466a      	mov	r2, sp
 8005f1c:	f7ff ffca 	bl	8005eb4 <__swhatbuf_r>
 8005f20:	9900      	ldr	r1, [sp, #0]
 8005f22:	4605      	mov	r5, r0
 8005f24:	4630      	mov	r0, r6
 8005f26:	f000 f88b 	bl	8006040 <_malloc_r>
 8005f2a:	b948      	cbnz	r0, 8005f40 <__smakebuf_r+0x44>
 8005f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f30:	059a      	lsls	r2, r3, #22
 8005f32:	d4ef      	bmi.n	8005f14 <__smakebuf_r+0x18>
 8005f34:	f023 0303 	bic.w	r3, r3, #3
 8005f38:	f043 0302 	orr.w	r3, r3, #2
 8005f3c:	81a3      	strh	r3, [r4, #12]
 8005f3e:	e7e3      	b.n	8005f08 <__smakebuf_r+0xc>
 8005f40:	4b0d      	ldr	r3, [pc, #52]	; (8005f78 <__smakebuf_r+0x7c>)
 8005f42:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	6020      	str	r0, [r4, #0]
 8005f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	9b00      	ldr	r3, [sp, #0]
 8005f50:	6163      	str	r3, [r4, #20]
 8005f52:	9b01      	ldr	r3, [sp, #4]
 8005f54:	6120      	str	r0, [r4, #16]
 8005f56:	b15b      	cbz	r3, 8005f70 <__smakebuf_r+0x74>
 8005f58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f001 ffb5 	bl	8007ecc <_isatty_r>
 8005f62:	b128      	cbz	r0, 8005f70 <__smakebuf_r+0x74>
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	f043 0301 	orr.w	r3, r3, #1
 8005f6e:	81a3      	strh	r3, [r4, #12]
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	431d      	orrs	r5, r3
 8005f74:	81a5      	strh	r5, [r4, #12]
 8005f76:	e7cd      	b.n	8005f14 <__smakebuf_r+0x18>
 8005f78:	08007cb5 	.word	0x08007cb5

08005f7c <memcpy>:
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	1e43      	subs	r3, r0, #1
 8005f80:	440a      	add	r2, r1
 8005f82:	4291      	cmp	r1, r2
 8005f84:	d100      	bne.n	8005f88 <memcpy+0xc>
 8005f86:	bd10      	pop	{r4, pc}
 8005f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f90:	e7f7      	b.n	8005f82 <memcpy+0x6>

08005f92 <memset>:
 8005f92:	4402      	add	r2, r0
 8005f94:	4603      	mov	r3, r0
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d100      	bne.n	8005f9c <memset+0xa>
 8005f9a:	4770      	bx	lr
 8005f9c:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa0:	e7f9      	b.n	8005f96 <memset+0x4>
	...

08005fa4 <_free_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	d045      	beq.n	8006038 <_free_r+0x94>
 8005fac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb0:	1f0c      	subs	r4, r1, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bfb8      	it	lt
 8005fb6:	18e4      	addlt	r4, r4, r3
 8005fb8:	f001 ffc0 	bl	8007f3c <__malloc_lock>
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	; (800603c <_free_r+0x98>)
 8005fbe:	6813      	ldr	r3, [r2, #0]
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	b933      	cbnz	r3, 8005fd2 <_free_r+0x2e>
 8005fc4:	6063      	str	r3, [r4, #4]
 8005fc6:	6014      	str	r4, [r2, #0]
 8005fc8:	4628      	mov	r0, r5
 8005fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fce:	f001 bfb6 	b.w	8007f3e <__malloc_unlock>
 8005fd2:	42a3      	cmp	r3, r4
 8005fd4:	d90c      	bls.n	8005ff0 <_free_r+0x4c>
 8005fd6:	6821      	ldr	r1, [r4, #0]
 8005fd8:	1862      	adds	r2, r4, r1
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	bf04      	itt	eq
 8005fde:	681a      	ldreq	r2, [r3, #0]
 8005fe0:	685b      	ldreq	r3, [r3, #4]
 8005fe2:	6063      	str	r3, [r4, #4]
 8005fe4:	bf04      	itt	eq
 8005fe6:	1852      	addeq	r2, r2, r1
 8005fe8:	6022      	streq	r2, [r4, #0]
 8005fea:	6004      	str	r4, [r0, #0]
 8005fec:	e7ec      	b.n	8005fc8 <_free_r+0x24>
 8005fee:	4613      	mov	r3, r2
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	b10a      	cbz	r2, 8005ff8 <_free_r+0x54>
 8005ff4:	42a2      	cmp	r2, r4
 8005ff6:	d9fa      	bls.n	8005fee <_free_r+0x4a>
 8005ff8:	6819      	ldr	r1, [r3, #0]
 8005ffa:	1858      	adds	r0, r3, r1
 8005ffc:	42a0      	cmp	r0, r4
 8005ffe:	d10b      	bne.n	8006018 <_free_r+0x74>
 8006000:	6820      	ldr	r0, [r4, #0]
 8006002:	4401      	add	r1, r0
 8006004:	1858      	adds	r0, r3, r1
 8006006:	4282      	cmp	r2, r0
 8006008:	6019      	str	r1, [r3, #0]
 800600a:	d1dd      	bne.n	8005fc8 <_free_r+0x24>
 800600c:	6810      	ldr	r0, [r2, #0]
 800600e:	6852      	ldr	r2, [r2, #4]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	4401      	add	r1, r0
 8006014:	6019      	str	r1, [r3, #0]
 8006016:	e7d7      	b.n	8005fc8 <_free_r+0x24>
 8006018:	d902      	bls.n	8006020 <_free_r+0x7c>
 800601a:	230c      	movs	r3, #12
 800601c:	602b      	str	r3, [r5, #0]
 800601e:	e7d3      	b.n	8005fc8 <_free_r+0x24>
 8006020:	6820      	ldr	r0, [r4, #0]
 8006022:	1821      	adds	r1, r4, r0
 8006024:	428a      	cmp	r2, r1
 8006026:	bf04      	itt	eq
 8006028:	6811      	ldreq	r1, [r2, #0]
 800602a:	6852      	ldreq	r2, [r2, #4]
 800602c:	6062      	str	r2, [r4, #4]
 800602e:	bf04      	itt	eq
 8006030:	1809      	addeq	r1, r1, r0
 8006032:	6021      	streq	r1, [r4, #0]
 8006034:	605c      	str	r4, [r3, #4]
 8006036:	e7c7      	b.n	8005fc8 <_free_r+0x24>
 8006038:	bd38      	pop	{r3, r4, r5, pc}
 800603a:	bf00      	nop
 800603c:	200001fc 	.word	0x200001fc

08006040 <_malloc_r>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	1ccd      	adds	r5, r1, #3
 8006044:	f025 0503 	bic.w	r5, r5, #3
 8006048:	3508      	adds	r5, #8
 800604a:	2d0c      	cmp	r5, #12
 800604c:	bf38      	it	cc
 800604e:	250c      	movcc	r5, #12
 8006050:	2d00      	cmp	r5, #0
 8006052:	4606      	mov	r6, r0
 8006054:	db01      	blt.n	800605a <_malloc_r+0x1a>
 8006056:	42a9      	cmp	r1, r5
 8006058:	d903      	bls.n	8006062 <_malloc_r+0x22>
 800605a:	230c      	movs	r3, #12
 800605c:	6033      	str	r3, [r6, #0]
 800605e:	2000      	movs	r0, #0
 8006060:	bd70      	pop	{r4, r5, r6, pc}
 8006062:	f001 ff6b 	bl	8007f3c <__malloc_lock>
 8006066:	4a21      	ldr	r2, [pc, #132]	; (80060ec <_malloc_r+0xac>)
 8006068:	6814      	ldr	r4, [r2, #0]
 800606a:	4621      	mov	r1, r4
 800606c:	b991      	cbnz	r1, 8006094 <_malloc_r+0x54>
 800606e:	4c20      	ldr	r4, [pc, #128]	; (80060f0 <_malloc_r+0xb0>)
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	b91b      	cbnz	r3, 800607c <_malloc_r+0x3c>
 8006074:	4630      	mov	r0, r6
 8006076:	f000 fdbd 	bl	8006bf4 <_sbrk_r>
 800607a:	6020      	str	r0, [r4, #0]
 800607c:	4629      	mov	r1, r5
 800607e:	4630      	mov	r0, r6
 8006080:	f000 fdb8 	bl	8006bf4 <_sbrk_r>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	d124      	bne.n	80060d2 <_malloc_r+0x92>
 8006088:	230c      	movs	r3, #12
 800608a:	6033      	str	r3, [r6, #0]
 800608c:	4630      	mov	r0, r6
 800608e:	f001 ff56 	bl	8007f3e <__malloc_unlock>
 8006092:	e7e4      	b.n	800605e <_malloc_r+0x1e>
 8006094:	680b      	ldr	r3, [r1, #0]
 8006096:	1b5b      	subs	r3, r3, r5
 8006098:	d418      	bmi.n	80060cc <_malloc_r+0x8c>
 800609a:	2b0b      	cmp	r3, #11
 800609c:	d90f      	bls.n	80060be <_malloc_r+0x7e>
 800609e:	600b      	str	r3, [r1, #0]
 80060a0:	50cd      	str	r5, [r1, r3]
 80060a2:	18cc      	adds	r4, r1, r3
 80060a4:	4630      	mov	r0, r6
 80060a6:	f001 ff4a 	bl	8007f3e <__malloc_unlock>
 80060aa:	f104 000b 	add.w	r0, r4, #11
 80060ae:	1d23      	adds	r3, r4, #4
 80060b0:	f020 0007 	bic.w	r0, r0, #7
 80060b4:	1ac3      	subs	r3, r0, r3
 80060b6:	d0d3      	beq.n	8006060 <_malloc_r+0x20>
 80060b8:	425a      	negs	r2, r3
 80060ba:	50e2      	str	r2, [r4, r3]
 80060bc:	e7d0      	b.n	8006060 <_malloc_r+0x20>
 80060be:	428c      	cmp	r4, r1
 80060c0:	684b      	ldr	r3, [r1, #4]
 80060c2:	bf16      	itet	ne
 80060c4:	6063      	strne	r3, [r4, #4]
 80060c6:	6013      	streq	r3, [r2, #0]
 80060c8:	460c      	movne	r4, r1
 80060ca:	e7eb      	b.n	80060a4 <_malloc_r+0x64>
 80060cc:	460c      	mov	r4, r1
 80060ce:	6849      	ldr	r1, [r1, #4]
 80060d0:	e7cc      	b.n	800606c <_malloc_r+0x2c>
 80060d2:	1cc4      	adds	r4, r0, #3
 80060d4:	f024 0403 	bic.w	r4, r4, #3
 80060d8:	42a0      	cmp	r0, r4
 80060da:	d005      	beq.n	80060e8 <_malloc_r+0xa8>
 80060dc:	1a21      	subs	r1, r4, r0
 80060de:	4630      	mov	r0, r6
 80060e0:	f000 fd88 	bl	8006bf4 <_sbrk_r>
 80060e4:	3001      	adds	r0, #1
 80060e6:	d0cf      	beq.n	8006088 <_malloc_r+0x48>
 80060e8:	6025      	str	r5, [r4, #0]
 80060ea:	e7db      	b.n	80060a4 <_malloc_r+0x64>
 80060ec:	200001fc 	.word	0x200001fc
 80060f0:	20000200 	.word	0x20000200

080060f4 <__cvt>:
 80060f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060f8:	ec55 4b10 	vmov	r4, r5, d0
 80060fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80060fe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006102:	2d00      	cmp	r5, #0
 8006104:	460e      	mov	r6, r1
 8006106:	4691      	mov	r9, r2
 8006108:	4619      	mov	r1, r3
 800610a:	bfb8      	it	lt
 800610c:	4622      	movlt	r2, r4
 800610e:	462b      	mov	r3, r5
 8006110:	f027 0720 	bic.w	r7, r7, #32
 8006114:	bfbb      	ittet	lt
 8006116:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800611a:	461d      	movlt	r5, r3
 800611c:	2300      	movge	r3, #0
 800611e:	232d      	movlt	r3, #45	; 0x2d
 8006120:	bfb8      	it	lt
 8006122:	4614      	movlt	r4, r2
 8006124:	2f46      	cmp	r7, #70	; 0x46
 8006126:	700b      	strb	r3, [r1, #0]
 8006128:	d004      	beq.n	8006134 <__cvt+0x40>
 800612a:	2f45      	cmp	r7, #69	; 0x45
 800612c:	d100      	bne.n	8006130 <__cvt+0x3c>
 800612e:	3601      	adds	r6, #1
 8006130:	2102      	movs	r1, #2
 8006132:	e000      	b.n	8006136 <__cvt+0x42>
 8006134:	2103      	movs	r1, #3
 8006136:	ab03      	add	r3, sp, #12
 8006138:	9301      	str	r3, [sp, #4]
 800613a:	ab02      	add	r3, sp, #8
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	4632      	mov	r2, r6
 8006140:	4653      	mov	r3, sl
 8006142:	ec45 4b10 	vmov	d0, r4, r5
 8006146:	f000 ff17 	bl	8006f78 <_dtoa_r>
 800614a:	2f47      	cmp	r7, #71	; 0x47
 800614c:	4680      	mov	r8, r0
 800614e:	d102      	bne.n	8006156 <__cvt+0x62>
 8006150:	f019 0f01 	tst.w	r9, #1
 8006154:	d026      	beq.n	80061a4 <__cvt+0xb0>
 8006156:	2f46      	cmp	r7, #70	; 0x46
 8006158:	eb08 0906 	add.w	r9, r8, r6
 800615c:	d111      	bne.n	8006182 <__cvt+0x8e>
 800615e:	f898 3000 	ldrb.w	r3, [r8]
 8006162:	2b30      	cmp	r3, #48	; 0x30
 8006164:	d10a      	bne.n	800617c <__cvt+0x88>
 8006166:	2200      	movs	r2, #0
 8006168:	2300      	movs	r3, #0
 800616a:	4620      	mov	r0, r4
 800616c:	4629      	mov	r1, r5
 800616e:	f7fa fcc3 	bl	8000af8 <__aeabi_dcmpeq>
 8006172:	b918      	cbnz	r0, 800617c <__cvt+0x88>
 8006174:	f1c6 0601 	rsb	r6, r6, #1
 8006178:	f8ca 6000 	str.w	r6, [sl]
 800617c:	f8da 3000 	ldr.w	r3, [sl]
 8006180:	4499      	add	r9, r3
 8006182:	2200      	movs	r2, #0
 8006184:	2300      	movs	r3, #0
 8006186:	4620      	mov	r0, r4
 8006188:	4629      	mov	r1, r5
 800618a:	f7fa fcb5 	bl	8000af8 <__aeabi_dcmpeq>
 800618e:	b938      	cbnz	r0, 80061a0 <__cvt+0xac>
 8006190:	2230      	movs	r2, #48	; 0x30
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	454b      	cmp	r3, r9
 8006196:	d205      	bcs.n	80061a4 <__cvt+0xb0>
 8006198:	1c59      	adds	r1, r3, #1
 800619a:	9103      	str	r1, [sp, #12]
 800619c:	701a      	strb	r2, [r3, #0]
 800619e:	e7f8      	b.n	8006192 <__cvt+0x9e>
 80061a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80061a4:	9b03      	ldr	r3, [sp, #12]
 80061a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061a8:	eba3 0308 	sub.w	r3, r3, r8
 80061ac:	4640      	mov	r0, r8
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	b004      	add	sp, #16
 80061b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080061b6 <__exponent>:
 80061b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061b8:	2900      	cmp	r1, #0
 80061ba:	4604      	mov	r4, r0
 80061bc:	bfba      	itte	lt
 80061be:	4249      	neglt	r1, r1
 80061c0:	232d      	movlt	r3, #45	; 0x2d
 80061c2:	232b      	movge	r3, #43	; 0x2b
 80061c4:	2909      	cmp	r1, #9
 80061c6:	f804 2b02 	strb.w	r2, [r4], #2
 80061ca:	7043      	strb	r3, [r0, #1]
 80061cc:	dd20      	ble.n	8006210 <__exponent+0x5a>
 80061ce:	f10d 0307 	add.w	r3, sp, #7
 80061d2:	461f      	mov	r7, r3
 80061d4:	260a      	movs	r6, #10
 80061d6:	fb91 f5f6 	sdiv	r5, r1, r6
 80061da:	fb06 1115 	mls	r1, r6, r5, r1
 80061de:	3130      	adds	r1, #48	; 0x30
 80061e0:	2d09      	cmp	r5, #9
 80061e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80061e6:	f103 32ff 	add.w	r2, r3, #4294967295
 80061ea:	4629      	mov	r1, r5
 80061ec:	dc09      	bgt.n	8006202 <__exponent+0x4c>
 80061ee:	3130      	adds	r1, #48	; 0x30
 80061f0:	3b02      	subs	r3, #2
 80061f2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80061f6:	42bb      	cmp	r3, r7
 80061f8:	4622      	mov	r2, r4
 80061fa:	d304      	bcc.n	8006206 <__exponent+0x50>
 80061fc:	1a10      	subs	r0, r2, r0
 80061fe:	b003      	add	sp, #12
 8006200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006202:	4613      	mov	r3, r2
 8006204:	e7e7      	b.n	80061d6 <__exponent+0x20>
 8006206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800620a:	f804 2b01 	strb.w	r2, [r4], #1
 800620e:	e7f2      	b.n	80061f6 <__exponent+0x40>
 8006210:	2330      	movs	r3, #48	; 0x30
 8006212:	4419      	add	r1, r3
 8006214:	7083      	strb	r3, [r0, #2]
 8006216:	1d02      	adds	r2, r0, #4
 8006218:	70c1      	strb	r1, [r0, #3]
 800621a:	e7ef      	b.n	80061fc <__exponent+0x46>

0800621c <_printf_float>:
 800621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006220:	b08d      	sub	sp, #52	; 0x34
 8006222:	460c      	mov	r4, r1
 8006224:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006228:	4616      	mov	r6, r2
 800622a:	461f      	mov	r7, r3
 800622c:	4605      	mov	r5, r0
 800622e:	f001 fe5d 	bl	8007eec <_localeconv_r>
 8006232:	6803      	ldr	r3, [r0, #0]
 8006234:	9304      	str	r3, [sp, #16]
 8006236:	4618      	mov	r0, r3
 8006238:	f7f9 ffe2 	bl	8000200 <strlen>
 800623c:	2300      	movs	r3, #0
 800623e:	930a      	str	r3, [sp, #40]	; 0x28
 8006240:	f8d8 3000 	ldr.w	r3, [r8]
 8006244:	9005      	str	r0, [sp, #20]
 8006246:	3307      	adds	r3, #7
 8006248:	f023 0307 	bic.w	r3, r3, #7
 800624c:	f103 0208 	add.w	r2, r3, #8
 8006250:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006254:	f8d4 b000 	ldr.w	fp, [r4]
 8006258:	f8c8 2000 	str.w	r2, [r8]
 800625c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006260:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006264:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006268:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800626c:	9307      	str	r3, [sp, #28]
 800626e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006272:	f04f 32ff 	mov.w	r2, #4294967295
 8006276:	4ba7      	ldr	r3, [pc, #668]	; (8006514 <_printf_float+0x2f8>)
 8006278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800627c:	f7fa fc6e 	bl	8000b5c <__aeabi_dcmpun>
 8006280:	bb70      	cbnz	r0, 80062e0 <_printf_float+0xc4>
 8006282:	f04f 32ff 	mov.w	r2, #4294967295
 8006286:	4ba3      	ldr	r3, [pc, #652]	; (8006514 <_printf_float+0x2f8>)
 8006288:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800628c:	f7fa fc48 	bl	8000b20 <__aeabi_dcmple>
 8006290:	bb30      	cbnz	r0, 80062e0 <_printf_float+0xc4>
 8006292:	2200      	movs	r2, #0
 8006294:	2300      	movs	r3, #0
 8006296:	4640      	mov	r0, r8
 8006298:	4649      	mov	r1, r9
 800629a:	f7fa fc37 	bl	8000b0c <__aeabi_dcmplt>
 800629e:	b110      	cbz	r0, 80062a6 <_printf_float+0x8a>
 80062a0:	232d      	movs	r3, #45	; 0x2d
 80062a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a6:	4a9c      	ldr	r2, [pc, #624]	; (8006518 <_printf_float+0x2fc>)
 80062a8:	4b9c      	ldr	r3, [pc, #624]	; (800651c <_printf_float+0x300>)
 80062aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80062ae:	bf8c      	ite	hi
 80062b0:	4690      	movhi	r8, r2
 80062b2:	4698      	movls	r8, r3
 80062b4:	2303      	movs	r3, #3
 80062b6:	f02b 0204 	bic.w	r2, fp, #4
 80062ba:	6123      	str	r3, [r4, #16]
 80062bc:	6022      	str	r2, [r4, #0]
 80062be:	f04f 0900 	mov.w	r9, #0
 80062c2:	9700      	str	r7, [sp, #0]
 80062c4:	4633      	mov	r3, r6
 80062c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80062c8:	4621      	mov	r1, r4
 80062ca:	4628      	mov	r0, r5
 80062cc:	f000 f9e6 	bl	800669c <_printf_common>
 80062d0:	3001      	adds	r0, #1
 80062d2:	f040 808d 	bne.w	80063f0 <_printf_float+0x1d4>
 80062d6:	f04f 30ff 	mov.w	r0, #4294967295
 80062da:	b00d      	add	sp, #52	; 0x34
 80062dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e0:	4642      	mov	r2, r8
 80062e2:	464b      	mov	r3, r9
 80062e4:	4640      	mov	r0, r8
 80062e6:	4649      	mov	r1, r9
 80062e8:	f7fa fc38 	bl	8000b5c <__aeabi_dcmpun>
 80062ec:	b110      	cbz	r0, 80062f4 <_printf_float+0xd8>
 80062ee:	4a8c      	ldr	r2, [pc, #560]	; (8006520 <_printf_float+0x304>)
 80062f0:	4b8c      	ldr	r3, [pc, #560]	; (8006524 <_printf_float+0x308>)
 80062f2:	e7da      	b.n	80062aa <_printf_float+0x8e>
 80062f4:	6861      	ldr	r1, [r4, #4]
 80062f6:	1c4b      	adds	r3, r1, #1
 80062f8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80062fc:	a80a      	add	r0, sp, #40	; 0x28
 80062fe:	d13e      	bne.n	800637e <_printf_float+0x162>
 8006300:	2306      	movs	r3, #6
 8006302:	6063      	str	r3, [r4, #4]
 8006304:	2300      	movs	r3, #0
 8006306:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800630a:	ab09      	add	r3, sp, #36	; 0x24
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	ec49 8b10 	vmov	d0, r8, r9
 8006312:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006316:	6022      	str	r2, [r4, #0]
 8006318:	f8cd a004 	str.w	sl, [sp, #4]
 800631c:	6861      	ldr	r1, [r4, #4]
 800631e:	4628      	mov	r0, r5
 8006320:	f7ff fee8 	bl	80060f4 <__cvt>
 8006324:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006328:	2b47      	cmp	r3, #71	; 0x47
 800632a:	4680      	mov	r8, r0
 800632c:	d109      	bne.n	8006342 <_printf_float+0x126>
 800632e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006330:	1cd8      	adds	r0, r3, #3
 8006332:	db02      	blt.n	800633a <_printf_float+0x11e>
 8006334:	6862      	ldr	r2, [r4, #4]
 8006336:	4293      	cmp	r3, r2
 8006338:	dd47      	ble.n	80063ca <_printf_float+0x1ae>
 800633a:	f1aa 0a02 	sub.w	sl, sl, #2
 800633e:	fa5f fa8a 	uxtb.w	sl, sl
 8006342:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006346:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006348:	d824      	bhi.n	8006394 <_printf_float+0x178>
 800634a:	3901      	subs	r1, #1
 800634c:	4652      	mov	r2, sl
 800634e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006352:	9109      	str	r1, [sp, #36]	; 0x24
 8006354:	f7ff ff2f 	bl	80061b6 <__exponent>
 8006358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800635a:	1813      	adds	r3, r2, r0
 800635c:	2a01      	cmp	r2, #1
 800635e:	4681      	mov	r9, r0
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	dc02      	bgt.n	800636a <_printf_float+0x14e>
 8006364:	6822      	ldr	r2, [r4, #0]
 8006366:	07d1      	lsls	r1, r2, #31
 8006368:	d501      	bpl.n	800636e <_printf_float+0x152>
 800636a:	3301      	adds	r3, #1
 800636c:	6123      	str	r3, [r4, #16]
 800636e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0a5      	beq.n	80062c2 <_printf_float+0xa6>
 8006376:	232d      	movs	r3, #45	; 0x2d
 8006378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637c:	e7a1      	b.n	80062c2 <_printf_float+0xa6>
 800637e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006382:	f000 8177 	beq.w	8006674 <_printf_float+0x458>
 8006386:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800638a:	d1bb      	bne.n	8006304 <_printf_float+0xe8>
 800638c:	2900      	cmp	r1, #0
 800638e:	d1b9      	bne.n	8006304 <_printf_float+0xe8>
 8006390:	2301      	movs	r3, #1
 8006392:	e7b6      	b.n	8006302 <_printf_float+0xe6>
 8006394:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006398:	d119      	bne.n	80063ce <_printf_float+0x1b2>
 800639a:	2900      	cmp	r1, #0
 800639c:	6863      	ldr	r3, [r4, #4]
 800639e:	dd0c      	ble.n	80063ba <_printf_float+0x19e>
 80063a0:	6121      	str	r1, [r4, #16]
 80063a2:	b913      	cbnz	r3, 80063aa <_printf_float+0x18e>
 80063a4:	6822      	ldr	r2, [r4, #0]
 80063a6:	07d2      	lsls	r2, r2, #31
 80063a8:	d502      	bpl.n	80063b0 <_printf_float+0x194>
 80063aa:	3301      	adds	r3, #1
 80063ac:	440b      	add	r3, r1
 80063ae:	6123      	str	r3, [r4, #16]
 80063b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80063b4:	f04f 0900 	mov.w	r9, #0
 80063b8:	e7d9      	b.n	800636e <_printf_float+0x152>
 80063ba:	b913      	cbnz	r3, 80063c2 <_printf_float+0x1a6>
 80063bc:	6822      	ldr	r2, [r4, #0]
 80063be:	07d0      	lsls	r0, r2, #31
 80063c0:	d501      	bpl.n	80063c6 <_printf_float+0x1aa>
 80063c2:	3302      	adds	r3, #2
 80063c4:	e7f3      	b.n	80063ae <_printf_float+0x192>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e7f1      	b.n	80063ae <_printf_float+0x192>
 80063ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80063ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80063d2:	4293      	cmp	r3, r2
 80063d4:	db05      	blt.n	80063e2 <_printf_float+0x1c6>
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	07d1      	lsls	r1, r2, #31
 80063dc:	d5e8      	bpl.n	80063b0 <_printf_float+0x194>
 80063de:	3301      	adds	r3, #1
 80063e0:	e7e5      	b.n	80063ae <_printf_float+0x192>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	bfd4      	ite	le
 80063e6:	f1c3 0302 	rsble	r3, r3, #2
 80063ea:	2301      	movgt	r3, #1
 80063ec:	4413      	add	r3, r2
 80063ee:	e7de      	b.n	80063ae <_printf_float+0x192>
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	055a      	lsls	r2, r3, #21
 80063f4:	d407      	bmi.n	8006406 <_printf_float+0x1ea>
 80063f6:	6923      	ldr	r3, [r4, #16]
 80063f8:	4642      	mov	r2, r8
 80063fa:	4631      	mov	r1, r6
 80063fc:	4628      	mov	r0, r5
 80063fe:	47b8      	blx	r7
 8006400:	3001      	adds	r0, #1
 8006402:	d12b      	bne.n	800645c <_printf_float+0x240>
 8006404:	e767      	b.n	80062d6 <_printf_float+0xba>
 8006406:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800640a:	f240 80dc 	bls.w	80065c6 <_printf_float+0x3aa>
 800640e:	2200      	movs	r2, #0
 8006410:	2300      	movs	r3, #0
 8006412:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006416:	f7fa fb6f 	bl	8000af8 <__aeabi_dcmpeq>
 800641a:	2800      	cmp	r0, #0
 800641c:	d033      	beq.n	8006486 <_printf_float+0x26a>
 800641e:	2301      	movs	r3, #1
 8006420:	4a41      	ldr	r2, [pc, #260]	; (8006528 <_printf_float+0x30c>)
 8006422:	4631      	mov	r1, r6
 8006424:	4628      	mov	r0, r5
 8006426:	47b8      	blx	r7
 8006428:	3001      	adds	r0, #1
 800642a:	f43f af54 	beq.w	80062d6 <_printf_float+0xba>
 800642e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006432:	429a      	cmp	r2, r3
 8006434:	db02      	blt.n	800643c <_printf_float+0x220>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	07d8      	lsls	r0, r3, #31
 800643a:	d50f      	bpl.n	800645c <_printf_float+0x240>
 800643c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006440:	4631      	mov	r1, r6
 8006442:	4628      	mov	r0, r5
 8006444:	47b8      	blx	r7
 8006446:	3001      	adds	r0, #1
 8006448:	f43f af45 	beq.w	80062d6 <_printf_float+0xba>
 800644c:	f04f 0800 	mov.w	r8, #0
 8006450:	f104 091a 	add.w	r9, r4, #26
 8006454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006456:	3b01      	subs	r3, #1
 8006458:	4543      	cmp	r3, r8
 800645a:	dc09      	bgt.n	8006470 <_printf_float+0x254>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	079b      	lsls	r3, r3, #30
 8006460:	f100 8103 	bmi.w	800666a <_printf_float+0x44e>
 8006464:	68e0      	ldr	r0, [r4, #12]
 8006466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006468:	4298      	cmp	r0, r3
 800646a:	bfb8      	it	lt
 800646c:	4618      	movlt	r0, r3
 800646e:	e734      	b.n	80062da <_printf_float+0xbe>
 8006470:	2301      	movs	r3, #1
 8006472:	464a      	mov	r2, r9
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	f43f af2b 	beq.w	80062d6 <_printf_float+0xba>
 8006480:	f108 0801 	add.w	r8, r8, #1
 8006484:	e7e6      	b.n	8006454 <_printf_float+0x238>
 8006486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006488:	2b00      	cmp	r3, #0
 800648a:	dc2b      	bgt.n	80064e4 <_printf_float+0x2c8>
 800648c:	2301      	movs	r3, #1
 800648e:	4a26      	ldr	r2, [pc, #152]	; (8006528 <_printf_float+0x30c>)
 8006490:	4631      	mov	r1, r6
 8006492:	4628      	mov	r0, r5
 8006494:	47b8      	blx	r7
 8006496:	3001      	adds	r0, #1
 8006498:	f43f af1d 	beq.w	80062d6 <_printf_float+0xba>
 800649c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649e:	b923      	cbnz	r3, 80064aa <_printf_float+0x28e>
 80064a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064a2:	b913      	cbnz	r3, 80064aa <_printf_float+0x28e>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	07d9      	lsls	r1, r3, #31
 80064a8:	d5d8      	bpl.n	800645c <_printf_float+0x240>
 80064aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ae:	4631      	mov	r1, r6
 80064b0:	4628      	mov	r0, r5
 80064b2:	47b8      	blx	r7
 80064b4:	3001      	adds	r0, #1
 80064b6:	f43f af0e 	beq.w	80062d6 <_printf_float+0xba>
 80064ba:	f04f 0900 	mov.w	r9, #0
 80064be:	f104 0a1a 	add.w	sl, r4, #26
 80064c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c4:	425b      	negs	r3, r3
 80064c6:	454b      	cmp	r3, r9
 80064c8:	dc01      	bgt.n	80064ce <_printf_float+0x2b2>
 80064ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064cc:	e794      	b.n	80063f8 <_printf_float+0x1dc>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4652      	mov	r2, sl
 80064d2:	4631      	mov	r1, r6
 80064d4:	4628      	mov	r0, r5
 80064d6:	47b8      	blx	r7
 80064d8:	3001      	adds	r0, #1
 80064da:	f43f aefc 	beq.w	80062d6 <_printf_float+0xba>
 80064de:	f109 0901 	add.w	r9, r9, #1
 80064e2:	e7ee      	b.n	80064c2 <_printf_float+0x2a6>
 80064e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064e8:	429a      	cmp	r2, r3
 80064ea:	bfa8      	it	ge
 80064ec:	461a      	movge	r2, r3
 80064ee:	2a00      	cmp	r2, #0
 80064f0:	4691      	mov	r9, r2
 80064f2:	dd07      	ble.n	8006504 <_printf_float+0x2e8>
 80064f4:	4613      	mov	r3, r2
 80064f6:	4631      	mov	r1, r6
 80064f8:	4642      	mov	r2, r8
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b8      	blx	r7
 80064fe:	3001      	adds	r0, #1
 8006500:	f43f aee9 	beq.w	80062d6 <_printf_float+0xba>
 8006504:	f104 031a 	add.w	r3, r4, #26
 8006508:	f04f 0b00 	mov.w	fp, #0
 800650c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006510:	9306      	str	r3, [sp, #24]
 8006512:	e015      	b.n	8006540 <_printf_float+0x324>
 8006514:	7fefffff 	.word	0x7fefffff
 8006518:	08008a5c 	.word	0x08008a5c
 800651c:	08008a58 	.word	0x08008a58
 8006520:	08008a64 	.word	0x08008a64
 8006524:	08008a60 	.word	0x08008a60
 8006528:	08008a68 	.word	0x08008a68
 800652c:	2301      	movs	r3, #1
 800652e:	9a06      	ldr	r2, [sp, #24]
 8006530:	4631      	mov	r1, r6
 8006532:	4628      	mov	r0, r5
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	f43f aecd 	beq.w	80062d6 <_printf_float+0xba>
 800653c:	f10b 0b01 	add.w	fp, fp, #1
 8006540:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006544:	ebaa 0309 	sub.w	r3, sl, r9
 8006548:	455b      	cmp	r3, fp
 800654a:	dcef      	bgt.n	800652c <_printf_float+0x310>
 800654c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006550:	429a      	cmp	r2, r3
 8006552:	44d0      	add	r8, sl
 8006554:	db15      	blt.n	8006582 <_printf_float+0x366>
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	07da      	lsls	r2, r3, #31
 800655a:	d412      	bmi.n	8006582 <_printf_float+0x366>
 800655c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800655e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006560:	eba3 020a 	sub.w	r2, r3, sl
 8006564:	eba3 0a01 	sub.w	sl, r3, r1
 8006568:	4592      	cmp	sl, r2
 800656a:	bfa8      	it	ge
 800656c:	4692      	movge	sl, r2
 800656e:	f1ba 0f00 	cmp.w	sl, #0
 8006572:	dc0e      	bgt.n	8006592 <_printf_float+0x376>
 8006574:	f04f 0800 	mov.w	r8, #0
 8006578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800657c:	f104 091a 	add.w	r9, r4, #26
 8006580:	e019      	b.n	80065b6 <_printf_float+0x39a>
 8006582:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	47b8      	blx	r7
 800658c:	3001      	adds	r0, #1
 800658e:	d1e5      	bne.n	800655c <_printf_float+0x340>
 8006590:	e6a1      	b.n	80062d6 <_printf_float+0xba>
 8006592:	4653      	mov	r3, sl
 8006594:	4642      	mov	r2, r8
 8006596:	4631      	mov	r1, r6
 8006598:	4628      	mov	r0, r5
 800659a:	47b8      	blx	r7
 800659c:	3001      	adds	r0, #1
 800659e:	d1e9      	bne.n	8006574 <_printf_float+0x358>
 80065a0:	e699      	b.n	80062d6 <_printf_float+0xba>
 80065a2:	2301      	movs	r3, #1
 80065a4:	464a      	mov	r2, r9
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b8      	blx	r7
 80065ac:	3001      	adds	r0, #1
 80065ae:	f43f ae92 	beq.w	80062d6 <_printf_float+0xba>
 80065b2:	f108 0801 	add.w	r8, r8, #1
 80065b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065ba:	1a9b      	subs	r3, r3, r2
 80065bc:	eba3 030a 	sub.w	r3, r3, sl
 80065c0:	4543      	cmp	r3, r8
 80065c2:	dcee      	bgt.n	80065a2 <_printf_float+0x386>
 80065c4:	e74a      	b.n	800645c <_printf_float+0x240>
 80065c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065c8:	2a01      	cmp	r2, #1
 80065ca:	dc01      	bgt.n	80065d0 <_printf_float+0x3b4>
 80065cc:	07db      	lsls	r3, r3, #31
 80065ce:	d53a      	bpl.n	8006646 <_printf_float+0x42a>
 80065d0:	2301      	movs	r3, #1
 80065d2:	4642      	mov	r2, r8
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	47b8      	blx	r7
 80065da:	3001      	adds	r0, #1
 80065dc:	f43f ae7b 	beq.w	80062d6 <_printf_float+0xba>
 80065e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065e4:	4631      	mov	r1, r6
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	f108 0801 	add.w	r8, r8, #1
 80065f0:	f43f ae71 	beq.w	80062d6 <_printf_float+0xba>
 80065f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f6:	2200      	movs	r2, #0
 80065f8:	f103 3aff 	add.w	sl, r3, #4294967295
 80065fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006600:	2300      	movs	r3, #0
 8006602:	f7fa fa79 	bl	8000af8 <__aeabi_dcmpeq>
 8006606:	b9c8      	cbnz	r0, 800663c <_printf_float+0x420>
 8006608:	4653      	mov	r3, sl
 800660a:	4642      	mov	r2, r8
 800660c:	4631      	mov	r1, r6
 800660e:	4628      	mov	r0, r5
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	d10e      	bne.n	8006634 <_printf_float+0x418>
 8006616:	e65e      	b.n	80062d6 <_printf_float+0xba>
 8006618:	2301      	movs	r3, #1
 800661a:	4652      	mov	r2, sl
 800661c:	4631      	mov	r1, r6
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	f43f ae57 	beq.w	80062d6 <_printf_float+0xba>
 8006628:	f108 0801 	add.w	r8, r8, #1
 800662c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662e:	3b01      	subs	r3, #1
 8006630:	4543      	cmp	r3, r8
 8006632:	dcf1      	bgt.n	8006618 <_printf_float+0x3fc>
 8006634:	464b      	mov	r3, r9
 8006636:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800663a:	e6de      	b.n	80063fa <_printf_float+0x1de>
 800663c:	f04f 0800 	mov.w	r8, #0
 8006640:	f104 0a1a 	add.w	sl, r4, #26
 8006644:	e7f2      	b.n	800662c <_printf_float+0x410>
 8006646:	2301      	movs	r3, #1
 8006648:	e7df      	b.n	800660a <_printf_float+0x3ee>
 800664a:	2301      	movs	r3, #1
 800664c:	464a      	mov	r2, r9
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	47b8      	blx	r7
 8006654:	3001      	adds	r0, #1
 8006656:	f43f ae3e 	beq.w	80062d6 <_printf_float+0xba>
 800665a:	f108 0801 	add.w	r8, r8, #1
 800665e:	68e3      	ldr	r3, [r4, #12]
 8006660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006662:	1a9b      	subs	r3, r3, r2
 8006664:	4543      	cmp	r3, r8
 8006666:	dcf0      	bgt.n	800664a <_printf_float+0x42e>
 8006668:	e6fc      	b.n	8006464 <_printf_float+0x248>
 800666a:	f04f 0800 	mov.w	r8, #0
 800666e:	f104 0919 	add.w	r9, r4, #25
 8006672:	e7f4      	b.n	800665e <_printf_float+0x442>
 8006674:	2900      	cmp	r1, #0
 8006676:	f43f ae8b 	beq.w	8006390 <_printf_float+0x174>
 800667a:	2300      	movs	r3, #0
 800667c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006680:	ab09      	add	r3, sp, #36	; 0x24
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	ec49 8b10 	vmov	d0, r8, r9
 8006688:	6022      	str	r2, [r4, #0]
 800668a:	f8cd a004 	str.w	sl, [sp, #4]
 800668e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006692:	4628      	mov	r0, r5
 8006694:	f7ff fd2e 	bl	80060f4 <__cvt>
 8006698:	4680      	mov	r8, r0
 800669a:	e648      	b.n	800632e <_printf_float+0x112>

0800669c <_printf_common>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	4691      	mov	r9, r2
 80066a2:	461f      	mov	r7, r3
 80066a4:	688a      	ldr	r2, [r1, #8]
 80066a6:	690b      	ldr	r3, [r1, #16]
 80066a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066ac:	4293      	cmp	r3, r2
 80066ae:	bfb8      	it	lt
 80066b0:	4613      	movlt	r3, r2
 80066b2:	f8c9 3000 	str.w	r3, [r9]
 80066b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066ba:	4606      	mov	r6, r0
 80066bc:	460c      	mov	r4, r1
 80066be:	b112      	cbz	r2, 80066c6 <_printf_common+0x2a>
 80066c0:	3301      	adds	r3, #1
 80066c2:	f8c9 3000 	str.w	r3, [r9]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	0699      	lsls	r1, r3, #26
 80066ca:	bf42      	ittt	mi
 80066cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066d0:	3302      	addmi	r3, #2
 80066d2:	f8c9 3000 	strmi.w	r3, [r9]
 80066d6:	6825      	ldr	r5, [r4, #0]
 80066d8:	f015 0506 	ands.w	r5, r5, #6
 80066dc:	d107      	bne.n	80066ee <_printf_common+0x52>
 80066de:	f104 0a19 	add.w	sl, r4, #25
 80066e2:	68e3      	ldr	r3, [r4, #12]
 80066e4:	f8d9 2000 	ldr.w	r2, [r9]
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	42ab      	cmp	r3, r5
 80066ec:	dc28      	bgt.n	8006740 <_printf_common+0xa4>
 80066ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	3300      	adds	r3, #0
 80066f6:	bf18      	it	ne
 80066f8:	2301      	movne	r3, #1
 80066fa:	0692      	lsls	r2, r2, #26
 80066fc:	d42d      	bmi.n	800675a <_printf_common+0xbe>
 80066fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006702:	4639      	mov	r1, r7
 8006704:	4630      	mov	r0, r6
 8006706:	47c0      	blx	r8
 8006708:	3001      	adds	r0, #1
 800670a:	d020      	beq.n	800674e <_printf_common+0xb2>
 800670c:	6823      	ldr	r3, [r4, #0]
 800670e:	68e5      	ldr	r5, [r4, #12]
 8006710:	f8d9 2000 	ldr.w	r2, [r9]
 8006714:	f003 0306 	and.w	r3, r3, #6
 8006718:	2b04      	cmp	r3, #4
 800671a:	bf08      	it	eq
 800671c:	1aad      	subeq	r5, r5, r2
 800671e:	68a3      	ldr	r3, [r4, #8]
 8006720:	6922      	ldr	r2, [r4, #16]
 8006722:	bf0c      	ite	eq
 8006724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006728:	2500      	movne	r5, #0
 800672a:	4293      	cmp	r3, r2
 800672c:	bfc4      	itt	gt
 800672e:	1a9b      	subgt	r3, r3, r2
 8006730:	18ed      	addgt	r5, r5, r3
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	341a      	adds	r4, #26
 8006738:	454d      	cmp	r5, r9
 800673a:	d11a      	bne.n	8006772 <_printf_common+0xd6>
 800673c:	2000      	movs	r0, #0
 800673e:	e008      	b.n	8006752 <_printf_common+0xb6>
 8006740:	2301      	movs	r3, #1
 8006742:	4652      	mov	r2, sl
 8006744:	4639      	mov	r1, r7
 8006746:	4630      	mov	r0, r6
 8006748:	47c0      	blx	r8
 800674a:	3001      	adds	r0, #1
 800674c:	d103      	bne.n	8006756 <_printf_common+0xba>
 800674e:	f04f 30ff 	mov.w	r0, #4294967295
 8006752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006756:	3501      	adds	r5, #1
 8006758:	e7c3      	b.n	80066e2 <_printf_common+0x46>
 800675a:	18e1      	adds	r1, r4, r3
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	2030      	movs	r0, #48	; 0x30
 8006760:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006764:	4422      	add	r2, r4
 8006766:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800676a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800676e:	3302      	adds	r3, #2
 8006770:	e7c5      	b.n	80066fe <_printf_common+0x62>
 8006772:	2301      	movs	r3, #1
 8006774:	4622      	mov	r2, r4
 8006776:	4639      	mov	r1, r7
 8006778:	4630      	mov	r0, r6
 800677a:	47c0      	blx	r8
 800677c:	3001      	adds	r0, #1
 800677e:	d0e6      	beq.n	800674e <_printf_common+0xb2>
 8006780:	f109 0901 	add.w	r9, r9, #1
 8006784:	e7d8      	b.n	8006738 <_printf_common+0x9c>
	...

08006788 <_printf_i>:
 8006788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800678c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006790:	460c      	mov	r4, r1
 8006792:	7e09      	ldrb	r1, [r1, #24]
 8006794:	b085      	sub	sp, #20
 8006796:	296e      	cmp	r1, #110	; 0x6e
 8006798:	4617      	mov	r7, r2
 800679a:	4606      	mov	r6, r0
 800679c:	4698      	mov	r8, r3
 800679e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067a0:	f000 80b3 	beq.w	800690a <_printf_i+0x182>
 80067a4:	d822      	bhi.n	80067ec <_printf_i+0x64>
 80067a6:	2963      	cmp	r1, #99	; 0x63
 80067a8:	d036      	beq.n	8006818 <_printf_i+0x90>
 80067aa:	d80a      	bhi.n	80067c2 <_printf_i+0x3a>
 80067ac:	2900      	cmp	r1, #0
 80067ae:	f000 80b9 	beq.w	8006924 <_printf_i+0x19c>
 80067b2:	2958      	cmp	r1, #88	; 0x58
 80067b4:	f000 8083 	beq.w	80068be <_printf_i+0x136>
 80067b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067c0:	e032      	b.n	8006828 <_printf_i+0xa0>
 80067c2:	2964      	cmp	r1, #100	; 0x64
 80067c4:	d001      	beq.n	80067ca <_printf_i+0x42>
 80067c6:	2969      	cmp	r1, #105	; 0x69
 80067c8:	d1f6      	bne.n	80067b8 <_printf_i+0x30>
 80067ca:	6820      	ldr	r0, [r4, #0]
 80067cc:	6813      	ldr	r3, [r2, #0]
 80067ce:	0605      	lsls	r5, r0, #24
 80067d0:	f103 0104 	add.w	r1, r3, #4
 80067d4:	d52a      	bpl.n	800682c <_printf_i+0xa4>
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6011      	str	r1, [r2, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da03      	bge.n	80067e6 <_printf_i+0x5e>
 80067de:	222d      	movs	r2, #45	; 0x2d
 80067e0:	425b      	negs	r3, r3
 80067e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067e6:	486f      	ldr	r0, [pc, #444]	; (80069a4 <_printf_i+0x21c>)
 80067e8:	220a      	movs	r2, #10
 80067ea:	e039      	b.n	8006860 <_printf_i+0xd8>
 80067ec:	2973      	cmp	r1, #115	; 0x73
 80067ee:	f000 809d 	beq.w	800692c <_printf_i+0x1a4>
 80067f2:	d808      	bhi.n	8006806 <_printf_i+0x7e>
 80067f4:	296f      	cmp	r1, #111	; 0x6f
 80067f6:	d020      	beq.n	800683a <_printf_i+0xb2>
 80067f8:	2970      	cmp	r1, #112	; 0x70
 80067fa:	d1dd      	bne.n	80067b8 <_printf_i+0x30>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	f043 0320 	orr.w	r3, r3, #32
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	e003      	b.n	800680e <_printf_i+0x86>
 8006806:	2975      	cmp	r1, #117	; 0x75
 8006808:	d017      	beq.n	800683a <_printf_i+0xb2>
 800680a:	2978      	cmp	r1, #120	; 0x78
 800680c:	d1d4      	bne.n	80067b8 <_printf_i+0x30>
 800680e:	2378      	movs	r3, #120	; 0x78
 8006810:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006814:	4864      	ldr	r0, [pc, #400]	; (80069a8 <_printf_i+0x220>)
 8006816:	e055      	b.n	80068c4 <_printf_i+0x13c>
 8006818:	6813      	ldr	r3, [r2, #0]
 800681a:	1d19      	adds	r1, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6011      	str	r1, [r2, #0]
 8006820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006828:	2301      	movs	r3, #1
 800682a:	e08c      	b.n	8006946 <_printf_i+0x1be>
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6011      	str	r1, [r2, #0]
 8006830:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006834:	bf18      	it	ne
 8006836:	b21b      	sxthne	r3, r3
 8006838:	e7cf      	b.n	80067da <_printf_i+0x52>
 800683a:	6813      	ldr	r3, [r2, #0]
 800683c:	6825      	ldr	r5, [r4, #0]
 800683e:	1d18      	adds	r0, r3, #4
 8006840:	6010      	str	r0, [r2, #0]
 8006842:	0628      	lsls	r0, r5, #24
 8006844:	d501      	bpl.n	800684a <_printf_i+0xc2>
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	e002      	b.n	8006850 <_printf_i+0xc8>
 800684a:	0668      	lsls	r0, r5, #25
 800684c:	d5fb      	bpl.n	8006846 <_printf_i+0xbe>
 800684e:	881b      	ldrh	r3, [r3, #0]
 8006850:	4854      	ldr	r0, [pc, #336]	; (80069a4 <_printf_i+0x21c>)
 8006852:	296f      	cmp	r1, #111	; 0x6f
 8006854:	bf14      	ite	ne
 8006856:	220a      	movne	r2, #10
 8006858:	2208      	moveq	r2, #8
 800685a:	2100      	movs	r1, #0
 800685c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006860:	6865      	ldr	r5, [r4, #4]
 8006862:	60a5      	str	r5, [r4, #8]
 8006864:	2d00      	cmp	r5, #0
 8006866:	f2c0 8095 	blt.w	8006994 <_printf_i+0x20c>
 800686a:	6821      	ldr	r1, [r4, #0]
 800686c:	f021 0104 	bic.w	r1, r1, #4
 8006870:	6021      	str	r1, [r4, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d13d      	bne.n	80068f2 <_printf_i+0x16a>
 8006876:	2d00      	cmp	r5, #0
 8006878:	f040 808e 	bne.w	8006998 <_printf_i+0x210>
 800687c:	4665      	mov	r5, ip
 800687e:	2a08      	cmp	r2, #8
 8006880:	d10b      	bne.n	800689a <_printf_i+0x112>
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	07db      	lsls	r3, r3, #31
 8006886:	d508      	bpl.n	800689a <_printf_i+0x112>
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	6862      	ldr	r2, [r4, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	bfde      	ittt	le
 8006890:	2330      	movle	r3, #48	; 0x30
 8006892:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006896:	f105 35ff 	addle.w	r5, r5, #4294967295
 800689a:	ebac 0305 	sub.w	r3, ip, r5
 800689e:	6123      	str	r3, [r4, #16]
 80068a0:	f8cd 8000 	str.w	r8, [sp]
 80068a4:	463b      	mov	r3, r7
 80068a6:	aa03      	add	r2, sp, #12
 80068a8:	4621      	mov	r1, r4
 80068aa:	4630      	mov	r0, r6
 80068ac:	f7ff fef6 	bl	800669c <_printf_common>
 80068b0:	3001      	adds	r0, #1
 80068b2:	d14d      	bne.n	8006950 <_printf_i+0x1c8>
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	b005      	add	sp, #20
 80068ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068be:	4839      	ldr	r0, [pc, #228]	; (80069a4 <_printf_i+0x21c>)
 80068c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068c4:	6813      	ldr	r3, [r2, #0]
 80068c6:	6821      	ldr	r1, [r4, #0]
 80068c8:	1d1d      	adds	r5, r3, #4
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6015      	str	r5, [r2, #0]
 80068ce:	060a      	lsls	r2, r1, #24
 80068d0:	d50b      	bpl.n	80068ea <_printf_i+0x162>
 80068d2:	07ca      	lsls	r2, r1, #31
 80068d4:	bf44      	itt	mi
 80068d6:	f041 0120 	orrmi.w	r1, r1, #32
 80068da:	6021      	strmi	r1, [r4, #0]
 80068dc:	b91b      	cbnz	r3, 80068e6 <_printf_i+0x15e>
 80068de:	6822      	ldr	r2, [r4, #0]
 80068e0:	f022 0220 	bic.w	r2, r2, #32
 80068e4:	6022      	str	r2, [r4, #0]
 80068e6:	2210      	movs	r2, #16
 80068e8:	e7b7      	b.n	800685a <_printf_i+0xd2>
 80068ea:	064d      	lsls	r5, r1, #25
 80068ec:	bf48      	it	mi
 80068ee:	b29b      	uxthmi	r3, r3
 80068f0:	e7ef      	b.n	80068d2 <_printf_i+0x14a>
 80068f2:	4665      	mov	r5, ip
 80068f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80068f8:	fb02 3311 	mls	r3, r2, r1, r3
 80068fc:	5cc3      	ldrb	r3, [r0, r3]
 80068fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006902:	460b      	mov	r3, r1
 8006904:	2900      	cmp	r1, #0
 8006906:	d1f5      	bne.n	80068f4 <_printf_i+0x16c>
 8006908:	e7b9      	b.n	800687e <_printf_i+0xf6>
 800690a:	6813      	ldr	r3, [r2, #0]
 800690c:	6825      	ldr	r5, [r4, #0]
 800690e:	6961      	ldr	r1, [r4, #20]
 8006910:	1d18      	adds	r0, r3, #4
 8006912:	6010      	str	r0, [r2, #0]
 8006914:	0628      	lsls	r0, r5, #24
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	d501      	bpl.n	800691e <_printf_i+0x196>
 800691a:	6019      	str	r1, [r3, #0]
 800691c:	e002      	b.n	8006924 <_printf_i+0x19c>
 800691e:	066a      	lsls	r2, r5, #25
 8006920:	d5fb      	bpl.n	800691a <_printf_i+0x192>
 8006922:	8019      	strh	r1, [r3, #0]
 8006924:	2300      	movs	r3, #0
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	4665      	mov	r5, ip
 800692a:	e7b9      	b.n	80068a0 <_printf_i+0x118>
 800692c:	6813      	ldr	r3, [r2, #0]
 800692e:	1d19      	adds	r1, r3, #4
 8006930:	6011      	str	r1, [r2, #0]
 8006932:	681d      	ldr	r5, [r3, #0]
 8006934:	6862      	ldr	r2, [r4, #4]
 8006936:	2100      	movs	r1, #0
 8006938:	4628      	mov	r0, r5
 800693a:	f7f9 fc69 	bl	8000210 <memchr>
 800693e:	b108      	cbz	r0, 8006944 <_printf_i+0x1bc>
 8006940:	1b40      	subs	r0, r0, r5
 8006942:	6060      	str	r0, [r4, #4]
 8006944:	6863      	ldr	r3, [r4, #4]
 8006946:	6123      	str	r3, [r4, #16]
 8006948:	2300      	movs	r3, #0
 800694a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800694e:	e7a7      	b.n	80068a0 <_printf_i+0x118>
 8006950:	6923      	ldr	r3, [r4, #16]
 8006952:	462a      	mov	r2, r5
 8006954:	4639      	mov	r1, r7
 8006956:	4630      	mov	r0, r6
 8006958:	47c0      	blx	r8
 800695a:	3001      	adds	r0, #1
 800695c:	d0aa      	beq.n	80068b4 <_printf_i+0x12c>
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	079b      	lsls	r3, r3, #30
 8006962:	d413      	bmi.n	800698c <_printf_i+0x204>
 8006964:	68e0      	ldr	r0, [r4, #12]
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	4298      	cmp	r0, r3
 800696a:	bfb8      	it	lt
 800696c:	4618      	movlt	r0, r3
 800696e:	e7a3      	b.n	80068b8 <_printf_i+0x130>
 8006970:	2301      	movs	r3, #1
 8006972:	464a      	mov	r2, r9
 8006974:	4639      	mov	r1, r7
 8006976:	4630      	mov	r0, r6
 8006978:	47c0      	blx	r8
 800697a:	3001      	adds	r0, #1
 800697c:	d09a      	beq.n	80068b4 <_printf_i+0x12c>
 800697e:	3501      	adds	r5, #1
 8006980:	68e3      	ldr	r3, [r4, #12]
 8006982:	9a03      	ldr	r2, [sp, #12]
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	42ab      	cmp	r3, r5
 8006988:	dcf2      	bgt.n	8006970 <_printf_i+0x1e8>
 800698a:	e7eb      	b.n	8006964 <_printf_i+0x1dc>
 800698c:	2500      	movs	r5, #0
 800698e:	f104 0919 	add.w	r9, r4, #25
 8006992:	e7f5      	b.n	8006980 <_printf_i+0x1f8>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1ac      	bne.n	80068f2 <_printf_i+0x16a>
 8006998:	7803      	ldrb	r3, [r0, #0]
 800699a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800699e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a2:	e76c      	b.n	800687e <_printf_i+0xf6>
 80069a4:	08008a6a 	.word	0x08008a6a
 80069a8:	08008a7b 	.word	0x08008a7b

080069ac <_open_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4c07      	ldr	r4, [pc, #28]	; (80069cc <_open_r+0x20>)
 80069b0:	4605      	mov	r5, r0
 80069b2:	4608      	mov	r0, r1
 80069b4:	4611      	mov	r1, r2
 80069b6:	2200      	movs	r2, #0
 80069b8:	6022      	str	r2, [r4, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	f7fb fd67 	bl	800248e <_open>
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d102      	bne.n	80069ca <_open_r+0x1e>
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	b103      	cbz	r3, 80069ca <_open_r+0x1e>
 80069c8:	602b      	str	r3, [r5, #0]
 80069ca:	bd38      	pop	{r3, r4, r5, pc}
 80069cc:	200002e0 	.word	0x200002e0

080069d0 <iprintf>:
 80069d0:	b40f      	push	{r0, r1, r2, r3}
 80069d2:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <iprintf+0x2c>)
 80069d4:	b513      	push	{r0, r1, r4, lr}
 80069d6:	681c      	ldr	r4, [r3, #0]
 80069d8:	b124      	cbz	r4, 80069e4 <iprintf+0x14>
 80069da:	69a3      	ldr	r3, [r4, #24]
 80069dc:	b913      	cbnz	r3, 80069e4 <iprintf+0x14>
 80069de:	4620      	mov	r0, r4
 80069e0:	f001 f984 	bl	8007cec <__sinit>
 80069e4:	ab05      	add	r3, sp, #20
 80069e6:	9a04      	ldr	r2, [sp, #16]
 80069e8:	68a1      	ldr	r1, [r4, #8]
 80069ea:	9301      	str	r3, [sp, #4]
 80069ec:	4620      	mov	r0, r4
 80069ee:	f001 fdbb 	bl	8008568 <_vfiprintf_r>
 80069f2:	b002      	add	sp, #8
 80069f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f8:	b004      	add	sp, #16
 80069fa:	4770      	bx	lr
 80069fc:	2000000c 	.word	0x2000000c

08006a00 <_puts_r>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	460e      	mov	r6, r1
 8006a04:	4605      	mov	r5, r0
 8006a06:	b118      	cbz	r0, 8006a10 <_puts_r+0x10>
 8006a08:	6983      	ldr	r3, [r0, #24]
 8006a0a:	b90b      	cbnz	r3, 8006a10 <_puts_r+0x10>
 8006a0c:	f001 f96e 	bl	8007cec <__sinit>
 8006a10:	69ab      	ldr	r3, [r5, #24]
 8006a12:	68ac      	ldr	r4, [r5, #8]
 8006a14:	b913      	cbnz	r3, 8006a1c <_puts_r+0x1c>
 8006a16:	4628      	mov	r0, r5
 8006a18:	f001 f968 	bl	8007cec <__sinit>
 8006a1c:	4b23      	ldr	r3, [pc, #140]	; (8006aac <_puts_r+0xac>)
 8006a1e:	429c      	cmp	r4, r3
 8006a20:	d117      	bne.n	8006a52 <_puts_r+0x52>
 8006a22:	686c      	ldr	r4, [r5, #4]
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	071b      	lsls	r3, r3, #28
 8006a28:	d51d      	bpl.n	8006a66 <_puts_r+0x66>
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	b1db      	cbz	r3, 8006a66 <_puts_r+0x66>
 8006a2e:	3e01      	subs	r6, #1
 8006a30:	68a3      	ldr	r3, [r4, #8]
 8006a32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a36:	3b01      	subs	r3, #1
 8006a38:	60a3      	str	r3, [r4, #8]
 8006a3a:	b9e9      	cbnz	r1, 8006a78 <_puts_r+0x78>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	da2e      	bge.n	8006a9e <_puts_r+0x9e>
 8006a40:	4622      	mov	r2, r4
 8006a42:	210a      	movs	r1, #10
 8006a44:	4628      	mov	r0, r5
 8006a46:	f000 f929 	bl	8006c9c <__swbuf_r>
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d011      	beq.n	8006a72 <_puts_r+0x72>
 8006a4e:	200a      	movs	r0, #10
 8006a50:	e011      	b.n	8006a76 <_puts_r+0x76>
 8006a52:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <_puts_r+0xb0>)
 8006a54:	429c      	cmp	r4, r3
 8006a56:	d101      	bne.n	8006a5c <_puts_r+0x5c>
 8006a58:	68ac      	ldr	r4, [r5, #8]
 8006a5a:	e7e3      	b.n	8006a24 <_puts_r+0x24>
 8006a5c:	4b15      	ldr	r3, [pc, #84]	; (8006ab4 <_puts_r+0xb4>)
 8006a5e:	429c      	cmp	r4, r3
 8006a60:	bf08      	it	eq
 8006a62:	68ec      	ldreq	r4, [r5, #12]
 8006a64:	e7de      	b.n	8006a24 <_puts_r+0x24>
 8006a66:	4621      	mov	r1, r4
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f000 f97b 	bl	8006d64 <__swsetup_r>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d0dd      	beq.n	8006a2e <_puts_r+0x2e>
 8006a72:	f04f 30ff 	mov.w	r0, #4294967295
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	da04      	bge.n	8006a86 <_puts_r+0x86>
 8006a7c:	69a2      	ldr	r2, [r4, #24]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	dc06      	bgt.n	8006a90 <_puts_r+0x90>
 8006a82:	290a      	cmp	r1, #10
 8006a84:	d004      	beq.n	8006a90 <_puts_r+0x90>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	6022      	str	r2, [r4, #0]
 8006a8c:	7019      	strb	r1, [r3, #0]
 8006a8e:	e7cf      	b.n	8006a30 <_puts_r+0x30>
 8006a90:	4622      	mov	r2, r4
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f902 	bl	8006c9c <__swbuf_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d1c9      	bne.n	8006a30 <_puts_r+0x30>
 8006a9c:	e7e9      	b.n	8006a72 <_puts_r+0x72>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	200a      	movs	r0, #10
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	6022      	str	r2, [r4, #0]
 8006aa6:	7018      	strb	r0, [r3, #0]
 8006aa8:	e7e5      	b.n	8006a76 <_puts_r+0x76>
 8006aaa:	bf00      	nop
 8006aac:	08008abc 	.word	0x08008abc
 8006ab0:	08008adc 	.word	0x08008adc
 8006ab4:	08008a9c 	.word	0x08008a9c

08006ab8 <puts>:
 8006ab8:	4b02      	ldr	r3, [pc, #8]	; (8006ac4 <puts+0xc>)
 8006aba:	4601      	mov	r1, r0
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	f7ff bf9f 	b.w	8006a00 <_puts_r>
 8006ac2:	bf00      	nop
 8006ac4:	2000000c 	.word	0x2000000c

08006ac8 <lflush>:
 8006ac8:	8983      	ldrh	r3, [r0, #12]
 8006aca:	f003 0309 	and.w	r3, r3, #9
 8006ace:	2b09      	cmp	r3, #9
 8006ad0:	d101      	bne.n	8006ad6 <lflush+0xe>
 8006ad2:	f001 b8b9 	b.w	8007c48 <fflush>
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	4770      	bx	lr
	...

08006adc <__srefill_r>:
 8006adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ade:	460c      	mov	r4, r1
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	b118      	cbz	r0, 8006aec <__srefill_r+0x10>
 8006ae4:	6983      	ldr	r3, [r0, #24]
 8006ae6:	b90b      	cbnz	r3, 8006aec <__srefill_r+0x10>
 8006ae8:	f001 f900 	bl	8007cec <__sinit>
 8006aec:	4b3c      	ldr	r3, [pc, #240]	; (8006be0 <__srefill_r+0x104>)
 8006aee:	429c      	cmp	r4, r3
 8006af0:	d10a      	bne.n	8006b08 <__srefill_r+0x2c>
 8006af2:	686c      	ldr	r4, [r5, #4]
 8006af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006af8:	2300      	movs	r3, #0
 8006afa:	6063      	str	r3, [r4, #4]
 8006afc:	b293      	uxth	r3, r2
 8006afe:	069e      	lsls	r6, r3, #26
 8006b00:	d50c      	bpl.n	8006b1c <__srefill_r+0x40>
 8006b02:	f04f 30ff 	mov.w	r0, #4294967295
 8006b06:	e067      	b.n	8006bd8 <__srefill_r+0xfc>
 8006b08:	4b36      	ldr	r3, [pc, #216]	; (8006be4 <__srefill_r+0x108>)
 8006b0a:	429c      	cmp	r4, r3
 8006b0c:	d101      	bne.n	8006b12 <__srefill_r+0x36>
 8006b0e:	68ac      	ldr	r4, [r5, #8]
 8006b10:	e7f0      	b.n	8006af4 <__srefill_r+0x18>
 8006b12:	4b35      	ldr	r3, [pc, #212]	; (8006be8 <__srefill_r+0x10c>)
 8006b14:	429c      	cmp	r4, r3
 8006b16:	bf08      	it	eq
 8006b18:	68ec      	ldreq	r4, [r5, #12]
 8006b1a:	e7eb      	b.n	8006af4 <__srefill_r+0x18>
 8006b1c:	0758      	lsls	r0, r3, #29
 8006b1e:	d449      	bmi.n	8006bb4 <__srefill_r+0xd8>
 8006b20:	06d9      	lsls	r1, r3, #27
 8006b22:	d405      	bmi.n	8006b30 <__srefill_r+0x54>
 8006b24:	2309      	movs	r3, #9
 8006b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	81a2      	strh	r2, [r4, #12]
 8006b2e:	e7e8      	b.n	8006b02 <__srefill_r+0x26>
 8006b30:	071a      	lsls	r2, r3, #28
 8006b32:	d50b      	bpl.n	8006b4c <__srefill_r+0x70>
 8006b34:	4621      	mov	r1, r4
 8006b36:	4628      	mov	r0, r5
 8006b38:	f001 f85c 	bl	8007bf4 <_fflush_r>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d1e0      	bne.n	8006b02 <__srefill_r+0x26>
 8006b40:	89a3      	ldrh	r3, [r4, #12]
 8006b42:	60a0      	str	r0, [r4, #8]
 8006b44:	f023 0308 	bic.w	r3, r3, #8
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	61a0      	str	r0, [r4, #24]
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	f043 0304 	orr.w	r3, r3, #4
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	b91b      	cbnz	r3, 8006b60 <__srefill_r+0x84>
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f7ff f9ce 	bl	8005efc <__smakebuf_r>
 8006b60:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006b64:	b2be      	uxth	r6, r7
 8006b66:	07b3      	lsls	r3, r6, #30
 8006b68:	d00f      	beq.n	8006b8a <__srefill_r+0xae>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	81a3      	strh	r3, [r4, #12]
 8006b6e:	4b1f      	ldr	r3, [pc, #124]	; (8006bec <__srefill_r+0x110>)
 8006b70:	491f      	ldr	r1, [pc, #124]	; (8006bf0 <__srefill_r+0x114>)
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	f006 0609 	and.w	r6, r6, #9
 8006b78:	f001 f96e 	bl	8007e58 <_fwalk>
 8006b7c:	2e09      	cmp	r6, #9
 8006b7e:	81a7      	strh	r7, [r4, #12]
 8006b80:	d103      	bne.n	8006b8a <__srefill_r+0xae>
 8006b82:	4621      	mov	r1, r4
 8006b84:	4628      	mov	r0, r5
 8006b86:	f000 ffaf 	bl	8007ae8 <__sflush_r>
 8006b8a:	6922      	ldr	r2, [r4, #16]
 8006b8c:	6022      	str	r2, [r4, #0]
 8006b8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006b90:	6963      	ldr	r3, [r4, #20]
 8006b92:	6a21      	ldr	r1, [r4, #32]
 8006b94:	4628      	mov	r0, r5
 8006b96:	47b0      	blx	r6
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	6060      	str	r0, [r4, #4]
 8006b9c:	dc1d      	bgt.n	8006bda <__srefill_r+0xfe>
 8006b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ba2:	bf17      	itett	ne
 8006ba4:	2200      	movne	r2, #0
 8006ba6:	f043 0320 	orreq.w	r3, r3, #32
 8006baa:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006bae:	6062      	strne	r2, [r4, #4]
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	e7a6      	b.n	8006b02 <__srefill_r+0x26>
 8006bb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bb6:	2900      	cmp	r1, #0
 8006bb8:	d0cc      	beq.n	8006b54 <__srefill_r+0x78>
 8006bba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bbe:	4299      	cmp	r1, r3
 8006bc0:	d002      	beq.n	8006bc8 <__srefill_r+0xec>
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f7ff f9ee 	bl	8005fa4 <_free_r>
 8006bc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bca:	6063      	str	r3, [r4, #4]
 8006bcc:	2000      	movs	r0, #0
 8006bce:	6360      	str	r0, [r4, #52]	; 0x34
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0bf      	beq.n	8006b54 <__srefill_r+0x78>
 8006bd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bda:	2000      	movs	r0, #0
 8006bdc:	e7fc      	b.n	8006bd8 <__srefill_r+0xfc>
 8006bde:	bf00      	nop
 8006be0:	08008abc 	.word	0x08008abc
 8006be4:	08008adc 	.word	0x08008adc
 8006be8:	08008a9c 	.word	0x08008a9c
 8006bec:	08008a54 	.word	0x08008a54
 8006bf0:	08006ac9 	.word	0x08006ac9

08006bf4 <_sbrk_r>:
 8006bf4:	b538      	push	{r3, r4, r5, lr}
 8006bf6:	4c06      	ldr	r4, [pc, #24]	; (8006c10 <_sbrk_r+0x1c>)
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	6023      	str	r3, [r4, #0]
 8006c00:	f7fb fc54 	bl	80024ac <_sbrk>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_sbrk_r+0x1a>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_sbrk_r+0x1a>
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	200002e0 	.word	0x200002e0

08006c14 <__sread>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	460c      	mov	r4, r1
 8006c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1c:	f001 fdba 	bl	8008794 <_read_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	bfab      	itete	ge
 8006c24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c26:	89a3      	ldrhlt	r3, [r4, #12]
 8006c28:	181b      	addge	r3, r3, r0
 8006c2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c2e:	bfac      	ite	ge
 8006c30:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c32:	81a3      	strhlt	r3, [r4, #12]
 8006c34:	bd10      	pop	{r4, pc}

08006c36 <__swrite>:
 8006c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3a:	461f      	mov	r7, r3
 8006c3c:	898b      	ldrh	r3, [r1, #12]
 8006c3e:	05db      	lsls	r3, r3, #23
 8006c40:	4605      	mov	r5, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	4616      	mov	r6, r2
 8006c46:	d505      	bpl.n	8006c54 <__swrite+0x1e>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c50:	f001 f95a 	bl	8007f08 <_lseek_r>
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	4632      	mov	r2, r6
 8006c62:	463b      	mov	r3, r7
 8006c64:	4628      	mov	r0, r5
 8006c66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6a:	f000 b869 	b.w	8006d40 <_write_r>

08006c6e <__sseek>:
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	460c      	mov	r4, r1
 8006c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c76:	f001 f947 	bl	8007f08 <_lseek_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	89a3      	ldrh	r3, [r4, #12]
 8006c7e:	bf15      	itete	ne
 8006c80:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c8a:	81a3      	strheq	r3, [r4, #12]
 8006c8c:	bf18      	it	ne
 8006c8e:	81a3      	strhne	r3, [r4, #12]
 8006c90:	bd10      	pop	{r4, pc}

08006c92 <__sclose>:
 8006c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c96:	f000 b8d3 	b.w	8006e40 <_close_r>
	...

08006c9c <__swbuf_r>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	460e      	mov	r6, r1
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	b118      	cbz	r0, 8006cae <__swbuf_r+0x12>
 8006ca6:	6983      	ldr	r3, [r0, #24]
 8006ca8:	b90b      	cbnz	r3, 8006cae <__swbuf_r+0x12>
 8006caa:	f001 f81f 	bl	8007cec <__sinit>
 8006cae:	4b21      	ldr	r3, [pc, #132]	; (8006d34 <__swbuf_r+0x98>)
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	d12a      	bne.n	8006d0a <__swbuf_r+0x6e>
 8006cb4:	686c      	ldr	r4, [r5, #4]
 8006cb6:	69a3      	ldr	r3, [r4, #24]
 8006cb8:	60a3      	str	r3, [r4, #8]
 8006cba:	89a3      	ldrh	r3, [r4, #12]
 8006cbc:	071a      	lsls	r2, r3, #28
 8006cbe:	d52e      	bpl.n	8006d1e <__swbuf_r+0x82>
 8006cc0:	6923      	ldr	r3, [r4, #16]
 8006cc2:	b363      	cbz	r3, 8006d1e <__swbuf_r+0x82>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	6820      	ldr	r0, [r4, #0]
 8006cc8:	1ac0      	subs	r0, r0, r3
 8006cca:	6963      	ldr	r3, [r4, #20]
 8006ccc:	b2f6      	uxtb	r6, r6
 8006cce:	4283      	cmp	r3, r0
 8006cd0:	4637      	mov	r7, r6
 8006cd2:	dc04      	bgt.n	8006cde <__swbuf_r+0x42>
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 ff8c 	bl	8007bf4 <_fflush_r>
 8006cdc:	bb28      	cbnz	r0, 8006d2a <__swbuf_r+0x8e>
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	60a3      	str	r3, [r4, #8]
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	6022      	str	r2, [r4, #0]
 8006cea:	701e      	strb	r6, [r3, #0]
 8006cec:	6963      	ldr	r3, [r4, #20]
 8006cee:	3001      	adds	r0, #1
 8006cf0:	4283      	cmp	r3, r0
 8006cf2:	d004      	beq.n	8006cfe <__swbuf_r+0x62>
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	07db      	lsls	r3, r3, #31
 8006cf8:	d519      	bpl.n	8006d2e <__swbuf_r+0x92>
 8006cfa:	2e0a      	cmp	r6, #10
 8006cfc:	d117      	bne.n	8006d2e <__swbuf_r+0x92>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 ff77 	bl	8007bf4 <_fflush_r>
 8006d06:	b190      	cbz	r0, 8006d2e <__swbuf_r+0x92>
 8006d08:	e00f      	b.n	8006d2a <__swbuf_r+0x8e>
 8006d0a:	4b0b      	ldr	r3, [pc, #44]	; (8006d38 <__swbuf_r+0x9c>)
 8006d0c:	429c      	cmp	r4, r3
 8006d0e:	d101      	bne.n	8006d14 <__swbuf_r+0x78>
 8006d10:	68ac      	ldr	r4, [r5, #8]
 8006d12:	e7d0      	b.n	8006cb6 <__swbuf_r+0x1a>
 8006d14:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <__swbuf_r+0xa0>)
 8006d16:	429c      	cmp	r4, r3
 8006d18:	bf08      	it	eq
 8006d1a:	68ec      	ldreq	r4, [r5, #12]
 8006d1c:	e7cb      	b.n	8006cb6 <__swbuf_r+0x1a>
 8006d1e:	4621      	mov	r1, r4
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 f81f 	bl	8006d64 <__swsetup_r>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d0cc      	beq.n	8006cc4 <__swbuf_r+0x28>
 8006d2a:	f04f 37ff 	mov.w	r7, #4294967295
 8006d2e:	4638      	mov	r0, r7
 8006d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d32:	bf00      	nop
 8006d34:	08008abc 	.word	0x08008abc
 8006d38:	08008adc 	.word	0x08008adc
 8006d3c:	08008a9c 	.word	0x08008a9c

08006d40 <_write_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4c07      	ldr	r4, [pc, #28]	; (8006d60 <_write_r+0x20>)
 8006d44:	4605      	mov	r5, r0
 8006d46:	4608      	mov	r0, r1
 8006d48:	4611      	mov	r1, r2
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	6022      	str	r2, [r4, #0]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f7fb fb4d 	bl	80023ee <_write>
 8006d54:	1c43      	adds	r3, r0, #1
 8006d56:	d102      	bne.n	8006d5e <_write_r+0x1e>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	b103      	cbz	r3, 8006d5e <_write_r+0x1e>
 8006d5c:	602b      	str	r3, [r5, #0]
 8006d5e:	bd38      	pop	{r3, r4, r5, pc}
 8006d60:	200002e0 	.word	0x200002e0

08006d64 <__swsetup_r>:
 8006d64:	4b32      	ldr	r3, [pc, #200]	; (8006e30 <__swsetup_r+0xcc>)
 8006d66:	b570      	push	{r4, r5, r6, lr}
 8006d68:	681d      	ldr	r5, [r3, #0]
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	b125      	cbz	r5, 8006d7a <__swsetup_r+0x16>
 8006d70:	69ab      	ldr	r3, [r5, #24]
 8006d72:	b913      	cbnz	r3, 8006d7a <__swsetup_r+0x16>
 8006d74:	4628      	mov	r0, r5
 8006d76:	f000 ffb9 	bl	8007cec <__sinit>
 8006d7a:	4b2e      	ldr	r3, [pc, #184]	; (8006e34 <__swsetup_r+0xd0>)
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	d10f      	bne.n	8006da0 <__swsetup_r+0x3c>
 8006d80:	686c      	ldr	r4, [r5, #4]
 8006d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	0715      	lsls	r5, r2, #28
 8006d8a:	d42c      	bmi.n	8006de6 <__swsetup_r+0x82>
 8006d8c:	06d0      	lsls	r0, r2, #27
 8006d8e:	d411      	bmi.n	8006db4 <__swsetup_r+0x50>
 8006d90:	2209      	movs	r2, #9
 8006d92:	6032      	str	r2, [r6, #0]
 8006d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9e:	e03e      	b.n	8006e1e <__swsetup_r+0xba>
 8006da0:	4b25      	ldr	r3, [pc, #148]	; (8006e38 <__swsetup_r+0xd4>)
 8006da2:	429c      	cmp	r4, r3
 8006da4:	d101      	bne.n	8006daa <__swsetup_r+0x46>
 8006da6:	68ac      	ldr	r4, [r5, #8]
 8006da8:	e7eb      	b.n	8006d82 <__swsetup_r+0x1e>
 8006daa:	4b24      	ldr	r3, [pc, #144]	; (8006e3c <__swsetup_r+0xd8>)
 8006dac:	429c      	cmp	r4, r3
 8006dae:	bf08      	it	eq
 8006db0:	68ec      	ldreq	r4, [r5, #12]
 8006db2:	e7e6      	b.n	8006d82 <__swsetup_r+0x1e>
 8006db4:	0751      	lsls	r1, r2, #29
 8006db6:	d512      	bpl.n	8006dde <__swsetup_r+0x7a>
 8006db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dba:	b141      	cbz	r1, 8006dce <__swsetup_r+0x6a>
 8006dbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	d002      	beq.n	8006dca <__swsetup_r+0x66>
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f7ff f8ed 	bl	8005fa4 <_free_r>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	6363      	str	r3, [r4, #52]	; 0x34
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006dd4:	81a3      	strh	r3, [r4, #12]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	6063      	str	r3, [r4, #4]
 8006dda:	6923      	ldr	r3, [r4, #16]
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	89a3      	ldrh	r3, [r4, #12]
 8006de0:	f043 0308 	orr.w	r3, r3, #8
 8006de4:	81a3      	strh	r3, [r4, #12]
 8006de6:	6923      	ldr	r3, [r4, #16]
 8006de8:	b94b      	cbnz	r3, 8006dfe <__swsetup_r+0x9a>
 8006dea:	89a3      	ldrh	r3, [r4, #12]
 8006dec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df4:	d003      	beq.n	8006dfe <__swsetup_r+0x9a>
 8006df6:	4621      	mov	r1, r4
 8006df8:	4630      	mov	r0, r6
 8006dfa:	f7ff f87f 	bl	8005efc <__smakebuf_r>
 8006dfe:	89a2      	ldrh	r2, [r4, #12]
 8006e00:	f012 0301 	ands.w	r3, r2, #1
 8006e04:	d00c      	beq.n	8006e20 <__swsetup_r+0xbc>
 8006e06:	2300      	movs	r3, #0
 8006e08:	60a3      	str	r3, [r4, #8]
 8006e0a:	6963      	ldr	r3, [r4, #20]
 8006e0c:	425b      	negs	r3, r3
 8006e0e:	61a3      	str	r3, [r4, #24]
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	b953      	cbnz	r3, 8006e2a <__swsetup_r+0xc6>
 8006e14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006e1c:	d1ba      	bne.n	8006d94 <__swsetup_r+0x30>
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	0792      	lsls	r2, r2, #30
 8006e22:	bf58      	it	pl
 8006e24:	6963      	ldrpl	r3, [r4, #20]
 8006e26:	60a3      	str	r3, [r4, #8]
 8006e28:	e7f2      	b.n	8006e10 <__swsetup_r+0xac>
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	e7f7      	b.n	8006e1e <__swsetup_r+0xba>
 8006e2e:	bf00      	nop
 8006e30:	2000000c 	.word	0x2000000c
 8006e34:	08008abc 	.word	0x08008abc
 8006e38:	08008adc 	.word	0x08008adc
 8006e3c:	08008a9c 	.word	0x08008a9c

08006e40 <_close_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4c06      	ldr	r4, [pc, #24]	; (8006e5c <_close_r+0x1c>)
 8006e44:	2300      	movs	r3, #0
 8006e46:	4605      	mov	r5, r0
 8006e48:	4608      	mov	r0, r1
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	f7fb faeb 	bl	8002426 <_close>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d102      	bne.n	8006e5a <_close_r+0x1a>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	b103      	cbz	r3, 8006e5a <_close_r+0x1a>
 8006e58:	602b      	str	r3, [r5, #0]
 8006e5a:	bd38      	pop	{r3, r4, r5, pc}
 8006e5c:	200002e0 	.word	0x200002e0

08006e60 <quorem>:
 8006e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e64:	6903      	ldr	r3, [r0, #16]
 8006e66:	690c      	ldr	r4, [r1, #16]
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	f2c0 8082 	blt.w	8006f74 <quorem+0x114>
 8006e70:	3c01      	subs	r4, #1
 8006e72:	f101 0714 	add.w	r7, r1, #20
 8006e76:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006e7a:	f100 0614 	add.w	r6, r0, #20
 8006e7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006e86:	eb06 030c 	add.w	r3, r6, ip
 8006e8a:	3501      	adds	r5, #1
 8006e8c:	eb07 090c 	add.w	r9, r7, ip
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	fbb0 f5f5 	udiv	r5, r0, r5
 8006e96:	b395      	cbz	r5, 8006efe <quorem+0x9e>
 8006e98:	f04f 0a00 	mov.w	sl, #0
 8006e9c:	4638      	mov	r0, r7
 8006e9e:	46b6      	mov	lr, r6
 8006ea0:	46d3      	mov	fp, sl
 8006ea2:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ea6:	b293      	uxth	r3, r2
 8006ea8:	fb05 a303 	mla	r3, r5, r3, sl
 8006eac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	ebab 0303 	sub.w	r3, fp, r3
 8006eb6:	0c12      	lsrs	r2, r2, #16
 8006eb8:	f8de b000 	ldr.w	fp, [lr]
 8006ebc:	fb05 a202 	mla	r2, r5, r2, sl
 8006ec0:	fa13 f38b 	uxtah	r3, r3, fp
 8006ec4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006ec8:	fa1f fb82 	uxth.w	fp, r2
 8006ecc:	f8de 2000 	ldr.w	r2, [lr]
 8006ed0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006ed4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ede:	4581      	cmp	r9, r0
 8006ee0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006ee4:	f84e 3b04 	str.w	r3, [lr], #4
 8006ee8:	d2db      	bcs.n	8006ea2 <quorem+0x42>
 8006eea:	f856 300c 	ldr.w	r3, [r6, ip]
 8006eee:	b933      	cbnz	r3, 8006efe <quorem+0x9e>
 8006ef0:	9b01      	ldr	r3, [sp, #4]
 8006ef2:	3b04      	subs	r3, #4
 8006ef4:	429e      	cmp	r6, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	d330      	bcc.n	8006f5c <quorem+0xfc>
 8006efa:	f8c8 4010 	str.w	r4, [r8, #16]
 8006efe:	4640      	mov	r0, r8
 8006f00:	f001 fa34 	bl	800836c <__mcmp>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	db25      	blt.n	8006f54 <quorem+0xf4>
 8006f08:	3501      	adds	r5, #1
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f04f 0c00 	mov.w	ip, #0
 8006f10:	f857 2b04 	ldr.w	r2, [r7], #4
 8006f14:	f8d0 e000 	ldr.w	lr, [r0]
 8006f18:	b293      	uxth	r3, r2
 8006f1a:	ebac 0303 	sub.w	r3, ip, r3
 8006f1e:	0c12      	lsrs	r2, r2, #16
 8006f20:	fa13 f38e 	uxtah	r3, r3, lr
 8006f24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f32:	45b9      	cmp	r9, r7
 8006f34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f38:	f840 3b04 	str.w	r3, [r0], #4
 8006f3c:	d2e8      	bcs.n	8006f10 <quorem+0xb0>
 8006f3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f46:	b92a      	cbnz	r2, 8006f54 <quorem+0xf4>
 8006f48:	3b04      	subs	r3, #4
 8006f4a:	429e      	cmp	r6, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	d30b      	bcc.n	8006f68 <quorem+0x108>
 8006f50:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f54:	4628      	mov	r0, r5
 8006f56:	b003      	add	sp, #12
 8006f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	3b04      	subs	r3, #4
 8006f60:	2a00      	cmp	r2, #0
 8006f62:	d1ca      	bne.n	8006efa <quorem+0x9a>
 8006f64:	3c01      	subs	r4, #1
 8006f66:	e7c5      	b.n	8006ef4 <quorem+0x94>
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	3b04      	subs	r3, #4
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	d1ef      	bne.n	8006f50 <quorem+0xf0>
 8006f70:	3c01      	subs	r4, #1
 8006f72:	e7ea      	b.n	8006f4a <quorem+0xea>
 8006f74:	2000      	movs	r0, #0
 8006f76:	e7ee      	b.n	8006f56 <quorem+0xf6>

08006f78 <_dtoa_r>:
 8006f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7c:	ec57 6b10 	vmov	r6, r7, d0
 8006f80:	b097      	sub	sp, #92	; 0x5c
 8006f82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f84:	9106      	str	r1, [sp, #24]
 8006f86:	4604      	mov	r4, r0
 8006f88:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f8a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f90:	e9cd 6700 	strd	r6, r7, [sp]
 8006f94:	b93d      	cbnz	r5, 8006fa6 <_dtoa_r+0x2e>
 8006f96:	2010      	movs	r0, #16
 8006f98:	f000 ffc8 	bl	8007f2c <malloc>
 8006f9c:	6260      	str	r0, [r4, #36]	; 0x24
 8006f9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fa2:	6005      	str	r5, [r0, #0]
 8006fa4:	60c5      	str	r5, [r0, #12]
 8006fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa8:	6819      	ldr	r1, [r3, #0]
 8006faa:	b151      	cbz	r1, 8006fc2 <_dtoa_r+0x4a>
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	604a      	str	r2, [r1, #4]
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4093      	lsls	r3, r2
 8006fb4:	608b      	str	r3, [r1, #8]
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f000 fff6 	bl	8007fa8 <_Bfree>
 8006fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	1e3b      	subs	r3, r7, #0
 8006fc4:	bfbb      	ittet	lt
 8006fc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006fca:	9301      	strlt	r3, [sp, #4]
 8006fcc:	2300      	movge	r3, #0
 8006fce:	2201      	movlt	r2, #1
 8006fd0:	bfac      	ite	ge
 8006fd2:	f8c8 3000 	strge.w	r3, [r8]
 8006fd6:	f8c8 2000 	strlt.w	r2, [r8]
 8006fda:	4baf      	ldr	r3, [pc, #700]	; (8007298 <_dtoa_r+0x320>)
 8006fdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006fe0:	ea33 0308 	bics.w	r3, r3, r8
 8006fe4:	d114      	bne.n	8007010 <_dtoa_r+0x98>
 8006fe6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fe8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	9b00      	ldr	r3, [sp, #0]
 8006ff0:	b923      	cbnz	r3, 8006ffc <_dtoa_r+0x84>
 8006ff2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f000 8542 	beq.w	8007a80 <_dtoa_r+0xb08>
 8006ffc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ffe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80072ac <_dtoa_r+0x334>
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 8544 	beq.w	8007a90 <_dtoa_r+0xb18>
 8007008:	f10b 0303 	add.w	r3, fp, #3
 800700c:	f000 bd3e 	b.w	8007a8c <_dtoa_r+0xb14>
 8007010:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007014:	2200      	movs	r2, #0
 8007016:	2300      	movs	r3, #0
 8007018:	4630      	mov	r0, r6
 800701a:	4639      	mov	r1, r7
 800701c:	f7f9 fd6c 	bl	8000af8 <__aeabi_dcmpeq>
 8007020:	4681      	mov	r9, r0
 8007022:	b168      	cbz	r0, 8007040 <_dtoa_r+0xc8>
 8007024:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007026:	2301      	movs	r3, #1
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800702c:	2b00      	cmp	r3, #0
 800702e:	f000 8524 	beq.w	8007a7a <_dtoa_r+0xb02>
 8007032:	4b9a      	ldr	r3, [pc, #616]	; (800729c <_dtoa_r+0x324>)
 8007034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007036:	f103 3bff 	add.w	fp, r3, #4294967295
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	f000 bd28 	b.w	8007a90 <_dtoa_r+0xb18>
 8007040:	aa14      	add	r2, sp, #80	; 0x50
 8007042:	a915      	add	r1, sp, #84	; 0x54
 8007044:	ec47 6b10 	vmov	d0, r6, r7
 8007048:	4620      	mov	r0, r4
 800704a:	f001 fa06 	bl	800845a <__d2b>
 800704e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007052:	9004      	str	r0, [sp, #16]
 8007054:	2d00      	cmp	r5, #0
 8007056:	d07c      	beq.n	8007152 <_dtoa_r+0x1da>
 8007058:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800705c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007060:	46b2      	mov	sl, r6
 8007062:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800706a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800706e:	2200      	movs	r2, #0
 8007070:	4b8b      	ldr	r3, [pc, #556]	; (80072a0 <_dtoa_r+0x328>)
 8007072:	4650      	mov	r0, sl
 8007074:	4659      	mov	r1, fp
 8007076:	f7f9 f91f 	bl	80002b8 <__aeabi_dsub>
 800707a:	a381      	add	r3, pc, #516	; (adr r3, 8007280 <_dtoa_r+0x308>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f7f9 fad2 	bl	8000628 <__aeabi_dmul>
 8007084:	a380      	add	r3, pc, #512	; (adr r3, 8007288 <_dtoa_r+0x310>)
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f7f9 f917 	bl	80002bc <__adddf3>
 800708e:	4606      	mov	r6, r0
 8007090:	4628      	mov	r0, r5
 8007092:	460f      	mov	r7, r1
 8007094:	f7f9 fa5e 	bl	8000554 <__aeabi_i2d>
 8007098:	a37d      	add	r3, pc, #500	; (adr r3, 8007290 <_dtoa_r+0x318>)
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	f7f9 fac3 	bl	8000628 <__aeabi_dmul>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4630      	mov	r0, r6
 80070a8:	4639      	mov	r1, r7
 80070aa:	f7f9 f907 	bl	80002bc <__adddf3>
 80070ae:	4606      	mov	r6, r0
 80070b0:	460f      	mov	r7, r1
 80070b2:	f7f9 fd69 	bl	8000b88 <__aeabi_d2iz>
 80070b6:	2200      	movs	r2, #0
 80070b8:	4682      	mov	sl, r0
 80070ba:	2300      	movs	r3, #0
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 fd24 	bl	8000b0c <__aeabi_dcmplt>
 80070c4:	b148      	cbz	r0, 80070da <_dtoa_r+0x162>
 80070c6:	4650      	mov	r0, sl
 80070c8:	f7f9 fa44 	bl	8000554 <__aeabi_i2d>
 80070cc:	4632      	mov	r2, r6
 80070ce:	463b      	mov	r3, r7
 80070d0:	f7f9 fd12 	bl	8000af8 <__aeabi_dcmpeq>
 80070d4:	b908      	cbnz	r0, 80070da <_dtoa_r+0x162>
 80070d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070da:	f1ba 0f16 	cmp.w	sl, #22
 80070de:	d859      	bhi.n	8007194 <_dtoa_r+0x21c>
 80070e0:	4970      	ldr	r1, [pc, #448]	; (80072a4 <_dtoa_r+0x32c>)
 80070e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80070e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070ee:	f7f9 fd2b 	bl	8000b48 <__aeabi_dcmpgt>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d050      	beq.n	8007198 <_dtoa_r+0x220>
 80070f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070fa:	2300      	movs	r3, #0
 80070fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80070fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007100:	1b5d      	subs	r5, r3, r5
 8007102:	f1b5 0801 	subs.w	r8, r5, #1
 8007106:	bf49      	itett	mi
 8007108:	f1c5 0301 	rsbmi	r3, r5, #1
 800710c:	2300      	movpl	r3, #0
 800710e:	9305      	strmi	r3, [sp, #20]
 8007110:	f04f 0800 	movmi.w	r8, #0
 8007114:	bf58      	it	pl
 8007116:	9305      	strpl	r3, [sp, #20]
 8007118:	f1ba 0f00 	cmp.w	sl, #0
 800711c:	db3e      	blt.n	800719c <_dtoa_r+0x224>
 800711e:	2300      	movs	r3, #0
 8007120:	44d0      	add	r8, sl
 8007122:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007126:	9307      	str	r3, [sp, #28]
 8007128:	9b06      	ldr	r3, [sp, #24]
 800712a:	2b09      	cmp	r3, #9
 800712c:	f200 8090 	bhi.w	8007250 <_dtoa_r+0x2d8>
 8007130:	2b05      	cmp	r3, #5
 8007132:	bfc4      	itt	gt
 8007134:	3b04      	subgt	r3, #4
 8007136:	9306      	strgt	r3, [sp, #24]
 8007138:	9b06      	ldr	r3, [sp, #24]
 800713a:	f1a3 0302 	sub.w	r3, r3, #2
 800713e:	bfcc      	ite	gt
 8007140:	2500      	movgt	r5, #0
 8007142:	2501      	movle	r5, #1
 8007144:	2b03      	cmp	r3, #3
 8007146:	f200 808f 	bhi.w	8007268 <_dtoa_r+0x2f0>
 800714a:	e8df f003 	tbb	[pc, r3]
 800714e:	7f7d      	.short	0x7f7d
 8007150:	7131      	.short	0x7131
 8007152:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007156:	441d      	add	r5, r3
 8007158:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800715c:	2820      	cmp	r0, #32
 800715e:	dd13      	ble.n	8007188 <_dtoa_r+0x210>
 8007160:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007164:	9b00      	ldr	r3, [sp, #0]
 8007166:	fa08 f800 	lsl.w	r8, r8, r0
 800716a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800716e:	fa23 f000 	lsr.w	r0, r3, r0
 8007172:	ea48 0000 	orr.w	r0, r8, r0
 8007176:	f7f9 f9dd 	bl	8000534 <__aeabi_ui2d>
 800717a:	2301      	movs	r3, #1
 800717c:	4682      	mov	sl, r0
 800717e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007182:	3d01      	subs	r5, #1
 8007184:	9313      	str	r3, [sp, #76]	; 0x4c
 8007186:	e772      	b.n	800706e <_dtoa_r+0xf6>
 8007188:	9b00      	ldr	r3, [sp, #0]
 800718a:	f1c0 0020 	rsb	r0, r0, #32
 800718e:	fa03 f000 	lsl.w	r0, r3, r0
 8007192:	e7f0      	b.n	8007176 <_dtoa_r+0x1fe>
 8007194:	2301      	movs	r3, #1
 8007196:	e7b1      	b.n	80070fc <_dtoa_r+0x184>
 8007198:	900f      	str	r0, [sp, #60]	; 0x3c
 800719a:	e7b0      	b.n	80070fe <_dtoa_r+0x186>
 800719c:	9b05      	ldr	r3, [sp, #20]
 800719e:	eba3 030a 	sub.w	r3, r3, sl
 80071a2:	9305      	str	r3, [sp, #20]
 80071a4:	f1ca 0300 	rsb	r3, sl, #0
 80071a8:	9307      	str	r3, [sp, #28]
 80071aa:	2300      	movs	r3, #0
 80071ac:	930e      	str	r3, [sp, #56]	; 0x38
 80071ae:	e7bb      	b.n	8007128 <_dtoa_r+0x1b0>
 80071b0:	2301      	movs	r3, #1
 80071b2:	930a      	str	r3, [sp, #40]	; 0x28
 80071b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	dd59      	ble.n	800726e <_dtoa_r+0x2f6>
 80071ba:	9302      	str	r3, [sp, #8]
 80071bc:	4699      	mov	r9, r3
 80071be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071c0:	2200      	movs	r2, #0
 80071c2:	6072      	str	r2, [r6, #4]
 80071c4:	2204      	movs	r2, #4
 80071c6:	f102 0014 	add.w	r0, r2, #20
 80071ca:	4298      	cmp	r0, r3
 80071cc:	6871      	ldr	r1, [r6, #4]
 80071ce:	d953      	bls.n	8007278 <_dtoa_r+0x300>
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 feb5 	bl	8007f40 <_Balloc>
 80071d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d8:	6030      	str	r0, [r6, #0]
 80071da:	f1b9 0f0e 	cmp.w	r9, #14
 80071de:	f8d3 b000 	ldr.w	fp, [r3]
 80071e2:	f200 80e6 	bhi.w	80073b2 <_dtoa_r+0x43a>
 80071e6:	2d00      	cmp	r5, #0
 80071e8:	f000 80e3 	beq.w	80073b2 <_dtoa_r+0x43a>
 80071ec:	ed9d 7b00 	vldr	d7, [sp]
 80071f0:	f1ba 0f00 	cmp.w	sl, #0
 80071f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80071f8:	dd74      	ble.n	80072e4 <_dtoa_r+0x36c>
 80071fa:	4a2a      	ldr	r2, [pc, #168]	; (80072a4 <_dtoa_r+0x32c>)
 80071fc:	f00a 030f 	and.w	r3, sl, #15
 8007200:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007204:	ed93 7b00 	vldr	d7, [r3]
 8007208:	ea4f 162a 	mov.w	r6, sl, asr #4
 800720c:	06f0      	lsls	r0, r6, #27
 800720e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007212:	d565      	bpl.n	80072e0 <_dtoa_r+0x368>
 8007214:	4b24      	ldr	r3, [pc, #144]	; (80072a8 <_dtoa_r+0x330>)
 8007216:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800721a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800721e:	f7f9 fb2d 	bl	800087c <__aeabi_ddiv>
 8007222:	e9cd 0100 	strd	r0, r1, [sp]
 8007226:	f006 060f 	and.w	r6, r6, #15
 800722a:	2503      	movs	r5, #3
 800722c:	4f1e      	ldr	r7, [pc, #120]	; (80072a8 <_dtoa_r+0x330>)
 800722e:	e04c      	b.n	80072ca <_dtoa_r+0x352>
 8007230:	2301      	movs	r3, #1
 8007232:	930a      	str	r3, [sp, #40]	; 0x28
 8007234:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007236:	4453      	add	r3, sl
 8007238:	f103 0901 	add.w	r9, r3, #1
 800723c:	9302      	str	r3, [sp, #8]
 800723e:	464b      	mov	r3, r9
 8007240:	2b01      	cmp	r3, #1
 8007242:	bfb8      	it	lt
 8007244:	2301      	movlt	r3, #1
 8007246:	e7ba      	b.n	80071be <_dtoa_r+0x246>
 8007248:	2300      	movs	r3, #0
 800724a:	e7b2      	b.n	80071b2 <_dtoa_r+0x23a>
 800724c:	2300      	movs	r3, #0
 800724e:	e7f0      	b.n	8007232 <_dtoa_r+0x2ba>
 8007250:	2501      	movs	r5, #1
 8007252:	2300      	movs	r3, #0
 8007254:	9306      	str	r3, [sp, #24]
 8007256:	950a      	str	r5, [sp, #40]	; 0x28
 8007258:	f04f 33ff 	mov.w	r3, #4294967295
 800725c:	9302      	str	r3, [sp, #8]
 800725e:	4699      	mov	r9, r3
 8007260:	2200      	movs	r2, #0
 8007262:	2312      	movs	r3, #18
 8007264:	920b      	str	r2, [sp, #44]	; 0x2c
 8007266:	e7aa      	b.n	80071be <_dtoa_r+0x246>
 8007268:	2301      	movs	r3, #1
 800726a:	930a      	str	r3, [sp, #40]	; 0x28
 800726c:	e7f4      	b.n	8007258 <_dtoa_r+0x2e0>
 800726e:	2301      	movs	r3, #1
 8007270:	9302      	str	r3, [sp, #8]
 8007272:	4699      	mov	r9, r3
 8007274:	461a      	mov	r2, r3
 8007276:	e7f5      	b.n	8007264 <_dtoa_r+0x2ec>
 8007278:	3101      	adds	r1, #1
 800727a:	6071      	str	r1, [r6, #4]
 800727c:	0052      	lsls	r2, r2, #1
 800727e:	e7a2      	b.n	80071c6 <_dtoa_r+0x24e>
 8007280:	636f4361 	.word	0x636f4361
 8007284:	3fd287a7 	.word	0x3fd287a7
 8007288:	8b60c8b3 	.word	0x8b60c8b3
 800728c:	3fc68a28 	.word	0x3fc68a28
 8007290:	509f79fb 	.word	0x509f79fb
 8007294:	3fd34413 	.word	0x3fd34413
 8007298:	7ff00000 	.word	0x7ff00000
 800729c:	08008a69 	.word	0x08008a69
 80072a0:	3ff80000 	.word	0x3ff80000
 80072a4:	08008b28 	.word	0x08008b28
 80072a8:	08008b00 	.word	0x08008b00
 80072ac:	08008a95 	.word	0x08008a95
 80072b0:	07f1      	lsls	r1, r6, #31
 80072b2:	d508      	bpl.n	80072c6 <_dtoa_r+0x34e>
 80072b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072bc:	f7f9 f9b4 	bl	8000628 <__aeabi_dmul>
 80072c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072c4:	3501      	adds	r5, #1
 80072c6:	1076      	asrs	r6, r6, #1
 80072c8:	3708      	adds	r7, #8
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	d1f0      	bne.n	80072b0 <_dtoa_r+0x338>
 80072ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072d6:	f7f9 fad1 	bl	800087c <__aeabi_ddiv>
 80072da:	e9cd 0100 	strd	r0, r1, [sp]
 80072de:	e01a      	b.n	8007316 <_dtoa_r+0x39e>
 80072e0:	2502      	movs	r5, #2
 80072e2:	e7a3      	b.n	800722c <_dtoa_r+0x2b4>
 80072e4:	f000 80a0 	beq.w	8007428 <_dtoa_r+0x4b0>
 80072e8:	f1ca 0600 	rsb	r6, sl, #0
 80072ec:	4b9f      	ldr	r3, [pc, #636]	; (800756c <_dtoa_r+0x5f4>)
 80072ee:	4fa0      	ldr	r7, [pc, #640]	; (8007570 <_dtoa_r+0x5f8>)
 80072f0:	f006 020f 	and.w	r2, r6, #15
 80072f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007300:	f7f9 f992 	bl	8000628 <__aeabi_dmul>
 8007304:	e9cd 0100 	strd	r0, r1, [sp]
 8007308:	1136      	asrs	r6, r6, #4
 800730a:	2300      	movs	r3, #0
 800730c:	2502      	movs	r5, #2
 800730e:	2e00      	cmp	r6, #0
 8007310:	d17f      	bne.n	8007412 <_dtoa_r+0x49a>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e1      	bne.n	80072da <_dtoa_r+0x362>
 8007316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8087 	beq.w	800742c <_dtoa_r+0x4b4>
 800731e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007322:	2200      	movs	r2, #0
 8007324:	4b93      	ldr	r3, [pc, #588]	; (8007574 <_dtoa_r+0x5fc>)
 8007326:	4630      	mov	r0, r6
 8007328:	4639      	mov	r1, r7
 800732a:	f7f9 fbef 	bl	8000b0c <__aeabi_dcmplt>
 800732e:	2800      	cmp	r0, #0
 8007330:	d07c      	beq.n	800742c <_dtoa_r+0x4b4>
 8007332:	f1b9 0f00 	cmp.w	r9, #0
 8007336:	d079      	beq.n	800742c <_dtoa_r+0x4b4>
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	dd35      	ble.n	80073aa <_dtoa_r+0x432>
 800733e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007342:	9308      	str	r3, [sp, #32]
 8007344:	4639      	mov	r1, r7
 8007346:	2200      	movs	r2, #0
 8007348:	4b8b      	ldr	r3, [pc, #556]	; (8007578 <_dtoa_r+0x600>)
 800734a:	4630      	mov	r0, r6
 800734c:	f7f9 f96c 	bl	8000628 <__aeabi_dmul>
 8007350:	e9cd 0100 	strd	r0, r1, [sp]
 8007354:	9f02      	ldr	r7, [sp, #8]
 8007356:	3501      	adds	r5, #1
 8007358:	4628      	mov	r0, r5
 800735a:	f7f9 f8fb 	bl	8000554 <__aeabi_i2d>
 800735e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007362:	f7f9 f961 	bl	8000628 <__aeabi_dmul>
 8007366:	2200      	movs	r2, #0
 8007368:	4b84      	ldr	r3, [pc, #528]	; (800757c <_dtoa_r+0x604>)
 800736a:	f7f8 ffa7 	bl	80002bc <__adddf3>
 800736e:	4605      	mov	r5, r0
 8007370:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007374:	2f00      	cmp	r7, #0
 8007376:	d15d      	bne.n	8007434 <_dtoa_r+0x4bc>
 8007378:	2200      	movs	r2, #0
 800737a:	4b81      	ldr	r3, [pc, #516]	; (8007580 <_dtoa_r+0x608>)
 800737c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007380:	f7f8 ff9a 	bl	80002b8 <__aeabi_dsub>
 8007384:	462a      	mov	r2, r5
 8007386:	4633      	mov	r3, r6
 8007388:	e9cd 0100 	strd	r0, r1, [sp]
 800738c:	f7f9 fbdc 	bl	8000b48 <__aeabi_dcmpgt>
 8007390:	2800      	cmp	r0, #0
 8007392:	f040 8288 	bne.w	80078a6 <_dtoa_r+0x92e>
 8007396:	462a      	mov	r2, r5
 8007398:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800739c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073a0:	f7f9 fbb4 	bl	8000b0c <__aeabi_dcmplt>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f040 827c 	bne.w	80078a2 <_dtoa_r+0x92a>
 80073aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073ae:	e9cd 2300 	strd	r2, r3, [sp]
 80073b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f2c0 8150 	blt.w	800765a <_dtoa_r+0x6e2>
 80073ba:	f1ba 0f0e 	cmp.w	sl, #14
 80073be:	f300 814c 	bgt.w	800765a <_dtoa_r+0x6e2>
 80073c2:	4b6a      	ldr	r3, [pc, #424]	; (800756c <_dtoa_r+0x5f4>)
 80073c4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073c8:	ed93 7b00 	vldr	d7, [r3]
 80073cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073d4:	f280 80d8 	bge.w	8007588 <_dtoa_r+0x610>
 80073d8:	f1b9 0f00 	cmp.w	r9, #0
 80073dc:	f300 80d4 	bgt.w	8007588 <_dtoa_r+0x610>
 80073e0:	f040 825e 	bne.w	80078a0 <_dtoa_r+0x928>
 80073e4:	2200      	movs	r2, #0
 80073e6:	4b66      	ldr	r3, [pc, #408]	; (8007580 <_dtoa_r+0x608>)
 80073e8:	ec51 0b17 	vmov	r0, r1, d7
 80073ec:	f7f9 f91c 	bl	8000628 <__aeabi_dmul>
 80073f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f4:	f7f9 fb9e 	bl	8000b34 <__aeabi_dcmpge>
 80073f8:	464f      	mov	r7, r9
 80073fa:	464e      	mov	r6, r9
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f040 8234 	bne.w	800786a <_dtoa_r+0x8f2>
 8007402:	2331      	movs	r3, #49	; 0x31
 8007404:	f10b 0501 	add.w	r5, fp, #1
 8007408:	f88b 3000 	strb.w	r3, [fp]
 800740c:	f10a 0a01 	add.w	sl, sl, #1
 8007410:	e22f      	b.n	8007872 <_dtoa_r+0x8fa>
 8007412:	07f2      	lsls	r2, r6, #31
 8007414:	d505      	bpl.n	8007422 <_dtoa_r+0x4aa>
 8007416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800741a:	f7f9 f905 	bl	8000628 <__aeabi_dmul>
 800741e:	3501      	adds	r5, #1
 8007420:	2301      	movs	r3, #1
 8007422:	1076      	asrs	r6, r6, #1
 8007424:	3708      	adds	r7, #8
 8007426:	e772      	b.n	800730e <_dtoa_r+0x396>
 8007428:	2502      	movs	r5, #2
 800742a:	e774      	b.n	8007316 <_dtoa_r+0x39e>
 800742c:	f8cd a020 	str.w	sl, [sp, #32]
 8007430:	464f      	mov	r7, r9
 8007432:	e791      	b.n	8007358 <_dtoa_r+0x3e0>
 8007434:	4b4d      	ldr	r3, [pc, #308]	; (800756c <_dtoa_r+0x5f4>)
 8007436:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800743a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007440:	2b00      	cmp	r3, #0
 8007442:	d047      	beq.n	80074d4 <_dtoa_r+0x55c>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	2000      	movs	r0, #0
 800744a:	494e      	ldr	r1, [pc, #312]	; (8007584 <_dtoa_r+0x60c>)
 800744c:	f7f9 fa16 	bl	800087c <__aeabi_ddiv>
 8007450:	462a      	mov	r2, r5
 8007452:	4633      	mov	r3, r6
 8007454:	f7f8 ff30 	bl	80002b8 <__aeabi_dsub>
 8007458:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800745c:	465d      	mov	r5, fp
 800745e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007462:	f7f9 fb91 	bl	8000b88 <__aeabi_d2iz>
 8007466:	4606      	mov	r6, r0
 8007468:	f7f9 f874 	bl	8000554 <__aeabi_i2d>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007474:	f7f8 ff20 	bl	80002b8 <__aeabi_dsub>
 8007478:	3630      	adds	r6, #48	; 0x30
 800747a:	f805 6b01 	strb.w	r6, [r5], #1
 800747e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007482:	e9cd 0100 	strd	r0, r1, [sp]
 8007486:	f7f9 fb41 	bl	8000b0c <__aeabi_dcmplt>
 800748a:	2800      	cmp	r0, #0
 800748c:	d163      	bne.n	8007556 <_dtoa_r+0x5de>
 800748e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007492:	2000      	movs	r0, #0
 8007494:	4937      	ldr	r1, [pc, #220]	; (8007574 <_dtoa_r+0x5fc>)
 8007496:	f7f8 ff0f 	bl	80002b8 <__aeabi_dsub>
 800749a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800749e:	f7f9 fb35 	bl	8000b0c <__aeabi_dcmplt>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	f040 80b7 	bne.w	8007616 <_dtoa_r+0x69e>
 80074a8:	eba5 030b 	sub.w	r3, r5, fp
 80074ac:	429f      	cmp	r7, r3
 80074ae:	f77f af7c 	ble.w	80073aa <_dtoa_r+0x432>
 80074b2:	2200      	movs	r2, #0
 80074b4:	4b30      	ldr	r3, [pc, #192]	; (8007578 <_dtoa_r+0x600>)
 80074b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074ba:	f7f9 f8b5 	bl	8000628 <__aeabi_dmul>
 80074be:	2200      	movs	r2, #0
 80074c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074c4:	4b2c      	ldr	r3, [pc, #176]	; (8007578 <_dtoa_r+0x600>)
 80074c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074ca:	f7f9 f8ad 	bl	8000628 <__aeabi_dmul>
 80074ce:	e9cd 0100 	strd	r0, r1, [sp]
 80074d2:	e7c4      	b.n	800745e <_dtoa_r+0x4e6>
 80074d4:	462a      	mov	r2, r5
 80074d6:	4633      	mov	r3, r6
 80074d8:	f7f9 f8a6 	bl	8000628 <__aeabi_dmul>
 80074dc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074e0:	eb0b 0507 	add.w	r5, fp, r7
 80074e4:	465e      	mov	r6, fp
 80074e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074ea:	f7f9 fb4d 	bl	8000b88 <__aeabi_d2iz>
 80074ee:	4607      	mov	r7, r0
 80074f0:	f7f9 f830 	bl	8000554 <__aeabi_i2d>
 80074f4:	3730      	adds	r7, #48	; 0x30
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074fe:	f7f8 fedb 	bl	80002b8 <__aeabi_dsub>
 8007502:	f806 7b01 	strb.w	r7, [r6], #1
 8007506:	42ae      	cmp	r6, r5
 8007508:	e9cd 0100 	strd	r0, r1, [sp]
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	d126      	bne.n	8007560 <_dtoa_r+0x5e8>
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <_dtoa_r+0x60c>)
 8007514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007518:	f7f8 fed0 	bl	80002bc <__adddf3>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007524:	f7f9 fb10 	bl	8000b48 <__aeabi_dcmpgt>
 8007528:	2800      	cmp	r0, #0
 800752a:	d174      	bne.n	8007616 <_dtoa_r+0x69e>
 800752c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007530:	2000      	movs	r0, #0
 8007532:	4914      	ldr	r1, [pc, #80]	; (8007584 <_dtoa_r+0x60c>)
 8007534:	f7f8 fec0 	bl	80002b8 <__aeabi_dsub>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007540:	f7f9 fae4 	bl	8000b0c <__aeabi_dcmplt>
 8007544:	2800      	cmp	r0, #0
 8007546:	f43f af30 	beq.w	80073aa <_dtoa_r+0x432>
 800754a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800754e:	2b30      	cmp	r3, #48	; 0x30
 8007550:	f105 32ff 	add.w	r2, r5, #4294967295
 8007554:	d002      	beq.n	800755c <_dtoa_r+0x5e4>
 8007556:	f8dd a020 	ldr.w	sl, [sp, #32]
 800755a:	e04a      	b.n	80075f2 <_dtoa_r+0x67a>
 800755c:	4615      	mov	r5, r2
 800755e:	e7f4      	b.n	800754a <_dtoa_r+0x5d2>
 8007560:	4b05      	ldr	r3, [pc, #20]	; (8007578 <_dtoa_r+0x600>)
 8007562:	f7f9 f861 	bl	8000628 <__aeabi_dmul>
 8007566:	e9cd 0100 	strd	r0, r1, [sp]
 800756a:	e7bc      	b.n	80074e6 <_dtoa_r+0x56e>
 800756c:	08008b28 	.word	0x08008b28
 8007570:	08008b00 	.word	0x08008b00
 8007574:	3ff00000 	.word	0x3ff00000
 8007578:	40240000 	.word	0x40240000
 800757c:	401c0000 	.word	0x401c0000
 8007580:	40140000 	.word	0x40140000
 8007584:	3fe00000 	.word	0x3fe00000
 8007588:	e9dd 6700 	ldrd	r6, r7, [sp]
 800758c:	465d      	mov	r5, fp
 800758e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007592:	4630      	mov	r0, r6
 8007594:	4639      	mov	r1, r7
 8007596:	f7f9 f971 	bl	800087c <__aeabi_ddiv>
 800759a:	f7f9 faf5 	bl	8000b88 <__aeabi_d2iz>
 800759e:	4680      	mov	r8, r0
 80075a0:	f7f8 ffd8 	bl	8000554 <__aeabi_i2d>
 80075a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a8:	f7f9 f83e 	bl	8000628 <__aeabi_dmul>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4630      	mov	r0, r6
 80075b2:	4639      	mov	r1, r7
 80075b4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80075b8:	f7f8 fe7e 	bl	80002b8 <__aeabi_dsub>
 80075bc:	f805 6b01 	strb.w	r6, [r5], #1
 80075c0:	eba5 060b 	sub.w	r6, r5, fp
 80075c4:	45b1      	cmp	r9, r6
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	d139      	bne.n	8007640 <_dtoa_r+0x6c8>
 80075cc:	f7f8 fe76 	bl	80002bc <__adddf3>
 80075d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075d4:	4606      	mov	r6, r0
 80075d6:	460f      	mov	r7, r1
 80075d8:	f7f9 fab6 	bl	8000b48 <__aeabi_dcmpgt>
 80075dc:	b9c8      	cbnz	r0, 8007612 <_dtoa_r+0x69a>
 80075de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075e2:	4630      	mov	r0, r6
 80075e4:	4639      	mov	r1, r7
 80075e6:	f7f9 fa87 	bl	8000af8 <__aeabi_dcmpeq>
 80075ea:	b110      	cbz	r0, 80075f2 <_dtoa_r+0x67a>
 80075ec:	f018 0f01 	tst.w	r8, #1
 80075f0:	d10f      	bne.n	8007612 <_dtoa_r+0x69a>
 80075f2:	9904      	ldr	r1, [sp, #16]
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 fcd7 	bl	8007fa8 <_Bfree>
 80075fa:	2300      	movs	r3, #0
 80075fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075fe:	702b      	strb	r3, [r5, #0]
 8007600:	f10a 0301 	add.w	r3, sl, #1
 8007604:	6013      	str	r3, [r2, #0]
 8007606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007608:	2b00      	cmp	r3, #0
 800760a:	f000 8241 	beq.w	8007a90 <_dtoa_r+0xb18>
 800760e:	601d      	str	r5, [r3, #0]
 8007610:	e23e      	b.n	8007a90 <_dtoa_r+0xb18>
 8007612:	f8cd a020 	str.w	sl, [sp, #32]
 8007616:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800761a:	2a39      	cmp	r2, #57	; 0x39
 800761c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007620:	d108      	bne.n	8007634 <_dtoa_r+0x6bc>
 8007622:	459b      	cmp	fp, r3
 8007624:	d10a      	bne.n	800763c <_dtoa_r+0x6c4>
 8007626:	9b08      	ldr	r3, [sp, #32]
 8007628:	3301      	adds	r3, #1
 800762a:	9308      	str	r3, [sp, #32]
 800762c:	2330      	movs	r3, #48	; 0x30
 800762e:	f88b 3000 	strb.w	r3, [fp]
 8007632:	465b      	mov	r3, fp
 8007634:	781a      	ldrb	r2, [r3, #0]
 8007636:	3201      	adds	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	e78c      	b.n	8007556 <_dtoa_r+0x5de>
 800763c:	461d      	mov	r5, r3
 800763e:	e7ea      	b.n	8007616 <_dtoa_r+0x69e>
 8007640:	2200      	movs	r2, #0
 8007642:	4b9b      	ldr	r3, [pc, #620]	; (80078b0 <_dtoa_r+0x938>)
 8007644:	f7f8 fff0 	bl	8000628 <__aeabi_dmul>
 8007648:	2200      	movs	r2, #0
 800764a:	2300      	movs	r3, #0
 800764c:	4606      	mov	r6, r0
 800764e:	460f      	mov	r7, r1
 8007650:	f7f9 fa52 	bl	8000af8 <__aeabi_dcmpeq>
 8007654:	2800      	cmp	r0, #0
 8007656:	d09a      	beq.n	800758e <_dtoa_r+0x616>
 8007658:	e7cb      	b.n	80075f2 <_dtoa_r+0x67a>
 800765a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800765c:	2a00      	cmp	r2, #0
 800765e:	f000 808b 	beq.w	8007778 <_dtoa_r+0x800>
 8007662:	9a06      	ldr	r2, [sp, #24]
 8007664:	2a01      	cmp	r2, #1
 8007666:	dc6e      	bgt.n	8007746 <_dtoa_r+0x7ce>
 8007668:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800766a:	2a00      	cmp	r2, #0
 800766c:	d067      	beq.n	800773e <_dtoa_r+0x7c6>
 800766e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007672:	9f07      	ldr	r7, [sp, #28]
 8007674:	9d05      	ldr	r5, [sp, #20]
 8007676:	9a05      	ldr	r2, [sp, #20]
 8007678:	2101      	movs	r1, #1
 800767a:	441a      	add	r2, r3
 800767c:	4620      	mov	r0, r4
 800767e:	9205      	str	r2, [sp, #20]
 8007680:	4498      	add	r8, r3
 8007682:	f000 fd31 	bl	80080e8 <__i2b>
 8007686:	4606      	mov	r6, r0
 8007688:	2d00      	cmp	r5, #0
 800768a:	dd0c      	ble.n	80076a6 <_dtoa_r+0x72e>
 800768c:	f1b8 0f00 	cmp.w	r8, #0
 8007690:	dd09      	ble.n	80076a6 <_dtoa_r+0x72e>
 8007692:	4545      	cmp	r5, r8
 8007694:	9a05      	ldr	r2, [sp, #20]
 8007696:	462b      	mov	r3, r5
 8007698:	bfa8      	it	ge
 800769a:	4643      	movge	r3, r8
 800769c:	1ad2      	subs	r2, r2, r3
 800769e:	9205      	str	r2, [sp, #20]
 80076a0:	1aed      	subs	r5, r5, r3
 80076a2:	eba8 0803 	sub.w	r8, r8, r3
 80076a6:	9b07      	ldr	r3, [sp, #28]
 80076a8:	b1eb      	cbz	r3, 80076e6 <_dtoa_r+0x76e>
 80076aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d067      	beq.n	8007780 <_dtoa_r+0x808>
 80076b0:	b18f      	cbz	r7, 80076d6 <_dtoa_r+0x75e>
 80076b2:	4631      	mov	r1, r6
 80076b4:	463a      	mov	r2, r7
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 fdb6 	bl	8008228 <__pow5mult>
 80076bc:	9a04      	ldr	r2, [sp, #16]
 80076be:	4601      	mov	r1, r0
 80076c0:	4606      	mov	r6, r0
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 fd19 	bl	80080fa <__multiply>
 80076c8:	9904      	ldr	r1, [sp, #16]
 80076ca:	9008      	str	r0, [sp, #32]
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 fc6b 	bl	8007fa8 <_Bfree>
 80076d2:	9b08      	ldr	r3, [sp, #32]
 80076d4:	9304      	str	r3, [sp, #16]
 80076d6:	9b07      	ldr	r3, [sp, #28]
 80076d8:	1bda      	subs	r2, r3, r7
 80076da:	d004      	beq.n	80076e6 <_dtoa_r+0x76e>
 80076dc:	9904      	ldr	r1, [sp, #16]
 80076de:	4620      	mov	r0, r4
 80076e0:	f000 fda2 	bl	8008228 <__pow5mult>
 80076e4:	9004      	str	r0, [sp, #16]
 80076e6:	2101      	movs	r1, #1
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 fcfd 	bl	80080e8 <__i2b>
 80076ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076f0:	4607      	mov	r7, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 81d0 	beq.w	8007a98 <_dtoa_r+0xb20>
 80076f8:	461a      	mov	r2, r3
 80076fa:	4601      	mov	r1, r0
 80076fc:	4620      	mov	r0, r4
 80076fe:	f000 fd93 	bl	8008228 <__pow5mult>
 8007702:	9b06      	ldr	r3, [sp, #24]
 8007704:	2b01      	cmp	r3, #1
 8007706:	4607      	mov	r7, r0
 8007708:	dc40      	bgt.n	800778c <_dtoa_r+0x814>
 800770a:	9b00      	ldr	r3, [sp, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d139      	bne.n	8007784 <_dtoa_r+0x80c>
 8007710:	9b01      	ldr	r3, [sp, #4]
 8007712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007716:	2b00      	cmp	r3, #0
 8007718:	d136      	bne.n	8007788 <_dtoa_r+0x810>
 800771a:	9b01      	ldr	r3, [sp, #4]
 800771c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007720:	0d1b      	lsrs	r3, r3, #20
 8007722:	051b      	lsls	r3, r3, #20
 8007724:	b12b      	cbz	r3, 8007732 <_dtoa_r+0x7ba>
 8007726:	9b05      	ldr	r3, [sp, #20]
 8007728:	3301      	adds	r3, #1
 800772a:	9305      	str	r3, [sp, #20]
 800772c:	f108 0801 	add.w	r8, r8, #1
 8007730:	2301      	movs	r3, #1
 8007732:	9307      	str	r3, [sp, #28]
 8007734:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007736:	2b00      	cmp	r3, #0
 8007738:	d12a      	bne.n	8007790 <_dtoa_r+0x818>
 800773a:	2001      	movs	r0, #1
 800773c:	e030      	b.n	80077a0 <_dtoa_r+0x828>
 800773e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007740:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007744:	e795      	b.n	8007672 <_dtoa_r+0x6fa>
 8007746:	9b07      	ldr	r3, [sp, #28]
 8007748:	f109 37ff 	add.w	r7, r9, #4294967295
 800774c:	42bb      	cmp	r3, r7
 800774e:	bfbf      	itttt	lt
 8007750:	9b07      	ldrlt	r3, [sp, #28]
 8007752:	9707      	strlt	r7, [sp, #28]
 8007754:	1afa      	sublt	r2, r7, r3
 8007756:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007758:	bfbb      	ittet	lt
 800775a:	189b      	addlt	r3, r3, r2
 800775c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800775e:	1bdf      	subge	r7, r3, r7
 8007760:	2700      	movlt	r7, #0
 8007762:	f1b9 0f00 	cmp.w	r9, #0
 8007766:	bfb5      	itete	lt
 8007768:	9b05      	ldrlt	r3, [sp, #20]
 800776a:	9d05      	ldrge	r5, [sp, #20]
 800776c:	eba3 0509 	sublt.w	r5, r3, r9
 8007770:	464b      	movge	r3, r9
 8007772:	bfb8      	it	lt
 8007774:	2300      	movlt	r3, #0
 8007776:	e77e      	b.n	8007676 <_dtoa_r+0x6fe>
 8007778:	9f07      	ldr	r7, [sp, #28]
 800777a:	9d05      	ldr	r5, [sp, #20]
 800777c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800777e:	e783      	b.n	8007688 <_dtoa_r+0x710>
 8007780:	9a07      	ldr	r2, [sp, #28]
 8007782:	e7ab      	b.n	80076dc <_dtoa_r+0x764>
 8007784:	2300      	movs	r3, #0
 8007786:	e7d4      	b.n	8007732 <_dtoa_r+0x7ba>
 8007788:	9b00      	ldr	r3, [sp, #0]
 800778a:	e7d2      	b.n	8007732 <_dtoa_r+0x7ba>
 800778c:	2300      	movs	r3, #0
 800778e:	9307      	str	r3, [sp, #28]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007796:	6918      	ldr	r0, [r3, #16]
 8007798:	f000 fc58 	bl	800804c <__hi0bits>
 800779c:	f1c0 0020 	rsb	r0, r0, #32
 80077a0:	4440      	add	r0, r8
 80077a2:	f010 001f 	ands.w	r0, r0, #31
 80077a6:	d047      	beq.n	8007838 <_dtoa_r+0x8c0>
 80077a8:	f1c0 0320 	rsb	r3, r0, #32
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	dd3b      	ble.n	8007828 <_dtoa_r+0x8b0>
 80077b0:	9b05      	ldr	r3, [sp, #20]
 80077b2:	f1c0 001c 	rsb	r0, r0, #28
 80077b6:	4403      	add	r3, r0
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	4405      	add	r5, r0
 80077bc:	4480      	add	r8, r0
 80077be:	9b05      	ldr	r3, [sp, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dd05      	ble.n	80077d0 <_dtoa_r+0x858>
 80077c4:	461a      	mov	r2, r3
 80077c6:	9904      	ldr	r1, [sp, #16]
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fd7b 	bl	80082c4 <__lshift>
 80077ce:	9004      	str	r0, [sp, #16]
 80077d0:	f1b8 0f00 	cmp.w	r8, #0
 80077d4:	dd05      	ble.n	80077e2 <_dtoa_r+0x86a>
 80077d6:	4639      	mov	r1, r7
 80077d8:	4642      	mov	r2, r8
 80077da:	4620      	mov	r0, r4
 80077dc:	f000 fd72 	bl	80082c4 <__lshift>
 80077e0:	4607      	mov	r7, r0
 80077e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077e4:	b353      	cbz	r3, 800783c <_dtoa_r+0x8c4>
 80077e6:	4639      	mov	r1, r7
 80077e8:	9804      	ldr	r0, [sp, #16]
 80077ea:	f000 fdbf 	bl	800836c <__mcmp>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	da24      	bge.n	800783c <_dtoa_r+0x8c4>
 80077f2:	2300      	movs	r3, #0
 80077f4:	220a      	movs	r2, #10
 80077f6:	9904      	ldr	r1, [sp, #16]
 80077f8:	4620      	mov	r0, r4
 80077fa:	f000 fbec 	bl	8007fd6 <__multadd>
 80077fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007800:	9004      	str	r0, [sp, #16]
 8007802:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 814d 	beq.w	8007aa6 <_dtoa_r+0xb2e>
 800780c:	2300      	movs	r3, #0
 800780e:	4631      	mov	r1, r6
 8007810:	220a      	movs	r2, #10
 8007812:	4620      	mov	r0, r4
 8007814:	f000 fbdf 	bl	8007fd6 <__multadd>
 8007818:	9b02      	ldr	r3, [sp, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	4606      	mov	r6, r0
 800781e:	dc4f      	bgt.n	80078c0 <_dtoa_r+0x948>
 8007820:	9b06      	ldr	r3, [sp, #24]
 8007822:	2b02      	cmp	r3, #2
 8007824:	dd4c      	ble.n	80078c0 <_dtoa_r+0x948>
 8007826:	e011      	b.n	800784c <_dtoa_r+0x8d4>
 8007828:	d0c9      	beq.n	80077be <_dtoa_r+0x846>
 800782a:	9a05      	ldr	r2, [sp, #20]
 800782c:	331c      	adds	r3, #28
 800782e:	441a      	add	r2, r3
 8007830:	9205      	str	r2, [sp, #20]
 8007832:	441d      	add	r5, r3
 8007834:	4498      	add	r8, r3
 8007836:	e7c2      	b.n	80077be <_dtoa_r+0x846>
 8007838:	4603      	mov	r3, r0
 800783a:	e7f6      	b.n	800782a <_dtoa_r+0x8b2>
 800783c:	f1b9 0f00 	cmp.w	r9, #0
 8007840:	dc38      	bgt.n	80078b4 <_dtoa_r+0x93c>
 8007842:	9b06      	ldr	r3, [sp, #24]
 8007844:	2b02      	cmp	r3, #2
 8007846:	dd35      	ble.n	80078b4 <_dtoa_r+0x93c>
 8007848:	f8cd 9008 	str.w	r9, [sp, #8]
 800784c:	9b02      	ldr	r3, [sp, #8]
 800784e:	b963      	cbnz	r3, 800786a <_dtoa_r+0x8f2>
 8007850:	4639      	mov	r1, r7
 8007852:	2205      	movs	r2, #5
 8007854:	4620      	mov	r0, r4
 8007856:	f000 fbbe 	bl	8007fd6 <__multadd>
 800785a:	4601      	mov	r1, r0
 800785c:	4607      	mov	r7, r0
 800785e:	9804      	ldr	r0, [sp, #16]
 8007860:	f000 fd84 	bl	800836c <__mcmp>
 8007864:	2800      	cmp	r0, #0
 8007866:	f73f adcc 	bgt.w	8007402 <_dtoa_r+0x48a>
 800786a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800786c:	465d      	mov	r5, fp
 800786e:	ea6f 0a03 	mvn.w	sl, r3
 8007872:	f04f 0900 	mov.w	r9, #0
 8007876:	4639      	mov	r1, r7
 8007878:	4620      	mov	r0, r4
 800787a:	f000 fb95 	bl	8007fa8 <_Bfree>
 800787e:	2e00      	cmp	r6, #0
 8007880:	f43f aeb7 	beq.w	80075f2 <_dtoa_r+0x67a>
 8007884:	f1b9 0f00 	cmp.w	r9, #0
 8007888:	d005      	beq.n	8007896 <_dtoa_r+0x91e>
 800788a:	45b1      	cmp	r9, r6
 800788c:	d003      	beq.n	8007896 <_dtoa_r+0x91e>
 800788e:	4649      	mov	r1, r9
 8007890:	4620      	mov	r0, r4
 8007892:	f000 fb89 	bl	8007fa8 <_Bfree>
 8007896:	4631      	mov	r1, r6
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fb85 	bl	8007fa8 <_Bfree>
 800789e:	e6a8      	b.n	80075f2 <_dtoa_r+0x67a>
 80078a0:	2700      	movs	r7, #0
 80078a2:	463e      	mov	r6, r7
 80078a4:	e7e1      	b.n	800786a <_dtoa_r+0x8f2>
 80078a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80078aa:	463e      	mov	r6, r7
 80078ac:	e5a9      	b.n	8007402 <_dtoa_r+0x48a>
 80078ae:	bf00      	nop
 80078b0:	40240000 	.word	0x40240000
 80078b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 80fa 	beq.w	8007ab4 <_dtoa_r+0xb3c>
 80078c0:	2d00      	cmp	r5, #0
 80078c2:	dd05      	ble.n	80078d0 <_dtoa_r+0x958>
 80078c4:	4631      	mov	r1, r6
 80078c6:	462a      	mov	r2, r5
 80078c8:	4620      	mov	r0, r4
 80078ca:	f000 fcfb 	bl	80082c4 <__lshift>
 80078ce:	4606      	mov	r6, r0
 80078d0:	9b07      	ldr	r3, [sp, #28]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d04c      	beq.n	8007970 <_dtoa_r+0x9f8>
 80078d6:	6871      	ldr	r1, [r6, #4]
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 fb31 	bl	8007f40 <_Balloc>
 80078de:	6932      	ldr	r2, [r6, #16]
 80078e0:	3202      	adds	r2, #2
 80078e2:	4605      	mov	r5, r0
 80078e4:	0092      	lsls	r2, r2, #2
 80078e6:	f106 010c 	add.w	r1, r6, #12
 80078ea:	300c      	adds	r0, #12
 80078ec:	f7fe fb46 	bl	8005f7c <memcpy>
 80078f0:	2201      	movs	r2, #1
 80078f2:	4629      	mov	r1, r5
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 fce5 	bl	80082c4 <__lshift>
 80078fa:	9b00      	ldr	r3, [sp, #0]
 80078fc:	f8cd b014 	str.w	fp, [sp, #20]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	46b1      	mov	r9, r6
 8007906:	9307      	str	r3, [sp, #28]
 8007908:	4606      	mov	r6, r0
 800790a:	4639      	mov	r1, r7
 800790c:	9804      	ldr	r0, [sp, #16]
 800790e:	f7ff faa7 	bl	8006e60 <quorem>
 8007912:	4649      	mov	r1, r9
 8007914:	4605      	mov	r5, r0
 8007916:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800791a:	9804      	ldr	r0, [sp, #16]
 800791c:	f000 fd26 	bl	800836c <__mcmp>
 8007920:	4632      	mov	r2, r6
 8007922:	9000      	str	r0, [sp, #0]
 8007924:	4639      	mov	r1, r7
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fd3a 	bl	80083a0 <__mdiff>
 800792c:	68c3      	ldr	r3, [r0, #12]
 800792e:	4602      	mov	r2, r0
 8007930:	bb03      	cbnz	r3, 8007974 <_dtoa_r+0x9fc>
 8007932:	4601      	mov	r1, r0
 8007934:	9008      	str	r0, [sp, #32]
 8007936:	9804      	ldr	r0, [sp, #16]
 8007938:	f000 fd18 	bl	800836c <__mcmp>
 800793c:	9a08      	ldr	r2, [sp, #32]
 800793e:	4603      	mov	r3, r0
 8007940:	4611      	mov	r1, r2
 8007942:	4620      	mov	r0, r4
 8007944:	9308      	str	r3, [sp, #32]
 8007946:	f000 fb2f 	bl	8007fa8 <_Bfree>
 800794a:	9b08      	ldr	r3, [sp, #32]
 800794c:	b9a3      	cbnz	r3, 8007978 <_dtoa_r+0xa00>
 800794e:	9a06      	ldr	r2, [sp, #24]
 8007950:	b992      	cbnz	r2, 8007978 <_dtoa_r+0xa00>
 8007952:	9a07      	ldr	r2, [sp, #28]
 8007954:	b982      	cbnz	r2, 8007978 <_dtoa_r+0xa00>
 8007956:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800795a:	d029      	beq.n	80079b0 <_dtoa_r+0xa38>
 800795c:	9b00      	ldr	r3, [sp, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	dd01      	ble.n	8007966 <_dtoa_r+0x9ee>
 8007962:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007966:	9b05      	ldr	r3, [sp, #20]
 8007968:	1c5d      	adds	r5, r3, #1
 800796a:	f883 8000 	strb.w	r8, [r3]
 800796e:	e782      	b.n	8007876 <_dtoa_r+0x8fe>
 8007970:	4630      	mov	r0, r6
 8007972:	e7c2      	b.n	80078fa <_dtoa_r+0x982>
 8007974:	2301      	movs	r3, #1
 8007976:	e7e3      	b.n	8007940 <_dtoa_r+0x9c8>
 8007978:	9a00      	ldr	r2, [sp, #0]
 800797a:	2a00      	cmp	r2, #0
 800797c:	db04      	blt.n	8007988 <_dtoa_r+0xa10>
 800797e:	d125      	bne.n	80079cc <_dtoa_r+0xa54>
 8007980:	9a06      	ldr	r2, [sp, #24]
 8007982:	bb1a      	cbnz	r2, 80079cc <_dtoa_r+0xa54>
 8007984:	9a07      	ldr	r2, [sp, #28]
 8007986:	bb0a      	cbnz	r2, 80079cc <_dtoa_r+0xa54>
 8007988:	2b00      	cmp	r3, #0
 800798a:	ddec      	ble.n	8007966 <_dtoa_r+0x9ee>
 800798c:	2201      	movs	r2, #1
 800798e:	9904      	ldr	r1, [sp, #16]
 8007990:	4620      	mov	r0, r4
 8007992:	f000 fc97 	bl	80082c4 <__lshift>
 8007996:	4639      	mov	r1, r7
 8007998:	9004      	str	r0, [sp, #16]
 800799a:	f000 fce7 	bl	800836c <__mcmp>
 800799e:	2800      	cmp	r0, #0
 80079a0:	dc03      	bgt.n	80079aa <_dtoa_r+0xa32>
 80079a2:	d1e0      	bne.n	8007966 <_dtoa_r+0x9ee>
 80079a4:	f018 0f01 	tst.w	r8, #1
 80079a8:	d0dd      	beq.n	8007966 <_dtoa_r+0x9ee>
 80079aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079ae:	d1d8      	bne.n	8007962 <_dtoa_r+0x9ea>
 80079b0:	9b05      	ldr	r3, [sp, #20]
 80079b2:	9a05      	ldr	r2, [sp, #20]
 80079b4:	1c5d      	adds	r5, r3, #1
 80079b6:	2339      	movs	r3, #57	; 0x39
 80079b8:	7013      	strb	r3, [r2, #0]
 80079ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079be:	2b39      	cmp	r3, #57	; 0x39
 80079c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80079c4:	d04f      	beq.n	8007a66 <_dtoa_r+0xaee>
 80079c6:	3301      	adds	r3, #1
 80079c8:	7013      	strb	r3, [r2, #0]
 80079ca:	e754      	b.n	8007876 <_dtoa_r+0x8fe>
 80079cc:	9a05      	ldr	r2, [sp, #20]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f102 0501 	add.w	r5, r2, #1
 80079d4:	dd06      	ble.n	80079e4 <_dtoa_r+0xa6c>
 80079d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079da:	d0e9      	beq.n	80079b0 <_dtoa_r+0xa38>
 80079dc:	f108 0801 	add.w	r8, r8, #1
 80079e0:	9b05      	ldr	r3, [sp, #20]
 80079e2:	e7c2      	b.n	800796a <_dtoa_r+0x9f2>
 80079e4:	9a02      	ldr	r2, [sp, #8]
 80079e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80079ea:	eba5 030b 	sub.w	r3, r5, fp
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d021      	beq.n	8007a36 <_dtoa_r+0xabe>
 80079f2:	2300      	movs	r3, #0
 80079f4:	220a      	movs	r2, #10
 80079f6:	9904      	ldr	r1, [sp, #16]
 80079f8:	4620      	mov	r0, r4
 80079fa:	f000 faec 	bl	8007fd6 <__multadd>
 80079fe:	45b1      	cmp	r9, r6
 8007a00:	9004      	str	r0, [sp, #16]
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	f04f 020a 	mov.w	r2, #10
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	d105      	bne.n	8007a1c <_dtoa_r+0xaa4>
 8007a10:	f000 fae1 	bl	8007fd6 <__multadd>
 8007a14:	4681      	mov	r9, r0
 8007a16:	4606      	mov	r6, r0
 8007a18:	9505      	str	r5, [sp, #20]
 8007a1a:	e776      	b.n	800790a <_dtoa_r+0x992>
 8007a1c:	f000 fadb 	bl	8007fd6 <__multadd>
 8007a20:	4631      	mov	r1, r6
 8007a22:	4681      	mov	r9, r0
 8007a24:	2300      	movs	r3, #0
 8007a26:	220a      	movs	r2, #10
 8007a28:	4620      	mov	r0, r4
 8007a2a:	f000 fad4 	bl	8007fd6 <__multadd>
 8007a2e:	4606      	mov	r6, r0
 8007a30:	e7f2      	b.n	8007a18 <_dtoa_r+0xaa0>
 8007a32:	f04f 0900 	mov.w	r9, #0
 8007a36:	2201      	movs	r2, #1
 8007a38:	9904      	ldr	r1, [sp, #16]
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f000 fc42 	bl	80082c4 <__lshift>
 8007a40:	4639      	mov	r1, r7
 8007a42:	9004      	str	r0, [sp, #16]
 8007a44:	f000 fc92 	bl	800836c <__mcmp>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	dcb6      	bgt.n	80079ba <_dtoa_r+0xa42>
 8007a4c:	d102      	bne.n	8007a54 <_dtoa_r+0xadc>
 8007a4e:	f018 0f01 	tst.w	r8, #1
 8007a52:	d1b2      	bne.n	80079ba <_dtoa_r+0xa42>
 8007a54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a58:	2b30      	cmp	r3, #48	; 0x30
 8007a5a:	f105 32ff 	add.w	r2, r5, #4294967295
 8007a5e:	f47f af0a 	bne.w	8007876 <_dtoa_r+0x8fe>
 8007a62:	4615      	mov	r5, r2
 8007a64:	e7f6      	b.n	8007a54 <_dtoa_r+0xadc>
 8007a66:	4593      	cmp	fp, r2
 8007a68:	d105      	bne.n	8007a76 <_dtoa_r+0xafe>
 8007a6a:	2331      	movs	r3, #49	; 0x31
 8007a6c:	f10a 0a01 	add.w	sl, sl, #1
 8007a70:	f88b 3000 	strb.w	r3, [fp]
 8007a74:	e6ff      	b.n	8007876 <_dtoa_r+0x8fe>
 8007a76:	4615      	mov	r5, r2
 8007a78:	e79f      	b.n	80079ba <_dtoa_r+0xa42>
 8007a7a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007ae0 <_dtoa_r+0xb68>
 8007a7e:	e007      	b.n	8007a90 <_dtoa_r+0xb18>
 8007a80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a82:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007ae4 <_dtoa_r+0xb6c>
 8007a86:	b11b      	cbz	r3, 8007a90 <_dtoa_r+0xb18>
 8007a88:	f10b 0308 	add.w	r3, fp, #8
 8007a8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	4658      	mov	r0, fp
 8007a92:	b017      	add	sp, #92	; 0x5c
 8007a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a98:	9b06      	ldr	r3, [sp, #24]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	f77f ae35 	ble.w	800770a <_dtoa_r+0x792>
 8007aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aa2:	9307      	str	r3, [sp, #28]
 8007aa4:	e649      	b.n	800773a <_dtoa_r+0x7c2>
 8007aa6:	9b02      	ldr	r3, [sp, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	dc03      	bgt.n	8007ab4 <_dtoa_r+0xb3c>
 8007aac:	9b06      	ldr	r3, [sp, #24]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	f73f aecc 	bgt.w	800784c <_dtoa_r+0x8d4>
 8007ab4:	465d      	mov	r5, fp
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	9804      	ldr	r0, [sp, #16]
 8007aba:	f7ff f9d1 	bl	8006e60 <quorem>
 8007abe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007ac2:	f805 8b01 	strb.w	r8, [r5], #1
 8007ac6:	9a02      	ldr	r2, [sp, #8]
 8007ac8:	eba5 030b 	sub.w	r3, r5, fp
 8007acc:	429a      	cmp	r2, r3
 8007ace:	ddb0      	ble.n	8007a32 <_dtoa_r+0xaba>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	220a      	movs	r2, #10
 8007ad4:	9904      	ldr	r1, [sp, #16]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f000 fa7d 	bl	8007fd6 <__multadd>
 8007adc:	9004      	str	r0, [sp, #16]
 8007ade:	e7ea      	b.n	8007ab6 <_dtoa_r+0xb3e>
 8007ae0:	08008a68 	.word	0x08008a68
 8007ae4:	08008a8c 	.word	0x08008a8c

08007ae8 <__sflush_r>:
 8007ae8:	898a      	ldrh	r2, [r1, #12]
 8007aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aee:	4605      	mov	r5, r0
 8007af0:	0710      	lsls	r0, r2, #28
 8007af2:	460c      	mov	r4, r1
 8007af4:	d458      	bmi.n	8007ba8 <__sflush_r+0xc0>
 8007af6:	684b      	ldr	r3, [r1, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dc05      	bgt.n	8007b08 <__sflush_r+0x20>
 8007afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	dc02      	bgt.n	8007b08 <__sflush_r+0x20>
 8007b02:	2000      	movs	r0, #0
 8007b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b0a:	2e00      	cmp	r6, #0
 8007b0c:	d0f9      	beq.n	8007b02 <__sflush_r+0x1a>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b14:	682f      	ldr	r7, [r5, #0]
 8007b16:	6a21      	ldr	r1, [r4, #32]
 8007b18:	602b      	str	r3, [r5, #0]
 8007b1a:	d032      	beq.n	8007b82 <__sflush_r+0x9a>
 8007b1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	075a      	lsls	r2, r3, #29
 8007b22:	d505      	bpl.n	8007b30 <__sflush_r+0x48>
 8007b24:	6863      	ldr	r3, [r4, #4]
 8007b26:	1ac0      	subs	r0, r0, r3
 8007b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b2a:	b10b      	cbz	r3, 8007b30 <__sflush_r+0x48>
 8007b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b2e:	1ac0      	subs	r0, r0, r3
 8007b30:	2300      	movs	r3, #0
 8007b32:	4602      	mov	r2, r0
 8007b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b36:	6a21      	ldr	r1, [r4, #32]
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b0      	blx	r6
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	d106      	bne.n	8007b50 <__sflush_r+0x68>
 8007b42:	6829      	ldr	r1, [r5, #0]
 8007b44:	291d      	cmp	r1, #29
 8007b46:	d848      	bhi.n	8007bda <__sflush_r+0xf2>
 8007b48:	4a29      	ldr	r2, [pc, #164]	; (8007bf0 <__sflush_r+0x108>)
 8007b4a:	40ca      	lsrs	r2, r1
 8007b4c:	07d6      	lsls	r6, r2, #31
 8007b4e:	d544      	bpl.n	8007bda <__sflush_r+0xf2>
 8007b50:	2200      	movs	r2, #0
 8007b52:	6062      	str	r2, [r4, #4]
 8007b54:	04d9      	lsls	r1, r3, #19
 8007b56:	6922      	ldr	r2, [r4, #16]
 8007b58:	6022      	str	r2, [r4, #0]
 8007b5a:	d504      	bpl.n	8007b66 <__sflush_r+0x7e>
 8007b5c:	1c42      	adds	r2, r0, #1
 8007b5e:	d101      	bne.n	8007b64 <__sflush_r+0x7c>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b903      	cbnz	r3, 8007b66 <__sflush_r+0x7e>
 8007b64:	6560      	str	r0, [r4, #84]	; 0x54
 8007b66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b68:	602f      	str	r7, [r5, #0]
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	d0c9      	beq.n	8007b02 <__sflush_r+0x1a>
 8007b6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b72:	4299      	cmp	r1, r3
 8007b74:	d002      	beq.n	8007b7c <__sflush_r+0x94>
 8007b76:	4628      	mov	r0, r5
 8007b78:	f7fe fa14 	bl	8005fa4 <_free_r>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	6360      	str	r0, [r4, #52]	; 0x34
 8007b80:	e7c0      	b.n	8007b04 <__sflush_r+0x1c>
 8007b82:	2301      	movs	r3, #1
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b0      	blx	r6
 8007b88:	1c41      	adds	r1, r0, #1
 8007b8a:	d1c8      	bne.n	8007b1e <__sflush_r+0x36>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0c5      	beq.n	8007b1e <__sflush_r+0x36>
 8007b92:	2b1d      	cmp	r3, #29
 8007b94:	d001      	beq.n	8007b9a <__sflush_r+0xb2>
 8007b96:	2b16      	cmp	r3, #22
 8007b98:	d101      	bne.n	8007b9e <__sflush_r+0xb6>
 8007b9a:	602f      	str	r7, [r5, #0]
 8007b9c:	e7b1      	b.n	8007b02 <__sflush_r+0x1a>
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba4:	81a3      	strh	r3, [r4, #12]
 8007ba6:	e7ad      	b.n	8007b04 <__sflush_r+0x1c>
 8007ba8:	690f      	ldr	r7, [r1, #16]
 8007baa:	2f00      	cmp	r7, #0
 8007bac:	d0a9      	beq.n	8007b02 <__sflush_r+0x1a>
 8007bae:	0793      	lsls	r3, r2, #30
 8007bb0:	680e      	ldr	r6, [r1, #0]
 8007bb2:	bf08      	it	eq
 8007bb4:	694b      	ldreq	r3, [r1, #20]
 8007bb6:	600f      	str	r7, [r1, #0]
 8007bb8:	bf18      	it	ne
 8007bba:	2300      	movne	r3, #0
 8007bbc:	eba6 0807 	sub.w	r8, r6, r7
 8007bc0:	608b      	str	r3, [r1, #8]
 8007bc2:	f1b8 0f00 	cmp.w	r8, #0
 8007bc6:	dd9c      	ble.n	8007b02 <__sflush_r+0x1a>
 8007bc8:	4643      	mov	r3, r8
 8007bca:	463a      	mov	r2, r7
 8007bcc:	6a21      	ldr	r1, [r4, #32]
 8007bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	47b0      	blx	r6
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	dc06      	bgt.n	8007be6 <__sflush_r+0xfe>
 8007bd8:	89a3      	ldrh	r3, [r4, #12]
 8007bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bde:	81a3      	strh	r3, [r4, #12]
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295
 8007be4:	e78e      	b.n	8007b04 <__sflush_r+0x1c>
 8007be6:	4407      	add	r7, r0
 8007be8:	eba8 0800 	sub.w	r8, r8, r0
 8007bec:	e7e9      	b.n	8007bc2 <__sflush_r+0xda>
 8007bee:	bf00      	nop
 8007bf0:	20400001 	.word	0x20400001

08007bf4 <_fflush_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	690b      	ldr	r3, [r1, #16]
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	b1db      	cbz	r3, 8007c36 <_fflush_r+0x42>
 8007bfe:	b118      	cbz	r0, 8007c08 <_fflush_r+0x14>
 8007c00:	6983      	ldr	r3, [r0, #24]
 8007c02:	b90b      	cbnz	r3, 8007c08 <_fflush_r+0x14>
 8007c04:	f000 f872 	bl	8007cec <__sinit>
 8007c08:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <_fflush_r+0x48>)
 8007c0a:	429c      	cmp	r4, r3
 8007c0c:	d109      	bne.n	8007c22 <_fflush_r+0x2e>
 8007c0e:	686c      	ldr	r4, [r5, #4]
 8007c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c14:	b17b      	cbz	r3, 8007c36 <_fflush_r+0x42>
 8007c16:	4621      	mov	r1, r4
 8007c18:	4628      	mov	r0, r5
 8007c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c1e:	f7ff bf63 	b.w	8007ae8 <__sflush_r>
 8007c22:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <_fflush_r+0x4c>)
 8007c24:	429c      	cmp	r4, r3
 8007c26:	d101      	bne.n	8007c2c <_fflush_r+0x38>
 8007c28:	68ac      	ldr	r4, [r5, #8]
 8007c2a:	e7f1      	b.n	8007c10 <_fflush_r+0x1c>
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <_fflush_r+0x50>)
 8007c2e:	429c      	cmp	r4, r3
 8007c30:	bf08      	it	eq
 8007c32:	68ec      	ldreq	r4, [r5, #12]
 8007c34:	e7ec      	b.n	8007c10 <_fflush_r+0x1c>
 8007c36:	2000      	movs	r0, #0
 8007c38:	bd38      	pop	{r3, r4, r5, pc}
 8007c3a:	bf00      	nop
 8007c3c:	08008abc 	.word	0x08008abc
 8007c40:	08008adc 	.word	0x08008adc
 8007c44:	08008a9c 	.word	0x08008a9c

08007c48 <fflush>:
 8007c48:	4601      	mov	r1, r0
 8007c4a:	b920      	cbnz	r0, 8007c56 <fflush+0xe>
 8007c4c:	4b04      	ldr	r3, [pc, #16]	; (8007c60 <fflush+0x18>)
 8007c4e:	4905      	ldr	r1, [pc, #20]	; (8007c64 <fflush+0x1c>)
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	f000 b91d 	b.w	8007e90 <_fwalk_reent>
 8007c56:	4b04      	ldr	r3, [pc, #16]	; (8007c68 <fflush+0x20>)
 8007c58:	6818      	ldr	r0, [r3, #0]
 8007c5a:	f7ff bfcb 	b.w	8007bf4 <_fflush_r>
 8007c5e:	bf00      	nop
 8007c60:	08008a54 	.word	0x08008a54
 8007c64:	08007bf5 	.word	0x08007bf5
 8007c68:	2000000c 	.word	0x2000000c

08007c6c <std>:
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	b510      	push	{r4, lr}
 8007c70:	4604      	mov	r4, r0
 8007c72:	e9c0 3300 	strd	r3, r3, [r0]
 8007c76:	6083      	str	r3, [r0, #8]
 8007c78:	8181      	strh	r1, [r0, #12]
 8007c7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c7c:	81c2      	strh	r2, [r0, #14]
 8007c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c82:	6183      	str	r3, [r0, #24]
 8007c84:	4619      	mov	r1, r3
 8007c86:	2208      	movs	r2, #8
 8007c88:	305c      	adds	r0, #92	; 0x5c
 8007c8a:	f7fe f982 	bl	8005f92 <memset>
 8007c8e:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <std+0x38>)
 8007c90:	6263      	str	r3, [r4, #36]	; 0x24
 8007c92:	4b05      	ldr	r3, [pc, #20]	; (8007ca8 <std+0x3c>)
 8007c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <std+0x40>)
 8007c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <std+0x44>)
 8007c9c:	6224      	str	r4, [r4, #32]
 8007c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8007ca0:	bd10      	pop	{r4, pc}
 8007ca2:	bf00      	nop
 8007ca4:	08006c15 	.word	0x08006c15
 8007ca8:	08006c37 	.word	0x08006c37
 8007cac:	08006c6f 	.word	0x08006c6f
 8007cb0:	08006c93 	.word	0x08006c93

08007cb4 <_cleanup_r>:
 8007cb4:	4901      	ldr	r1, [pc, #4]	; (8007cbc <_cleanup_r+0x8>)
 8007cb6:	f000 b8eb 	b.w	8007e90 <_fwalk_reent>
 8007cba:	bf00      	nop
 8007cbc:	08007bf5 	.word	0x08007bf5

08007cc0 <__sfmoreglue>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	1e4a      	subs	r2, r1, #1
 8007cc4:	2568      	movs	r5, #104	; 0x68
 8007cc6:	4355      	muls	r5, r2
 8007cc8:	460e      	mov	r6, r1
 8007cca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cce:	f7fe f9b7 	bl	8006040 <_malloc_r>
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	b140      	cbz	r0, 8007ce8 <__sfmoreglue+0x28>
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	e9c0 1600 	strd	r1, r6, [r0]
 8007cdc:	300c      	adds	r0, #12
 8007cde:	60a0      	str	r0, [r4, #8]
 8007ce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ce4:	f7fe f955 	bl	8005f92 <memset>
 8007ce8:	4620      	mov	r0, r4
 8007cea:	bd70      	pop	{r4, r5, r6, pc}

08007cec <__sinit>:
 8007cec:	6983      	ldr	r3, [r0, #24]
 8007cee:	b510      	push	{r4, lr}
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	bb33      	cbnz	r3, 8007d42 <__sinit+0x56>
 8007cf4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007cf8:	6503      	str	r3, [r0, #80]	; 0x50
 8007cfa:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <__sinit+0x58>)
 8007cfc:	4a12      	ldr	r2, [pc, #72]	; (8007d48 <__sinit+0x5c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6282      	str	r2, [r0, #40]	; 0x28
 8007d02:	4298      	cmp	r0, r3
 8007d04:	bf04      	itt	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	6183      	streq	r3, [r0, #24]
 8007d0a:	f000 f81f 	bl	8007d4c <__sfp>
 8007d0e:	6060      	str	r0, [r4, #4]
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 f81b 	bl	8007d4c <__sfp>
 8007d16:	60a0      	str	r0, [r4, #8]
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 f817 	bl	8007d4c <__sfp>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	60e0      	str	r0, [r4, #12]
 8007d22:	2104      	movs	r1, #4
 8007d24:	6860      	ldr	r0, [r4, #4]
 8007d26:	f7ff ffa1 	bl	8007c6c <std>
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	2109      	movs	r1, #9
 8007d2e:	68a0      	ldr	r0, [r4, #8]
 8007d30:	f7ff ff9c 	bl	8007c6c <std>
 8007d34:	2202      	movs	r2, #2
 8007d36:	2112      	movs	r1, #18
 8007d38:	68e0      	ldr	r0, [r4, #12]
 8007d3a:	f7ff ff97 	bl	8007c6c <std>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	61a3      	str	r3, [r4, #24]
 8007d42:	bd10      	pop	{r4, pc}
 8007d44:	08008a54 	.word	0x08008a54
 8007d48:	08007cb5 	.word	0x08007cb5

08007d4c <__sfp>:
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	4b1b      	ldr	r3, [pc, #108]	; (8007dbc <__sfp+0x70>)
 8007d50:	681e      	ldr	r6, [r3, #0]
 8007d52:	69b3      	ldr	r3, [r6, #24]
 8007d54:	4607      	mov	r7, r0
 8007d56:	b913      	cbnz	r3, 8007d5e <__sfp+0x12>
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f7ff ffc7 	bl	8007cec <__sinit>
 8007d5e:	3648      	adds	r6, #72	; 0x48
 8007d60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	d503      	bpl.n	8007d70 <__sfp+0x24>
 8007d68:	6833      	ldr	r3, [r6, #0]
 8007d6a:	b133      	cbz	r3, 8007d7a <__sfp+0x2e>
 8007d6c:	6836      	ldr	r6, [r6, #0]
 8007d6e:	e7f7      	b.n	8007d60 <__sfp+0x14>
 8007d70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d74:	b16d      	cbz	r5, 8007d92 <__sfp+0x46>
 8007d76:	3468      	adds	r4, #104	; 0x68
 8007d78:	e7f4      	b.n	8007d64 <__sfp+0x18>
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f7ff ff9f 	bl	8007cc0 <__sfmoreglue>
 8007d82:	6030      	str	r0, [r6, #0]
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d1f1      	bne.n	8007d6c <__sfp+0x20>
 8007d88:	230c      	movs	r3, #12
 8007d8a:	603b      	str	r3, [r7, #0]
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	4620      	mov	r0, r4
 8007d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d92:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <__sfp+0x74>)
 8007d94:	6665      	str	r5, [r4, #100]	; 0x64
 8007d96:	e9c4 5500 	strd	r5, r5, [r4]
 8007d9a:	60a5      	str	r5, [r4, #8]
 8007d9c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007da0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007da4:	2208      	movs	r2, #8
 8007da6:	4629      	mov	r1, r5
 8007da8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dac:	f7fe f8f1 	bl	8005f92 <memset>
 8007db0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007db4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007db8:	e7e9      	b.n	8007d8e <__sfp+0x42>
 8007dba:	bf00      	nop
 8007dbc:	08008a54 	.word	0x08008a54
 8007dc0:	ffff0001 	.word	0xffff0001

08007dc4 <__sfp_lock_acquire>:
 8007dc4:	4770      	bx	lr

08007dc6 <__sfp_lock_release>:
 8007dc6:	4770      	bx	lr

08007dc8 <__sflags>:
 8007dc8:	780b      	ldrb	r3, [r1, #0]
 8007dca:	2b72      	cmp	r3, #114	; 0x72
 8007dcc:	b530      	push	{r4, r5, lr}
 8007dce:	d02c      	beq.n	8007e2a <__sflags+0x62>
 8007dd0:	2b77      	cmp	r3, #119	; 0x77
 8007dd2:	d007      	beq.n	8007de4 <__sflags+0x1c>
 8007dd4:	2b61      	cmp	r3, #97	; 0x61
 8007dd6:	d10f      	bne.n	8007df8 <__sflags+0x30>
 8007dd8:	f44f 7402 	mov.w	r4, #520	; 0x208
 8007ddc:	2301      	movs	r3, #1
 8007dde:	f44f 7084 	mov.w	r0, #264	; 0x108
 8007de2:	e003      	b.n	8007dec <__sflags+0x24>
 8007de4:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8007de8:	2301      	movs	r3, #1
 8007dea:	2008      	movs	r0, #8
 8007dec:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007df0:	b935      	cbnz	r5, 8007e00 <__sflags+0x38>
 8007df2:	4323      	orrs	r3, r4
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	e002      	b.n	8007dfe <__sflags+0x36>
 8007df8:	2316      	movs	r3, #22
 8007dfa:	6003      	str	r3, [r0, #0]
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	bd30      	pop	{r4, r5, pc}
 8007e00:	2d62      	cmp	r5, #98	; 0x62
 8007e02:	d00c      	beq.n	8007e1e <__sflags+0x56>
 8007e04:	2d78      	cmp	r5, #120	; 0x78
 8007e06:	d00d      	beq.n	8007e24 <__sflags+0x5c>
 8007e08:	2d2b      	cmp	r5, #43	; 0x2b
 8007e0a:	d1ef      	bne.n	8007dec <__sflags+0x24>
 8007e0c:	f020 001c 	bic.w	r0, r0, #28
 8007e10:	f023 0303 	bic.w	r3, r3, #3
 8007e14:	f040 0010 	orr.w	r0, r0, #16
 8007e18:	f043 0302 	orr.w	r3, r3, #2
 8007e1c:	e7e6      	b.n	8007dec <__sflags+0x24>
 8007e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e22:	e7e3      	b.n	8007dec <__sflags+0x24>
 8007e24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e28:	e7e0      	b.n	8007dec <__sflags+0x24>
 8007e2a:	2400      	movs	r4, #0
 8007e2c:	4623      	mov	r3, r4
 8007e2e:	2004      	movs	r0, #4
 8007e30:	e7dc      	b.n	8007dec <__sflags+0x24>
	...

08007e34 <_fstat_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4c07      	ldr	r4, [pc, #28]	; (8007e54 <_fstat_r+0x20>)
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4605      	mov	r5, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	4611      	mov	r1, r2
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	f7fa fafc 	bl	800243e <_fstat>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	d102      	bne.n	8007e50 <_fstat_r+0x1c>
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	b103      	cbz	r3, 8007e50 <_fstat_r+0x1c>
 8007e4e:	602b      	str	r3, [r5, #0]
 8007e50:	bd38      	pop	{r3, r4, r5, pc}
 8007e52:	bf00      	nop
 8007e54:	200002e0 	.word	0x200002e0

08007e58 <_fwalk>:
 8007e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e5c:	4688      	mov	r8, r1
 8007e5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e62:	2600      	movs	r6, #0
 8007e64:	b914      	cbnz	r4, 8007e6c <_fwalk+0x14>
 8007e66:	4630      	mov	r0, r6
 8007e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e6c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e70:	3f01      	subs	r7, #1
 8007e72:	d501      	bpl.n	8007e78 <_fwalk+0x20>
 8007e74:	6824      	ldr	r4, [r4, #0]
 8007e76:	e7f5      	b.n	8007e64 <_fwalk+0xc>
 8007e78:	89ab      	ldrh	r3, [r5, #12]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d906      	bls.n	8007e8c <_fwalk+0x34>
 8007e7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e82:	3301      	adds	r3, #1
 8007e84:	d002      	beq.n	8007e8c <_fwalk+0x34>
 8007e86:	4628      	mov	r0, r5
 8007e88:	47c0      	blx	r8
 8007e8a:	4306      	orrs	r6, r0
 8007e8c:	3568      	adds	r5, #104	; 0x68
 8007e8e:	e7ef      	b.n	8007e70 <_fwalk+0x18>

08007e90 <_fwalk_reent>:
 8007e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e94:	4680      	mov	r8, r0
 8007e96:	4689      	mov	r9, r1
 8007e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e9c:	2600      	movs	r6, #0
 8007e9e:	b914      	cbnz	r4, 8007ea6 <_fwalk_reent+0x16>
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ea6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007eaa:	3f01      	subs	r7, #1
 8007eac:	d501      	bpl.n	8007eb2 <_fwalk_reent+0x22>
 8007eae:	6824      	ldr	r4, [r4, #0]
 8007eb0:	e7f5      	b.n	8007e9e <_fwalk_reent+0xe>
 8007eb2:	89ab      	ldrh	r3, [r5, #12]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d907      	bls.n	8007ec8 <_fwalk_reent+0x38>
 8007eb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	d003      	beq.n	8007ec8 <_fwalk_reent+0x38>
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	47c8      	blx	r9
 8007ec6:	4306      	orrs	r6, r0
 8007ec8:	3568      	adds	r5, #104	; 0x68
 8007eca:	e7ee      	b.n	8007eaa <_fwalk_reent+0x1a>

08007ecc <_isatty_r>:
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4c06      	ldr	r4, [pc, #24]	; (8007ee8 <_isatty_r+0x1c>)
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	4605      	mov	r5, r0
 8007ed4:	4608      	mov	r0, r1
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	f7fa fac1 	bl	800245e <_isatty>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d102      	bne.n	8007ee6 <_isatty_r+0x1a>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	b103      	cbz	r3, 8007ee6 <_isatty_r+0x1a>
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	bd38      	pop	{r3, r4, r5, pc}
 8007ee8:	200002e0 	.word	0x200002e0

08007eec <_localeconv_r>:
 8007eec:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <_localeconv_r+0x14>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6a18      	ldr	r0, [r3, #32]
 8007ef2:	4b04      	ldr	r3, [pc, #16]	; (8007f04 <_localeconv_r+0x18>)
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	bf08      	it	eq
 8007ef8:	4618      	moveq	r0, r3
 8007efa:	30f0      	adds	r0, #240	; 0xf0
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	2000000c 	.word	0x2000000c
 8007f04:	20000070 	.word	0x20000070

08007f08 <_lseek_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4c07      	ldr	r4, [pc, #28]	; (8007f28 <_lseek_r+0x20>)
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	4608      	mov	r0, r1
 8007f10:	4611      	mov	r1, r2
 8007f12:	2200      	movs	r2, #0
 8007f14:	6022      	str	r2, [r4, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	f7fa faac 	bl	8002474 <_lseek>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d102      	bne.n	8007f26 <_lseek_r+0x1e>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	b103      	cbz	r3, 8007f26 <_lseek_r+0x1e>
 8007f24:	602b      	str	r3, [r5, #0]
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	200002e0 	.word	0x200002e0

08007f2c <malloc>:
 8007f2c:	4b02      	ldr	r3, [pc, #8]	; (8007f38 <malloc+0xc>)
 8007f2e:	4601      	mov	r1, r0
 8007f30:	6818      	ldr	r0, [r3, #0]
 8007f32:	f7fe b885 	b.w	8006040 <_malloc_r>
 8007f36:	bf00      	nop
 8007f38:	2000000c 	.word	0x2000000c

08007f3c <__malloc_lock>:
 8007f3c:	4770      	bx	lr

08007f3e <__malloc_unlock>:
 8007f3e:	4770      	bx	lr

08007f40 <_Balloc>:
 8007f40:	b570      	push	{r4, r5, r6, lr}
 8007f42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f44:	4604      	mov	r4, r0
 8007f46:	460e      	mov	r6, r1
 8007f48:	b93d      	cbnz	r5, 8007f5a <_Balloc+0x1a>
 8007f4a:	2010      	movs	r0, #16
 8007f4c:	f7ff ffee 	bl	8007f2c <malloc>
 8007f50:	6260      	str	r0, [r4, #36]	; 0x24
 8007f52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f56:	6005      	str	r5, [r0, #0]
 8007f58:	60c5      	str	r5, [r0, #12]
 8007f5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007f5c:	68eb      	ldr	r3, [r5, #12]
 8007f5e:	b183      	cbz	r3, 8007f82 <_Balloc+0x42>
 8007f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007f68:	b9b8      	cbnz	r0, 8007f9a <_Balloc+0x5a>
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	fa01 f506 	lsl.w	r5, r1, r6
 8007f70:	1d6a      	adds	r2, r5, #5
 8007f72:	0092      	lsls	r2, r2, #2
 8007f74:	4620      	mov	r0, r4
 8007f76:	f000 fabf 	bl	80084f8 <_calloc_r>
 8007f7a:	b160      	cbz	r0, 8007f96 <_Balloc+0x56>
 8007f7c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007f80:	e00e      	b.n	8007fa0 <_Balloc+0x60>
 8007f82:	2221      	movs	r2, #33	; 0x21
 8007f84:	2104      	movs	r1, #4
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 fab6 	bl	80084f8 <_calloc_r>
 8007f8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f8e:	60e8      	str	r0, [r5, #12]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e4      	bne.n	8007f60 <_Balloc+0x20>
 8007f96:	2000      	movs	r0, #0
 8007f98:	bd70      	pop	{r4, r5, r6, pc}
 8007f9a:	6802      	ldr	r2, [r0, #0]
 8007f9c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fa6:	e7f7      	b.n	8007f98 <_Balloc+0x58>

08007fa8 <_Bfree>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007fac:	4606      	mov	r6, r0
 8007fae:	460d      	mov	r5, r1
 8007fb0:	b93c      	cbnz	r4, 8007fc2 <_Bfree+0x1a>
 8007fb2:	2010      	movs	r0, #16
 8007fb4:	f7ff ffba 	bl	8007f2c <malloc>
 8007fb8:	6270      	str	r0, [r6, #36]	; 0x24
 8007fba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fbe:	6004      	str	r4, [r0, #0]
 8007fc0:	60c4      	str	r4, [r0, #12]
 8007fc2:	b13d      	cbz	r5, 8007fd4 <_Bfree+0x2c>
 8007fc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007fc6:	686a      	ldr	r2, [r5, #4]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fce:	6029      	str	r1, [r5, #0]
 8007fd0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007fd4:	bd70      	pop	{r4, r5, r6, pc}

08007fd6 <__multadd>:
 8007fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fda:	690d      	ldr	r5, [r1, #16]
 8007fdc:	461f      	mov	r7, r3
 8007fde:	4606      	mov	r6, r0
 8007fe0:	460c      	mov	r4, r1
 8007fe2:	f101 0c14 	add.w	ip, r1, #20
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f8dc 0000 	ldr.w	r0, [ip]
 8007fec:	b281      	uxth	r1, r0
 8007fee:	fb02 7101 	mla	r1, r2, r1, r7
 8007ff2:	0c0f      	lsrs	r7, r1, #16
 8007ff4:	0c00      	lsrs	r0, r0, #16
 8007ff6:	fb02 7000 	mla	r0, r2, r0, r7
 8007ffa:	b289      	uxth	r1, r1
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008002:	429d      	cmp	r5, r3
 8008004:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008008:	f84c 1b04 	str.w	r1, [ip], #4
 800800c:	dcec      	bgt.n	8007fe8 <__multadd+0x12>
 800800e:	b1d7      	cbz	r7, 8008046 <__multadd+0x70>
 8008010:	68a3      	ldr	r3, [r4, #8]
 8008012:	42ab      	cmp	r3, r5
 8008014:	dc12      	bgt.n	800803c <__multadd+0x66>
 8008016:	6861      	ldr	r1, [r4, #4]
 8008018:	4630      	mov	r0, r6
 800801a:	3101      	adds	r1, #1
 800801c:	f7ff ff90 	bl	8007f40 <_Balloc>
 8008020:	6922      	ldr	r2, [r4, #16]
 8008022:	3202      	adds	r2, #2
 8008024:	f104 010c 	add.w	r1, r4, #12
 8008028:	4680      	mov	r8, r0
 800802a:	0092      	lsls	r2, r2, #2
 800802c:	300c      	adds	r0, #12
 800802e:	f7fd ffa5 	bl	8005f7c <memcpy>
 8008032:	4621      	mov	r1, r4
 8008034:	4630      	mov	r0, r6
 8008036:	f7ff ffb7 	bl	8007fa8 <_Bfree>
 800803a:	4644      	mov	r4, r8
 800803c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008040:	3501      	adds	r5, #1
 8008042:	615f      	str	r7, [r3, #20]
 8008044:	6125      	str	r5, [r4, #16]
 8008046:	4620      	mov	r0, r4
 8008048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800804c <__hi0bits>:
 800804c:	0c02      	lsrs	r2, r0, #16
 800804e:	0412      	lsls	r2, r2, #16
 8008050:	4603      	mov	r3, r0
 8008052:	b9b2      	cbnz	r2, 8008082 <__hi0bits+0x36>
 8008054:	0403      	lsls	r3, r0, #16
 8008056:	2010      	movs	r0, #16
 8008058:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800805c:	bf04      	itt	eq
 800805e:	021b      	lsleq	r3, r3, #8
 8008060:	3008      	addeq	r0, #8
 8008062:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008066:	bf04      	itt	eq
 8008068:	011b      	lsleq	r3, r3, #4
 800806a:	3004      	addeq	r0, #4
 800806c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008070:	bf04      	itt	eq
 8008072:	009b      	lsleq	r3, r3, #2
 8008074:	3002      	addeq	r0, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	db06      	blt.n	8008088 <__hi0bits+0x3c>
 800807a:	005b      	lsls	r3, r3, #1
 800807c:	d503      	bpl.n	8008086 <__hi0bits+0x3a>
 800807e:	3001      	adds	r0, #1
 8008080:	4770      	bx	lr
 8008082:	2000      	movs	r0, #0
 8008084:	e7e8      	b.n	8008058 <__hi0bits+0xc>
 8008086:	2020      	movs	r0, #32
 8008088:	4770      	bx	lr

0800808a <__lo0bits>:
 800808a:	6803      	ldr	r3, [r0, #0]
 800808c:	f013 0207 	ands.w	r2, r3, #7
 8008090:	4601      	mov	r1, r0
 8008092:	d00b      	beq.n	80080ac <__lo0bits+0x22>
 8008094:	07da      	lsls	r2, r3, #31
 8008096:	d423      	bmi.n	80080e0 <__lo0bits+0x56>
 8008098:	0798      	lsls	r0, r3, #30
 800809a:	bf49      	itett	mi
 800809c:	085b      	lsrmi	r3, r3, #1
 800809e:	089b      	lsrpl	r3, r3, #2
 80080a0:	2001      	movmi	r0, #1
 80080a2:	600b      	strmi	r3, [r1, #0]
 80080a4:	bf5c      	itt	pl
 80080a6:	600b      	strpl	r3, [r1, #0]
 80080a8:	2002      	movpl	r0, #2
 80080aa:	4770      	bx	lr
 80080ac:	b298      	uxth	r0, r3
 80080ae:	b9a8      	cbnz	r0, 80080dc <__lo0bits+0x52>
 80080b0:	0c1b      	lsrs	r3, r3, #16
 80080b2:	2010      	movs	r0, #16
 80080b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80080b8:	bf04      	itt	eq
 80080ba:	0a1b      	lsreq	r3, r3, #8
 80080bc:	3008      	addeq	r0, #8
 80080be:	071a      	lsls	r2, r3, #28
 80080c0:	bf04      	itt	eq
 80080c2:	091b      	lsreq	r3, r3, #4
 80080c4:	3004      	addeq	r0, #4
 80080c6:	079a      	lsls	r2, r3, #30
 80080c8:	bf04      	itt	eq
 80080ca:	089b      	lsreq	r3, r3, #2
 80080cc:	3002      	addeq	r0, #2
 80080ce:	07da      	lsls	r2, r3, #31
 80080d0:	d402      	bmi.n	80080d8 <__lo0bits+0x4e>
 80080d2:	085b      	lsrs	r3, r3, #1
 80080d4:	d006      	beq.n	80080e4 <__lo0bits+0x5a>
 80080d6:	3001      	adds	r0, #1
 80080d8:	600b      	str	r3, [r1, #0]
 80080da:	4770      	bx	lr
 80080dc:	4610      	mov	r0, r2
 80080de:	e7e9      	b.n	80080b4 <__lo0bits+0x2a>
 80080e0:	2000      	movs	r0, #0
 80080e2:	4770      	bx	lr
 80080e4:	2020      	movs	r0, #32
 80080e6:	4770      	bx	lr

080080e8 <__i2b>:
 80080e8:	b510      	push	{r4, lr}
 80080ea:	460c      	mov	r4, r1
 80080ec:	2101      	movs	r1, #1
 80080ee:	f7ff ff27 	bl	8007f40 <_Balloc>
 80080f2:	2201      	movs	r2, #1
 80080f4:	6144      	str	r4, [r0, #20]
 80080f6:	6102      	str	r2, [r0, #16]
 80080f8:	bd10      	pop	{r4, pc}

080080fa <__multiply>:
 80080fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fe:	4614      	mov	r4, r2
 8008100:	690a      	ldr	r2, [r1, #16]
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	429a      	cmp	r2, r3
 8008106:	bfb8      	it	lt
 8008108:	460b      	movlt	r3, r1
 800810a:	4688      	mov	r8, r1
 800810c:	bfbc      	itt	lt
 800810e:	46a0      	movlt	r8, r4
 8008110:	461c      	movlt	r4, r3
 8008112:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008116:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800811a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800811e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008122:	eb07 0609 	add.w	r6, r7, r9
 8008126:	42b3      	cmp	r3, r6
 8008128:	bfb8      	it	lt
 800812a:	3101      	addlt	r1, #1
 800812c:	f7ff ff08 	bl	8007f40 <_Balloc>
 8008130:	f100 0514 	add.w	r5, r0, #20
 8008134:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008138:	462b      	mov	r3, r5
 800813a:	2200      	movs	r2, #0
 800813c:	4573      	cmp	r3, lr
 800813e:	d316      	bcc.n	800816e <__multiply+0x74>
 8008140:	f104 0214 	add.w	r2, r4, #20
 8008144:	f108 0114 	add.w	r1, r8, #20
 8008148:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800814c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	9b00      	ldr	r3, [sp, #0]
 8008154:	9201      	str	r2, [sp, #4]
 8008156:	4293      	cmp	r3, r2
 8008158:	d80c      	bhi.n	8008174 <__multiply+0x7a>
 800815a:	2e00      	cmp	r6, #0
 800815c:	dd03      	ble.n	8008166 <__multiply+0x6c>
 800815e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008162:	2b00      	cmp	r3, #0
 8008164:	d05d      	beq.n	8008222 <__multiply+0x128>
 8008166:	6106      	str	r6, [r0, #16]
 8008168:	b003      	add	sp, #12
 800816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816e:	f843 2b04 	str.w	r2, [r3], #4
 8008172:	e7e3      	b.n	800813c <__multiply+0x42>
 8008174:	f8b2 b000 	ldrh.w	fp, [r2]
 8008178:	f1bb 0f00 	cmp.w	fp, #0
 800817c:	d023      	beq.n	80081c6 <__multiply+0xcc>
 800817e:	4689      	mov	r9, r1
 8008180:	46ac      	mov	ip, r5
 8008182:	f04f 0800 	mov.w	r8, #0
 8008186:	f859 4b04 	ldr.w	r4, [r9], #4
 800818a:	f8dc a000 	ldr.w	sl, [ip]
 800818e:	b2a3      	uxth	r3, r4
 8008190:	fa1f fa8a 	uxth.w	sl, sl
 8008194:	fb0b a303 	mla	r3, fp, r3, sl
 8008198:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800819c:	f8dc 4000 	ldr.w	r4, [ip]
 80081a0:	4443      	add	r3, r8
 80081a2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80081a6:	fb0b 840a 	mla	r4, fp, sl, r8
 80081aa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80081ae:	46e2      	mov	sl, ip
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80081b6:	454f      	cmp	r7, r9
 80081b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80081bc:	f84a 3b04 	str.w	r3, [sl], #4
 80081c0:	d82b      	bhi.n	800821a <__multiply+0x120>
 80081c2:	f8cc 8004 	str.w	r8, [ip, #4]
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80081cc:	3204      	adds	r2, #4
 80081ce:	f1ba 0f00 	cmp.w	sl, #0
 80081d2:	d020      	beq.n	8008216 <__multiply+0x11c>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	4689      	mov	r9, r1
 80081d8:	46a8      	mov	r8, r5
 80081da:	f04f 0b00 	mov.w	fp, #0
 80081de:	f8b9 c000 	ldrh.w	ip, [r9]
 80081e2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80081e6:	fb0a 440c 	mla	r4, sl, ip, r4
 80081ea:	445c      	add	r4, fp
 80081ec:	46c4      	mov	ip, r8
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80081f4:	f84c 3b04 	str.w	r3, [ip], #4
 80081f8:	f859 3b04 	ldr.w	r3, [r9], #4
 80081fc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008200:	0c1b      	lsrs	r3, r3, #16
 8008202:	fb0a b303 	mla	r3, sl, r3, fp
 8008206:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800820a:	454f      	cmp	r7, r9
 800820c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008210:	d805      	bhi.n	800821e <__multiply+0x124>
 8008212:	f8c8 3004 	str.w	r3, [r8, #4]
 8008216:	3504      	adds	r5, #4
 8008218:	e79b      	b.n	8008152 <__multiply+0x58>
 800821a:	46d4      	mov	ip, sl
 800821c:	e7b3      	b.n	8008186 <__multiply+0x8c>
 800821e:	46e0      	mov	r8, ip
 8008220:	e7dd      	b.n	80081de <__multiply+0xe4>
 8008222:	3e01      	subs	r6, #1
 8008224:	e799      	b.n	800815a <__multiply+0x60>
	...

08008228 <__pow5mult>:
 8008228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800822c:	4615      	mov	r5, r2
 800822e:	f012 0203 	ands.w	r2, r2, #3
 8008232:	4606      	mov	r6, r0
 8008234:	460f      	mov	r7, r1
 8008236:	d007      	beq.n	8008248 <__pow5mult+0x20>
 8008238:	3a01      	subs	r2, #1
 800823a:	4c21      	ldr	r4, [pc, #132]	; (80082c0 <__pow5mult+0x98>)
 800823c:	2300      	movs	r3, #0
 800823e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008242:	f7ff fec8 	bl	8007fd6 <__multadd>
 8008246:	4607      	mov	r7, r0
 8008248:	10ad      	asrs	r5, r5, #2
 800824a:	d035      	beq.n	80082b8 <__pow5mult+0x90>
 800824c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800824e:	b93c      	cbnz	r4, 8008260 <__pow5mult+0x38>
 8008250:	2010      	movs	r0, #16
 8008252:	f7ff fe6b 	bl	8007f2c <malloc>
 8008256:	6270      	str	r0, [r6, #36]	; 0x24
 8008258:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800825c:	6004      	str	r4, [r0, #0]
 800825e:	60c4      	str	r4, [r0, #12]
 8008260:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008264:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008268:	b94c      	cbnz	r4, 800827e <__pow5mult+0x56>
 800826a:	f240 2171 	movw	r1, #625	; 0x271
 800826e:	4630      	mov	r0, r6
 8008270:	f7ff ff3a 	bl	80080e8 <__i2b>
 8008274:	2300      	movs	r3, #0
 8008276:	f8c8 0008 	str.w	r0, [r8, #8]
 800827a:	4604      	mov	r4, r0
 800827c:	6003      	str	r3, [r0, #0]
 800827e:	f04f 0800 	mov.w	r8, #0
 8008282:	07eb      	lsls	r3, r5, #31
 8008284:	d50a      	bpl.n	800829c <__pow5mult+0x74>
 8008286:	4639      	mov	r1, r7
 8008288:	4622      	mov	r2, r4
 800828a:	4630      	mov	r0, r6
 800828c:	f7ff ff35 	bl	80080fa <__multiply>
 8008290:	4639      	mov	r1, r7
 8008292:	4681      	mov	r9, r0
 8008294:	4630      	mov	r0, r6
 8008296:	f7ff fe87 	bl	8007fa8 <_Bfree>
 800829a:	464f      	mov	r7, r9
 800829c:	106d      	asrs	r5, r5, #1
 800829e:	d00b      	beq.n	80082b8 <__pow5mult+0x90>
 80082a0:	6820      	ldr	r0, [r4, #0]
 80082a2:	b938      	cbnz	r0, 80082b4 <__pow5mult+0x8c>
 80082a4:	4622      	mov	r2, r4
 80082a6:	4621      	mov	r1, r4
 80082a8:	4630      	mov	r0, r6
 80082aa:	f7ff ff26 	bl	80080fa <__multiply>
 80082ae:	6020      	str	r0, [r4, #0]
 80082b0:	f8c0 8000 	str.w	r8, [r0]
 80082b4:	4604      	mov	r4, r0
 80082b6:	e7e4      	b.n	8008282 <__pow5mult+0x5a>
 80082b8:	4638      	mov	r0, r7
 80082ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082be:	bf00      	nop
 80082c0:	08008bf0 	.word	0x08008bf0

080082c4 <__lshift>:
 80082c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c8:	460c      	mov	r4, r1
 80082ca:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	6849      	ldr	r1, [r1, #4]
 80082d2:	eb0a 0903 	add.w	r9, sl, r3
 80082d6:	68a3      	ldr	r3, [r4, #8]
 80082d8:	4607      	mov	r7, r0
 80082da:	4616      	mov	r6, r2
 80082dc:	f109 0501 	add.w	r5, r9, #1
 80082e0:	42ab      	cmp	r3, r5
 80082e2:	db32      	blt.n	800834a <__lshift+0x86>
 80082e4:	4638      	mov	r0, r7
 80082e6:	f7ff fe2b 	bl	8007f40 <_Balloc>
 80082ea:	2300      	movs	r3, #0
 80082ec:	4680      	mov	r8, r0
 80082ee:	f100 0114 	add.w	r1, r0, #20
 80082f2:	461a      	mov	r2, r3
 80082f4:	4553      	cmp	r3, sl
 80082f6:	db2b      	blt.n	8008350 <__lshift+0x8c>
 80082f8:	6920      	ldr	r0, [r4, #16]
 80082fa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082fe:	f104 0314 	add.w	r3, r4, #20
 8008302:	f016 021f 	ands.w	r2, r6, #31
 8008306:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800830a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800830e:	d025      	beq.n	800835c <__lshift+0x98>
 8008310:	f1c2 0e20 	rsb	lr, r2, #32
 8008314:	2000      	movs	r0, #0
 8008316:	681e      	ldr	r6, [r3, #0]
 8008318:	468a      	mov	sl, r1
 800831a:	4096      	lsls	r6, r2
 800831c:	4330      	orrs	r0, r6
 800831e:	f84a 0b04 	str.w	r0, [sl], #4
 8008322:	f853 0b04 	ldr.w	r0, [r3], #4
 8008326:	459c      	cmp	ip, r3
 8008328:	fa20 f00e 	lsr.w	r0, r0, lr
 800832c:	d814      	bhi.n	8008358 <__lshift+0x94>
 800832e:	6048      	str	r0, [r1, #4]
 8008330:	b108      	cbz	r0, 8008336 <__lshift+0x72>
 8008332:	f109 0502 	add.w	r5, r9, #2
 8008336:	3d01      	subs	r5, #1
 8008338:	4638      	mov	r0, r7
 800833a:	f8c8 5010 	str.w	r5, [r8, #16]
 800833e:	4621      	mov	r1, r4
 8008340:	f7ff fe32 	bl	8007fa8 <_Bfree>
 8008344:	4640      	mov	r0, r8
 8008346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834a:	3101      	adds	r1, #1
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	e7c7      	b.n	80082e0 <__lshift+0x1c>
 8008350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008354:	3301      	adds	r3, #1
 8008356:	e7cd      	b.n	80082f4 <__lshift+0x30>
 8008358:	4651      	mov	r1, sl
 800835a:	e7dc      	b.n	8008316 <__lshift+0x52>
 800835c:	3904      	subs	r1, #4
 800835e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008362:	f841 2f04 	str.w	r2, [r1, #4]!
 8008366:	459c      	cmp	ip, r3
 8008368:	d8f9      	bhi.n	800835e <__lshift+0x9a>
 800836a:	e7e4      	b.n	8008336 <__lshift+0x72>

0800836c <__mcmp>:
 800836c:	6903      	ldr	r3, [r0, #16]
 800836e:	690a      	ldr	r2, [r1, #16]
 8008370:	1a9b      	subs	r3, r3, r2
 8008372:	b530      	push	{r4, r5, lr}
 8008374:	d10c      	bne.n	8008390 <__mcmp+0x24>
 8008376:	0092      	lsls	r2, r2, #2
 8008378:	3014      	adds	r0, #20
 800837a:	3114      	adds	r1, #20
 800837c:	1884      	adds	r4, r0, r2
 800837e:	4411      	add	r1, r2
 8008380:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008384:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008388:	4295      	cmp	r5, r2
 800838a:	d003      	beq.n	8008394 <__mcmp+0x28>
 800838c:	d305      	bcc.n	800839a <__mcmp+0x2e>
 800838e:	2301      	movs	r3, #1
 8008390:	4618      	mov	r0, r3
 8008392:	bd30      	pop	{r4, r5, pc}
 8008394:	42a0      	cmp	r0, r4
 8008396:	d3f3      	bcc.n	8008380 <__mcmp+0x14>
 8008398:	e7fa      	b.n	8008390 <__mcmp+0x24>
 800839a:	f04f 33ff 	mov.w	r3, #4294967295
 800839e:	e7f7      	b.n	8008390 <__mcmp+0x24>

080083a0 <__mdiff>:
 80083a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a4:	460d      	mov	r5, r1
 80083a6:	4607      	mov	r7, r0
 80083a8:	4611      	mov	r1, r2
 80083aa:	4628      	mov	r0, r5
 80083ac:	4614      	mov	r4, r2
 80083ae:	f7ff ffdd 	bl	800836c <__mcmp>
 80083b2:	1e06      	subs	r6, r0, #0
 80083b4:	d108      	bne.n	80083c8 <__mdiff+0x28>
 80083b6:	4631      	mov	r1, r6
 80083b8:	4638      	mov	r0, r7
 80083ba:	f7ff fdc1 	bl	8007f40 <_Balloc>
 80083be:	2301      	movs	r3, #1
 80083c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	bfa4      	itt	ge
 80083ca:	4623      	movge	r3, r4
 80083cc:	462c      	movge	r4, r5
 80083ce:	4638      	mov	r0, r7
 80083d0:	6861      	ldr	r1, [r4, #4]
 80083d2:	bfa6      	itte	ge
 80083d4:	461d      	movge	r5, r3
 80083d6:	2600      	movge	r6, #0
 80083d8:	2601      	movlt	r6, #1
 80083da:	f7ff fdb1 	bl	8007f40 <_Balloc>
 80083de:	692b      	ldr	r3, [r5, #16]
 80083e0:	60c6      	str	r6, [r0, #12]
 80083e2:	6926      	ldr	r6, [r4, #16]
 80083e4:	f105 0914 	add.w	r9, r5, #20
 80083e8:	f104 0214 	add.w	r2, r4, #20
 80083ec:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80083f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80083f4:	f100 0514 	add.w	r5, r0, #20
 80083f8:	f04f 0e00 	mov.w	lr, #0
 80083fc:	f852 ab04 	ldr.w	sl, [r2], #4
 8008400:	f859 4b04 	ldr.w	r4, [r9], #4
 8008404:	fa1e f18a 	uxtah	r1, lr, sl
 8008408:	b2a3      	uxth	r3, r4
 800840a:	1ac9      	subs	r1, r1, r3
 800840c:	0c23      	lsrs	r3, r4, #16
 800840e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008412:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008416:	b289      	uxth	r1, r1
 8008418:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800841c:	45c8      	cmp	r8, r9
 800841e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008422:	4694      	mov	ip, r2
 8008424:	f845 3b04 	str.w	r3, [r5], #4
 8008428:	d8e8      	bhi.n	80083fc <__mdiff+0x5c>
 800842a:	45bc      	cmp	ip, r7
 800842c:	d304      	bcc.n	8008438 <__mdiff+0x98>
 800842e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008432:	b183      	cbz	r3, 8008456 <__mdiff+0xb6>
 8008434:	6106      	str	r6, [r0, #16]
 8008436:	e7c5      	b.n	80083c4 <__mdiff+0x24>
 8008438:	f85c 1b04 	ldr.w	r1, [ip], #4
 800843c:	fa1e f381 	uxtah	r3, lr, r1
 8008440:	141a      	asrs	r2, r3, #16
 8008442:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008446:	b29b      	uxth	r3, r3
 8008448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800844c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008450:	f845 3b04 	str.w	r3, [r5], #4
 8008454:	e7e9      	b.n	800842a <__mdiff+0x8a>
 8008456:	3e01      	subs	r6, #1
 8008458:	e7e9      	b.n	800842e <__mdiff+0x8e>

0800845a <__d2b>:
 800845a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800845e:	460e      	mov	r6, r1
 8008460:	2101      	movs	r1, #1
 8008462:	ec59 8b10 	vmov	r8, r9, d0
 8008466:	4615      	mov	r5, r2
 8008468:	f7ff fd6a 	bl	8007f40 <_Balloc>
 800846c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008470:	4607      	mov	r7, r0
 8008472:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008476:	bb34      	cbnz	r4, 80084c6 <__d2b+0x6c>
 8008478:	9301      	str	r3, [sp, #4]
 800847a:	f1b8 0300 	subs.w	r3, r8, #0
 800847e:	d027      	beq.n	80084d0 <__d2b+0x76>
 8008480:	a802      	add	r0, sp, #8
 8008482:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008486:	f7ff fe00 	bl	800808a <__lo0bits>
 800848a:	9900      	ldr	r1, [sp, #0]
 800848c:	b1f0      	cbz	r0, 80084cc <__d2b+0x72>
 800848e:	9a01      	ldr	r2, [sp, #4]
 8008490:	f1c0 0320 	rsb	r3, r0, #32
 8008494:	fa02 f303 	lsl.w	r3, r2, r3
 8008498:	430b      	orrs	r3, r1
 800849a:	40c2      	lsrs	r2, r0
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	9201      	str	r2, [sp, #4]
 80084a0:	9b01      	ldr	r3, [sp, #4]
 80084a2:	61bb      	str	r3, [r7, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	bf14      	ite	ne
 80084a8:	2102      	movne	r1, #2
 80084aa:	2101      	moveq	r1, #1
 80084ac:	6139      	str	r1, [r7, #16]
 80084ae:	b1c4      	cbz	r4, 80084e2 <__d2b+0x88>
 80084b0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80084b4:	4404      	add	r4, r0
 80084b6:	6034      	str	r4, [r6, #0]
 80084b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084bc:	6028      	str	r0, [r5, #0]
 80084be:	4638      	mov	r0, r7
 80084c0:	b003      	add	sp, #12
 80084c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80084c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084ca:	e7d5      	b.n	8008478 <__d2b+0x1e>
 80084cc:	6179      	str	r1, [r7, #20]
 80084ce:	e7e7      	b.n	80084a0 <__d2b+0x46>
 80084d0:	a801      	add	r0, sp, #4
 80084d2:	f7ff fdda 	bl	800808a <__lo0bits>
 80084d6:	9b01      	ldr	r3, [sp, #4]
 80084d8:	617b      	str	r3, [r7, #20]
 80084da:	2101      	movs	r1, #1
 80084dc:	6139      	str	r1, [r7, #16]
 80084de:	3020      	adds	r0, #32
 80084e0:	e7e5      	b.n	80084ae <__d2b+0x54>
 80084e2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80084e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084ea:	6030      	str	r0, [r6, #0]
 80084ec:	6918      	ldr	r0, [r3, #16]
 80084ee:	f7ff fdad 	bl	800804c <__hi0bits>
 80084f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80084f6:	e7e1      	b.n	80084bc <__d2b+0x62>

080084f8 <_calloc_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	fb02 f401 	mul.w	r4, r2, r1
 80084fe:	4621      	mov	r1, r4
 8008500:	f7fd fd9e 	bl	8006040 <_malloc_r>
 8008504:	4605      	mov	r5, r0
 8008506:	b118      	cbz	r0, 8008510 <_calloc_r+0x18>
 8008508:	4622      	mov	r2, r4
 800850a:	2100      	movs	r1, #0
 800850c:	f7fd fd41 	bl	8005f92 <memset>
 8008510:	4628      	mov	r0, r5
 8008512:	bd38      	pop	{r3, r4, r5, pc}

08008514 <__sfputc_r>:
 8008514:	6893      	ldr	r3, [r2, #8]
 8008516:	3b01      	subs	r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	b410      	push	{r4}
 800851c:	6093      	str	r3, [r2, #8]
 800851e:	da08      	bge.n	8008532 <__sfputc_r+0x1e>
 8008520:	6994      	ldr	r4, [r2, #24]
 8008522:	42a3      	cmp	r3, r4
 8008524:	db01      	blt.n	800852a <__sfputc_r+0x16>
 8008526:	290a      	cmp	r1, #10
 8008528:	d103      	bne.n	8008532 <__sfputc_r+0x1e>
 800852a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800852e:	f7fe bbb5 	b.w	8006c9c <__swbuf_r>
 8008532:	6813      	ldr	r3, [r2, #0]
 8008534:	1c58      	adds	r0, r3, #1
 8008536:	6010      	str	r0, [r2, #0]
 8008538:	7019      	strb	r1, [r3, #0]
 800853a:	4608      	mov	r0, r1
 800853c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008540:	4770      	bx	lr

08008542 <__sfputs_r>:
 8008542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008544:	4606      	mov	r6, r0
 8008546:	460f      	mov	r7, r1
 8008548:	4614      	mov	r4, r2
 800854a:	18d5      	adds	r5, r2, r3
 800854c:	42ac      	cmp	r4, r5
 800854e:	d101      	bne.n	8008554 <__sfputs_r+0x12>
 8008550:	2000      	movs	r0, #0
 8008552:	e007      	b.n	8008564 <__sfputs_r+0x22>
 8008554:	463a      	mov	r2, r7
 8008556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800855a:	4630      	mov	r0, r6
 800855c:	f7ff ffda 	bl	8008514 <__sfputc_r>
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	d1f3      	bne.n	800854c <__sfputs_r+0xa>
 8008564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008568 <_vfiprintf_r>:
 8008568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856c:	460c      	mov	r4, r1
 800856e:	b09d      	sub	sp, #116	; 0x74
 8008570:	4617      	mov	r7, r2
 8008572:	461d      	mov	r5, r3
 8008574:	4606      	mov	r6, r0
 8008576:	b118      	cbz	r0, 8008580 <_vfiprintf_r+0x18>
 8008578:	6983      	ldr	r3, [r0, #24]
 800857a:	b90b      	cbnz	r3, 8008580 <_vfiprintf_r+0x18>
 800857c:	f7ff fbb6 	bl	8007cec <__sinit>
 8008580:	4b7c      	ldr	r3, [pc, #496]	; (8008774 <_vfiprintf_r+0x20c>)
 8008582:	429c      	cmp	r4, r3
 8008584:	d158      	bne.n	8008638 <_vfiprintf_r+0xd0>
 8008586:	6874      	ldr	r4, [r6, #4]
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	0718      	lsls	r0, r3, #28
 800858c:	d55e      	bpl.n	800864c <_vfiprintf_r+0xe4>
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d05b      	beq.n	800864c <_vfiprintf_r+0xe4>
 8008594:	2300      	movs	r3, #0
 8008596:	9309      	str	r3, [sp, #36]	; 0x24
 8008598:	2320      	movs	r3, #32
 800859a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800859e:	2330      	movs	r3, #48	; 0x30
 80085a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085a4:	9503      	str	r5, [sp, #12]
 80085a6:	f04f 0b01 	mov.w	fp, #1
 80085aa:	46b8      	mov	r8, r7
 80085ac:	4645      	mov	r5, r8
 80085ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80085b2:	b10b      	cbz	r3, 80085b8 <_vfiprintf_r+0x50>
 80085b4:	2b25      	cmp	r3, #37	; 0x25
 80085b6:	d154      	bne.n	8008662 <_vfiprintf_r+0xfa>
 80085b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80085bc:	d00b      	beq.n	80085d6 <_vfiprintf_r+0x6e>
 80085be:	4653      	mov	r3, sl
 80085c0:	463a      	mov	r2, r7
 80085c2:	4621      	mov	r1, r4
 80085c4:	4630      	mov	r0, r6
 80085c6:	f7ff ffbc 	bl	8008542 <__sfputs_r>
 80085ca:	3001      	adds	r0, #1
 80085cc:	f000 80c2 	beq.w	8008754 <_vfiprintf_r+0x1ec>
 80085d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d2:	4453      	add	r3, sl
 80085d4:	9309      	str	r3, [sp, #36]	; 0x24
 80085d6:	f898 3000 	ldrb.w	r3, [r8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 80ba 	beq.w	8008754 <_vfiprintf_r+0x1ec>
 80085e0:	2300      	movs	r3, #0
 80085e2:	f04f 32ff 	mov.w	r2, #4294967295
 80085e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085ea:	9304      	str	r3, [sp, #16]
 80085ec:	9307      	str	r3, [sp, #28]
 80085ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085f2:	931a      	str	r3, [sp, #104]	; 0x68
 80085f4:	46a8      	mov	r8, r5
 80085f6:	2205      	movs	r2, #5
 80085f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80085fc:	485e      	ldr	r0, [pc, #376]	; (8008778 <_vfiprintf_r+0x210>)
 80085fe:	f7f7 fe07 	bl	8000210 <memchr>
 8008602:	9b04      	ldr	r3, [sp, #16]
 8008604:	bb78      	cbnz	r0, 8008666 <_vfiprintf_r+0xfe>
 8008606:	06d9      	lsls	r1, r3, #27
 8008608:	bf44      	itt	mi
 800860a:	2220      	movmi	r2, #32
 800860c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008610:	071a      	lsls	r2, r3, #28
 8008612:	bf44      	itt	mi
 8008614:	222b      	movmi	r2, #43	; 0x2b
 8008616:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800861a:	782a      	ldrb	r2, [r5, #0]
 800861c:	2a2a      	cmp	r2, #42	; 0x2a
 800861e:	d02a      	beq.n	8008676 <_vfiprintf_r+0x10e>
 8008620:	9a07      	ldr	r2, [sp, #28]
 8008622:	46a8      	mov	r8, r5
 8008624:	2000      	movs	r0, #0
 8008626:	250a      	movs	r5, #10
 8008628:	4641      	mov	r1, r8
 800862a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800862e:	3b30      	subs	r3, #48	; 0x30
 8008630:	2b09      	cmp	r3, #9
 8008632:	d969      	bls.n	8008708 <_vfiprintf_r+0x1a0>
 8008634:	b360      	cbz	r0, 8008690 <_vfiprintf_r+0x128>
 8008636:	e024      	b.n	8008682 <_vfiprintf_r+0x11a>
 8008638:	4b50      	ldr	r3, [pc, #320]	; (800877c <_vfiprintf_r+0x214>)
 800863a:	429c      	cmp	r4, r3
 800863c:	d101      	bne.n	8008642 <_vfiprintf_r+0xda>
 800863e:	68b4      	ldr	r4, [r6, #8]
 8008640:	e7a2      	b.n	8008588 <_vfiprintf_r+0x20>
 8008642:	4b4f      	ldr	r3, [pc, #316]	; (8008780 <_vfiprintf_r+0x218>)
 8008644:	429c      	cmp	r4, r3
 8008646:	bf08      	it	eq
 8008648:	68f4      	ldreq	r4, [r6, #12]
 800864a:	e79d      	b.n	8008588 <_vfiprintf_r+0x20>
 800864c:	4621      	mov	r1, r4
 800864e:	4630      	mov	r0, r6
 8008650:	f7fe fb88 	bl	8006d64 <__swsetup_r>
 8008654:	2800      	cmp	r0, #0
 8008656:	d09d      	beq.n	8008594 <_vfiprintf_r+0x2c>
 8008658:	f04f 30ff 	mov.w	r0, #4294967295
 800865c:	b01d      	add	sp, #116	; 0x74
 800865e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008662:	46a8      	mov	r8, r5
 8008664:	e7a2      	b.n	80085ac <_vfiprintf_r+0x44>
 8008666:	4a44      	ldr	r2, [pc, #272]	; (8008778 <_vfiprintf_r+0x210>)
 8008668:	1a80      	subs	r0, r0, r2
 800866a:	fa0b f000 	lsl.w	r0, fp, r0
 800866e:	4318      	orrs	r0, r3
 8008670:	9004      	str	r0, [sp, #16]
 8008672:	4645      	mov	r5, r8
 8008674:	e7be      	b.n	80085f4 <_vfiprintf_r+0x8c>
 8008676:	9a03      	ldr	r2, [sp, #12]
 8008678:	1d11      	adds	r1, r2, #4
 800867a:	6812      	ldr	r2, [r2, #0]
 800867c:	9103      	str	r1, [sp, #12]
 800867e:	2a00      	cmp	r2, #0
 8008680:	db01      	blt.n	8008686 <_vfiprintf_r+0x11e>
 8008682:	9207      	str	r2, [sp, #28]
 8008684:	e004      	b.n	8008690 <_vfiprintf_r+0x128>
 8008686:	4252      	negs	r2, r2
 8008688:	f043 0302 	orr.w	r3, r3, #2
 800868c:	9207      	str	r2, [sp, #28]
 800868e:	9304      	str	r3, [sp, #16]
 8008690:	f898 3000 	ldrb.w	r3, [r8]
 8008694:	2b2e      	cmp	r3, #46	; 0x2e
 8008696:	d10e      	bne.n	80086b6 <_vfiprintf_r+0x14e>
 8008698:	f898 3001 	ldrb.w	r3, [r8, #1]
 800869c:	2b2a      	cmp	r3, #42	; 0x2a
 800869e:	d138      	bne.n	8008712 <_vfiprintf_r+0x1aa>
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	1d1a      	adds	r2, r3, #4
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	9203      	str	r2, [sp, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	bfb8      	it	lt
 80086ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80086b0:	f108 0802 	add.w	r8, r8, #2
 80086b4:	9305      	str	r3, [sp, #20]
 80086b6:	4d33      	ldr	r5, [pc, #204]	; (8008784 <_vfiprintf_r+0x21c>)
 80086b8:	f898 1000 	ldrb.w	r1, [r8]
 80086bc:	2203      	movs	r2, #3
 80086be:	4628      	mov	r0, r5
 80086c0:	f7f7 fda6 	bl	8000210 <memchr>
 80086c4:	b140      	cbz	r0, 80086d8 <_vfiprintf_r+0x170>
 80086c6:	2340      	movs	r3, #64	; 0x40
 80086c8:	1b40      	subs	r0, r0, r5
 80086ca:	fa03 f000 	lsl.w	r0, r3, r0
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	4303      	orrs	r3, r0
 80086d2:	f108 0801 	add.w	r8, r8, #1
 80086d6:	9304      	str	r3, [sp, #16]
 80086d8:	f898 1000 	ldrb.w	r1, [r8]
 80086dc:	482a      	ldr	r0, [pc, #168]	; (8008788 <_vfiprintf_r+0x220>)
 80086de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086e2:	2206      	movs	r2, #6
 80086e4:	f108 0701 	add.w	r7, r8, #1
 80086e8:	f7f7 fd92 	bl	8000210 <memchr>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d037      	beq.n	8008760 <_vfiprintf_r+0x1f8>
 80086f0:	4b26      	ldr	r3, [pc, #152]	; (800878c <_vfiprintf_r+0x224>)
 80086f2:	bb1b      	cbnz	r3, 800873c <_vfiprintf_r+0x1d4>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	3307      	adds	r3, #7
 80086f8:	f023 0307 	bic.w	r3, r3, #7
 80086fc:	3308      	adds	r3, #8
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008702:	444b      	add	r3, r9
 8008704:	9309      	str	r3, [sp, #36]	; 0x24
 8008706:	e750      	b.n	80085aa <_vfiprintf_r+0x42>
 8008708:	fb05 3202 	mla	r2, r5, r2, r3
 800870c:	2001      	movs	r0, #1
 800870e:	4688      	mov	r8, r1
 8008710:	e78a      	b.n	8008628 <_vfiprintf_r+0xc0>
 8008712:	2300      	movs	r3, #0
 8008714:	f108 0801 	add.w	r8, r8, #1
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	4619      	mov	r1, r3
 800871c:	250a      	movs	r5, #10
 800871e:	4640      	mov	r0, r8
 8008720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008724:	3a30      	subs	r2, #48	; 0x30
 8008726:	2a09      	cmp	r2, #9
 8008728:	d903      	bls.n	8008732 <_vfiprintf_r+0x1ca>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0c3      	beq.n	80086b6 <_vfiprintf_r+0x14e>
 800872e:	9105      	str	r1, [sp, #20]
 8008730:	e7c1      	b.n	80086b6 <_vfiprintf_r+0x14e>
 8008732:	fb05 2101 	mla	r1, r5, r1, r2
 8008736:	2301      	movs	r3, #1
 8008738:	4680      	mov	r8, r0
 800873a:	e7f0      	b.n	800871e <_vfiprintf_r+0x1b6>
 800873c:	ab03      	add	r3, sp, #12
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	4622      	mov	r2, r4
 8008742:	4b13      	ldr	r3, [pc, #76]	; (8008790 <_vfiprintf_r+0x228>)
 8008744:	a904      	add	r1, sp, #16
 8008746:	4630      	mov	r0, r6
 8008748:	f7fd fd68 	bl	800621c <_printf_float>
 800874c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008750:	4681      	mov	r9, r0
 8008752:	d1d5      	bne.n	8008700 <_vfiprintf_r+0x198>
 8008754:	89a3      	ldrh	r3, [r4, #12]
 8008756:	065b      	lsls	r3, r3, #25
 8008758:	f53f af7e 	bmi.w	8008658 <_vfiprintf_r+0xf0>
 800875c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800875e:	e77d      	b.n	800865c <_vfiprintf_r+0xf4>
 8008760:	ab03      	add	r3, sp, #12
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	4622      	mov	r2, r4
 8008766:	4b0a      	ldr	r3, [pc, #40]	; (8008790 <_vfiprintf_r+0x228>)
 8008768:	a904      	add	r1, sp, #16
 800876a:	4630      	mov	r0, r6
 800876c:	f7fe f80c 	bl	8006788 <_printf_i>
 8008770:	e7ec      	b.n	800874c <_vfiprintf_r+0x1e4>
 8008772:	bf00      	nop
 8008774:	08008abc 	.word	0x08008abc
 8008778:	08008bfc 	.word	0x08008bfc
 800877c:	08008adc 	.word	0x08008adc
 8008780:	08008a9c 	.word	0x08008a9c
 8008784:	08008c02 	.word	0x08008c02
 8008788:	08008c06 	.word	0x08008c06
 800878c:	0800621d 	.word	0x0800621d
 8008790:	08008543 	.word	0x08008543

08008794 <_read_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4c07      	ldr	r4, [pc, #28]	; (80087b4 <_read_r+0x20>)
 8008798:	4605      	mov	r5, r0
 800879a:	4608      	mov	r0, r1
 800879c:	4611      	mov	r1, r2
 800879e:	2200      	movs	r2, #0
 80087a0:	6022      	str	r2, [r4, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	f7f9 fe06 	bl	80023b4 <_read>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_read_r+0x1e>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_read_r+0x1e>
 80087b0:	602b      	str	r3, [r5, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	200002e0 	.word	0x200002e0

080087b8 <__ascii_mbtowc>:
 80087b8:	b082      	sub	sp, #8
 80087ba:	b901      	cbnz	r1, 80087be <__ascii_mbtowc+0x6>
 80087bc:	a901      	add	r1, sp, #4
 80087be:	b142      	cbz	r2, 80087d2 <__ascii_mbtowc+0x1a>
 80087c0:	b14b      	cbz	r3, 80087d6 <__ascii_mbtowc+0x1e>
 80087c2:	7813      	ldrb	r3, [r2, #0]
 80087c4:	600b      	str	r3, [r1, #0]
 80087c6:	7812      	ldrb	r2, [r2, #0]
 80087c8:	1c10      	adds	r0, r2, #0
 80087ca:	bf18      	it	ne
 80087cc:	2001      	movne	r0, #1
 80087ce:	b002      	add	sp, #8
 80087d0:	4770      	bx	lr
 80087d2:	4610      	mov	r0, r2
 80087d4:	e7fb      	b.n	80087ce <__ascii_mbtowc+0x16>
 80087d6:	f06f 0001 	mvn.w	r0, #1
 80087da:	e7f8      	b.n	80087ce <__ascii_mbtowc+0x16>

080087dc <__ascii_wctomb>:
 80087dc:	b149      	cbz	r1, 80087f2 <__ascii_wctomb+0x16>
 80087de:	2aff      	cmp	r2, #255	; 0xff
 80087e0:	bf85      	ittet	hi
 80087e2:	238a      	movhi	r3, #138	; 0x8a
 80087e4:	6003      	strhi	r3, [r0, #0]
 80087e6:	700a      	strbls	r2, [r1, #0]
 80087e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80087ec:	bf98      	it	ls
 80087ee:	2001      	movls	r0, #1
 80087f0:	4770      	bx	lr
 80087f2:	4608      	mov	r0, r1
 80087f4:	4770      	bx	lr
	...

080087f8 <_init>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	bf00      	nop
 80087fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fe:	bc08      	pop	{r3}
 8008800:	469e      	mov	lr, r3
 8008802:	4770      	bx	lr

08008804 <_fini>:
 8008804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008806:	bf00      	nop
 8008808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880a:	bc08      	pop	{r3}
 800880c:	469e      	mov	lr, r3
 800880e:	4770      	bx	lr
