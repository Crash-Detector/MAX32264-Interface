
Collision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af6c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002ae14  0800b130  0800b130  0001b130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035f44  08035f44  000501e0  2**0
                  CONTENTS
  4 .ARM          00000008  08035f44  08035f44  00045f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08035f4c  08035f4c  000501e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08035f4c  08035f4c  00045f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08035f50  08035f50  00045f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08035f54  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001e0  08036134  000501e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  08036134  000502f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000501e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132b9  00000000  00000000  00050210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002682  00000000  00000000  000634c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00065b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002afff  00000000  00000000  00066980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000107be  00000000  00000000  0009197f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00101be7  00000000  00000000  000a213d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  001a3d24  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000d00  00000000  00000000  001a3d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000505c  00000000  00000000  001a4a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b114 	.word	0x0800b114

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0800b114 	.word	0x0800b114

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9a4 	b.w	8001018 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f040 8083 	bne.w	8000e6a <__udivmoddi4+0x116>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d947      	bls.n	8000dfa <__udivmoddi4+0xa6>
 8000d6a:	fab2 f282 	clz	r2, r2
 8000d6e:	b142      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	f1c2 0020 	rsb	r0, r2, #32
 8000d74:	fa24 f000 	lsr.w	r0, r4, r0
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	4097      	lsls	r7, r2
 8000d7c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d80:	4094      	lsls	r4, r2
 8000d82:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d86:	0c23      	lsrs	r3, r4, #16
 8000d88:	fbbc f6f8 	udiv	r6, ip, r8
 8000d8c:	fa1f fe87 	uxth.w	lr, r7
 8000d90:	fb08 c116 	mls	r1, r8, r6, ip
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb06 f10e 	mul.w	r1, r6, lr
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x60>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000da6:	f080 8119 	bcs.w	8000fdc <__udivmoddi4+0x288>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 8116 	bls.w	8000fdc <__udivmoddi4+0x288>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d909      	bls.n	8000de0 <__udivmoddi4+0x8c>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dd2:	f080 8105 	bcs.w	8000fe0 <__udivmoddi4+0x28c>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f240 8102 	bls.w	8000fe0 <__udivmoddi4+0x28c>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	443c      	add	r4, r7
 8000de0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de4:	eba4 040e 	sub.w	r4, r4, lr
 8000de8:	2600      	movs	r6, #0
 8000dea:	b11d      	cbz	r5, 8000df4 <__udivmoddi4+0xa0>
 8000dec:	40d4      	lsrs	r4, r2
 8000dee:	2300      	movs	r3, #0
 8000df0:	e9c5 4300 	strd	r4, r3, [r5]
 8000df4:	4631      	mov	r1, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	b902      	cbnz	r2, 8000dfe <__udivmoddi4+0xaa>
 8000dfc:	deff      	udf	#255	; 0xff
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	d150      	bne.n	8000ea8 <__udivmoddi4+0x154>
 8000e06:	1bcb      	subs	r3, r1, r7
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	fa1f f887 	uxth.w	r8, r7
 8000e10:	2601      	movs	r6, #1
 8000e12:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e16:	0c21      	lsrs	r1, r4, #16
 8000e18:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb08 f30c 	mul.w	r3, r8, ip
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d907      	bls.n	8000e38 <__udivmoddi4+0xe4>
 8000e28:	1879      	adds	r1, r7, r1
 8000e2a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e2e:	d202      	bcs.n	8000e36 <__udivmoddi4+0xe2>
 8000e30:	428b      	cmp	r3, r1
 8000e32:	f200 80e9 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e36:	4684      	mov	ip, r0
 8000e38:	1ac9      	subs	r1, r1, r3
 8000e3a:	b2a3      	uxth	r3, r4
 8000e3c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e40:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e48:	fb08 f800 	mul.w	r8, r8, r0
 8000e4c:	45a0      	cmp	r8, r4
 8000e4e:	d907      	bls.n	8000e60 <__udivmoddi4+0x10c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x10a>
 8000e58:	45a0      	cmp	r8, r4
 8000e5a:	f200 80d9 	bhi.w	8001010 <__udivmoddi4+0x2bc>
 8000e5e:	4618      	mov	r0, r3
 8000e60:	eba4 0408 	sub.w	r4, r4, r8
 8000e64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e68:	e7bf      	b.n	8000dea <__udivmoddi4+0x96>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d909      	bls.n	8000e82 <__udivmoddi4+0x12e>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	f000 80b1 	beq.w	8000fd6 <__udivmoddi4+0x282>
 8000e74:	2600      	movs	r6, #0
 8000e76:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7a:	4630      	mov	r0, r6
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	fab3 f683 	clz	r6, r3
 8000e86:	2e00      	cmp	r6, #0
 8000e88:	d14a      	bne.n	8000f20 <__udivmoddi4+0x1cc>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0x140>
 8000e8e:	4282      	cmp	r2, r0
 8000e90:	f200 80b8 	bhi.w	8001004 <__udivmoddi4+0x2b0>
 8000e94:	1a84      	subs	r4, r0, r2
 8000e96:	eb61 0103 	sbc.w	r1, r1, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	468c      	mov	ip, r1
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d0a8      	beq.n	8000df4 <__udivmoddi4+0xa0>
 8000ea2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ea6:	e7a5      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f603 	lsr.w	r6, r0, r3
 8000eb0:	4097      	lsls	r7, r2
 8000eb2:	fa01 f002 	lsl.w	r0, r1, r2
 8000eb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eba:	40d9      	lsrs	r1, r3
 8000ebc:	4330      	orrs	r0, r6
 8000ebe:	0c03      	lsrs	r3, r0, #16
 8000ec0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ec4:	fa1f f887 	uxth.w	r8, r7
 8000ec8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed0:	fb06 f108 	mul.w	r1, r6, r8
 8000ed4:	4299      	cmp	r1, r3
 8000ed6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eda:	d909      	bls.n	8000ef0 <__udivmoddi4+0x19c>
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ee2:	f080 808d 	bcs.w	8001000 <__udivmoddi4+0x2ac>
 8000ee6:	4299      	cmp	r1, r3
 8000ee8:	f240 808a 	bls.w	8001000 <__udivmoddi4+0x2ac>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b281      	uxth	r1, r0
 8000ef4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ef8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f00:	fb00 f308 	mul.w	r3, r0, r8
 8000f04:	428b      	cmp	r3, r1
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x1c4>
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f0e:	d273      	bcs.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d971      	bls.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4439      	add	r1, r7
 8000f18:	1acb      	subs	r3, r1, r3
 8000f1a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f1e:	e778      	b.n	8000e12 <__udivmoddi4+0xbe>
 8000f20:	f1c6 0c20 	rsb	ip, r6, #32
 8000f24:	fa03 f406 	lsl.w	r4, r3, r6
 8000f28:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f2c:	431c      	orrs	r4, r3
 8000f2e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f32:	fa01 f306 	lsl.w	r3, r1, r6
 8000f36:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f3a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	0c3b      	lsrs	r3, r7, #16
 8000f42:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f46:	fa1f f884 	uxth.w	r8, r4
 8000f4a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f4e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f52:	fb09 fa08 	mul.w	sl, r9, r8
 8000f56:	458a      	cmp	sl, r1
 8000f58:	fa02 f206 	lsl.w	r2, r2, r6
 8000f5c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x220>
 8000f62:	1861      	adds	r1, r4, r1
 8000f64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f68:	d248      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6a:	458a      	cmp	sl, r1
 8000f6c:	d946      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000f6e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f72:	4421      	add	r1, r4
 8000f74:	eba1 010a 	sub.w	r1, r1, sl
 8000f78:	b2bf      	uxth	r7, r7
 8000f7a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f7e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f82:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f86:	fb00 f808 	mul.w	r8, r0, r8
 8000f8a:	45b8      	cmp	r8, r7
 8000f8c:	d907      	bls.n	8000f9e <__udivmoddi4+0x24a>
 8000f8e:	19e7      	adds	r7, r4, r7
 8000f90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f94:	d22e      	bcs.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f96:	45b8      	cmp	r8, r7
 8000f98:	d92c      	bls.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	4427      	add	r7, r4
 8000f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fa2:	eba7 0708 	sub.w	r7, r7, r8
 8000fa6:	fba0 8902 	umull	r8, r9, r0, r2
 8000faa:	454f      	cmp	r7, r9
 8000fac:	46c6      	mov	lr, r8
 8000fae:	4649      	mov	r1, r9
 8000fb0:	d31a      	bcc.n	8000fe8 <__udivmoddi4+0x294>
 8000fb2:	d017      	beq.n	8000fe4 <__udivmoddi4+0x290>
 8000fb4:	b15d      	cbz	r5, 8000fce <__udivmoddi4+0x27a>
 8000fb6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fba:	eb67 0701 	sbc.w	r7, r7, r1
 8000fbe:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fc2:	40f2      	lsrs	r2, r6
 8000fc4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fc8:	40f7      	lsrs	r7, r6
 8000fca:	e9c5 2700 	strd	r2, r7, [r5]
 8000fce:	2600      	movs	r6, #0
 8000fd0:	4631      	mov	r1, r6
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e70b      	b.n	8000df4 <__udivmoddi4+0xa0>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e9      	b.n	8000db4 <__udivmoddi4+0x60>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6fd      	b.n	8000de0 <__udivmoddi4+0x8c>
 8000fe4:	4543      	cmp	r3, r8
 8000fe6:	d2e5      	bcs.n	8000fb4 <__udivmoddi4+0x260>
 8000fe8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fec:	eb69 0104 	sbc.w	r1, r9, r4
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7df      	b.n	8000fb4 <__udivmoddi4+0x260>
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e7d2      	b.n	8000f9e <__udivmoddi4+0x24a>
 8000ff8:	4660      	mov	r0, ip
 8000ffa:	e78d      	b.n	8000f18 <__udivmoddi4+0x1c4>
 8000ffc:	4681      	mov	r9, r0
 8000ffe:	e7b9      	b.n	8000f74 <__udivmoddi4+0x220>
 8001000:	4666      	mov	r6, ip
 8001002:	e775      	b.n	8000ef0 <__udivmoddi4+0x19c>
 8001004:	4630      	mov	r0, r6
 8001006:	e74a      	b.n	8000e9e <__udivmoddi4+0x14a>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	4439      	add	r1, r7
 800100e:	e713      	b.n	8000e38 <__udivmoddi4+0xe4>
 8001010:	3802      	subs	r0, #2
 8001012:	443c      	add	r4, r7
 8001014:	e724      	b.n	8000e60 <__udivmoddi4+0x10c>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <config_gpio>:
//enum IO { IN, OUT };

// direction 1 (input), direction 0, output
// Configure the gpio to be either In or out (as well as enabling the clock if not already enabled).
void config_gpio( const char port, const int pin_num, const enum IO direction )
    {
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	71bb      	strb	r3, [r7, #6]
    // Invariants
    assert( port >= 'A' && port <= 'F' ); 
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b40      	cmp	r3, #64	; 0x40
 8001030:	d902      	bls.n	8001038 <config_gpio+0x1c>
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b46      	cmp	r3, #70	; 0x46
 8001036:	d905      	bls.n	8001044 <config_gpio+0x28>
 8001038:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <config_gpio+0xd0>)
 800103a:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <config_gpio+0xd4>)
 800103c:	211c      	movs	r1, #28
 800103e:	482d      	ldr	r0, [pc, #180]	; (80010f4 <config_gpio+0xd8>)
 8001040:	f005 fb74 	bl	800672c <__assert_func>
    assert( pin_num >= 0 && pin_num <= 15 );
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db02      	blt.n	8001050 <config_gpio+0x34>
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	dd05      	ble.n	800105c <config_gpio+0x40>
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <config_gpio+0xdc>)
 8001052:	4a27      	ldr	r2, [pc, #156]	; (80010f0 <config_gpio+0xd4>)
 8001054:	211d      	movs	r1, #29
 8001056:	4827      	ldr	r0, [pc, #156]	; (80010f4 <config_gpio+0xd8>)
 8001058:	f005 fb68 	bl	800672c <__assert_func>
    assert( direction == IN || direction == OUT );
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d008      	beq.n	8001074 <config_gpio+0x58>
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d005      	beq.n	8001074 <config_gpio+0x58>
 8001068:	4b24      	ldr	r3, [pc, #144]	; (80010fc <config_gpio+0xe0>)
 800106a:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <config_gpio+0xd4>)
 800106c:	211e      	movs	r1, #30
 800106e:	4821      	ldr	r0, [pc, #132]	; (80010f4 <config_gpio+0xd8>)
 8001070:	f005 fb5c 	bl	800672c <__assert_func>

    // Port index: A == 0, B == 1, etc.
    const uint32_t port_idx = port - 'A';
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	3b41      	subs	r3, #65	; 0x41
 8001078:	61fb      	str	r3, [r7, #28]

    // Ensure that rcc_ahb2 for the port is enabled
    uint32_t * const rcc_ahb2enr = ( uint32_t * )( RCC_ADDR + RCC_AHB2ENR_OFFSET );
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <config_gpio+0xe4>)
 800107c:	61bb      	str	r3, [r7, #24]
    *rcc_ahb2enr |= ( uint32_t ) ( 1 << port_idx ); // Shift one into the index of the port (turning on the clock if not already on).
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2101      	movs	r1, #1
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	431a      	orrs	r2, r3
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

    // Port address differ by 0x400 bytes
    const uint32_t port_offset = ( uint32_t )port_idx * 0x400;
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	029b      	lsls	r3, r3, #10
 8001094:	617b      	str	r3, [r7, #20]

    uint32_t io_mode = direction == IN ? 0b00 : 0b01;
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	2b00      	cmp	r3, #0
 800109a:	bf14      	ite	ne
 800109c:	2301      	movne	r3, #1
 800109e:	2300      	moveq	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	613b      	str	r3, [r7, #16]
    uint32_t mask = 0b11;
 80010a4:	2303      	movs	r3, #3
 80010a6:	60fb      	str	r3, [r7, #12]

    // Shift to the pin_num's relevant bits9 (in moder register).
    io_mode <<= ( pin_num << 1 ); // Shift by 2*pin_num
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	613b      	str	r3, [r7, #16]
    mask    <<= ( pin_num << 1 );
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	60fb      	str	r3, [r7, #12]

    uint32_t * const gpio_moder = (uint32_t * )( GPIO_ADDR_BASE + port_offset + GPIO_MODER_OFFSET );
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
 80010c6:	60bb      	str	r3, [r7, #8]

    *gpio_moder &= ~mask; // Clear the mode bits
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	401a      	ands	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	601a      	str	r2, [r3, #0]
    *gpio_moder |=  io_mode; // Write to it
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	431a      	orrs	r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	601a      	str	r2, [r3, #0]
    } // end config_gpio( )
 80010e2:	bf00      	nop
 80010e4:	3720      	adds	r7, #32
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0800b130 	.word	0x0800b130
 80010f0:	080359f0 	.word	0x080359f0
 80010f4:	0800b14c 	.word	0x0800b14c
 80010f8:	0800b164 	.word	0x0800b164
 80010fc:	0800b184 	.word	0x0800b184
 8001100:	4002104c 	.word	0x4002104c

08001104 <read_gpio_state>:

enum GPIO_MODE read_gpio_state( const char port, const int pin_num )
    {
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	71fb      	strb	r3, [r7, #7]
    // Invariants
    assert( port >= 'A' && port <= 'F' ); 
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b40      	cmp	r3, #64	; 0x40
 8001114:	d902      	bls.n	800111c <read_gpio_state+0x18>
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b46      	cmp	r3, #70	; 0x46
 800111a:	d905      	bls.n	8001128 <read_gpio_state+0x24>
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <read_gpio_state+0x80>)
 800111e:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <read_gpio_state+0x84>)
 8001120:	213a      	movs	r1, #58	; 0x3a
 8001122:	481a      	ldr	r0, [pc, #104]	; (800118c <read_gpio_state+0x88>)
 8001124:	f005 fb02 	bl	800672c <__assert_func>
    assert( pin_num >= 0 && pin_num <= 15 );
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db02      	blt.n	8001134 <read_gpio_state+0x30>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	dd05      	ble.n	8001140 <read_gpio_state+0x3c>
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <read_gpio_state+0x8c>)
 8001136:	4a14      	ldr	r2, [pc, #80]	; (8001188 <read_gpio_state+0x84>)
 8001138:	213b      	movs	r1, #59	; 0x3b
 800113a:	4814      	ldr	r0, [pc, #80]	; (800118c <read_gpio_state+0x88>)
 800113c:	f005 faf6 	bl	800672c <__assert_func>

    // Port index: A == 0, B == 1, etc.
    const uint32_t port_idx = port - 'A';
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3b41      	subs	r3, #65	; 0x41
 8001144:	61fb      	str	r3, [r7, #28]

    // Port address differ by 0x400 bytes
    const uint32_t port_offset = ( uint32_t )port_idx * 0x400;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	029b      	lsls	r3, r3, #10
 800114a:	61bb      	str	r3, [r7, #24]
    uint32_t const * const gpio_moder = (uint32_t * )( GPIO_ADDR_BASE + port_offset + GPIO_MODER_OFFSET );
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
 8001152:	617b      	str	r3, [r7, #20]
    const uint32_t mask = 0b11 << ( pin_num << 1 );
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	613b      	str	r3, [r7, #16]

    uint32_t io_mode;
    // Obtain the io_mode
    io_mode = *gpio_moder & mask;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
    io_mode >>= ( pin_num << 1 ); // Shift down to the LSBs.
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	fa22 f303 	lsr.w	r3, r2, r3
 8001174:	60fb      	str	r3, [r7, #12]

    return (enum GPIO_MODE)io_mode;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	b2db      	uxtb	r3, r3
    } // end read_gpio_state( )
 800117a:	4618      	mov	r0, r3
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0800b130 	.word	0x0800b130
 8001188:	080359fc 	.word	0x080359fc
 800118c:	0800b14c 	.word	0x0800b14c
 8001190:	0800b164 	.word	0x0800b164

08001194 <set_pin_mode>:
    {
    return read_gpio_state( gpio->port, gpio->pin_num );
    } // end read_gpio_t_state( )

void set_pin_mode( struct GPIO * const gpio, const enum IO direction )
    {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
    gpio->pin_mode = direction == IN ? GPIO_INPUT : GPIO_OUTPUT;
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf14      	ite	ne
 80011a6:	2301      	movne	r3, #1
 80011a8:	2300      	moveq	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	701a      	strb	r2, [r3, #0]
    config_gpio( gpio->port, gpio->pin_num, direction );
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	7858      	ldrb	r0, [r3, #1]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	789b      	ldrb	r3, [r3, #2]
 80011ba:	4619      	mov	r1, r3
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	461a      	mov	r2, r3
 80011c0:	f7ff ff2c 	bl	800101c <config_gpio>
    } // end set_pin_mode( )
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <write_gpio>:

void write_gpio( const char port, const int pin_num, const GPIO_PinState bit_of )
    {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
    assert( read_gpio_state( port, pin_num ) == GPIO_OUTPUT ); // Ensures that this is an output pin.
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	6839      	ldr	r1, [r7, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff8f 	bl	8001104 <read_gpio_state>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d005      	beq.n	80011f8 <write_gpio+0x2c>
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <write_gpio+0x74>)
 80011ee:	4a15      	ldr	r2, [pc, #84]	; (8001244 <write_gpio+0x78>)
 80011f0:	215a      	movs	r1, #90	; 0x5a
 80011f2:	4815      	ldr	r0, [pc, #84]	; (8001248 <write_gpio+0x7c>)
 80011f4:	f005 fa9a 	bl	800672c <__assert_func>
    const uint32_t port_off = (uint32_t ) ( port - 'A' ) * 0x400;
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	3b41      	subs	r3, #65	; 0x41
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	617b      	str	r3, [r7, #20]
    uint32_t const * const gpio_start_addr =(uint32_t * )( GPIO_ADDR_BASE + port_off );
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
 8001206:	613b      	str	r3, [r7, #16]
    const uint32_t mask = 1 << pin_num;
 8001208:	2201      	movs	r2, #1
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	60fb      	str	r3, [r7, #12]

    uint32_t * const gpio_odr = ( uint32_t * ) ( gpio_start_addr + GPIO_ODR_OFFSET );
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	3350      	adds	r3, #80	; 0x50
 8001216:	60bb      	str	r3, [r7, #8]

    *gpio_odr &= ~mask; // Clear pin_numTH bit.
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	401a      	ands	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	601a      	str	r2, [r3, #0]
    *gpio_odr |= bit_of << pin_num;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	79b9      	ldrb	r1, [r7, #6]
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	fa01 f202 	lsl.w	r2, r1, r2
 8001232:	431a      	orrs	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	601a      	str	r2, [r3, #0]
    } // end write_gpio( )
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	0800b1a8 	.word	0x0800b1a8
 8001244:	08035a0c 	.word	0x08035a0c
 8001248:	0800b14c 	.word	0x0800b14c

0800124c <write_gpio_t>:

    return ( GPIO_PinState ) r_bit;
    } // end read_gpio( )

void write_gpio_t( struct GPIO * const gpio, const GPIO_PinState bit_of )
    {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
    write_gpio( gpio->port, gpio->pin_num, bit_of );
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7858      	ldrb	r0, [r3, #1]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	789b      	ldrb	r3, [r3, #2]
 8001260:	4619      	mov	r1, r3
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	461a      	mov	r2, r3
 8001266:	f7ff ffb1 	bl	80011cc <write_gpio>
    } // end write_gpio_t( )
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <bio_sensor_init>:
//                                 SparkFun_Bio_Sensor Member Function Definitions
//
//------------------------------------------------------------------------------------------------

void bio_sensor_init( struct SparkFun_Bio_Sensor * const bio_ssor, I2C_HandleTypeDef * const i2c_h, const uint8_t addr, const GPIO_t rst_pin, const GPIO_t mfio_pin, const uint8_t sample_rate, const uint8_t user_sel_mode )
    {
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	60f8      	str	r0, [r7, #12]
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4613      	mov	r3, r2
 8001280:	71fb      	strb	r3, [r7, #7]
    bio_ssor->_reset_pin = rst_pin;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3304      	adds	r3, #4
 8001286:	463a      	mov	r2, r7
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	4611      	mov	r1, r2
 800128c:	8019      	strh	r1, [r3, #0]
 800128e:	3302      	adds	r3, #2
 8001290:	0c12      	lsrs	r2, r2, #16
 8001292:	701a      	strb	r2, [r3, #0]
    bio_ssor->_mfio_pin = mfio_pin;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3307      	adds	r3, #7
 8001298:	f107 0218 	add.w	r2, r7, #24
 800129c:	8811      	ldrh	r1, [r2, #0]
 800129e:	7892      	ldrb	r2, [r2, #2]
 80012a0:	8019      	strh	r1, [r3, #0]
 80012a2:	709a      	strb	r2, [r3, #2]
    bio_ssor->_addr = addr;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	79fa      	ldrb	r2, [r7, #7]
 80012a8:	729a      	strb	r2, [r3, #10]
    bio_ssor->_sampleRate = sample_rate;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	7f3a      	ldrb	r2, [r7, #28]
 80012ae:	731a      	strb	r2, [r3, #12]
    bio_ssor->_userSelectedMode = user_sel_mode;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012b6:	72da      	strb	r2, [r3, #11]
    bio_ssor->_i2c_h = i2c_h;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	601a      	str	r2, [r3, #0]
    switch( user_sel_mode )
 80012be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d005      	beq.n	80012d2 <bio_sensor_init+0x60>
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d005      	beq.n	80012d6 <bio_sensor_init+0x64>
        break;
    case( APP_MODE ):
        // Call function...
        break;
    default:
        bio_ssor->_userSelectedMode = DISABLE; // Disable the sensor (erronous to use any functions)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	72da      	strb	r2, [r3, #11]
        break;
 80012d0:	e002      	b.n	80012d8 <bio_sensor_init+0x66>
        break;
 80012d2:	bf00      	nop
 80012d4:	e000      	b.n	80012d8 <bio_sensor_init+0x66>
        break;
 80012d6:	bf00      	nop
    } // end switch

    // Begin with mfio_pin and rst_pin in output mode.
    set_pin_mode( &( bio_ssor->_reset_pin ), OUT );
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3304      	adds	r3, #4
 80012dc:	2101      	movs	r1, #1
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ff58 	bl	8001194 <set_pin_mode>
    set_pin_mode( &( bio_ssor->_mfio_pin ),  OUT );
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	3307      	adds	r3, #7
 80012e8:	2101      	movs	r1, #1
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff52 	bl	8001194 <set_pin_mode>
    return;
 80012f0:	bf00      	nop
    } // end bio_sensor_init( )
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <enter_app_mode>:
    // in reset for 10ms. After 50 addtional ms have elapsed the board should be
    // in application mode and will return two bytes, the first 0x00 is a
    // successful communcation byte, followed by 0x00 which is the byte indicating
    // which mode the IC is in.
uint8_t enter_app_mode( struct SparkFun_Bio_Sensor * const bio_ssor )
    {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    // Set pins to output mode (in order to be able to write to.)
    set_pin_mode( &( bio_ssor->_reset_pin ), OUT );
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3304      	adds	r3, #4
 8001304:	2101      	movs	r1, #1
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff44 	bl	8001194 <set_pin_mode>
    set_pin_mode( &( bio_ssor->_mfio_pin ),  OUT );
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3307      	adds	r3, #7
 8001310:	2101      	movs	r1, #1
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ff3e 	bl	8001194 <set_pin_mode>

    write_gpio_t( &bio_ssor->_mfio_pin , GPIO_PIN_SET );
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3307      	adds	r3, #7
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff94 	bl	800124c <write_gpio_t>
    write_gpio_t( &bio_ssor->_reset_pin, GPIO_PIN_RESET );
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3304      	adds	r3, #4
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff ff8e 	bl	800124c <write_gpio_t>
    HAL_Delay( 10 ); // Hold reset for 10ms.
 8001330:	200a      	movs	r0, #10
 8001332:	f001 fe81 	bl	8003038 <HAL_Delay>

    write_gpio_t( &bio_ssor->_reset_pin, GPIO_PIN_SET );
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3304      	adds	r3, #4
 800133a:	2101      	movs	r1, #1
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff85 	bl	800124c <write_gpio_t>

    // Delay until board is in application mode.
    HAL_Delay( 1000 );
 8001342:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001346:	f001 fe77 	bl	8003038 <HAL_Delay>
    HAL_Delay(10);
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  1); // Reset is pulled 
    HAL_Delay(50);
    HAL_Delay(1000);
    */
    uint8_t resp_byte = read_byte( bio_ssor, READ_DEVICE_MODE, 0x00 );
 800134a:	2200      	movs	r2, #0
 800134c:	2102      	movs	r1, #2
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f8e2 	bl	8001518 <read_byte>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]
    return resp_byte; // Should be in app_mode ( 0x00 )
 8001358:	7bfb      	ldrb	r3, [r7, #15]
    } // end enter_app_mode( )
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <enter_bootloader>:
// in reset for 10ms. After 50 addtional ms have elapsed the board should be
// in bootloader mode and will return two bytes, the first 0x00 is a
// successful communcation byte, followed by 0x08 which is the byte indicating
// that the board is in bootloader mode.
uint8_t enter_bootloader( struct SparkFun_Bio_Sensor * const bio_ssor )
    {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    
    // Set pins to output mode (in order to be able to write to.)
    set_pin_mode( &( bio_ssor->_reset_pin ), OUT );
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3304      	adds	r3, #4
 8001370:	2101      	movs	r1, #1
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ff0e 	bl	8001194 <set_pin_mode>
    set_pin_mode( &( bio_ssor->_mfio_pin ),  OUT );
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3307      	adds	r3, #7
 800137c:	2101      	movs	r1, #1
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff08 	bl	8001194 <set_pin_mode>
    

    //write_gpio_t( &bio_ssor->_mfio_pin , GPIO_PIN_SET );
    write_gpio_t( &bio_ssor->_reset_pin, GPIO_PIN_RESET ); // Reset...
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3304      	adds	r3, #4
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff5e 	bl	800124c <write_gpio_t>
    HAL_Delay( 6 );
 8001390:	2006      	movs	r0, #6
 8001392:	f001 fe51 	bl	8003038 <HAL_Delay>
    write_gpio_t( &bio_ssor->_mfio_pin , GPIO_PIN_RESET );
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3307      	adds	r3, #7
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff55 	bl	800124c <write_gpio_t>
    HAL_Delay( 4 );
 80013a2:	2004      	movs	r0, #4
 80013a4:	f001 fe48 	bl	8003038 <HAL_Delay>
    write_gpio_t( &bio_ssor->_reset_pin, GPIO_PIN_SET ); // Pull high
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3304      	adds	r3, #4
 80013ac:	2101      	movs	r1, #1
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff4c 	bl	800124c <write_gpio_t>
    HAL_Delay(50);
 80013b4:	2032      	movs	r0, #50	; 0x32
 80013b6:	f001 fe3f 	bl	8003038 <HAL_Delay>

    // To permanantly enter, bootloader mode command is needed.
    // Send these three bytes  ( FAMILY==0x01 INDEX==0x00 WRITE_BYTE==0x08 ).
    uint8_t resp_byte;

    resp_byte = write_byte( bio_ssor, SET_DEVICE_MODE, 0x00, BOOTLOADER_MODE );
 80013ba:	2308      	movs	r3, #8
 80013bc:	2200      	movs	r2, #0
 80013be:	2101      	movs	r1, #1
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f819 	bl	80013f8 <write_byte>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
    if ( resp_byte != O2_SUCCESS )
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <enter_bootloader+0x76>
        {
        printf( "Issue with write transaction (device mode command into bootloader mode)\n\r" );
 80013d0:	4808      	ldr	r0, [pc, #32]	; (80013f4 <enter_bootloader+0x90>)
 80013d2:	f006 faa7 	bl	8007924 <iprintf>
        return ERR_TRY_AGAIN;
 80013d6:	2305      	movs	r3, #5
 80013d8:	e007      	b.n	80013ea <enter_bootloader+0x86>
        } // end if
    
    resp_byte = read_byte( bio_ssor, READ_DEVICE_MODE, 0x00 );
 80013da:	2200      	movs	r2, #0
 80013dc:	2102      	movs	r1, #2
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f89a 	bl	8001518 <read_byte>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]
    return resp_byte; // Should return BOOTLOADER_MODE
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
    if(buf[0] != 0x00 || ret != HAL_OK ){
        printf("Error setting bootloader: code %x\n\r", buf[0]);
    }
    */
    } // end enter_bootloader( )
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	0800b208 	.word	0x0800b208

080013f8 <write_byte>:
// with the MAX32664 which in turn communicates with downward sensors. There
// are two steps demonstrated in this function. First a write to the MCU
// indicating what you want to do, a delay, and then a read to confirm positive
// transmission.
uint8_t write_byte( struct SparkFun_Bio_Sensor * const bio_ssor, const uint8_t family_byte, const uint8_t index_byte, const uint8_t write_byte )
    {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	4608      	mov	r0, r1
 8001402:	4611      	mov	r1, r2
 8001404:	461a      	mov	r2, r3
 8001406:	4603      	mov	r3, r0
 8001408:	70fb      	strb	r3, [r7, #3]
 800140a:	460b      	mov	r3, r1
 800140c:	70bb      	strb	r3, [r7, #2]
 800140e:	4613      	mov	r3, r2
 8001410:	707b      	strb	r3, [r7, #1]
    const uint8_t buff[ 3 ] = { family_byte, index_byte, write_byte };
 8001412:	78fb      	ldrb	r3, [r7, #3]
 8001414:	733b      	strb	r3, [r7, #12]
 8001416:	78bb      	ldrb	r3, [r7, #2]
 8001418:	737b      	strb	r3, [r7, #13]
 800141a:	787b      	ldrb	r3, [r7, #1]
 800141c:	73bb      	strb	r3, [r7, #14]
    return write_bytes_helper( bio_ssor, family_byte, index_byte, buff, sizeof( buff ) );
 800141e:	f107 030c 	add.w	r3, r7, #12
 8001422:	78ba      	ldrb	r2, [r7, #2]
 8001424:	78f9      	ldrb	r1, [r7, #3]
 8001426:	2003      	movs	r0, #3
 8001428:	9000      	str	r0, [sp, #0]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f806 	bl	800143c <write_bytes_helper>
 8001430:	4603      	mov	r3, r0
    } // end write_byte( )
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <write_bytes_helper>:
// This can be seen through assertions for the first two bytes in the byte_arr.
// There are two steps demonstrated in this function. First a write to the MCU
// indicating what you want to do, a delay, and then a read to confirm positive
// transmission.
uint8_t write_bytes_helper( struct SparkFun_Bio_Sensor * const bio_ssor, const uint8_t family_byte, const uint8_t index_byte, const uint8_t byte_arr[ ], const uint32_t arr_size )
    {
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af02      	add	r7, sp, #8
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	72fb      	strb	r3, [r7, #11]
 800144a:	4613      	mov	r3, r2
 800144c:	72bb      	strb	r3, [r7, #10]
    assert( byte_arr[ 0 ] == family_byte );
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	7afa      	ldrb	r2, [r7, #11]
 8001454:	429a      	cmp	r2, r3
 8001456:	d006      	beq.n	8001466 <write_bytes_helper+0x2a>
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <write_bytes_helper+0xc4>)
 800145a:	4a2a      	ldr	r2, [pc, #168]	; (8001504 <write_bytes_helper+0xc8>)
 800145c:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8001460:	4829      	ldr	r0, [pc, #164]	; (8001508 <write_bytes_helper+0xcc>)
 8001462:	f005 f963 	bl	800672c <__assert_func>
    assert( byte_arr[ 1 ] == index_byte );
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3301      	adds	r3, #1
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	7aba      	ldrb	r2, [r7, #10]
 800146e:	429a      	cmp	r2, r3
 8001470:	d006      	beq.n	8001480 <write_bytes_helper+0x44>
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <write_bytes_helper+0xd0>)
 8001474:	4a23      	ldr	r2, [pc, #140]	; (8001504 <write_bytes_helper+0xc8>)
 8001476:	f240 1145 	movw	r1, #325	; 0x145
 800147a:	4823      	ldr	r0, [pc, #140]	; (8001508 <write_bytes_helper+0xcc>)
 800147c:	f005 f956 	bl	800672c <__assert_func>

    uint8_t status_byte;
    HAL_StatusTypeDef ret;

    const uint8_t write_hm_c = bio_ssor->_addr << 1; // LSB is low to indicate write...
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	7a9b      	ldrb	r3, [r3, #10]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	75fb      	strb	r3, [r7, #23]
    const uint8_t read_hm_c  = ( bio_ssor->_addr << 1 ) | 1; // LSB is high to indicate read...
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	7a9b      	ldrb	r3, [r3, #10]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	b25b      	sxtb	r3, r3
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	b25b      	sxtb	r3, r3
 8001496:	75bb      	strb	r3, [r7, #22]

    ret = HAL_I2C_Master_Transmit( bio_ssor->_i2c_h, write_hm_c, ( uint8_t *) byte_arr, arr_size, 0xFFFF );
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	b299      	uxth	r1, r3
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a8:	9200      	str	r2, [sp, #0]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	f002 f908 	bl	80036c0 <HAL_I2C_Master_Transmit>
 80014b0:	4603      	mov	r3, r0
 80014b2:	757b      	strb	r3, [r7, #21]
    if ( ret != HAL_OK )
 80014b4:	7d7b      	ldrb	r3, [r7, #21]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d004      	beq.n	80014c4 <write_bytes_helper+0x88>
        {
        printf( "Issue with specifying index (write transmission)\n\r" );
 80014ba:	4815      	ldr	r0, [pc, #84]	; (8001510 <write_bytes_helper+0xd4>)
 80014bc:	f006 fa32 	bl	8007924 <iprintf>
        return ERR_TRY_AGAIN;
 80014c0:	2305      	movs	r3, #5
 80014c2:	e019      	b.n	80014f8 <write_bytes_helper+0xbc>
        } // end if

    HAL_Delay( CMD_DELAY );
 80014c4:	2006      	movs	r0, #6
 80014c6:	f001 fdb7 	bl	8003038 <HAL_Delay>

    // Obtain status byte
    ret = HAL_I2C_Master_Receive( bio_ssor->_i2c_h, read_hm_c, &status_byte, sizeof( status_byte ), 0xFFFF );
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	7dbb      	ldrb	r3, [r7, #22]
 80014d0:	b299      	uxth	r1, r3
 80014d2:	f107 0214 	add.w	r2, r7, #20
 80014d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2301      	movs	r3, #1
 80014de:	f002 f9e3 	bl	80038a8 <HAL_I2C_Master_Receive>
 80014e2:	4603      	mov	r3, r0
 80014e4:	757b      	strb	r3, [r7, #21]
    if ( ret != HAL_OK )
 80014e6:	7d7b      	ldrb	r3, [r7, #21]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d004      	beq.n	80014f6 <write_bytes_helper+0xba>
        {
        printf( "Issue with Receving the status byte (write transaction)\n\r" );
 80014ec:	4809      	ldr	r0, [pc, #36]	; (8001514 <write_bytes_helper+0xd8>)
 80014ee:	f006 fa19 	bl	8007924 <iprintf>
        return ERR_TRY_AGAIN;
 80014f2:	2305      	movs	r3, #5
 80014f4:	e000      	b.n	80014f8 <write_bytes_helper+0xbc>
        } // end if

    return status_byte;
 80014f6:	7d3b      	ldrb	r3, [r7, #20]
    } // end write_bytes_helper( )
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	0800b254 	.word	0x0800b254
 8001504:	08035a18 	.word	0x08035a18
 8001508:	0800b14c 	.word	0x0800b14c
 800150c:	0800b274 	.word	0x0800b274
 8001510:	0800b290 	.word	0x0800b290
 8001514:	0800b2c4 	.word	0x0800b2c4

08001518 <read_byte>:
// This function handles all read commands or stated another way, all information
// requests. It starts a request by writing the family byte an index byte, and
// then delays 2 milliseconds, during which the MAX32664 retrieves the requested
// information. An I-squared-C request is then issued, and the information is read.
uint8_t read_byte( struct SparkFun_Bio_Sensor const * const bio_ssor, const uint8_t family_byte, const uint8_t index_byte )
    {
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af02      	add	r7, sp, #8
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	70fb      	strb	r3, [r7, #3]
 8001524:	4613      	mov	r3, r2
 8001526:	70bb      	strb	r3, [r7, #2]
    const uint8_t buff[ 2 ] = { family_byte, index_byte };
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	733b      	strb	r3, [r7, #12]
 800152c:	78bb      	ldrb	r3, [r7, #2]
 800152e:	737b      	strb	r3, [r7, #13]
    uint8_t  read_buff[ 2 ]; // Placeholder
    uint8_t ret_byte, status_byte;

    status_byte = read_bytes_helper( bio_ssor, buff, sizeof( buff ), read_buff, sizeof( read_buff ) );
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	f107 010c 	add.w	r1, r7, #12
 8001538:	2202      	movs	r2, #2
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	2202      	movs	r2, #2
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f80e 	bl	8001560 <read_bytes_helper>
 8001544:	4603      	mov	r3, r0
 8001546:	73fb      	strb	r3, [r7, #15]

    if ( status_byte != O2_SUCCESS ) // Success
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <read_byte+0x3a>
        return status_byte; // Something went wrong!
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	e002      	b.n	8001558 <read_byte+0x40>
    
    ret_byte = read_buff[ 1 ];
 8001552:	7a7b      	ldrb	r3, [r7, #9]
 8001554:	73bb      	strb	r3, [r7, #14]
    return ret_byte;
 8001556:	7bbb      	ldrb	r3, [r7, #14]
    } // end read_byte
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <read_bytes_helper>:
// It starts a request by writing the family byte an index byte, and
// then delays 2 milliseconds, during which the MAX32664 retrieves the requested
// information. An I-squared-C request is then issued, and an arbitrary amount of bytes are read.
 uint8_t read_bytes_helper( struct SparkFun_Bio_Sensor const * const bio_ssor, const uint8_t header[ ], const uint32_t hdr_size,
        uint8_t bytes_read[ ], const uint32_t bytes_to_read )
    {
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af02      	add	r7, sp, #8
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
    uint8_t status_byte;
    HAL_StatusTypeDef ret;

    const uint8_t write_hm_c = bio_ssor->_addr << 1; // LSB is low to indicate write...
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	7a9b      	ldrb	r3, [r3, #10]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	75fb      	strb	r3, [r7, #23]
    const uint8_t read_hm_c  = ( bio_ssor->_addr << 1 ) | 1; // LSB is high to indicate read...
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	7a9b      	ldrb	r3, [r3, #10]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	b25b      	sxtb	r3, r3
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	b25b      	sxtb	r3, r3
 8001584:	75bb      	strb	r3, [r7, #22]

    ret = HAL_I2C_Master_Transmit( bio_ssor->_i2c_h, write_hm_c, ( uint8_t * )header, hdr_size, 0xFFFF );
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	b299      	uxth	r1, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	b29b      	uxth	r3, r3
 8001592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001596:	9200      	str	r2, [sp, #0]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	f002 f891 	bl	80036c0 <HAL_I2C_Master_Transmit>
 800159e:	4603      	mov	r3, r0
 80015a0:	757b      	strb	r3, [r7, #21]
    if ( ret != HAL_OK )
 80015a2:	7d7b      	ldrb	r3, [r7, #21]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <read_bytes_helper+0x52>
        {
        printf( "Issue with specifying index (read transmission)\n\r" );
 80015a8:	4812      	ldr	r0, [pc, #72]	; (80015f4 <read_bytes_helper+0x94>)
 80015aa:	f006 f9bb 	bl	8007924 <iprintf>
        return ERR_TRY_AGAIN;
 80015ae:	2305      	movs	r3, #5
 80015b0:	e01c      	b.n	80015ec <read_bytes_helper+0x8c>
        } // end if

    HAL_Delay( CMD_DELAY );
 80015b2:	2006      	movs	r0, #6
 80015b4:	f001 fd40 	bl	8003038 <HAL_Delay>

    // Now request read bytes (we are asking for)
    // We have no choice but to attempt to read every byte.
    ret = HAL_I2C_Master_Receive( bio_ssor->_i2c_h, read_hm_c, bytes_read, bytes_to_read, 0xFFFF );
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6818      	ldr	r0, [r3, #0]
 80015bc:	7dbb      	ldrb	r3, [r7, #22]
 80015be:	b299      	uxth	r1, r3
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c8:	9200      	str	r2, [sp, #0]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	f002 f96c 	bl	80038a8 <HAL_I2C_Master_Receive>
 80015d0:	4603      	mov	r3, r0
 80015d2:	757b      	strb	r3, [r7, #21]
    if ( ret != HAL_OK )
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <read_bytes_helper+0x84>
        {
        printf( "Issue with Receiving (Read transaction)\n\r" );
 80015da:	4807      	ldr	r0, [pc, #28]	; (80015f8 <read_bytes_helper+0x98>)
 80015dc:	f006 f9a2 	bl	8007924 <iprintf>
        return ERR_TRY_AGAIN;
 80015e0:	2305      	movs	r3, #5
 80015e2:	e003      	b.n	80015ec <read_bytes_helper+0x8c>
        } // end if
    status_byte = bytes_read[ 0 ];
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	753b      	strb	r3, [r7, #20]
    return status_byte;
 80015ea:	7d3b      	ldrb	r3, [r7, #20]
    } // end read_bytes_helper( )
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	0800b300 	.word	0x0800b300
 80015f8:	0800b334 	.word	0x0800b334

080015fc <process_status_byte>:
        } // end for
    } // end specify_Tx_hder( )


void process_status_byte( const enum READ_STATUS_BYTE_VALUE status_byte )
    {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
    switch( status_byte )
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2bff      	cmp	r3, #255	; 0xff
 800160a:	d04e      	beq.n	80016aa <process_status_byte+0xae>
 800160c:	2bff      	cmp	r3, #255	; 0xff
 800160e:	dc50      	bgt.n	80016b2 <process_status_byte+0xb6>
 8001610:	2b05      	cmp	r3, #5
 8001612:	dc21      	bgt.n	8001658 <process_status_byte+0x5c>
 8001614:	2b00      	cmp	r3, #0
 8001616:	dc0f      	bgt.n	8001638 <process_status_byte+0x3c>
 8001618:	e04b      	b.n	80016b2 <process_status_byte+0xb6>
 800161a:	3b80      	subs	r3, #128	; 0x80
 800161c:	2b03      	cmp	r3, #3
 800161e:	d848      	bhi.n	80016b2 <process_status_byte+0xb6>
 8001620:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <process_status_byte+0x2c>)
 8001622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001626:	bf00      	nop
 8001628:	0800168b 	.word	0x0800168b
 800162c:	08001693 	.word	0x08001693
 8001630:	0800169b 	.word	0x0800169b
 8001634:	080016a3 	.word	0x080016a3
 8001638:	3b01      	subs	r3, #1
 800163a:	2b04      	cmp	r3, #4
 800163c:	d839      	bhi.n	80016b2 <process_status_byte+0xb6>
 800163e:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <process_status_byte+0x48>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	08001663 	.word	0x08001663
 8001648:	0800166b 	.word	0x0800166b
 800164c:	08001673 	.word	0x08001673
 8001650:	0800167b 	.word	0x0800167b
 8001654:	08001683 	.word	0x08001683
 8001658:	2b83      	cmp	r3, #131	; 0x83
 800165a:	dc2a      	bgt.n	80016b2 <process_status_byte+0xb6>
 800165c:	2b80      	cmp	r3, #128	; 0x80
 800165e:	dadc      	bge.n	800161a <process_status_byte+0x1e>
 8001660:	e027      	b.n	80016b2 <process_status_byte+0xb6>
    {
    case( ERR_UNAVAIL_CMD ):
        printf( "ERR_UNAVAIL_CMD. Illegal Family Byte and/or Command Byte was used.\n\r" );
 8001662:	481a      	ldr	r0, [pc, #104]	; (80016cc <process_status_byte+0xd0>)
 8001664:	f006 f95e 	bl	8007924 <iprintf>
        break;
 8001668:	e02b      	b.n	80016c2 <process_status_byte+0xc6>
    case( ERR_UNAVAIL_FUNC ):
        printf( "ERR_UNAVAIL_FUNC. This function is not implemented.\n\r" );
 800166a:	4819      	ldr	r0, [pc, #100]	; (80016d0 <process_status_byte+0xd4>)
 800166c:	f006 f95a 	bl	8007924 <iprintf>
        break;
 8001670:	e027      	b.n	80016c2 <process_status_byte+0xc6>
    case( ERR_DATA_FORMAT ):
        printf( "ERR_DATA_FORMAT. Incorrect number of bytes sent for the requested Family Byte.\n\r" );
 8001672:	4818      	ldr	r0, [pc, #96]	; (80016d4 <process_status_byte+0xd8>)
 8001674:	f006 f956 	bl	8007924 <iprintf>
        break;
 8001678:	e023      	b.n	80016c2 <process_status_byte+0xc6>
    case( ERR_INPUT_VALUE ):
        printf( "ERR_INPUT_VALUE. Illegal configuration value was attempted to be set.\n\r" );
 800167a:	4817      	ldr	r0, [pc, #92]	; (80016d8 <process_status_byte+0xdc>)
 800167c:	f006 f952 	bl	8007924 <iprintf>
        break;
 8001680:	e01f      	b.n	80016c2 <process_status_byte+0xc6>
    case( ERR_TRY_AGAIN ):
        printf( "ERR_TRY_AGAIN. Device is busy. Try again.\n\r" );
 8001682:	4816      	ldr	r0, [pc, #88]	; (80016dc <process_status_byte+0xe0>)
 8001684:	f006 f94e 	bl	8007924 <iprintf>
        break;
 8001688:	e01b      	b.n	80016c2 <process_status_byte+0xc6>
    case( ERR_BTLDR_GENERAL ):
        printf( "ERR_BTLDR_GENERAL. General error while receiving/flashing a page during the bootloader sequence.\n\r" );
 800168a:	4815      	ldr	r0, [pc, #84]	; (80016e0 <process_status_byte+0xe4>)
 800168c:	f006 f94a 	bl	8007924 <iprintf>
        break;
 8001690:	e017      	b.n	80016c2 <process_status_byte+0xc6>
    case( ERR_BTLDR_CHECKSUM ):
        printf( "ERR_BTLDR_CHECKSUM. Checksum error while decrypting/checking page data.\n\r" );
 8001692:	4814      	ldr	r0, [pc, #80]	; (80016e4 <process_status_byte+0xe8>)
 8001694:	f006 f946 	bl	8007924 <iprintf>
        break;
 8001698:	e013      	b.n	80016c2 <process_status_byte+0xc6>
    case( ERR_BTLDR_AUTH ):
        printf( "ERR_BTLDR_AUTH. Authorization error.\n\r" );
 800169a:	4813      	ldr	r0, [pc, #76]	; (80016e8 <process_status_byte+0xec>)
 800169c:	f006 f942 	bl	8007924 <iprintf>
        break;
 80016a0:	e00f      	b.n	80016c2 <process_status_byte+0xc6>
    case( ERR_BTLDR_INVALID_APP ):
        printf( "ERR_BTLDR_INVALID_APP. Application not valid.\n\r" );
 80016a2:	4812      	ldr	r0, [pc, #72]	; (80016ec <process_status_byte+0xf0>)
 80016a4:	f006 f93e 	bl	8007924 <iprintf>
        break;
 80016a8:	e00b      	b.n	80016c2 <process_status_byte+0xc6>
    case( ERR_UNKNOWN ): // Probably just as bad as an unknown status_bytes
        printf( "ERR_UNKNOWN. Unknown Error.\n\r" );
 80016aa:	4811      	ldr	r0, [pc, #68]	; (80016f0 <process_status_byte+0xf4>)
 80016ac:	f006 f93a 	bl	8007924 <iprintf>
        break;
 80016b0:	e007      	b.n	80016c2 <process_status_byte+0xc6>
    default:
        printf( "Unknown status byte%d\n\r", status_byte );
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	4619      	mov	r1, r3
 80016b6:	480f      	ldr	r0, [pc, #60]	; (80016f4 <process_status_byte+0xf8>)
 80016b8:	f006 f934 	bl	8007924 <iprintf>
        exit( 1 );
 80016bc:	2001      	movs	r0, #1
 80016be:	f005 f859 	bl	8006774 <exit>
    } // end switch
    } // end process_status_byte( )
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	0800b360 	.word	0x0800b360
 80016d0:	0800b3a8 	.word	0x0800b3a8
 80016d4:	0800b3e0 	.word	0x0800b3e0
 80016d8:	0800b434 	.word	0x0800b434
 80016dc:	0800b47c 	.word	0x0800b47c
 80016e0:	0800b4a8 	.word	0x0800b4a8
 80016e4:	0800b50c 	.word	0x0800b50c
 80016e8:	0800b558 	.word	0x0800b558
 80016ec:	0800b580 	.word	0x0800b580
 80016f0:	0800b5b0 	.word	0x0800b5b0
 80016f4:	0800b5d0 	.word	0x0800b5d0

080016f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f8:	b5b0      	push	{r4, r5, r7, lr}
 80016fa:	f5ad 2d9c 	sub.w	sp, sp, #319488	; 0x4e000
 80016fe:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8001702:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001704:	f001 fc23 	bl	8002f4e <HAL_Init>

  /* USER CODE BEGIN Init */
  // Note this is using a compound literal ( )
  bio_sensor_init( &sensor, &hi2c1, HM_ADDR, rst_pin_c, mfio_pin_c, def_sample_rate, DISABLE );
 8001708:	2364      	movs	r3, #100	; 0x64
 800170a:	49b2      	ldr	r1, [pc, #712]	; (80019d4 <main+0x2dc>)
 800170c:	f507 209c 	add.w	r0, r7, #319488	; 0x4e000
 8001710:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8001714:	2200      	movs	r2, #0
 8001716:	9202      	str	r2, [sp, #8]
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	4aaf      	ldr	r2, [pc, #700]	; (80019d8 <main+0x2e0>)
 800171c:	466b      	mov	r3, sp
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	4614      	mov	r4, r2
 8001722:	801c      	strh	r4, [r3, #0]
 8001724:	3302      	adds	r3, #2
 8001726:	0c12      	lsrs	r2, r2, #16
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	680b      	ldr	r3, [r1, #0]
 800172c:	2255      	movs	r2, #85	; 0x55
 800172e:	49ab      	ldr	r1, [pc, #684]	; (80019dc <main+0x2e4>)
 8001730:	f7ff fd9f 	bl	8001272 <bio_sensor_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001734:	f001 f878 	bl	8002828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001738:	f001 f968 	bl	8002a0c <MX_GPIO_Init>
  MX_I2C1_Init();
 800173c:	f001 f8dc 	bl	80028f8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8001740:	f001 f918 	bl	8002974 <MX_LPUART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_StatusTypeDef ret;
  uint8_t buf[65536];
  int samples = 0x0F;
 8001744:	230f      	movs	r3, #15
 8001746:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800174a:	f502 720a 	add.w	r2, r2, #552	; 0x228
 800174e:	6013      	str	r3, [r2, #0]
  printf( "Size of algorithm array: %d\n\r", algo_arr_size );
 8001750:	4ba3      	ldr	r3, [pc, #652]	; (80019e0 <main+0x2e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	48a3      	ldr	r0, [pc, #652]	; (80019e4 <main+0x2ec>)
 8001758:	f006 f8e4 	bl	8007924 <iprintf>
  for ( uint8_t const * ptr = algo_arr_ptr; ptr != algo_arr_ptr + algo_arr_size; ++ptr )
 800175c:	4ba2      	ldr	r3, [pc, #648]	; (80019e8 <main+0x2f0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001764:	f502 7215 	add.w	r2, r2, #596	; 0x254
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e01c      	b.n	80017a6 <main+0xae>
      {
	  printf( "Byte %d: %d\n\r", ptr - algo_arr_ptr, *ptr );
 800176c:	4b9e      	ldr	r3, [pc, #632]	; (80019e8 <main+0x2f0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001774:	f502 7215 	add.w	r2, r2, #596	; 0x254
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	1ad1      	subs	r1, r2, r3
 800177c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001780:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4898      	ldr	r0, [pc, #608]	; (80019ec <main+0x2f4>)
 800178c:	f006 f8ca 	bl	8007924 <iprintf>
  for ( uint8_t const * ptr = algo_arr_ptr; ptr != algo_arr_ptr + algo_arr_size; ++ptr )
 8001790:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001794:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	3301      	adds	r3, #1
 800179c:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80017a0:	f502 7215 	add.w	r2, r2, #596	; 0x254
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <main+0x2f0>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4b8d      	ldr	r3, [pc, #564]	; (80019e0 <main+0x2e8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80017b4:	f502 7215 	add.w	r2, r2, #596	; 0x254
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d1d6      	bne.n	800176c <main+0x74>
      }
  /*Program the bootloader*/

  uint8_t ret_byte = enter_bootloader( &sensor );
 80017be:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80017c2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fdcc 	bl	8001364 <enter_bootloader>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80017d2:	f202 2227 	addw	r2, r2, #551	; 0x227
 80017d6:	7013      	strb	r3, [r2, #0]
  if( ret_byte != BOOTLOADER_MODE )
 80017d8:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80017dc:	f203 2327 	addw	r3, r3, #551	; 0x227
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d013      	beq.n	800180e <main+0x116>
    {
    printf("Error setting bootloader: code %x\n\r", ret_byte );
 80017e6:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80017ea:	f203 2327 	addw	r3, r3, #551	; 0x227
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	487f      	ldr	r0, [pc, #508]	; (80019f0 <main+0x2f8>)
 80017f4:	f006 f896 	bl	8007924 <iprintf>
    process_status_byte( ret_byte );
 80017f8:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80017fc:	f203 2327 	addw	r3, r3, #551	; 0x227
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fefa 	bl	80015fc <process_status_byte>
    exit( 1 );
 8001808:	2001      	movs	r0, #1
 800180a:	f004 ffb3 	bl	8006774 <exit>
 	    printf("%s\r", buff);
 	    HAL_Delay( 1000 );
       }
  */
  /*read mode*/
  buf[0] = 0x02;
 800180e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001812:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001816:	3b64      	subs	r3, #100	; 0x64
 8001818:	2202      	movs	r2, #2
 800181a:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 800181c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001820:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001824:	3b64      	subs	r3, #100	; 0x64
 8001826:	2200      	movs	r2, #0
 8001828:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 800182a:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800182e:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001832:	3a64      	subs	r2, #100	; 0x64
 8001834:	f241 3388 	movw	r3, #5000	; 0x1388
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2302      	movs	r3, #2
 800183c:	21aa      	movs	r1, #170	; 0xaa
 800183e:	4867      	ldr	r0, [pc, #412]	; (80019dc <main+0x2e4>)
 8001840:	f001 ff3e 	bl	80036c0 <HAL_I2C_Master_Transmit>
 8001844:	4603      	mov	r3, r0
 8001846:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800184a:	f202 2226 	addw	r2, r2, #550	; 0x226
 800184e:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 8001850:	2002      	movs	r0, #2
 8001852:	f001 fbf1 	bl	8003038 <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 8001856:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800185a:	f502 7216 	add.w	r2, r2, #600	; 0x258
 800185e:	3a64      	subs	r2, #100	; 0x64
 8001860:	f241 3388 	movw	r3, #5000	; 0x1388
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2302      	movs	r3, #2
 8001868:	21ab      	movs	r1, #171	; 0xab
 800186a:	485c      	ldr	r0, [pc, #368]	; (80019dc <main+0x2e4>)
 800186c:	f002 f81c 	bl	80038a8 <HAL_I2C_Master_Receive>
 8001870:	4603      	mov	r3, r0
 8001872:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001876:	f202 2226 	addw	r2, r2, #550	; 0x226
 800187a:	7013      	strb	r3, [r2, #0]
  printf("error code: %x application mode: %x\n\r", buf[0],buf[1]);
 800187c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001880:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001884:	3b64      	subs	r3, #100	; 0x64
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800188e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001892:	3b64      	subs	r3, #100	; 0x64
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	461a      	mov	r2, r3
 8001898:	4856      	ldr	r0, [pc, #344]	; (80019f4 <main+0x2fc>)
 800189a:	f006 f843 	bl	8007924 <iprintf>


  /*setting page number*/
  uint8_t page_count = byteF[0x44];
 800189e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80018a2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80018a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018aa:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80018ae:	f202 2225 	addw	r2, r2, #549	; 0x225
 80018b2:	7013      	strb	r3, [r2, #0]
  int page_size = 8192 + 16;
 80018b4:	f242 0310 	movw	r3, #8208	; 0x2010
 80018b8:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80018bc:	f502 7208 	add.w	r2, r2, #544	; 0x220
 80018c0:	6013      	str	r3, [r2, #0]
  buf[0] = 0x80;
 80018c2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80018c6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80018ca:	3b64      	subs	r3, #100	; 0x64
 80018cc:	2280      	movs	r2, #128	; 0x80
 80018ce:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x02;
 80018d0:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80018d4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80018d8:	3b64      	subs	r3, #100	; 0x64
 80018da:	2202      	movs	r2, #2
 80018dc:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x00;
 80018de:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80018e2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80018e6:	3b64      	subs	r3, #100	; 0x64
 80018e8:	2200      	movs	r2, #0
 80018ea:	709a      	strb	r2, [r3, #2]
  buf[3] = byteF[0x44];
 80018ec:	f507 7316 	add.w	r3, r7, #600	; 0x258
 80018f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80018f4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80018f8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80018fc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001900:	3b64      	subs	r3, #100	; 0x64
 8001902:	70da      	strb	r2, [r3, #3]

  printf("%x pages\n\r", byteF[0x44]);
 8001904:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001908:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800190c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001910:	4619      	mov	r1, r3
 8001912:	4839      	ldr	r0, [pc, #228]	; (80019f8 <main+0x300>)
 8001914:	f006 f806 	bl	8007924 <iprintf>
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 4, 5000);
 8001918:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800191c:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001920:	3a64      	subs	r2, #100	; 0x64
 8001922:	f241 3388 	movw	r3, #5000	; 0x1388
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2304      	movs	r3, #4
 800192a:	21aa      	movs	r1, #170	; 0xaa
 800192c:	482b      	ldr	r0, [pc, #172]	; (80019dc <main+0x2e4>)
 800192e:	f001 fec7 	bl	80036c0 <HAL_I2C_Master_Transmit>
 8001932:	4603      	mov	r3, r0
 8001934:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001938:	f202 2226 	addw	r2, r2, #550	; 0x226
 800193c:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 800193e:	2002      	movs	r0, #2
 8001940:	f001 fb7a 	bl	8003038 <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001944:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001948:	f502 7216 	add.w	r2, r2, #600	; 0x258
 800194c:	3a64      	subs	r2, #100	; 0x64
 800194e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2301      	movs	r3, #1
 8001956:	21ab      	movs	r1, #171	; 0xab
 8001958:	4820      	ldr	r0, [pc, #128]	; (80019dc <main+0x2e4>)
 800195a:	f001 ffa5 	bl	80038a8 <HAL_I2C_Master_Receive>
 800195e:	4603      	mov	r3, r0
 8001960:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001964:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001968:	7013      	strb	r3, [r2, #0]
  if(buf[0] != 0x00 || ret != HAL_OK ){
 800196a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800196e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001972:	3b64      	subs	r3, #100	; 0x64
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <main+0x290>
 800197a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800197e:	f203 2326 	addw	r3, r3, #550	; 0x226
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <main+0x2a4>
          printf("Error setting page num: code %x\n\r", buf[0]);
 8001988:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800198c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001990:	3b64      	subs	r3, #100	; 0x64
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	4819      	ldr	r0, [pc, #100]	; (80019fc <main+0x304>)
 8001998:	f005 ffc4 	bl	8007924 <iprintf>
   }

  /*initialization vector*/
  int byte_count = 0x32-0x28;
 800199c:	230a      	movs	r3, #10
 800199e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80019a2:	f502 7207 	add.w	r2, r2, #540	; 0x21c
 80019a6:	6013      	str	r3, [r2, #0]
  buf[0] = 0x80;
 80019a8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80019ac:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80019b0:	3b64      	subs	r3, #100	; 0x64
 80019b2:	2280      	movs	r2, #128	; 0x80
 80019b4:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 80019b6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80019ba:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80019be:	3b64      	subs	r3, #100	; 0x64
 80019c0:	2200      	movs	r2, #0
 80019c2:	705a      	strb	r2, [r3, #1]
  for(int i = 0; i < byte_count; ++i){
 80019c4:	2300      	movs	r3, #0
 80019c6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80019ca:	f502 7214 	add.w	r2, r2, #592	; 0x250
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e039      	b.n	8001a46 <main+0x34e>
 80019d2:	bf00      	nop
 80019d4:	08035a2c 	.word	0x08035a2c
 80019d8:	08035a30 	.word	0x08035a30
 80019dc:	20000208 	.word	0x20000208
 80019e0:	080359ec 	.word	0x080359ec
 80019e4:	0800b5e8 	.word	0x0800b5e8
 80019e8:	080359e8 	.word	0x080359e8
 80019ec:	0800b608 	.word	0x0800b608
 80019f0:	0800b618 	.word	0x0800b618
 80019f4:	0800b63c 	.word	0x0800b63c
 80019f8:	0800b664 	.word	0x0800b664
 80019fc:	0800b670 	.word	0x0800b670
      buf[2+i] = byteF[0x28+i];
 8001a00:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001a04:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001a0e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001a12:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	1c9a      	adds	r2, r3, #2
 8001a1a:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001a1e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001a22:	5c59      	ldrb	r1, [r3, r1]
 8001a24:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001a28:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001a2c:	3b64      	subs	r3, #100	; 0x64
 8001a2e:	5499      	strb	r1, [r3, r2]
  for(int i = 0; i < byte_count; ++i){
 8001a30:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001a34:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001a40:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001a4a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001a54:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	dbd0      	blt.n	8001a00 <main+0x308>
  }
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2 + byte_count, 5000);
 8001a5e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001a62:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001a72:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001a76:	3a64      	subs	r2, #100	; 0x64
 8001a78:	f241 3188 	movw	r1, #5000	; 0x1388
 8001a7c:	9100      	str	r1, [sp, #0]
 8001a7e:	21aa      	movs	r1, #170	; 0xaa
 8001a80:	48a3      	ldr	r0, [pc, #652]	; (8001d10 <main+0x618>)
 8001a82:	f001 fe1d 	bl	80036c0 <HAL_I2C_Master_Transmit>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001a8c:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001a90:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 8001a92:	2002      	movs	r0, #2
 8001a94:	f001 fad0 	bl	8003038 <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001a98:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001a9c:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001aa0:	3a64      	subs	r2, #100	; 0x64
 8001aa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	21ab      	movs	r1, #171	; 0xab
 8001aac:	4898      	ldr	r0, [pc, #608]	; (8001d10 <main+0x618>)
 8001aae:	f001 fefb 	bl	80038a8 <HAL_I2C_Master_Receive>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001ab8:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001abc:	7013      	strb	r3, [r2, #0]
  if(buf[0] != 0x00 || ret != HAL_OK ){
 8001abe:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ac2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001ac6:	3b64      	subs	r3, #100	; 0x64
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d106      	bne.n	8001adc <main+0x3e4>
 8001ace:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001ad2:	f203 2326 	addw	r3, r3, #550	; 0x226
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d009      	beq.n	8001af0 <main+0x3f8>
          printf("Error setting page num: code %x\n\r", buf[0]);
 8001adc:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ae0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001ae4:	3b64      	subs	r3, #100	; 0x64
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	488a      	ldr	r0, [pc, #552]	; (8001d14 <main+0x61c>)
 8001aec:	f005 ff1a 	bl	8007924 <iprintf>
   }
/*authentication bytes*/
  byte_count = 0x43-0x34;
 8001af0:	230f      	movs	r3, #15
 8001af2:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001af6:	f502 7207 	add.w	r2, r2, #540	; 0x21c
 8001afa:	6013      	str	r3, [r2, #0]
    buf[0] = 0x80;
 8001afc:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001b00:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001b04:	3b64      	subs	r3, #100	; 0x64
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	701a      	strb	r2, [r3, #0]
    buf[1] = 0x01;
 8001b0a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001b0e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001b12:	3b64      	subs	r3, #100	; 0x64
 8001b14:	2201      	movs	r2, #1
 8001b16:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < byte_count; ++i){
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001b1e:	f502 7213 	add.w	r2, r2, #588	; 0x24c
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e022      	b.n	8001b6c <main+0x474>
      buf[2+i] = byteF[0x34+i];
 8001b26:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001b2a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001b34:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001b38:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1c9a      	adds	r2, r3, #2
 8001b40:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001b44:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001b48:	5c59      	ldrb	r1, [r3, r1]
 8001b4a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001b4e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001b52:	3b64      	subs	r3, #100	; 0x64
 8001b54:	5499      	strb	r1, [r3, r2]
    for(int i = 0; i < byte_count; ++i){
 8001b56:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001b5a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001b66:	f502 7213 	add.w	r2, r2, #588	; 0x24c
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001b70:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001b7a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	dbd0      	blt.n	8001b26 <main+0x42e>
    }
    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2 + byte_count, 5000);
 8001b84:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001b88:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3302      	adds	r3, #2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001b98:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001b9c:	3a64      	subs	r2, #100	; 0x64
 8001b9e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ba2:	9100      	str	r1, [sp, #0]
 8001ba4:	21aa      	movs	r1, #170	; 0xaa
 8001ba6:	485a      	ldr	r0, [pc, #360]	; (8001d10 <main+0x618>)
 8001ba8:	f001 fd8a 	bl	80036c0 <HAL_I2C_Master_Transmit>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001bb2:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001bb6:	7013      	strb	r3, [r2, #0]
    HAL_Delay(2);
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f001 fa3d 	bl	8003038 <HAL_Delay>
    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001bbe:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001bc2:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001bc6:	3a64      	subs	r2, #100	; 0x64
 8001bc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2301      	movs	r3, #1
 8001bd0:	21ab      	movs	r1, #171	; 0xab
 8001bd2:	484f      	ldr	r0, [pc, #316]	; (8001d10 <main+0x618>)
 8001bd4:	f001 fe68 	bl	80038a8 <HAL_I2C_Master_Receive>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001bde:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001be2:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 8001be4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001be8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001bec:	3b64      	subs	r3, #100	; 0x64
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d106      	bne.n	8001c02 <main+0x50a>
 8001bf4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001bf8:	f203 2326 	addw	r3, r3, #550	; 0x226
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <main+0x51e>
              printf("Error setting page num: code %x\n\r", buf[0]);
 8001c02:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001c06:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001c0a:	3b64      	subs	r3, #100	; 0x64
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4840      	ldr	r0, [pc, #256]	; (8001d14 <main+0x61c>)
 8001c12:	f005 fe87 	bl	8007924 <iprintf>
       }

    /*erase application*/

    buf[0] = 0x80;
 8001c16:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001c1a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001c1e:	3b64      	subs	r3, #100	; 0x64
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	701a      	strb	r2, [r3, #0]
    buf[1] = 0x03;
 8001c24:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001c28:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001c2c:	3b64      	subs	r3, #100	; 0x64
 8001c2e:	2203      	movs	r2, #3
 8001c30:	705a      	strb	r2, [r3, #1]
    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001c32:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001c36:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001c3a:	3a64      	subs	r2, #100	; 0x64
 8001c3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2302      	movs	r3, #2
 8001c44:	21aa      	movs	r1, #170	; 0xaa
 8001c46:	4832      	ldr	r0, [pc, #200]	; (8001d10 <main+0x618>)
 8001c48:	f001 fd3a 	bl	80036c0 <HAL_I2C_Master_Transmit>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001c52:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001c56:	7013      	strb	r3, [r2, #0]
    HAL_Delay(1400);
 8001c58:	f44f 60af 	mov.w	r0, #1400	; 0x578
 8001c5c:	f001 f9ec 	bl	8003038 <HAL_Delay>
    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001c60:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001c64:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001c68:	3a64      	subs	r2, #100	; 0x64
 8001c6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2301      	movs	r3, #1
 8001c72:	21ab      	movs	r1, #171	; 0xab
 8001c74:	4826      	ldr	r0, [pc, #152]	; (8001d10 <main+0x618>)
 8001c76:	f001 fe17 	bl	80038a8 <HAL_I2C_Master_Receive>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001c80:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001c84:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 8001c86:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001c8a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001c8e:	3b64      	subs	r3, #100	; 0x64
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d106      	bne.n	8001ca4 <main+0x5ac>
 8001c96:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001c9a:	f203 2326 	addw	r3, r3, #550	; 0x226
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d009      	beq.n	8001cb8 <main+0x5c0>
              printf("Error setting page num: code %x\n\r", buf[0]);
 8001ca4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ca8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001cac:	3b64      	subs	r3, #100	; 0x64
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4818      	ldr	r0, [pc, #96]	; (8001d14 <main+0x61c>)
 8001cb4:	f005 fe36 	bl	8007924 <iprintf>
       }
    int current = 0x4c;
 8001cb8:	234c      	movs	r3, #76	; 0x4c
 8001cba:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001cbe:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001cc2:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < page_count; ++i){
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001cca:	f502 7211 	add.w	r2, r2, #580	; 0x244
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e0cc      	b.n	8001e6c <main+0x774>
        int count = 2;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001cd8:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8001cdc:	6013      	str	r3, [r2, #0]
        buf[0] = 0x8;
 8001cde:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ce2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001ce6:	3b64      	subs	r3, #100	; 0x64
 8001ce8:	2208      	movs	r2, #8
 8001cea:	701a      	strb	r2, [r3, #0]
        buf[1] = 0x04;
 8001cec:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001cf0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001cf4:	3b64      	subs	r3, #100	; 0x64
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	705a      	strb	r2, [r3, #1]
        for(int j = current; j < (current + page_size); ++j){
 8001cfa:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001cfe:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d08:	f502 720f 	add.w	r2, r2, #572	; 0x23c
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	e031      	b.n	8001d74 <main+0x67c>
 8001d10:	20000208 	.word	0x20000208
 8001d14:	0800b670 	.word	0x0800b670
            buf[count] = byteF[j];
 8001d18:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001d1c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001d20:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d24:	f502 720f 	add.w	r2, r2, #572	; 0x23c
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	7819      	ldrb	r1, [r3, #0]
 8001d2e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001d32:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001d36:	3b64      	subs	r3, #100	; 0x64
 8001d38:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d3c:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	460a      	mov	r2, r1
 8001d46:	701a      	strb	r2, [r3, #0]
            ++count;
 8001d48:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001d4c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d58:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8001d5c:	6013      	str	r3, [r2, #0]
        for(int j = current; j < (current + page_size); ++j){
 8001d5e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001d62:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d6e:	f502 720f 	add.w	r2, r2, #572	; 0x23c
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001d78:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001d82:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d8e:	f502 720f 	add.w	r2, r2, #572	; 0x23c
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbbf      	blt.n	8001d18 <main+0x620>
        }
        current = current + page_size;
 8001d98:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001d9c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001da6:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001db2:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001db6:	6013      	str	r3, [r2, #0]

        ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2 + page_size, 5000);
 8001db8:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001dbc:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001dcc:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001dd0:	3a64      	subs	r2, #100	; 0x64
 8001dd2:	f241 3188 	movw	r1, #5000	; 0x1388
 8001dd6:	9100      	str	r1, [sp, #0]
 8001dd8:	21aa      	movs	r1, #170	; 0xaa
 8001dda:	483f      	ldr	r0, [pc, #252]	; (8001ed8 <main+0x7e0>)
 8001ddc:	f001 fc70 	bl	80036c0 <HAL_I2C_Master_Transmit>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001de6:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001dea:	7013      	strb	r3, [r2, #0]
        HAL_Delay(340);
 8001dec:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8001df0:	f001 f922 	bl	8003038 <HAL_Delay>
        ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001df4:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001df8:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001dfc:	3a64      	subs	r2, #100	; 0x64
 8001dfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	2301      	movs	r3, #1
 8001e06:	21ab      	movs	r1, #171	; 0xab
 8001e08:	4833      	ldr	r0, [pc, #204]	; (8001ed8 <main+0x7e0>)
 8001e0a:	f001 fd4d 	bl	80038a8 <HAL_I2C_Master_Receive>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001e14:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001e18:	7013      	strb	r3, [r2, #0]
        if(buf[0] != 0x00 || ret != HAL_OK ){
 8001e1a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001e1e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001e22:	3b64      	subs	r3, #100	; 0x64
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <main+0x740>
 8001e2a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e2e:	f203 2326 	addw	r3, r3, #550	; 0x226
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00e      	beq.n	8001e56 <main+0x75e>
                      printf("Error setting page %d : code %x\n\r", i, buf[0]);
 8001e38:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001e3c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001e40:	3b64      	subs	r3, #100	; 0x64
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e4a:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8001e4e:	6819      	ldr	r1, [r3, #0]
 8001e50:	4822      	ldr	r0, [pc, #136]	; (8001edc <main+0x7e4>)
 8001e52:	f005 fd67 	bl	8007924 <iprintf>
    for(int i = 0; i < page_count; ++i){
 8001e56:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e5a:	f503 7311 	add.w	r3, r3, #580	; 0x244
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3301      	adds	r3, #1
 8001e62:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001e66:	f502 7211 	add.w	r2, r2, #580	; 0x244
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e70:	f203 2325 	addw	r3, r3, #549	; 0x225
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001e7a:	f502 7211 	add.w	r2, r2, #580	; 0x244
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f6ff af26 	blt.w	8001cd2 <main+0x5da>

    } // end for
  //printf("buffer %x\n", byteF[0]);

  /*Go into application Mode*/
  ret_byte = enter_app_mode( &sensor );
 8001e86:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fa32 	bl	80012f8 <enter_app_mode>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001e9a:	f202 2227 	addw	r2, r2, #551	; 0x227
 8001e9e:	7013      	strb	r3, [r2, #0]
  if ( ret_byte != APP_MODE )
 8001ea0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001ea4:	f203 2327 	addw	r3, r3, #551	; 0x227
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d01a      	beq.n	8001ee4 <main+0x7ec>
      {
      printf("Error entering app mode: code %x\n\r", ret_byte );
 8001eae:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001eb2:	f203 2327 	addw	r3, r3, #551	; 0x227
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <main+0x7e8>)
 8001ebc:	f005 fd32 	bl	8007924 <iprintf>
      process_status_byte( ret_byte );
 8001ec0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001ec4:	f203 2327 	addw	r3, r3, #551	; 0x227
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fb96 	bl	80015fc <process_status_byte>
      exit( 1 );
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f004 fc4f 	bl	8006774 <exit>
 8001ed6:	bf00      	nop
 8001ed8:	20000208 	.word	0x20000208
 8001edc:	0800b694 	.word	0x0800b694
 8001ee0:	0800b6b8 	.word	0x0800b6b8
      } // end if
  
  set_pin_mode( &sensor._mfio_pin, IN );
 8001ee4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001ee8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001eec:	3307      	adds	r3, #7
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f94f 	bl	8001194 <set_pin_mode>
  //config_gpio('D', 1, IN );
  /*set our mode to both raw and algorithm*/
  buf[0] = 0x02;
 8001ef6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001efa:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001efe:	3b64      	subs	r3, #100	; 0x64
 8001f00:	2202      	movs	r2, #2
 8001f02:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 8001f04:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001f08:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001f0c:	3b64      	subs	r3, #100	; 0x64
 8001f0e:	2200      	movs	r2, #0
 8001f10:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001f12:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001f16:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001f1a:	3a64      	subs	r2, #100	; 0x64
 8001f1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2302      	movs	r3, #2
 8001f24:	21aa      	movs	r1, #170	; 0xaa
 8001f26:	48e4      	ldr	r0, [pc, #912]	; (80022b8 <main+0xbc0>)
 8001f28:	f001 fbca 	bl	80036c0 <HAL_I2C_Master_Transmit>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001f32:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001f36:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 8001f38:	2002      	movs	r0, #2
 8001f3a:	f001 f87d 	bl	8003038 <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 8001f3e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001f42:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001f46:	3a64      	subs	r2, #100	; 0x64
 8001f48:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2302      	movs	r3, #2
 8001f50:	21ab      	movs	r1, #171	; 0xab
 8001f52:	48d9      	ldr	r0, [pc, #868]	; (80022b8 <main+0xbc0>)
 8001f54:	f001 fca8 	bl	80038a8 <HAL_I2C_Master_Receive>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001f5e:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001f62:	7013      	strb	r3, [r2, #0]
  printf("error code: %x mode: %x\nr", buf[0],buf[1]);
 8001f64:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001f68:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001f6c:	3b64      	subs	r3, #100	; 0x64
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001f76:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001f7a:	3b64      	subs	r3, #100	; 0x64
 8001f7c:	785b      	ldrb	r3, [r3, #1]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	48ce      	ldr	r0, [pc, #824]	; (80022bc <main+0xbc4>)
 8001f82:	f005 fccf 	bl	8007924 <iprintf>

  buf[0] = 0xFF;
 8001f86:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001f8a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001f8e:	3b64      	subs	r3, #100	; 0x64
 8001f90:	22ff      	movs	r2, #255	; 0xff
 8001f92:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x03;
 8001f94:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001f98:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001f9c:	3b64      	subs	r3, #100	; 0x64
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001fa2:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001fa6:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001faa:	3a64      	subs	r2, #100	; 0x64
 8001fac:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	21aa      	movs	r1, #170	; 0xaa
 8001fb6:	48c0      	ldr	r0, [pc, #768]	; (80022b8 <main+0xbc0>)
 8001fb8:	f001 fb82 	bl	80036c0 <HAL_I2C_Master_Transmit>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001fc2:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001fc6:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f001 f835 	bl	8003038 <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 5, 5000);
 8001fce:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001fd2:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8001fd6:	3a64      	subs	r2, #100	; 0x64
 8001fd8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2305      	movs	r3, #5
 8001fe0:	21ab      	movs	r1, #171	; 0xab
 8001fe2:	48b5      	ldr	r0, [pc, #724]	; (80022b8 <main+0xbc0>)
 8001fe4:	f001 fc60 	bl	80038a8 <HAL_I2C_Master_Receive>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001fee:	f202 2226 	addw	r2, r2, #550	; 0x226
 8001ff2:	7013      	strb	r3, [r2, #0]
  printf("error code: %x mode: %x %x %x %x\n\r", buf[0],buf[1], buf[2], buf[3],buf[4]);
 8001ff4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ff8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001ffc:	3b64      	subs	r3, #100	; 0x64
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002006:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800200a:	3b64      	subs	r3, #100	; 0x64
 800200c:	785b      	ldrb	r3, [r3, #1]
 800200e:	4618      	mov	r0, r3
 8002010:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002014:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002018:	3b64      	subs	r3, #100	; 0x64
 800201a:	789b      	ldrb	r3, [r3, #2]
 800201c:	461c      	mov	r4, r3
 800201e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002022:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002026:	3b64      	subs	r3, #100	; 0x64
 8002028:	78db      	ldrb	r3, [r3, #3]
 800202a:	461a      	mov	r2, r3
 800202c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002030:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002034:	3b64      	subs	r3, #100	; 0x64
 8002036:	791b      	ldrb	r3, [r3, #4]
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	9200      	str	r2, [sp, #0]
 800203c:	4623      	mov	r3, r4
 800203e:	4602      	mov	r2, r0
 8002040:	489f      	ldr	r0, [pc, #636]	; (80022c0 <main+0xbc8>)
 8002042:	f005 fc6f 	bl	8007924 <iprintf>


  buf[0] = 0x10;
 8002046:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800204a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800204e:	3b64      	subs	r3, #100	; 0x64
 8002050:	2210      	movs	r2, #16
 8002052:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 8002054:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002058:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800205c:	3b64      	subs	r3, #100	; 0x64
 800205e:	2200      	movs	r2, #0
 8002060:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x03;
 8002062:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002066:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800206a:	3b64      	subs	r3, #100	; 0x64
 800206c:	2203      	movs	r2, #3
 800206e:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8002070:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8002074:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8002078:	3a64      	subs	r2, #100	; 0x64
 800207a:	f241 3388 	movw	r3, #5000	; 0x1388
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	2303      	movs	r3, #3
 8002082:	21aa      	movs	r1, #170	; 0xaa
 8002084:	488c      	ldr	r0, [pc, #560]	; (80022b8 <main+0xbc0>)
 8002086:	f001 fb1b 	bl	80036c0 <HAL_I2C_Master_Transmit>
 800208a:	4603      	mov	r3, r0
 800208c:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8002090:	f202 2226 	addw	r2, r2, #550	; 0x226
 8002094:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 8002096:	2002      	movs	r0, #2
 8002098:	f000 ffce 	bl	8003038 <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 800209c:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80020a0:	f502 7216 	add.w	r2, r2, #600	; 0x258
 80020a4:	3a64      	subs	r2, #100	; 0x64
 80020a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	2301      	movs	r3, #1
 80020ae:	21ab      	movs	r1, #171	; 0xab
 80020b0:	4881      	ldr	r0, [pc, #516]	; (80022b8 <main+0xbc0>)
 80020b2:	f001 fbf9 	bl	80038a8 <HAL_I2C_Master_Receive>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80020bc:	f202 2226 	addw	r2, r2, #550	; 0x226
 80020c0:	7013      	strb	r3, [r2, #0]
  if(buf[0] != 0x00 || ret != HAL_OK ){
 80020c2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80020c6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80020ca:	3b64      	subs	r3, #100	; 0x64
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <main+0x9e8>
 80020d2:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80020d6:	f203 2326 	addw	r3, r3, #550	; 0x226
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d009      	beq.n	80020f4 <main+0x9fc>
      printf("Error setting mode: code %x\n\r", buf[0]);
 80020e0:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80020e4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80020e8:	3b64      	subs	r3, #100	; 0x64
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4875      	ldr	r0, [pc, #468]	; (80022c4 <main+0xbcc>)
 80020f0:	f005 fc18 	bl	8007924 <iprintf>
  }

  /*Set FIFO threshold as almost full at 0x0F*/
  buf[0] = 0x10;
 80020f4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80020f8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80020fc:	3b64      	subs	r3, #100	; 0x64
 80020fe:	2210      	movs	r2, #16
 8002100:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x01;
 8002102:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002106:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800210a:	3b64      	subs	r3, #100	; 0x64
 800210c:	2201      	movs	r2, #1
 800210e:	705a      	strb	r2, [r3, #1]
  buf[2] = samples;
 8002110:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002114:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002120:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002124:	3b64      	subs	r3, #100	; 0x64
 8002126:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8002128:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800212c:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8002130:	3a64      	subs	r2, #100	; 0x64
 8002132:	f241 3388 	movw	r3, #5000	; 0x1388
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2303      	movs	r3, #3
 800213a:	21aa      	movs	r1, #170	; 0xaa
 800213c:	485e      	ldr	r0, [pc, #376]	; (80022b8 <main+0xbc0>)
 800213e:	f001 fabf 	bl	80036c0 <HAL_I2C_Master_Transmit>
 8002142:	4603      	mov	r3, r0
 8002144:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8002148:	f202 2226 	addw	r2, r2, #550	; 0x226
 800214c:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 800214e:	2002      	movs	r0, #2
 8002150:	f000 ff72 	bl	8003038 <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002154:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8002158:	f502 7216 	add.w	r2, r2, #600	; 0x258
 800215c:	3a64      	subs	r2, #100	; 0x64
 800215e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2301      	movs	r3, #1
 8002166:	21ab      	movs	r1, #171	; 0xab
 8002168:	4853      	ldr	r0, [pc, #332]	; (80022b8 <main+0xbc0>)
 800216a:	f001 fb9d 	bl	80038a8 <HAL_I2C_Master_Receive>
 800216e:	4603      	mov	r3, r0
 8002170:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8002174:	f202 2226 	addw	r2, r2, #550	; 0x226
 8002178:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 800217a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800217e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002182:	3b64      	subs	r3, #100	; 0x64
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d106      	bne.n	8002198 <main+0xaa0>
 800218a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800218e:	f203 2326 	addw	r3, r3, #550	; 0x226
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <main+0xab4>
      printf("Error setting FIFO threshold code: %x\n\r", buf[0]);
 8002198:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800219c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80021a0:	3b64      	subs	r3, #100	; 0x64
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	4848      	ldr	r0, [pc, #288]	; (80022c8 <main+0xbd0>)
 80021a8:	f005 fbbc 	bl	8007924 <iprintf>
    }


  /*Enable the sensor*/
  buf[0] = 0x44;
 80021ac:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80021b0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80021b4:	3b64      	subs	r3, #100	; 0x64
 80021b6:	2244      	movs	r2, #68	; 0x44
 80021b8:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x03;
 80021ba:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80021be:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80021c2:	3b64      	subs	r3, #100	; 0x64
 80021c4:	2203      	movs	r2, #3
 80021c6:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x01;
 80021c8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80021cc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80021d0:	3b64      	subs	r3, #100	; 0x64
 80021d2:	2201      	movs	r2, #1
 80021d4:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 80021d6:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80021da:	f502 7216 	add.w	r2, r2, #600	; 0x258
 80021de:	3a64      	subs	r2, #100	; 0x64
 80021e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2303      	movs	r3, #3
 80021e8:	21aa      	movs	r1, #170	; 0xaa
 80021ea:	4833      	ldr	r0, [pc, #204]	; (80022b8 <main+0xbc0>)
 80021ec:	f001 fa68 	bl	80036c0 <HAL_I2C_Master_Transmit>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80021f6:	f202 2226 	addw	r2, r2, #550	; 0x226
 80021fa:	7013      	strb	r3, [r2, #0]
  HAL_Delay(40);
 80021fc:	2028      	movs	r0, #40	; 0x28
 80021fe:	f000 ff1b 	bl	8003038 <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8002202:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8002206:	f502 7216 	add.w	r2, r2, #600	; 0x258
 800220a:	3a64      	subs	r2, #100	; 0x64
 800220c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2301      	movs	r3, #1
 8002214:	21ab      	movs	r1, #171	; 0xab
 8002216:	4828      	ldr	r0, [pc, #160]	; (80022b8 <main+0xbc0>)
 8002218:	f001 fb46 	bl	80038a8 <HAL_I2C_Master_Receive>
 800221c:	4603      	mov	r3, r0
 800221e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8002222:	f202 2226 	addw	r2, r2, #550	; 0x226
 8002226:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 8002228:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800222c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002230:	3b64      	subs	r3, #100	; 0x64
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d106      	bne.n	8002246 <main+0xb4e>
 8002238:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800223c:	f203 2326 	addw	r3, r3, #550	; 0x226
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d009      	beq.n	800225a <main+0xb62>
      printf("Error enabling sensor code: %x\n\r", buf[0]);
 8002246:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800224a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800224e:	3b64      	subs	r3, #100	; 0x64
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	481d      	ldr	r0, [pc, #116]	; (80022cc <main+0xbd4>)
 8002256:	f005 fb65 	bl	8007924 <iprintf>
    }
  /*Enable the algorithm*/
  buf[0] = 0x52;
 800225a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800225e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002262:	3b64      	subs	r3, #100	; 0x64
 8002264:	2252      	movs	r2, #82	; 0x52
 8002266:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x02;
 8002268:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800226c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002270:	3b64      	subs	r3, #100	; 0x64
 8002272:	2202      	movs	r2, #2
 8002274:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x01;
 8002276:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800227a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800227e:	3b64      	subs	r3, #100	; 0x64
 8002280:	2201      	movs	r2, #1
 8002282:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8002284:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8002288:	f502 7216 	add.w	r2, r2, #600	; 0x258
 800228c:	3a64      	subs	r2, #100	; 0x64
 800228e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2303      	movs	r3, #3
 8002296:	21aa      	movs	r1, #170	; 0xaa
 8002298:	4807      	ldr	r0, [pc, #28]	; (80022b8 <main+0xbc0>)
 800229a:	f001 fa11 	bl	80036c0 <HAL_I2C_Master_Transmit>
 800229e:	4603      	mov	r3, r0
 80022a0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80022a4:	f202 2226 	addw	r2, r2, #550	; 0x226
 80022a8:	7013      	strb	r3, [r2, #0]
  HAL_Delay(40);
 80022aa:	2028      	movs	r0, #40	; 0x28
 80022ac:	f000 fec4 	bl	8003038 <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80022b0:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80022b4:	e00c      	b.n	80022d0 <main+0xbd8>
 80022b6:	bf00      	nop
 80022b8:	20000208 	.word	0x20000208
 80022bc:	0800b6dc 	.word	0x0800b6dc
 80022c0:	0800b6f8 	.word	0x0800b6f8
 80022c4:	0800b71c 	.word	0x0800b71c
 80022c8:	0800b73c 	.word	0x0800b73c
 80022cc:	0800b764 	.word	0x0800b764
 80022d0:	f502 7216 	add.w	r2, r2, #600	; 0x258
 80022d4:	3a64      	subs	r2, #100	; 0x64
 80022d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	2301      	movs	r3, #1
 80022de:	21ab      	movs	r1, #171	; 0xab
 80022e0:	48c7      	ldr	r0, [pc, #796]	; (8002600 <main+0xf08>)
 80022e2:	f001 fae1 	bl	80038a8 <HAL_I2C_Master_Receive>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80022ec:	f202 2226 	addw	r2, r2, #550	; 0x226
 80022f0:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 80022f2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80022f6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80022fa:	3b64      	subs	r3, #100	; 0x64
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <main+0xc18>
 8002302:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002306:	f203 2326 	addw	r3, r3, #550	; 0x226
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <main+0xc2c>
      printf("Error Enabling Algorithm code: %x\n\r", buf[0]);
 8002310:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002314:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002318:	3b64      	subs	r3, #100	; 0x64
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	48b9      	ldr	r0, [pc, #740]	; (8002604 <main+0xf0c>)
 8002320:	f005 fb00 	bl	8007924 <iprintf>
    }


  float heart_rate = 0;
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800232c:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8002330:	6013      	str	r3, [r2, #0]
  float SpO2 = 0;
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800233a:	f502 720d 	add.w	r2, r2, #564	; 0x234
 800233e:	6013      	str	r3, [r2, #0]
  while (1)
      {
	  	//HAL_UART_Receive(&hlpuart1, buff, 10, 0xFFFF );
	    //buff[10] = '\0';
	    //printf("%s\n\r", buff);
        HAL_Delay(1000);
 8002340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002344:	f000 fe78 	bl	8003038 <HAL_Delay>

        int error;
        // read sensor hub status
        buf[0] = 0x00;
 8002348:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800234c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002350:	3b64      	subs	r3, #100	; 0x64
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
        buf[1] = 0x00;
 8002356:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800235a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800235e:	3b64      	subs	r3, #100	; 0x64
 8002360:	2200      	movs	r2, #0
 8002362:	705a      	strb	r2, [r3, #1]
        ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8002364:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8002368:	f502 7216 	add.w	r2, r2, #600	; 0x258
 800236c:	3a64      	subs	r2, #100	; 0x64
 800236e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2302      	movs	r3, #2
 8002376:	21aa      	movs	r1, #170	; 0xaa
 8002378:	48a1      	ldr	r0, [pc, #644]	; (8002600 <main+0xf08>)
 800237a:	f001 f9a1 	bl	80036c0 <HAL_I2C_Master_Transmit>
 800237e:	4603      	mov	r3, r0
 8002380:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8002384:	f202 2226 	addw	r2, r2, #550	; 0x226
 8002388:	7013      	strb	r3, [r2, #0]
        if ( ret != HAL_OK ) 
 800238a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800238e:	f203 2326 	addw	r3, r3, #550	; 0x226
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <main+0xcb4>
            {
            printf("Error sensor write\\n\r");
 8002398:	489b      	ldr	r0, [pc, #620]	; (8002608 <main+0xf10>)
 800239a:	f005 fac3 	bl	8007924 <iprintf>
            error = 1;
 800239e:	2301      	movs	r3, #1
 80023a0:	f107 1204 	add.w	r2, r7, #262148	; 0x40004
 80023a4:	f502 4262 	add.w	r2, r2, #57856	; 0xe200
 80023a8:	6013      	str	r3, [r2, #0]
            continue;
 80023aa:	e23a      	b.n	8002822 <main+0x112a>
            } 
        ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 80023ac:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80023b0:	f502 7216 	add.w	r2, r2, #600	; 0x258
 80023b4:	3a64      	subs	r2, #100	; 0x64
 80023b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2302      	movs	r3, #2
 80023be:	21ab      	movs	r1, #171	; 0xab
 80023c0:	488f      	ldr	r0, [pc, #572]	; (8002600 <main+0xf08>)
 80023c2:	f001 fa71 	bl	80038a8 <HAL_I2C_Master_Receive>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80023cc:	f202 2226 	addw	r2, r2, #550	; 0x226
 80023d0:	7013      	strb	r3, [r2, #0]
        if(buf[1] != 0x08)
 80023d2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80023d6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80023da:	3b64      	subs	r3, #100	; 0x64
 80023dc:	785b      	ldrb	r3, [r3, #1]
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d00a      	beq.n	80023f8 <main+0xd00>
            {
            printf("Data bit not ready %x \n\r", buf[2]);
 80023e2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80023e6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80023ea:	3b64      	subs	r3, #100	; 0x64
 80023ec:	789b      	ldrb	r3, [r3, #2]
 80023ee:	4619      	mov	r1, r3
 80023f0:	4886      	ldr	r0, [pc, #536]	; (800260c <main+0xf14>)
 80023f2:	f005 fa97 	bl	8007924 <iprintf>
            continue;
 80023f6:	e214      	b.n	8002822 <main+0x112a>
            } // end if
        else if(buf[0] != 0x0)
 80023f8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80023fc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002400:	3b64      	subs	r3, #100	; 0x64
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <main+0xd26>
            {
            printf(" %x error \n\r", buf[1]);
 8002408:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800240c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002410:	3b64      	subs	r3, #100	; 0x64
 8002412:	785b      	ldrb	r3, [r3, #1]
 8002414:	4619      	mov	r1, r3
 8002416:	487e      	ldr	r0, [pc, #504]	; (8002610 <main+0xf18>)
 8002418:	f005 fa84 	bl	8007924 <iprintf>
            continue;
 800241c:	e201      	b.n	8002822 <main+0x112a>
            } // end if
        // read FIFO hub status
        buf[0] = 0x12;
 800241e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002422:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002426:	3b64      	subs	r3, #100	; 0x64
 8002428:	2212      	movs	r2, #18
 800242a:	701a      	strb	r2, [r3, #0]
        buf[1] = 0x00;
 800242c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002430:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002434:	3b64      	subs	r3, #100	; 0x64
 8002436:	2200      	movs	r2, #0
 8002438:	705a      	strb	r2, [r3, #1]
        ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 800243a:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800243e:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8002442:	3a64      	subs	r2, #100	; 0x64
 8002444:	f241 3388 	movw	r3, #5000	; 0x1388
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2302      	movs	r3, #2
 800244c:	21aa      	movs	r1, #170	; 0xaa
 800244e:	486c      	ldr	r0, [pc, #432]	; (8002600 <main+0xf08>)
 8002450:	f001 f936 	bl	80036c0 <HAL_I2C_Master_Transmit>
 8002454:	4603      	mov	r3, r0
 8002456:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800245a:	f202 2226 	addw	r2, r2, #550	; 0x226
 800245e:	7013      	strb	r3, [r2, #0]
        if ( ret != HAL_OK ) 
 8002460:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002464:	f203 2326 	addw	r3, r3, #550	; 0x226
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <main+0xd8a>
            {
            printf("Error algorithm write\r\n");
 800246e:	4869      	ldr	r0, [pc, #420]	; (8002614 <main+0xf1c>)
 8002470:	f005 fade 	bl	8007a30 <puts>
            error = 1;
 8002474:	2301      	movs	r3, #1
 8002476:	f107 1204 	add.w	r2, r7, #262148	; 0x40004
 800247a:	f502 4262 	add.w	r2, r2, #57856	; 0xe200
 800247e:	6013      	str	r3, [r2, #0]
            continue;
 8002480:	e1cf      	b.n	8002822 <main+0x112a>
            } 
        ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 8002482:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8002486:	f502 7216 	add.w	r2, r2, #600	; 0x258
 800248a:	3a64      	subs	r2, #100	; 0x64
 800248c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	2302      	movs	r3, #2
 8002494:	21ab      	movs	r1, #171	; 0xab
 8002496:	485a      	ldr	r0, [pc, #360]	; (8002600 <main+0xf08>)
 8002498:	f001 fa06 	bl	80038a8 <HAL_I2C_Master_Receive>
 800249c:	4603      	mov	r3, r0
 800249e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80024a2:	f202 2226 	addw	r2, r2, #550	; 0x226
 80024a6:	7013      	strb	r3, [r2, #0]
        int sample_size = buf[1];
 80024a8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80024ac:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80024b0:	3b64      	subs	r3, #100	; 0x64
 80024b2:	785b      	ldrb	r3, [r3, #1]
 80024b4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80024b8:	f502 7206 	add.w	r2, r2, #536	; 0x218
 80024bc:	6013      	str	r3, [r2, #0]
        if(buf[0] != 0x0)
 80024be:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80024c2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80024c6:	3b64      	subs	r3, #100	; 0x64
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <main+0xdec>
            {
            printf(" %x error \n\r", buf[1]);
 80024ce:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80024d2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80024d6:	3b64      	subs	r3, #100	; 0x64
 80024d8:	785b      	ldrb	r3, [r3, #1]
 80024da:	4619      	mov	r1, r3
 80024dc:	484c      	ldr	r0, [pc, #304]	; (8002610 <main+0xf18>)
 80024de:	f005 fa21 	bl	8007924 <iprintf>
            continue;
 80024e2:	e19e      	b.n	8002822 <main+0x112a>
            } // end if
        // read the data
        buf[0] = 0x12;
 80024e4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80024e8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80024ec:	3b64      	subs	r3, #100	; 0x64
 80024ee:	2212      	movs	r2, #18
 80024f0:	701a      	strb	r2, [r3, #0]
        buf[1] = 0x01;
 80024f2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80024f6:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80024fa:	3b64      	subs	r3, #100	; 0x64
 80024fc:	2201      	movs	r2, #1
 80024fe:	705a      	strb	r2, [r3, #1]
        ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8002500:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8002504:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8002508:	3a64      	subs	r2, #100	; 0x64
 800250a:	f241 3388 	movw	r3, #5000	; 0x1388
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2302      	movs	r3, #2
 8002512:	21aa      	movs	r1, #170	; 0xaa
 8002514:	483a      	ldr	r0, [pc, #232]	; (8002600 <main+0xf08>)
 8002516:	f001 f8d3 	bl	80036c0 <HAL_I2C_Master_Transmit>
 800251a:	4603      	mov	r3, r0
 800251c:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8002520:	f202 2226 	addw	r2, r2, #550	; 0x226
 8002524:	7013      	strb	r3, [r2, #0]
        ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0],2, 5000);
 8002526:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800252a:	f502 7216 	add.w	r2, r2, #600	; 0x258
 800252e:	3a64      	subs	r2, #100	; 0x64
 8002530:	f241 3388 	movw	r3, #5000	; 0x1388
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2302      	movs	r3, #2
 8002538:	21ab      	movs	r1, #171	; 0xab
 800253a:	4831      	ldr	r0, [pc, #196]	; (8002600 <main+0xf08>)
 800253c:	f001 f9b4 	bl	80038a8 <HAL_I2C_Master_Receive>
 8002540:	4603      	mov	r3, r0
 8002542:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8002546:	f202 2226 	addw	r2, r2, #550	; 0x226
 800254a:	7013      	strb	r3, [r2, #0]
        if ( ret != HAL_OK ) 
 800254c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002550:	f203 2326 	addw	r3, r3, #550	; 0x226
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <main+0xe76>
            {
            printf("Error algorithm read\n\r");
 800255a:	482f      	ldr	r0, [pc, #188]	; (8002618 <main+0xf20>)
 800255c:	f005 f9e2 	bl	8007924 <iprintf>
            error = 1;
 8002560:	2301      	movs	r3, #1
 8002562:	f107 1204 	add.w	r2, r7, #262148	; 0x40004
 8002566:	f502 4262 	add.w	r2, r2, #57856	; 0xe200
 800256a:	6013      	str	r3, [r2, #0]
            continue;
 800256c:	e159      	b.n	8002822 <main+0x112a>
            } // end if
        int length_of_data = 1 + 18*sample_size;
 800256e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002572:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	3301      	adds	r3, #1
 8002582:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8002586:	f502 7205 	add.w	r2, r2, #532	; 0x214
 800258a:	6013      	str	r3, [r2, #0]
        ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0],length_of_data, 5000);
 800258c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002590:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800259c:	f502 7216 	add.w	r2, r2, #600	; 0x258
 80025a0:	3a64      	subs	r2, #100	; 0x64
 80025a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80025a6:	9100      	str	r1, [sp, #0]
 80025a8:	21ab      	movs	r1, #171	; 0xab
 80025aa:	4815      	ldr	r0, [pc, #84]	; (8002600 <main+0xf08>)
 80025ac:	f001 f97c 	bl	80038a8 <HAL_I2C_Master_Receive>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80025b6:	f202 2226 	addw	r2, r2, #550	; 0x226
 80025ba:	7013      	strb	r3, [r2, #0]
        //ret = HAL_I2C_Master_Recieve(&hi2c1, Read_HM, &buf[0],2, 5000); //checks status
        if(buf[0] != 0x0)
 80025bc:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80025c0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80025c4:	3b64      	subs	r3, #100	; 0x64
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <main+0xeea>
            {
            printf(" %x error \n\r", buf[1]);
 80025cc:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80025d0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80025d4:	3b64      	subs	r3, #100	; 0x64
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	4619      	mov	r1, r3
 80025da:	480d      	ldr	r0, [pc, #52]	; (8002610 <main+0xf18>)
 80025dc:	f005 f9a2 	bl	8007924 <iprintf>
            continue;
 80025e0:	e11f      	b.n	8002822 <main+0x112a>
            } // end if
        // this gets us our data for heart_rate and SpO2
        float viable = 0.0; //counts how many viable samples we have
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80025ea:	f502 720c 	add.w	r2, r2, #560	; 0x230
 80025ee:	6013      	str	r3, [r2, #0]
        for(int i = 13; i < length_of_data; i = i + 18)
 80025f0:	230d      	movs	r3, #13
 80025f2:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80025f6:	f502 720b 	add.w	r2, r2, #556	; 0x22c
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e0c3      	b.n	8002786 <main+0x108e>
 80025fe:	bf00      	nop
 8002600:	20000208 	.word	0x20000208
 8002604:	0800b788 	.word	0x0800b788
 8002608:	0800b7ac 	.word	0x0800b7ac
 800260c:	0800b7c4 	.word	0x0800b7c4
 8002610:	0800b7e0 	.word	0x0800b7e0
 8002614:	0800b7f0 	.word	0x0800b7f0
 8002618:	0800b808 	.word	0x0800b808
        	{
            int temp_heart = (buf[i]<<8) + buf[i+1];
 800261c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002620:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002624:	3b64      	subs	r3, #100	; 0x64
 8002626:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800262a:	f502 720b 	add.w	r2, r2, #556	; 0x22c
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	021a      	lsls	r2, r3, #8
 8002636:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800263a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	1c59      	adds	r1, r3, #1
 8002642:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002646:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800264a:	3b64      	subs	r3, #100	; 0x64
 800264c:	5c5b      	ldrb	r3, [r3, r1]
 800264e:	4413      	add	r3, r2
 8002650:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8002654:	f502 7204 	add.w	r2, r2, #528	; 0x210
 8002658:	6013      	str	r3, [r2, #0]
            temp_heart = temp_heart >> 1; //need to change to account for the 0.1
 800265a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800265e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	105b      	asrs	r3, r3, #1
 8002666:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800266a:	f502 7204 	add.w	r2, r2, #528	; 0x210
 800266e:	6013      	str	r3, [r2, #0]
            int temp_SpO2 = (buf[i+3]<<8) + buf[i+4];
 8002670:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002674:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	1cda      	adds	r2, r3, #3
 800267c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8002680:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002684:	3b64      	subs	r3, #100	; 0x64
 8002686:	5c9b      	ldrb	r3, [r3, r2]
 8002688:	021a      	lsls	r2, r3, #8
 800268a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800268e:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1d19      	adds	r1, r3, #4
 8002696:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800269a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800269e:	3b64      	subs	r3, #100	; 0x64
 80026a0:	5c5b      	ldrb	r3, [r3, r1]
 80026a2:	4413      	add	r3, r2
 80026a4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80026a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80026ac:	6013      	str	r3, [r2, #0]
            temp_heart = temp_heart >> 1; //need to change to account for the 0.1
 80026ae:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80026b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	105b      	asrs	r3, r3, #1
 80026ba:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80026be:	f502 7204 	add.w	r2, r2, #528	; 0x210
 80026c2:	6013      	str	r3, [r2, #0]
            int finger_status = buf[i+5];
 80026c4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80026c8:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	1d5a      	adds	r2, r3, #5
 80026d0:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80026d4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80026d8:	3b64      	subs	r3, #100	; 0x64
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80026e0:	f502 7202 	add.w	r2, r2, #520	; 0x208
 80026e4:	6013      	str	r3, [r2, #0]
            if(finger_status == 3)
 80026e6:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80026ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d13d      	bne.n	8002770 <main+0x1078>
                {
                ++viable;
 80026f4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80026f8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002704:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002708:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800270c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002710:	edc3 7a00 	vstr	s15, [r3]
                heart_rate += temp_heart;
 8002714:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002718:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002726:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800272a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800272e:	ed93 7a00 	vldr	s14, [r3]
 8002732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002736:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800273a:	f503 730e 	add.w	r3, r3, #568	; 0x238
 800273e:	edc3 7a00 	vstr	s15, [r3]
                SpO2 += temp_SpO2;
 8002742:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002746:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	ee07 3a90 	vmov	s15, r3
 8002750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002754:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002758:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800275c:	ed93 7a00 	vldr	s14, [r3]
 8002760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002764:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002768:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800276c:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 13; i < length_of_data; i = i + 18)
 8002770:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002774:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3312      	adds	r3, #18
 800277c:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8002780:	f502 720b 	add.w	r2, r2, #556	; 0x22c
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800278a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002794:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	f6ff af3e 	blt.w	800261c <main+0xf24>
                } // end if
            } // end for
        heart_rate = heart_rate / viable;
 80027a0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80027a4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80027a8:	edd3 6a00 	vldr	s13, [r3]
 80027ac:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80027b0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80027b4:	ed93 7a00 	vldr	s14, [r3]
 80027b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027bc:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80027c0:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80027c4:	edc3 7a00 	vstr	s15, [r3]
        SpO2 = SpO2 / viable; //average out our sample value
 80027c8:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80027cc:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80027d0:	edd3 6a00 	vldr	s13, [r3]
 80027d4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80027d8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80027dc:	ed93 7a00 	vldr	s14, [r3]
 80027e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027e4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80027e8:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80027ec:	edc3 7a00 	vstr	s15, [r3]

        printf("heart: %f, SpO2: %f\n\r", heart_rate, SpO2);
 80027f0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80027f4:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	f7fd febd 	bl	8000578 <__aeabi_f2d>
 80027fe:	4604      	mov	r4, r0
 8002800:	460d      	mov	r5, r1
 8002802:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002806:	f503 730d 	add.w	r3, r3, #564	; 0x234
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	f7fd feb4 	bl	8000578 <__aeabi_f2d>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	e9cd 2300 	strd	r2, r3, [sp]
 8002818:	4622      	mov	r2, r4
 800281a:	462b      	mov	r3, r5
 800281c:	4801      	ldr	r0, [pc, #4]	; (8002824 <main+0x112c>)
 800281e:	f005 f881 	bl	8007924 <iprintf>
      {
 8002822:	e58d      	b.n	8002340 <main+0xc48>
 8002824:	0800b820 	.word	0x0800b820

08002828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b0bc      	sub	sp, #240	; 0xf0
 800282c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800282e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002832:	2244      	movs	r2, #68	; 0x44
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f003 ffee 	bl	8006818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800283c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800284c:	1d3b      	adds	r3, r7, #4
 800284e:	2294      	movs	r2, #148	; 0x94
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f003 ffe0 	bl	8006818 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002858:	f44f 7000 	mov.w	r0, #512	; 0x200
 800285c:	f001 fbb2 	bl	8003fc4 <HAL_PWREx_ControlVoltageScaling>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <SystemClock_Config+0x42>
  {
    Error_Handler();
 8002866:	f000 f96f 	bl	8002b48 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800286a:	2310      	movs	r3, #16
 800286c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002870:	2301      	movs	r3, #1
 8002872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800287c:	2360      	movs	r3, #96	; 0x60
 800287e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002888:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800288c:	4618      	mov	r0, r3
 800288e:	f001 fc4d 	bl	800412c <HAL_RCC_OscConfig>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002898:	f000 f956 	bl	8002b48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800289c:	230f      	movs	r3, #15
 800289e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80028a2:	2300      	movs	r3, #0
 80028a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80028ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 f859 	bl	8004978 <HAL_RCC_ClockConfig>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80028cc:	f000 f93c 	bl	8002b48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 80028d0:	2360      	movs	r3, #96	; 0x60
 80028d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80028d4:	2300      	movs	r3, #0
 80028d6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028d8:	2300      	movs	r3, #0
 80028da:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	4618      	mov	r0, r3
 80028e0:	f002 fafc 	bl	8004edc <HAL_RCCEx_PeriphCLKConfig>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80028ea:	f000 f92d 	bl	8002b48 <Error_Handler>
  }
}
 80028ee:	bf00      	nop
 80028f0:	37f0      	adds	r7, #240	; 0xf0
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <MX_I2C1_Init+0x74>)
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <MX_I2C1_Init+0x78>)
 8002900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8002902:	4b1a      	ldr	r3, [pc, #104]	; (800296c <MX_I2C1_Init+0x74>)
 8002904:	f640 6214 	movw	r2, #3604	; 0xe14
 8002908:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800290a:	4b18      	ldr	r3, [pc, #96]	; (800296c <MX_I2C1_Init+0x74>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002910:	4b16      	ldr	r3, [pc, #88]	; (800296c <MX_I2C1_Init+0x74>)
 8002912:	2201      	movs	r2, #1
 8002914:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <MX_I2C1_Init+0x74>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800291c:	4b13      	ldr	r3, [pc, #76]	; (800296c <MX_I2C1_Init+0x74>)
 800291e:	2200      	movs	r2, #0
 8002920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <MX_I2C1_Init+0x74>)
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <MX_I2C1_Init+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <MX_I2C1_Init+0x74>)
 8002930:	2200      	movs	r2, #0
 8002932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002934:	480d      	ldr	r0, [pc, #52]	; (800296c <MX_I2C1_Init+0x74>)
 8002936:	f000 fe33 	bl	80035a0 <HAL_I2C_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002940:	f000 f902 	bl	8002b48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002944:	2100      	movs	r1, #0
 8002946:	4809      	ldr	r0, [pc, #36]	; (800296c <MX_I2C1_Init+0x74>)
 8002948:	f001 fa84 	bl	8003e54 <HAL_I2CEx_ConfigAnalogFilter>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002952:	f000 f8f9 	bl	8002b48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002956:	2100      	movs	r1, #0
 8002958:	4804      	ldr	r0, [pc, #16]	; (800296c <MX_I2C1_Init+0x74>)
 800295a:	f001 fac6 	bl	8003eea <HAL_I2CEx_ConfigDigitalFilter>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002964:	f000 f8f0 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000208 	.word	0x20000208
 8002970:	40005400 	.word	0x40005400

08002974 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002978:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 800297a:	4a23      	ldr	r2, [pc, #140]	; (8002a08 <MX_LPUART1_UART_Init+0x94>)
 800297c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800297e:	4b21      	ldr	r3, [pc, #132]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 8002980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002984:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 8002988:	2200      	movs	r2, #0
 800298a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 800298e:	2200      	movs	r2, #0
 8002990:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 8002994:	2200      	movs	r2, #0
 8002996:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002998:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 800299a:	220c      	movs	r2, #12
 800299c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029a4:	4b17      	ldr	r3, [pc, #92]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029b0:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80029b6:	4b13      	ldr	r3, [pc, #76]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80029bc:	4811      	ldr	r0, [pc, #68]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 80029be:	f002 ffa5 	bl	800590c <HAL_UART_Init>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80029c8:	f000 f8be 	bl	8002b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029cc:	2100      	movs	r1, #0
 80029ce:	480d      	ldr	r0, [pc, #52]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 80029d0:	f003 fdc7 	bl	8006562 <HAL_UARTEx_SetTxFifoThreshold>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029da:	f000 f8b5 	bl	8002b48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029de:	2100      	movs	r1, #0
 80029e0:	4808      	ldr	r0, [pc, #32]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 80029e2:	f003 fdfc 	bl	80065de <HAL_UARTEx_SetRxFifoThreshold>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80029ec:	f000 f8ac 	bl	8002b48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80029f0:	4804      	ldr	r0, [pc, #16]	; (8002a04 <MX_LPUART1_UART_Init+0x90>)
 80029f2:	f003 fd7d 	bl	80064f0 <HAL_UARTEx_DisableFifoMode>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80029fc:	f000 f8a4 	bl	8002b48 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000254 	.word	0x20000254
 8002a08:	40008000 	.word	0x40008000

08002a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a12:	f107 0314 	add.w	r3, r7, #20
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a22:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	4a33      	ldr	r2, [pc, #204]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a3a:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3e:	4a2d      	ldr	r2, [pc, #180]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a46:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8002a52:	f001 fb5b 	bl	800410c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a56:	4b27      	ldr	r3, [pc, #156]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	4a26      	ldr	r2, [pc, #152]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a5c:	f043 0308 	orr.w	r3, r3, #8
 8002a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a62:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6e:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <MX_GPIO_Init+0xe8>)
 8002a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2103      	movs	r1, #3
 8002a8a:	481b      	ldr	r0, [pc, #108]	; (8002af8 <MX_GPIO_Init+0xec>)
 8002a8c:	f000 fd70 	bl	8003570 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a90:	2303      	movs	r3, #3
 8002a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a94:	2312      	movs	r3, #18
 8002a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4814      	ldr	r0, [pc, #80]	; (8002afc <MX_GPIO_Init+0xf0>)
 8002aac:	f000 fbce 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	480c      	ldr	r0, [pc, #48]	; (8002af8 <MX_GPIO_Init+0xec>)
 8002ac8:	f000 fbc0 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002acc:	2360      	movs	r3, #96	; 0x60
 8002ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002adc:	2307      	movs	r3, #7
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4804      	ldr	r0, [pc, #16]	; (8002af8 <MX_GPIO_Init+0xec>)
 8002ae8:	f000 fbb0 	bl	800324c <HAL_GPIO_Init>

}
 8002aec:	bf00      	nop
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	48000c00 	.word	0x48000c00
 8002afc:	48000800 	.word	0x48000800

08002b00 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
  #define GETCHAR_PROTOTYPE int fgetc( FILE *f )
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002b08:	1d39      	adds	r1, r7, #4
 8002b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b0e:	2201      	movs	r2, #1
 8002b10:	4803      	ldr	r0, [pc, #12]	; (8002b20 <__io_putchar+0x20>)
 8002b12:	f002 ff4b 	bl	80059ac <HAL_UART_Transmit>
  return ch;
 8002b16:	687b      	ldr	r3, [r7, #4]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000254 	.word	0x20000254

08002b24 <__io_getchar>:

GETCHAR_PROTOTYPE
    {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
    int ch;
    HAL_UART_Receive(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF );
 8002b2a:	1d39      	adds	r1, r7, #4
 8002b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b30:	2201      	movs	r2, #1
 8002b32:	4804      	ldr	r0, [pc, #16]	; (8002b44 <__io_getchar+0x20>)
 8002b34:	f002 ffd1 	bl	8005ada <HAL_UART_Receive>
    return ch;
 8002b38:	687b      	ldr	r3, [r7, #4]
    } //end GETCHAR_PROTOTYPE
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000254 	.word	0x20000254

08002b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b4c:	b672      	cpsid	i
}
 8002b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <Error_Handler+0x8>
	...

08002b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5a:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <HAL_MspInit+0x44>)
 8002b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5e:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <HAL_MspInit+0x44>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6613      	str	r3, [r2, #96]	; 0x60
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_MspInit+0x44>)
 8002b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_MspInit+0x44>)
 8002b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <HAL_MspInit+0x44>)
 8002b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_MspInit+0x44>)
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	; 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <HAL_I2C_MspInit+0x7c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d128      	bne.n	8002c10 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <HAL_I2C_MspInit+0x80>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <HAL_I2C_MspInit+0x80>)
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_I2C_MspInit+0x80>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bdc:	2312      	movs	r3, #18
 8002bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be0:	2301      	movs	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002be8:	2304      	movs	r3, #4
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	480b      	ldr	r0, [pc, #44]	; (8002c20 <HAL_I2C_MspInit+0x84>)
 8002bf4:	f000 fb2a 	bl	800324c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <HAL_I2C_MspInit+0x80>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfc:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <HAL_I2C_MspInit+0x80>)
 8002bfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c02:	6593      	str	r3, [r2, #88]	; 0x58
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_I2C_MspInit+0x80>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c10:	bf00      	nop
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40005400 	.word	0x40005400
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	48000400 	.word	0x48000400

08002c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08a      	sub	sp, #40	; 0x28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2c:	f107 0314 	add.w	r3, r7, #20
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <HAL_UART_MspInit+0x80>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d12a      	bne.n	8002c9c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c46:	4b18      	ldr	r3, [pc, #96]	; (8002ca8 <HAL_UART_MspInit+0x84>)
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <HAL_UART_MspInit+0x84>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_UART_MspInit+0x84>)
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_UART_MspInit+0x84>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <HAL_UART_MspInit+0x84>)
 8002c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <HAL_UART_MspInit+0x84>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8002c76:	f001 fa49 	bl	800410c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002c7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	4619      	mov	r1, r3
 8002c96:	4805      	ldr	r0, [pc, #20]	; (8002cac <HAL_UART_MspInit+0x88>)
 8002c98:	f000 fad8 	bl	800324c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002c9c:	bf00      	nop
 8002c9e:	3728      	adds	r7, #40	; 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40008000 	.word	0x40008000
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	48001800 	.word	0x48001800

08002cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <NMI_Handler+0x4>

08002cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cba:	e7fe      	b.n	8002cba <HardFault_Handler+0x4>

08002cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <MemManage_Handler+0x4>

08002cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <BusFault_Handler+0x4>

08002cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <UsageFault_Handler+0x4>

08002cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cfc:	f000 f97c 	bl	8002ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
	return 1;
 8002d08:	2301      	movs	r3, #1
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <_kill>:

int _kill(int pid, int sig)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d1e:	f003 fd23 	bl	8006768 <__errno>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2216      	movs	r2, #22
 8002d26:	601a      	str	r2, [r3, #0]
	return -1;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_exit>:

void _exit (int status)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ffe7 	bl	8002d14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d46:	e7fe      	b.n	8002d46 <_exit+0x12>

08002d48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	e00a      	b.n	8002d70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d5a:	f7ff fee3 	bl	8002b24 <__io_getchar>
 8002d5e:	4601      	mov	r1, r0
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	60ba      	str	r2, [r7, #8]
 8002d66:	b2ca      	uxtb	r2, r1
 8002d68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dbf0      	blt.n	8002d5a <_read+0x12>
	}

return len;
 8002d78:	687b      	ldr	r3, [r7, #4]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b086      	sub	sp, #24
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e009      	b.n	8002da8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	60ba      	str	r2, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff feaf 	bl	8002b00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	dbf1      	blt.n	8002d94 <_write+0x12>
	}
	return len;
 8002db0:	687b      	ldr	r3, [r7, #4]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <_close>:

int _close(int file)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
	return -1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002de2:	605a      	str	r2, [r3, #4]
	return 0;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_isatty>:

int _isatty(int file)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
	return 1;
 8002dfa:	2301      	movs	r3, #1
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
	return 0;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e2c:	4a14      	ldr	r2, [pc, #80]	; (8002e80 <_sbrk+0x5c>)
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <_sbrk+0x60>)
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e38:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <_sbrk+0x64>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <_sbrk+0x64>)
 8002e42:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <_sbrk+0x68>)
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <_sbrk+0x64>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d207      	bcs.n	8002e64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e54:	f003 fc88 	bl	8006768 <__errno>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e62:	e009      	b.n	8002e78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e64:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <_sbrk+0x64>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e6a:	4b07      	ldr	r3, [pc, #28]	; (8002e88 <_sbrk+0x64>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <_sbrk+0x64>)
 8002e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e76:	68fb      	ldr	r3, [r7, #12]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200a0000 	.word	0x200a0000
 8002e84:	00000400 	.word	0x00000400
 8002e88:	200001fc 	.word	0x200001fc
 8002e8c:	200002f8 	.word	0x200002f8

08002e90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e94:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <SystemInit+0x64>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <SystemInit+0x64>)
 8002e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <SystemInit+0x68>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <SystemInit+0x68>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002eb0:	4b11      	ldr	r3, [pc, #68]	; (8002ef8 <SystemInit+0x68>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <SystemInit+0x68>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a0f      	ldr	r2, [pc, #60]	; (8002ef8 <SystemInit+0x68>)
 8002ebc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002ec0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <SystemInit+0x68>)
 8002ec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ecc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <SystemInit+0x68>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <SystemInit+0x68>)
 8002ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002eda:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <SystemInit+0x68>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <SystemInit+0x64>)
 8002ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ee6:	609a      	str	r2, [r3, #8]
#endif
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000ed00 	.word	0xe000ed00
 8002ef8:	40021000 	.word	0x40021000

08002efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f00:	f7ff ffc6 	bl	8002e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f06:	e003      	b.n	8002f10 <LoopCopyDataInit>

08002f08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f0e:	3104      	adds	r1, #4

08002f10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f10:	480a      	ldr	r0, [pc, #40]	; (8002f3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f18:	d3f6      	bcc.n	8002f08 <CopyDataInit>
	ldr	r2, =_sbss
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f1c:	e002      	b.n	8002f24 <LoopFillZerobss>

08002f1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f20:	f842 3b04 	str.w	r3, [r2], #4

08002f24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <LoopForever+0x16>)
	cmp	r2, r3
 8002f26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002f28:	d3f9      	bcc.n	8002f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f2a:	f003 fc49 	bl	80067c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f2e:	f7fe fbe3 	bl	80016f8 <main>

08002f32 <LoopForever>:

LoopForever:
    b LoopForever
 8002f32:	e7fe      	b.n	8002f32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002f34:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002f38:	08035f54 	.word	0x08035f54
	ldr	r0, =_sdata
 8002f3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002f40:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8002f44:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8002f48:	200002f4 	.word	0x200002f4

08002f4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC1_IRQHandler>

08002f4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f58:	2003      	movs	r0, #3
 8002f5a:	f000 f943 	bl	80031e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f000 f80e 	bl	8002f80 <HAL_InitTick>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	71fb      	strb	r3, [r7, #7]
 8002f6e:	e001      	b.n	8002f74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f70:	f7ff fdf0 	bl	8002b54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f74:	79fb      	ldrb	r3, [r7, #7]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_InitTick+0x6c>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d023      	beq.n	8002fdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f94:	4b16      	ldr	r3, [pc, #88]	; (8002ff0 <HAL_InitTick+0x70>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b14      	ldr	r3, [pc, #80]	; (8002fec <HAL_InitTick+0x6c>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f941 	bl	8003232 <HAL_SYSTICK_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10f      	bne.n	8002fd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d809      	bhi.n	8002fd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fc4:	f000 f919 	bl	80031fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <HAL_InitTick+0x74>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	e007      	b.n	8002fe0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	e004      	b.n	8002fe0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	e001      	b.n	8002fe0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000008 	.word	0x20000008
 8002ff0:	20000000 	.word	0x20000000
 8002ff4:	20000004 	.word	0x20000004

08002ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_IncTick+0x20>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_IncTick+0x24>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4413      	add	r3, r2
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_IncTick+0x24>)
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000008 	.word	0x20000008
 800301c:	200002e0 	.word	0x200002e0

08003020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return uwTick;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_GetTick+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	200002e0 	.word	0x200002e0

08003038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff ffee 	bl	8003020 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003050:	d005      	beq.n	800305e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_Delay+0x44>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800305e:	bf00      	nop
 8003060:	f7ff ffde 	bl	8003020 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d8f7      	bhi.n	8003060 <HAL_Delay+0x28>
  {
  }
}
 8003070:	bf00      	nop
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000008 	.word	0x20000008

08003080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800309c:	4013      	ands	r3, r2
 800309e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b2:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <__NVIC_SetPriorityGrouping+0x44>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	60d3      	str	r3, [r2, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <__NVIC_GetPriorityGrouping+0x18>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	f003 0307 	and.w	r3, r3, #7
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	6039      	str	r1, [r7, #0]
 80030ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	db0a      	blt.n	800310e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	490c      	ldr	r1, [pc, #48]	; (8003130 <__NVIC_SetPriority+0x4c>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	440b      	add	r3, r1
 8003108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800310c:	e00a      	b.n	8003124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	b2da      	uxtb	r2, r3
 8003112:	4908      	ldr	r1, [pc, #32]	; (8003134 <__NVIC_SetPriority+0x50>)
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	3b04      	subs	r3, #4
 800311c:	0112      	lsls	r2, r2, #4
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	440b      	add	r3, r1
 8003122:	761a      	strb	r2, [r3, #24]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000e100 	.word	0xe000e100
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f1c3 0307 	rsb	r3, r3, #7
 8003152:	2b04      	cmp	r3, #4
 8003154:	bf28      	it	cs
 8003156:	2304      	movcs	r3, #4
 8003158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3304      	adds	r3, #4
 800315e:	2b06      	cmp	r3, #6
 8003160:	d902      	bls.n	8003168 <NVIC_EncodePriority+0x30>
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3b03      	subs	r3, #3
 8003166:	e000      	b.n	800316a <NVIC_EncodePriority+0x32>
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800316c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	401a      	ands	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003180:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	43d9      	mvns	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	4313      	orrs	r3, r2
         );
}
 8003192:	4618      	mov	r0, r3
 8003194:	3724      	adds	r7, #36	; 0x24
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b0:	d301      	bcc.n	80031b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b2:	2301      	movs	r3, #1
 80031b4:	e00f      	b.n	80031d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <SysTick_Config+0x40>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031be:	210f      	movs	r1, #15
 80031c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c4:	f7ff ff8e 	bl	80030e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c8:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <SysTick_Config+0x40>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ce:	4b04      	ldr	r3, [pc, #16]	; (80031e0 <SysTick_Config+0x40>)
 80031d0:	2207      	movs	r2, #7
 80031d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	e000e010 	.word	0xe000e010

080031e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f7ff ff47 	bl	8003080 <__NVIC_SetPriorityGrouping>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800320c:	f7ff ff5c 	bl	80030c8 <__NVIC_GetPriorityGrouping>
 8003210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	6978      	ldr	r0, [r7, #20]
 8003218:	f7ff ff8e 	bl	8003138 <NVIC_EncodePriority>
 800321c:	4602      	mov	r2, r0
 800321e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff5d 	bl	80030e4 <__NVIC_SetPriority>
}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ffb0 	bl	80031a0 <SysTick_Config>
 8003240:	4603      	mov	r3, r0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325a:	e166      	b.n	800352a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	4013      	ands	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8158 	beq.w	8003524 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d00b      	beq.n	8003294 <HAL_GPIO_Init+0x48>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d007      	beq.n	8003294 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003288:	2b11      	cmp	r3, #17
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b12      	cmp	r3, #18
 8003292:	d130      	bne.n	80032f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	2203      	movs	r2, #3
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032ca:	2201      	movs	r2, #1
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	f003 0201 	and.w	r2, r3, #1
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	2203      	movs	r2, #3
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0xea>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b12      	cmp	r3, #18
 8003334:	d123      	bne.n	800337e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	08da      	lsrs	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3208      	adds	r2, #8
 800333e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	08da      	lsrs	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3208      	adds	r2, #8
 8003378:	6939      	ldr	r1, [r7, #16]
 800337a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2203      	movs	r2, #3
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 0203 	and.w	r2, r3, #3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80b2 	beq.w	8003524 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c0:	4b61      	ldr	r3, [pc, #388]	; (8003548 <HAL_GPIO_Init+0x2fc>)
 80033c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c4:	4a60      	ldr	r2, [pc, #384]	; (8003548 <HAL_GPIO_Init+0x2fc>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6613      	str	r3, [r2, #96]	; 0x60
 80033cc:	4b5e      	ldr	r3, [pc, #376]	; (8003548 <HAL_GPIO_Init+0x2fc>)
 80033ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033d8:	4a5c      	ldr	r2, [pc, #368]	; (800354c <HAL_GPIO_Init+0x300>)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	3302      	adds	r3, #2
 80033e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	220f      	movs	r2, #15
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003402:	d02b      	beq.n	800345c <HAL_GPIO_Init+0x210>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a52      	ldr	r2, [pc, #328]	; (8003550 <HAL_GPIO_Init+0x304>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d025      	beq.n	8003458 <HAL_GPIO_Init+0x20c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a51      	ldr	r2, [pc, #324]	; (8003554 <HAL_GPIO_Init+0x308>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d01f      	beq.n	8003454 <HAL_GPIO_Init+0x208>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a50      	ldr	r2, [pc, #320]	; (8003558 <HAL_GPIO_Init+0x30c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d019      	beq.n	8003450 <HAL_GPIO_Init+0x204>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a4f      	ldr	r2, [pc, #316]	; (800355c <HAL_GPIO_Init+0x310>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <HAL_GPIO_Init+0x200>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a4e      	ldr	r2, [pc, #312]	; (8003560 <HAL_GPIO_Init+0x314>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d00d      	beq.n	8003448 <HAL_GPIO_Init+0x1fc>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a4d      	ldr	r2, [pc, #308]	; (8003564 <HAL_GPIO_Init+0x318>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d007      	beq.n	8003444 <HAL_GPIO_Init+0x1f8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a4c      	ldr	r2, [pc, #304]	; (8003568 <HAL_GPIO_Init+0x31c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_GPIO_Init+0x1f4>
 800343c:	2307      	movs	r3, #7
 800343e:	e00e      	b.n	800345e <HAL_GPIO_Init+0x212>
 8003440:	2308      	movs	r3, #8
 8003442:	e00c      	b.n	800345e <HAL_GPIO_Init+0x212>
 8003444:	2306      	movs	r3, #6
 8003446:	e00a      	b.n	800345e <HAL_GPIO_Init+0x212>
 8003448:	2305      	movs	r3, #5
 800344a:	e008      	b.n	800345e <HAL_GPIO_Init+0x212>
 800344c:	2304      	movs	r3, #4
 800344e:	e006      	b.n	800345e <HAL_GPIO_Init+0x212>
 8003450:	2303      	movs	r3, #3
 8003452:	e004      	b.n	800345e <HAL_GPIO_Init+0x212>
 8003454:	2302      	movs	r3, #2
 8003456:	e002      	b.n	800345e <HAL_GPIO_Init+0x212>
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <HAL_GPIO_Init+0x212>
 800345c:	2300      	movs	r3, #0
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	f002 0203 	and.w	r2, r2, #3
 8003464:	0092      	lsls	r2, r2, #2
 8003466:	4093      	lsls	r3, r2
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800346e:	4937      	ldr	r1, [pc, #220]	; (800354c <HAL_GPIO_Init+0x300>)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800347c:	4b3b      	ldr	r3, [pc, #236]	; (800356c <HAL_GPIO_Init+0x320>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	43db      	mvns	r3, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	4313      	orrs	r3, r2
 800349e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034a0:	4a32      	ldr	r2, [pc, #200]	; (800356c <HAL_GPIO_Init+0x320>)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80034a6:	4b31      	ldr	r3, [pc, #196]	; (800356c <HAL_GPIO_Init+0x320>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	43db      	mvns	r3, r3
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4013      	ands	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80034ca:	4a28      	ldr	r2, [pc, #160]	; (800356c <HAL_GPIO_Init+0x320>)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034d0:	4b26      	ldr	r3, [pc, #152]	; (800356c <HAL_GPIO_Init+0x320>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	43db      	mvns	r3, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034f4:	4a1d      	ldr	r2, [pc, #116]	; (800356c <HAL_GPIO_Init+0x320>)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_GPIO_Init+0x320>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800351e:	4a13      	ldr	r2, [pc, #76]	; (800356c <HAL_GPIO_Init+0x320>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	3301      	adds	r3, #1
 8003528:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	f47f ae91 	bne.w	800325c <HAL_GPIO_Init+0x10>
  }
}
 800353a:	bf00      	nop
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40021000 	.word	0x40021000
 800354c:	40010000 	.word	0x40010000
 8003550:	48000400 	.word	0x48000400
 8003554:	48000800 	.word	0x48000800
 8003558:	48000c00 	.word	0x48000c00
 800355c:	48001000 	.word	0x48001000
 8003560:	48001400 	.word	0x48001400
 8003564:	48001800 	.word	0x48001800
 8003568:	48001c00 	.word	0x48001c00
 800356c:	40010400 	.word	0x40010400

08003570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	807b      	strh	r3, [r7, #2]
 800357c:	4613      	mov	r3, r2
 800357e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003580:	787b      	ldrb	r3, [r7, #1]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800358c:	e002      	b.n	8003594 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800358e:	887a      	ldrh	r2, [r7, #2]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e081      	b.n	80036b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff fae8 	bl	8002b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2224      	movs	r2, #36	; 0x24
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003600:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	e006      	b.n	8003628 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003626:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d104      	bne.n	800363a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003638:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800364c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	ea42 0103 	orr.w	r1, r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69d9      	ldr	r1, [r3, #28]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1a      	ldr	r2, [r3, #32]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b088      	sub	sp, #32
 80036c4:	af02      	add	r7, sp, #8
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	461a      	mov	r2, r3
 80036cc:	460b      	mov	r3, r1
 80036ce:	817b      	strh	r3, [r7, #10]
 80036d0:	4613      	mov	r3, r2
 80036d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b20      	cmp	r3, #32
 80036de:	f040 80da 	bne.w	8003896 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_I2C_Master_Transmit+0x30>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e0d3      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036f8:	f7ff fc92 	bl	8003020 <HAL_GetTick>
 80036fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2319      	movs	r3, #25
 8003704:	2201      	movs	r2, #1
 8003706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f9e6 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e0be      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2221      	movs	r2, #33	; 0x21
 800371e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2210      	movs	r2, #16
 8003726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	893a      	ldrh	r2, [r7, #8]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2bff      	cmp	r3, #255	; 0xff
 800374a:	d90e      	bls.n	800376a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	b2da      	uxtb	r2, r3
 8003758:	8979      	ldrh	r1, [r7, #10]
 800375a:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 fb48 	bl	8003df8 <I2C_TransferConfig>
 8003768:	e06c      	b.n	8003844 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003778:	b2da      	uxtb	r2, r3
 800377a:	8979      	ldrh	r1, [r7, #10]
 800377c:	4b48      	ldr	r3, [pc, #288]	; (80038a0 <HAL_I2C_Master_Transmit+0x1e0>)
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fb37 	bl	8003df8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800378a:	e05b      	b.n	8003844 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	6a39      	ldr	r1, [r7, #32]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f9e3 	bl	8003b5c <I2C_WaitOnTXISFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e07b      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	781a      	ldrb	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c5a      	adds	r2, r3, #1
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d034      	beq.n	8003844 <HAL_I2C_Master_Transmit+0x184>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d130      	bne.n	8003844 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	2200      	movs	r2, #0
 80037ea:	2180      	movs	r1, #128	; 0x80
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f975 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e04d      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2bff      	cmp	r3, #255	; 0xff
 8003804:	d90e      	bls.n	8003824 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	22ff      	movs	r2, #255	; 0xff
 800380a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	b2da      	uxtb	r2, r3
 8003812:	8979      	ldrh	r1, [r7, #10]
 8003814:	2300      	movs	r3, #0
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 faeb 	bl	8003df8 <I2C_TransferConfig>
 8003822:	e00f      	b.n	8003844 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	b2da      	uxtb	r2, r3
 8003834:	8979      	ldrh	r1, [r7, #10]
 8003836:	2300      	movs	r3, #0
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 fada 	bl	8003df8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d19e      	bne.n	800378c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	6a39      	ldr	r1, [r7, #32]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f9c2 	bl	8003bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e01a      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2220      	movs	r2, #32
 8003868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6859      	ldr	r1, [r3, #4]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003876:	400b      	ands	r3, r1
 8003878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2220      	movs	r2, #32
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	80002000 	.word	0x80002000
 80038a4:	fe00e800 	.word	0xfe00e800

080038a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b088      	sub	sp, #32
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	461a      	mov	r2, r3
 80038b4:	460b      	mov	r3, r1
 80038b6:	817b      	strh	r3, [r7, #10]
 80038b8:	4613      	mov	r3, r2
 80038ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	f040 80db 	bne.w	8003a80 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_I2C_Master_Receive+0x30>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e0d4      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038e0:	f7ff fb9e 	bl	8003020 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2319      	movs	r3, #25
 80038ec:	2201      	movs	r2, #1
 80038ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f8f2 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e0bf      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2222      	movs	r2, #34	; 0x22
 8003906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2210      	movs	r2, #16
 800390e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	893a      	ldrh	r2, [r7, #8]
 8003922:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	2bff      	cmp	r3, #255	; 0xff
 8003932:	d90e      	bls.n	8003952 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	22ff      	movs	r2, #255	; 0xff
 8003938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	b2da      	uxtb	r2, r3
 8003940:	8979      	ldrh	r1, [r7, #10]
 8003942:	4b52      	ldr	r3, [pc, #328]	; (8003a8c <HAL_I2C_Master_Receive+0x1e4>)
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fa54 	bl	8003df8 <I2C_TransferConfig>
 8003950:	e06d      	b.n	8003a2e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	b2da      	uxtb	r2, r3
 8003962:	8979      	ldrh	r1, [r7, #10]
 8003964:	4b49      	ldr	r3, [pc, #292]	; (8003a8c <HAL_I2C_Master_Receive+0x1e4>)
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fa43 	bl	8003df8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003972:	e05c      	b.n	8003a2e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	6a39      	ldr	r1, [r7, #32]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f96b 	bl	8003c54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e07c      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b29b      	uxth	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d034      	beq.n	8003a2e <HAL_I2C_Master_Receive+0x186>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d130      	bne.n	8003a2e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	2200      	movs	r2, #0
 80039d4:	2180      	movs	r1, #128	; 0x80
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f880 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e04d      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2bff      	cmp	r3, #255	; 0xff
 80039ee:	d90e      	bls.n	8003a0e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	8979      	ldrh	r1, [r7, #10]
 80039fe:	2300      	movs	r3, #0
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f9f6 	bl	8003df8 <I2C_TransferConfig>
 8003a0c:	e00f      	b.n	8003a2e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	8979      	ldrh	r1, [r7, #10]
 8003a20:	2300      	movs	r3, #0
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f9e5 	bl	8003df8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d19d      	bne.n	8003974 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	6a39      	ldr	r1, [r7, #32]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 f8cd 	bl	8003bdc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e01a      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2220      	movs	r2, #32
 8003a52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <HAL_I2C_Master_Receive+0x1e8>)
 8003a60:	400b      	ands	r3, r1
 8003a62:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	80002400 	.word	0x80002400
 8003a90:	fe00e800 	.word	0xfe00e800

08003a94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d103      	bne.n	8003ab2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d007      	beq.n	8003ad0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	619a      	str	r2, [r3, #24]
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aec:	e022      	b.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af4:	d01e      	beq.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7ff fa93 	bl	8003020 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d113      	bne.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	f043 0220 	orr.w	r2, r3, #32
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e00f      	b.n	8003b54 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	bf0c      	ite	eq
 8003b44:	2301      	moveq	r3, #1
 8003b46:	2300      	movne	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d0cd      	beq.n	8003aee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b68:	e02c      	b.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68b9      	ldr	r1, [r7, #8]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f8dc 	bl	8003d2c <I2C_IsAcknowledgeFailed>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e02a      	b.n	8003bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b84:	d01e      	beq.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b86:	f7ff fa4b 	bl	8003020 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d113      	bne.n	8003bc4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e007      	b.n	8003bd4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d1cb      	bne.n	8003b6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003be8:	e028      	b.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f89c 	bl	8003d2c <I2C_IsAcknowledgeFailed>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e026      	b.n	8003c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfe:	f7ff fa0f 	bl	8003020 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d302      	bcc.n	8003c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d113      	bne.n	8003c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e007      	b.n	8003c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	2b20      	cmp	r3, #32
 8003c48:	d1cf      	bne.n	8003bea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c60:	e055      	b.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f860 	bl	8003d2c <I2C_IsAcknowledgeFailed>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e053      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d129      	bne.n	8003cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d105      	bne.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e03f      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e022      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd8:	f7ff f9a2 	bl	8003020 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d302      	bcc.n	8003cee <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f043 0220 	orr.w	r2, r3, #32
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e007      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d1a2      	bne.n	8003c62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	fe00e800 	.word	0xfe00e800

08003d2c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b10      	cmp	r3, #16
 8003d44:	d151      	bne.n	8003dea <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d46:	e022      	b.n	8003d8e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4e:	d01e      	beq.n	8003d8e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d50:	f7ff f966 	bl	8003020 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <I2C_IsAcknowledgeFailed+0x3a>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d113      	bne.n	8003d8e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f043 0220 	orr.w	r2, r3, #32
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e02e      	b.n	8003dec <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d1d5      	bne.n	8003d48 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2210      	movs	r2, #16
 8003da2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2220      	movs	r2, #32
 8003daa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff fe71 	bl	8003a94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <I2C_IsAcknowledgeFailed+0xc8>)
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	fe00e800 	.word	0xfe00e800

08003df8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	607b      	str	r3, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	4613      	mov	r3, r2
 8003e08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	0d5b      	lsrs	r3, r3, #21
 8003e14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e18:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <I2C_TransferConfig+0x58>)
 8003e1a:	430b      	orrs	r3, r1
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	ea02 0103 	and.w	r1, r2, r3
 8003e22:	897b      	ldrh	r3, [r7, #10]
 8003e24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003e28:	7a7b      	ldrb	r3, [r7, #9]
 8003e2a:	041b      	lsls	r3, r3, #16
 8003e2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	431a      	orrs	r2, r3
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	03ff63ff 	.word	0x03ff63ff

08003e54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d138      	bne.n	8003edc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d101      	bne.n	8003e78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e74:	2302      	movs	r3, #2
 8003e76:	e032      	b.n	8003ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2224      	movs	r2, #36	; 0x24
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0201 	bic.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6819      	ldr	r1, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e000      	b.n	8003ede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d139      	bne.n	8003f74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e033      	b.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2224      	movs	r2, #36	; 0x24
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e000      	b.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f74:	2302      	movs	r3, #2
  }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f94:	d102      	bne.n	8003f9c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9a:	e00b      	b.n	8003fb4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003f9c:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003faa:	d102      	bne.n	8003fb2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fb0:	e000      	b.n	8003fb4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003fb2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40007000 	.word	0x40007000

08003fc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d141      	bne.n	8004056 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fd2:	4b4b      	ldr	r3, [pc, #300]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fde:	d131      	bne.n	8004044 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe0:	4b47      	ldr	r3, [pc, #284]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe6:	4a46      	ldr	r2, [pc, #280]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ff0:	4b43      	ldr	r3, [pc, #268]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ff8:	4a41      	ldr	r2, [pc, #260]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ffe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004000:	4b40      	ldr	r3, [pc, #256]	; (8004104 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2232      	movs	r2, #50	; 0x32
 8004006:	fb02 f303 	mul.w	r3, r2, r3
 800400a:	4a3f      	ldr	r2, [pc, #252]	; (8004108 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	0c9b      	lsrs	r3, r3, #18
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004016:	e002      	b.n	800401e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3b01      	subs	r3, #1
 800401c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800401e:	4b38      	ldr	r3, [pc, #224]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402a:	d102      	bne.n	8004032 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f2      	bne.n	8004018 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004032:	4b33      	ldr	r3, [pc, #204]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d158      	bne.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e057      	b.n	80040f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004044:	4b2e      	ldr	r3, [pc, #184]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404a:	4a2d      	ldr	r2, [pc, #180]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004050:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004054:	e04d      	b.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405c:	d141      	bne.n	80040e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800405e:	4b28      	ldr	r3, [pc, #160]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406a:	d131      	bne.n	80040d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800406c:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004072:	4a23      	ldr	r2, [pc, #140]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004078:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800407c:	4b20      	ldr	r3, [pc, #128]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004084:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800408a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2232      	movs	r2, #50	; 0x32
 8004092:	fb02 f303 	mul.w	r3, r2, r3
 8004096:	4a1c      	ldr	r2, [pc, #112]	; (8004108 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	0c9b      	lsrs	r3, r3, #18
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a2:	e002      	b.n	80040aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b6:	d102      	bne.n	80040be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f2      	bne.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ca:	d112      	bne.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e011      	b.n	80040f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040d6:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040e0:	e007      	b.n	80040f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040e2:	4b07      	ldr	r3, [pc, #28]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040ea:	4a05      	ldr	r2, [pc, #20]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40007000 	.word	0x40007000
 8004104:	20000000 	.word	0x20000000
 8004108:	431bde83 	.word	0x431bde83

0800410c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004110:	4b05      	ldr	r3, [pc, #20]	; (8004128 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4a04      	ldr	r2, [pc, #16]	; (8004128 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800411a:	6053      	str	r3, [r2, #4]
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40007000 	.word	0x40007000

0800412c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	f000 bc16 	b.w	800496c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004140:	4ba0      	ldr	r3, [pc, #640]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 030c 	and.w	r3, r3, #12
 8004148:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414a:	4b9e      	ldr	r3, [pc, #632]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80e4 	beq.w	800432a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_RCC_OscConfig+0x4c>
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	2b0c      	cmp	r3, #12
 800416c:	f040 808b 	bne.w	8004286 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b01      	cmp	r3, #1
 8004174:	f040 8087 	bne.w	8004286 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004178:	4b92      	ldr	r3, [pc, #584]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_OscConfig+0x64>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e3ed      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	4b8b      	ldr	r3, [pc, #556]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d004      	beq.n	80041aa <HAL_RCC_OscConfig+0x7e>
 80041a0:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041a8:	e005      	b.n	80041b6 <HAL_RCC_OscConfig+0x8a>
 80041aa:	4b86      	ldr	r3, [pc, #536]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80041ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d223      	bcs.n	8004202 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fdca 	bl	8004d58 <RCC_SetFlashLatencyFromMSIRange>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e3ce      	b.n	800496c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041ce:	4b7d      	ldr	r3, [pc, #500]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a7c      	ldr	r2, [pc, #496]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80041d4:	f043 0308 	orr.w	r3, r3, #8
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b7a      	ldr	r3, [pc, #488]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	4977      	ldr	r1, [pc, #476]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041ec:	4b75      	ldr	r3, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	4972      	ldr	r1, [pc, #456]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]
 8004200:	e025      	b.n	800424e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004202:	4b70      	ldr	r3, [pc, #448]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a6f      	ldr	r2, [pc, #444]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004208:	f043 0308 	orr.w	r3, r3, #8
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	4b6d      	ldr	r3, [pc, #436]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	496a      	ldr	r1, [pc, #424]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 800421c:	4313      	orrs	r3, r2
 800421e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004220:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	021b      	lsls	r3, r3, #8
 800422e:	4965      	ldr	r1, [pc, #404]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004230:	4313      	orrs	r3, r2
 8004232:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d109      	bne.n	800424e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 fd8a 	bl	8004d58 <RCC_SetFlashLatencyFromMSIRange>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e38e      	b.n	800496c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800424e:	f000 fcbf 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004252:	4602      	mov	r2, r0
 8004254:	4b5b      	ldr	r3, [pc, #364]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	495a      	ldr	r1, [pc, #360]	; (80043c8 <HAL_RCC_OscConfig+0x29c>)
 8004260:	5ccb      	ldrb	r3, [r1, r3]
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	fa22 f303 	lsr.w	r3, r2, r3
 800426a:	4a58      	ldr	r2, [pc, #352]	; (80043cc <HAL_RCC_OscConfig+0x2a0>)
 800426c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800426e:	4b58      	ldr	r3, [pc, #352]	; (80043d0 <HAL_RCC_OscConfig+0x2a4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fe84 	bl	8002f80 <HAL_InitTick>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d052      	beq.n	8004328 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	e372      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d032      	beq.n	80042f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800428e:	4b4d      	ldr	r3, [pc, #308]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a4c      	ldr	r2, [pc, #304]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800429a:	f7fe fec1 	bl	8003020 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042a2:	f7fe febd 	bl	8003020 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e35b      	b.n	800496c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042b4:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042c0:	4b40      	ldr	r3, [pc, #256]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3f      	ldr	r2, [pc, #252]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80042c6:	f043 0308 	orr.w	r3, r3, #8
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	493a      	ldr	r1, [pc, #232]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042de:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	4935      	ldr	r1, [pc, #212]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	604b      	str	r3, [r1, #4]
 80042f2:	e01a      	b.n	800432a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042f4:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a32      	ldr	r2, [pc, #200]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004300:	f7fe fe8e 	bl	8003020 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004308:	f7fe fe8a 	bl	8003020 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e328      	b.n	800496c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800431a:	4b2a      	ldr	r3, [pc, #168]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x1dc>
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004328:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d073      	beq.n	800441e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d005      	beq.n	8004348 <HAL_RCC_OscConfig+0x21c>
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b0c      	cmp	r3, #12
 8004340:	d10e      	bne.n	8004360 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b03      	cmp	r3, #3
 8004346:	d10b      	bne.n	8004360 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004348:	4b1e      	ldr	r3, [pc, #120]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d063      	beq.n	800441c <HAL_RCC_OscConfig+0x2f0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d15f      	bne.n	800441c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e305      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004368:	d106      	bne.n	8004378 <HAL_RCC_OscConfig+0x24c>
 800436a:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e01d      	b.n	80043b4 <HAL_RCC_OscConfig+0x288>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0x270>
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a0c      	ldr	r2, [pc, #48]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e00b      	b.n	80043b4 <HAL_RCC_OscConfig+0x288>
 800439c:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80043a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a05      	ldr	r2, [pc, #20]	; (80043c4 <HAL_RCC_OscConfig+0x298>)
 80043ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01b      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe fe30 	bl	8003020 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c2:	e010      	b.n	80043e6 <HAL_RCC_OscConfig+0x2ba>
 80043c4:	40021000 	.word	0x40021000
 80043c8:	08035a34 	.word	0x08035a34
 80043cc:	20000000 	.word	0x20000000
 80043d0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fe fe24 	bl	8003020 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	; 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e2c2      	b.n	800496c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043e6:	4baf      	ldr	r3, [pc, #700]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x2a8>
 80043f2:	e014      	b.n	800441e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f4:	f7fe fe14 	bl	8003020 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043fc:	f7fe fe10 	bl	8003020 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b64      	cmp	r3, #100	; 0x64
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e2ae      	b.n	800496c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800440e:	4ba5      	ldr	r3, [pc, #660]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x2d0>
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d060      	beq.n	80044ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b04      	cmp	r3, #4
 800442e:	d005      	beq.n	800443c <HAL_RCC_OscConfig+0x310>
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b0c      	cmp	r3, #12
 8004434:	d119      	bne.n	800446a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d116      	bne.n	800446a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800443c:	4b99      	ldr	r3, [pc, #612]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_OscConfig+0x328>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e28b      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004454:	4b93      	ldr	r3, [pc, #588]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	061b      	lsls	r3, r3, #24
 8004462:	4990      	ldr	r1, [pc, #576]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004464:	4313      	orrs	r3, r2
 8004466:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004468:	e040      	b.n	80044ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d023      	beq.n	80044ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004472:	4b8c      	ldr	r3, [pc, #560]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a8b      	ldr	r2, [pc, #556]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800447c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fe fdcf 	bl	8003020 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004486:	f7fe fdcb 	bl	8003020 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e269      	b.n	800496c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004498:	4b82      	ldr	r3, [pc, #520]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b7f      	ldr	r3, [pc, #508]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	497c      	ldr	r1, [pc, #496]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
 80044b8:	e018      	b.n	80044ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	4b7a      	ldr	r3, [pc, #488]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a79      	ldr	r2, [pc, #484]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 80044c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fe fdab 	bl	8003020 <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ce:	f7fe fda7 	bl	8003020 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e245      	b.n	800496c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044e0:	4b70      	ldr	r3, [pc, #448]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d03c      	beq.n	8004572 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01c      	beq.n	800453a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004500:	4b68      	ldr	r3, [pc, #416]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004506:	4a67      	ldr	r2, [pc, #412]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004510:	f7fe fd86 	bl	8003020 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004518:	f7fe fd82 	bl	8003020 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e220      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800452a:	4b5e      	ldr	r3, [pc, #376]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 800452c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0ef      	beq.n	8004518 <HAL_RCC_OscConfig+0x3ec>
 8004538:	e01b      	b.n	8004572 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453a:	4b5a      	ldr	r3, [pc, #360]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 800453c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004540:	4a58      	ldr	r2, [pc, #352]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454a:	f7fe fd69 	bl	8003020 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004552:	f7fe fd65 	bl	8003020 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e203      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004564:	4b4f      	ldr	r3, [pc, #316]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1ef      	bne.n	8004552 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80a6 	beq.w	80046cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004580:	2300      	movs	r3, #0
 8004582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004584:	4b47      	ldr	r3, [pc, #284]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10d      	bne.n	80045ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004590:	4b44      	ldr	r3, [pc, #272]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004594:	4a43      	ldr	r2, [pc, #268]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459a:	6593      	str	r3, [r2, #88]	; 0x58
 800459c:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 800459e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a8:	2301      	movs	r3, #1
 80045aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ac:	4b3e      	ldr	r3, [pc, #248]	; (80046a8 <HAL_RCC_OscConfig+0x57c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d118      	bne.n	80045ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045b8:	4b3b      	ldr	r3, [pc, #236]	; (80046a8 <HAL_RCC_OscConfig+0x57c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a3a      	ldr	r2, [pc, #232]	; (80046a8 <HAL_RCC_OscConfig+0x57c>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045c4:	f7fe fd2c 	bl	8003020 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045cc:	f7fe fd28 	bl	8003020 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e1c6      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045de:	4b32      	ldr	r3, [pc, #200]	; (80046a8 <HAL_RCC_OscConfig+0x57c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d108      	bne.n	8004604 <HAL_RCC_OscConfig+0x4d8>
 80045f2:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045f8:	4a2a      	ldr	r2, [pc, #168]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 80045fa:	f043 0301 	orr.w	r3, r3, #1
 80045fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004602:	e024      	b.n	800464e <HAL_RCC_OscConfig+0x522>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b05      	cmp	r3, #5
 800460a:	d110      	bne.n	800462e <HAL_RCC_OscConfig+0x502>
 800460c:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	4a24      	ldr	r2, [pc, #144]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004614:	f043 0304 	orr.w	r3, r3, #4
 8004618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	4a20      	ldr	r2, [pc, #128]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800462c:	e00f      	b.n	800464e <HAL_RCC_OscConfig+0x522>
 800462e:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004634:	4a1b      	ldr	r2, [pc, #108]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800463e:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004646:	f023 0304 	bic.w	r3, r3, #4
 800464a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004656:	f7fe fce3 	bl	8003020 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800465c:	e00a      	b.n	8004674 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465e:	f7fe fcdf 	bl	8003020 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	f241 3288 	movw	r2, #5000	; 0x1388
 800466c:	4293      	cmp	r3, r2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e17b      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_OscConfig+0x578>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ed      	beq.n	800465e <HAL_RCC_OscConfig+0x532>
 8004682:	e01a      	b.n	80046ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fe fccc 	bl	8003020 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800468a:	e00f      	b.n	80046ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fe fcc8 	bl	8003020 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d906      	bls.n	80046ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e164      	b.n	800496c <HAL_RCC_OscConfig+0x840>
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000
 80046a8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046ac:	4ba8      	ldr	r3, [pc, #672]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1e8      	bne.n	800468c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ba:	7ffb      	ldrb	r3, [r7, #31]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d105      	bne.n	80046cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c0:	4ba3      	ldr	r3, [pc, #652]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	4aa2      	ldr	r2, [pc, #648]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80046c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d03c      	beq.n	8004752 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d01c      	beq.n	800471a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046e0:	4b9b      	ldr	r3, [pc, #620]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80046e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e6:	4a9a      	ldr	r2, [pc, #616]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80046e8:	f043 0301 	orr.w	r3, r3, #1
 80046ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fe fc96 	bl	8003020 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046f8:	f7fe fc92 	bl	8003020 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e130      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800470a:	4b91      	ldr	r3, [pc, #580]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 800470c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ef      	beq.n	80046f8 <HAL_RCC_OscConfig+0x5cc>
 8004718:	e01b      	b.n	8004752 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800471a:	4b8d      	ldr	r3, [pc, #564]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 800471c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004720:	4a8b      	ldr	r2, [pc, #556]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472a:	f7fe fc79 	bl	8003020 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004732:	f7fe fc75 	bl	8003020 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e113      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004744:	4b82      	ldr	r3, [pc, #520]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 8004746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1ef      	bne.n	8004732 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 8107 	beq.w	800496a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	2b02      	cmp	r3, #2
 8004762:	f040 80cb 	bne.w	80048fc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004766:	4b7a      	ldr	r3, [pc, #488]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f003 0203 	and.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	429a      	cmp	r2, r3
 8004778:	d12c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	3b01      	subs	r3, #1
 8004786:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d123      	bne.n	80047d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004796:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d11b      	bne.n	80047d4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d113      	bne.n	80047d4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	085b      	lsrs	r3, r3, #1
 80047b8:	3b01      	subs	r3, #1
 80047ba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047bc:	429a      	cmp	r2, r3
 80047be:	d109      	bne.n	80047d4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	3b01      	subs	r3, #1
 80047ce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d06d      	beq.n	80048b0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2b0c      	cmp	r3, #12
 80047d8:	d068      	beq.n	80048ac <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047da:	4b5d      	ldr	r3, [pc, #372]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d105      	bne.n	80047f2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047e6:	4b5a      	ldr	r3, [pc, #360]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e0ba      	b.n	800496c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047f6:	4b56      	ldr	r3, [pc, #344]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a55      	ldr	r2, [pc, #340]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80047fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004800:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004802:	f7fe fc0d 	bl	8003020 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480a:	f7fe fc09 	bl	8003020 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e0a7      	b.n	800496c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800481c:	4b4c      	ldr	r3, [pc, #304]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004828:	4b49      	ldr	r3, [pc, #292]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	4b49      	ldr	r3, [pc, #292]	; (8004954 <HAL_RCC_OscConfig+0x828>)
 800482e:	4013      	ands	r3, r2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004838:	3a01      	subs	r2, #1
 800483a:	0112      	lsls	r2, r2, #4
 800483c:	4311      	orrs	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004842:	0212      	lsls	r2, r2, #8
 8004844:	4311      	orrs	r1, r2
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800484a:	0852      	lsrs	r2, r2, #1
 800484c:	3a01      	subs	r2, #1
 800484e:	0552      	lsls	r2, r2, #21
 8004850:	4311      	orrs	r1, r2
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004856:	0852      	lsrs	r2, r2, #1
 8004858:	3a01      	subs	r2, #1
 800485a:	0652      	lsls	r2, r2, #25
 800485c:	4311      	orrs	r1, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004862:	06d2      	lsls	r2, r2, #27
 8004864:	430a      	orrs	r2, r1
 8004866:	493a      	ldr	r1, [pc, #232]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 8004868:	4313      	orrs	r3, r2
 800486a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800486c:	4b38      	ldr	r3, [pc, #224]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a37      	ldr	r2, [pc, #220]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 8004872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004876:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004878:	4b35      	ldr	r3, [pc, #212]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a34      	ldr	r2, [pc, #208]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 800487e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004882:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004884:	f7fe fbcc 	bl	8003020 <HAL_GetTick>
 8004888:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488a:	e008      	b.n	800489e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800488c:	f7fe fbc8 	bl	8003020 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e066      	b.n	800496c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800489e:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d0f0      	beq.n	800488c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048aa:	e05e      	b.n	800496a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e05d      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b0:	4b27      	ldr	r3, [pc, #156]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d156      	bne.n	800496a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80048bc:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a23      	ldr	r2, [pc, #140]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80048c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048c8:	4b21      	ldr	r3, [pc, #132]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	4a20      	ldr	r2, [pc, #128]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80048ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048d4:	f7fe fba4 	bl	8003020 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048dc:	f7fe fba0 	bl	8003020 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e03e      	b.n	800496c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048ee:	4b18      	ldr	r3, [pc, #96]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x7b0>
 80048fa:	e036      	b.n	800496a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d031      	beq.n	8004966 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004902:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 8004908:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800490c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d105      	bne.n	8004926 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800491a:	4b0d      	ldr	r3, [pc, #52]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4a0c      	ldr	r2, [pc, #48]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 8004920:	f023 0303 	bic.w	r3, r3, #3
 8004924:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	4a09      	ldr	r2, [pc, #36]	; (8004950 <HAL_RCC_OscConfig+0x824>)
 800492c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004934:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004936:	f7fe fb73 	bl	8003020 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800493c:	e00c      	b.n	8004958 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493e:	f7fe fb6f 	bl	8003020 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d905      	bls.n	8004958 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e00d      	b.n	800496c <HAL_RCC_OscConfig+0x840>
 8004950:	40021000 	.word	0x40021000
 8004954:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_OscConfig+0x848>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ec      	bne.n	800493e <HAL_RCC_OscConfig+0x812>
 8004964:	e001      	b.n	800496a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3720      	adds	r7, #32
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40021000 	.word	0x40021000

08004978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e10f      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004990:	4b89      	ldr	r3, [pc, #548]	; (8004bb8 <HAL_RCC_ClockConfig+0x240>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d910      	bls.n	80049c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800499e:	4b86      	ldr	r3, [pc, #536]	; (8004bb8 <HAL_RCC_ClockConfig+0x240>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 020f 	bic.w	r2, r3, #15
 80049a6:	4984      	ldr	r1, [pc, #528]	; (8004bb8 <HAL_RCC_ClockConfig+0x240>)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b82      	ldr	r3, [pc, #520]	; (8004bb8 <HAL_RCC_ClockConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0f7      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8089 	beq.w	8004ae0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d133      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d6:	4b79      	ldr	r3, [pc, #484]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0e4      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80049e6:	f000 fa11 	bl	8004e0c <RCC_GetSysClockFreqFromPLLSource>
 80049ea:	4603      	mov	r3, r0
 80049ec:	4a74      	ldr	r2, [pc, #464]	; (8004bc0 <HAL_RCC_ClockConfig+0x248>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d955      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80049f2:	4b72      	ldr	r3, [pc, #456]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10a      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049fe:	4b6f      	ldr	r3, [pc, #444]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a06:	4a6d      	ldr	r2, [pc, #436]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a0e:	2380      	movs	r3, #128	; 0x80
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e044      	b.n	8004a9e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d03e      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x126>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d13a      	bne.n	8004a9e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a28:	4b64      	ldr	r3, [pc, #400]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a30:	4a62      	ldr	r2, [pc, #392]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a36:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e02f      	b.n	8004a9e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a46:	4b5d      	ldr	r3, [pc, #372]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d115      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0ac      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d107      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a5e:	4b57      	ldr	r3, [pc, #348]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e0a0      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a6e:	4b53      	ldr	r3, [pc, #332]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e098      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004a7e:	f000 f8a7 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4a4e      	ldr	r2, [pc, #312]	; (8004bc0 <HAL_RCC_ClockConfig+0x248>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d909      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a8a:	4b4c      	ldr	r3, [pc, #304]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a92:	4a4a      	ldr	r2, [pc, #296]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004a9a:	2380      	movs	r3, #128	; 0x80
 8004a9c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a9e:	4b47      	ldr	r3, [pc, #284]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f023 0203 	bic.w	r2, r3, #3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4944      	ldr	r1, [pc, #272]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab0:	f7fe fab6 	bl	8003020 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	e00a      	b.n	8004ace <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab8:	f7fe fab2 	bl	8003020 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e070      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ace:	4b3b      	ldr	r3, [pc, #236]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 020c 	and.w	r2, r3, #12
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d1eb      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d009      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aec:	4b33      	ldr	r3, [pc, #204]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4930      	ldr	r1, [pc, #192]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b80      	cmp	r3, #128	; 0x80
 8004b04:	d105      	bne.n	8004b12 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b06:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	4a2c      	ldr	r2, [pc, #176]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b10:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b12:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <HAL_RCC_ClockConfig+0x240>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d210      	bcs.n	8004b42 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b20:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <HAL_RCC_ClockConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f023 020f 	bic.w	r2, r3, #15
 8004b28:	4923      	ldr	r1, [pc, #140]	; (8004bb8 <HAL_RCC_ClockConfig+0x240>)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b30:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <HAL_RCC_ClockConfig+0x240>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d001      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e036      	b.n	8004bb0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d008      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	4918      	ldr	r1, [pc, #96]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0308 	and.w	r3, r3, #8
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b6c:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4910      	ldr	r1, [pc, #64]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b80:	f000 f826 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8004b84:	4602      	mov	r2, r0
 8004b86:	4b0d      	ldr	r3, [pc, #52]	; (8004bbc <HAL_RCC_ClockConfig+0x244>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	490c      	ldr	r1, [pc, #48]	; (8004bc4 <HAL_RCC_ClockConfig+0x24c>)
 8004b92:	5ccb      	ldrb	r3, [r1, r3]
 8004b94:	f003 031f 	and.w	r3, r3, #31
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9c:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <HAL_RCC_ClockConfig+0x250>)
 8004b9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <HAL_RCC_ClockConfig+0x254>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fe f9eb 	bl	8002f80 <HAL_InitTick>
 8004baa:	4603      	mov	r3, r0
 8004bac:	73fb      	strb	r3, [r7, #15]

  return status;
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40022000 	.word	0x40022000
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	04c4b400 	.word	0x04c4b400
 8004bc4:	08035a34 	.word	0x08035a34
 8004bc8:	20000000 	.word	0x20000000
 8004bcc:	20000004 	.word	0x20000004

08004bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bde:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004be8:	4b3b      	ldr	r3, [pc, #236]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x34>
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b0c      	cmp	r3, #12
 8004bfc:	d121      	bne.n	8004c42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d11e      	bne.n	8004c42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c04:	4b34      	ldr	r3, [pc, #208]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d107      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c10:	4b31      	ldr	r3, [pc, #196]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c16:	0a1b      	lsrs	r3, r3, #8
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	61fb      	str	r3, [r7, #28]
 8004c1e:	e005      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c20:	4b2d      	ldr	r3, [pc, #180]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	091b      	lsrs	r3, r3, #4
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c2c:	4a2b      	ldr	r2, [pc, #172]	; (8004cdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10d      	bne.n	8004c58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d102      	bne.n	8004c4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c4a:	61bb      	str	r3, [r7, #24]
 8004c4c:	e004      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c54:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	2b0c      	cmp	r3, #12
 8004c5c:	d134      	bne.n	8004cc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c5e:	4b1e      	ldr	r3, [pc, #120]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d003      	beq.n	8004c76 <HAL_RCC_GetSysClockFreq+0xa6>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d003      	beq.n	8004c7c <HAL_RCC_GetSysClockFreq+0xac>
 8004c74:	e005      	b.n	8004c82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c76:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c78:	617b      	str	r3, [r7, #20]
      break;
 8004c7a:	e005      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c7e:	617b      	str	r3, [r7, #20]
      break;
 8004c80:	e002      	b.n	8004c88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	617b      	str	r3, [r7, #20]
      break;
 8004c86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c88:	4b13      	ldr	r3, [pc, #76]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	3301      	adds	r3, #1
 8004c94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	0a1b      	lsrs	r3, r3, #8
 8004c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	fb02 f203 	mul.w	r2, r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cae:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	0e5b      	lsrs	r3, r3, #25
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	3301      	adds	r3, #1
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cc8:	69bb      	ldr	r3, [r7, #24]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3724      	adds	r7, #36	; 0x24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	08035a4c 	.word	0x08035a4c
 8004ce0:	00f42400 	.word	0x00f42400
 8004ce4:	007a1200 	.word	0x007a1200

08004ce8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <HAL_RCC_GetHCLKFreq+0x14>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000000 	.word	0x20000000

08004d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d04:	f7ff fff0 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	4904      	ldr	r1, [pc, #16]	; (8004d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d16:	5ccb      	ldrb	r3, [r1, r3]
 8004d18:	f003 031f 	and.w	r3, r3, #31
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000
 8004d28:	08035a44 	.word	0x08035a44

08004d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d30:	f7ff ffda 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d34:	4602      	mov	r2, r0
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	0adb      	lsrs	r3, r3, #11
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	4904      	ldr	r1, [pc, #16]	; (8004d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d42:	5ccb      	ldrb	r3, [r1, r3]
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40021000 	.word	0x40021000
 8004d54:	08035a44 	.word	0x08035a44

08004d58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d60:	2300      	movs	r3, #0
 8004d62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d64:	4b27      	ldr	r3, [pc, #156]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d70:	f7ff f908 	bl	8003f84 <HAL_PWREx_GetVoltageRange>
 8004d74:	6178      	str	r0, [r7, #20]
 8004d76:	e014      	b.n	8004da2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d78:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	4a21      	ldr	r2, [pc, #132]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d82:	6593      	str	r3, [r2, #88]	; 0x58
 8004d84:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d90:	f7ff f8f8 	bl	8003f84 <HAL_PWREx_GetVoltageRange>
 8004d94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d96:	4b1b      	ldr	r3, [pc, #108]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	4a1a      	ldr	r2, [pc, #104]	; (8004e04 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004da8:	d10b      	bne.n	8004dc2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b80      	cmp	r3, #128	; 0x80
 8004dae:	d913      	bls.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2ba0      	cmp	r3, #160	; 0xa0
 8004db4:	d902      	bls.n	8004dbc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004db6:	2302      	movs	r3, #2
 8004db8:	613b      	str	r3, [r7, #16]
 8004dba:	e00d      	b.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	e00a      	b.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc6:	d902      	bls.n	8004dce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004dc8:	2302      	movs	r3, #2
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	e004      	b.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b70      	cmp	r3, #112	; 0x70
 8004dd2:	d101      	bne.n	8004dd8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f023 020f 	bic.w	r2, r3, #15
 8004de0:	4909      	ldr	r1, [pc, #36]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004de8:	4b07      	ldr	r3, [pc, #28]	; (8004e08 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 030f 	and.w	r3, r3, #15
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40021000 	.word	0x40021000
 8004e08:	40022000 	.word	0x40022000

08004e0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004e16:	4b2d      	ldr	r3, [pc, #180]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d118      	bne.n	8004e54 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e22:	4b2a      	ldr	r3, [pc, #168]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d107      	bne.n	8004e3e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e2e:	4b27      	ldr	r3, [pc, #156]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e34:	0a1b      	lsrs	r3, r3, #8
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e005      	b.n	8004e4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e3e:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	091b      	lsrs	r3, r3, #4
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e52:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d003      	beq.n	8004e6c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d003      	beq.n	8004e72 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8004e6a:	e005      	b.n	8004e78 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004e6c:	4b19      	ldr	r3, [pc, #100]	; (8004ed4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004e6e:	613b      	str	r3, [r7, #16]
    break;
 8004e70:	e005      	b.n	8004e7e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004e72:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004e74:	613b      	str	r3, [r7, #16]
    break;
 8004e76:	e002      	b.n	8004e7e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	613b      	str	r3, [r7, #16]
    break;
 8004e7c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	091b      	lsrs	r3, r3, #4
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	0a1b      	lsrs	r3, r3, #8
 8004e92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	fb02 f203 	mul.w	r2, r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ea4:	4b09      	ldr	r3, [pc, #36]	; (8004ecc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	0e5b      	lsrs	r3, r3, #25
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	3301      	adds	r3, #1
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004ebe:	683b      	ldr	r3, [r7, #0]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	08035a4c 	.word	0x08035a4c
 8004ed4:	00f42400 	.word	0x00f42400
 8004ed8:	007a1200 	.word	0x007a1200

08004edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ee8:	2300      	movs	r3, #0
 8004eea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d040      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efc:	2b80      	cmp	r3, #128	; 0x80
 8004efe:	d02a      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f00:	2b80      	cmp	r3, #128	; 0x80
 8004f02:	d825      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f04:	2b60      	cmp	r3, #96	; 0x60
 8004f06:	d026      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004f08:	2b60      	cmp	r3, #96	; 0x60
 8004f0a:	d821      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d006      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d81d      	bhi.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	d010      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004f1c:	e018      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f1e:	4b89      	ldr	r3, [pc, #548]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4a88      	ldr	r2, [pc, #544]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f28:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f2a:	e015      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fb02 	bl	800553c <RCCEx_PLLSAI1_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f3c:	e00c      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	3320      	adds	r3, #32
 8004f42:	2100      	movs	r1, #0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fbed 	bl	8005724 <RCCEx_PLLSAI2_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f4e:	e003      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	74fb      	strb	r3, [r7, #19]
      break;
 8004f54:	e000      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f5e:	4b79      	ldr	r3, [pc, #484]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f64:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6c:	4975      	ldr	r1, [pc, #468]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f74:	e001      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d047      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8e:	d030      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f94:	d82a      	bhi.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f9a:	d02a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa0:	d824      	bhi.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa6:	d008      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fac:	d81e      	bhi.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb6:	d010      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004fb8:	e018      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fba:	4b62      	ldr	r3, [pc, #392]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	4a61      	ldr	r2, [pc, #388]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fc6:	e015      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fab4 	bl	800553c <RCCEx_PLLSAI1_Config>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fd8:	e00c      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3320      	adds	r3, #32
 8004fde:	2100      	movs	r1, #0
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fb9f 	bl	8005724 <RCCEx_PLLSAI2_Config>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fea:	e003      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	74fb      	strb	r3, [r7, #19]
      break;
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10b      	bne.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ffa:	4b52      	ldr	r3, [pc, #328]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	494e      	ldr	r1, [pc, #312]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005010:	e001      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005012:	7cfb      	ldrb	r3, [r7, #19]
 8005014:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	f000 809f 	beq.w	8005162 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005024:	2300      	movs	r3, #0
 8005026:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005028:	4b46      	ldr	r3, [pc, #280]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800502a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800502c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005038:	2300      	movs	r3, #0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00d      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800503e:	4b41      	ldr	r3, [pc, #260]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005042:	4a40      	ldr	r2, [pc, #256]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005048:	6593      	str	r3, [r2, #88]	; 0x58
 800504a:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005052:	60bb      	str	r3, [r7, #8]
 8005054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005056:	2301      	movs	r3, #1
 8005058:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800505a:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3a      	ldr	r2, [pc, #232]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005066:	f7fd ffdb 	bl	8003020 <HAL_GetTick>
 800506a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800506c:	e009      	b.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506e:	f7fd ffd7 	bl	8003020 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d902      	bls.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	74fb      	strb	r3, [r7, #19]
        break;
 8005080:	e005      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005082:	4b31      	ldr	r3, [pc, #196]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0ef      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d15b      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005094:	4b2b      	ldr	r3, [pc, #172]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01f      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d019      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80050b2:	4b24      	ldr	r3, [pc, #144]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050be:	4b21      	ldr	r3, [pc, #132]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c4:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050ce:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d4:	4a1b      	ldr	r2, [pc, #108]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050de:	4a19      	ldr	r2, [pc, #100]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d016      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f0:	f7fd ff96 	bl	8003020 <HAL_GetTick>
 80050f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f6:	e00b      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f8:	f7fd ff92 	bl	8003020 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	f241 3288 	movw	r2, #5000	; 0x1388
 8005106:	4293      	cmp	r3, r2
 8005108:	d902      	bls.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	74fb      	strb	r3, [r7, #19]
            break;
 800510e:	e006      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0ec      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800511e:	7cfb      	ldrb	r3, [r7, #19]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10c      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005134:	4903      	ldr	r1, [pc, #12]	; (8005144 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800513c:	e008      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800513e:	7cfb      	ldrb	r3, [r7, #19]
 8005140:	74bb      	strb	r3, [r7, #18]
 8005142:	e005      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005144:	40021000 	.word	0x40021000
 8005148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	7cfb      	ldrb	r3, [r7, #19]
 800514e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005150:	7c7b      	ldrb	r3, [r7, #17]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d105      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005156:	4ba0      	ldr	r3, [pc, #640]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800515a:	4a9f      	ldr	r2, [pc, #636]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005160:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800516e:	4b9a      	ldr	r3, [pc, #616]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	f023 0203 	bic.w	r2, r3, #3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517c:	4996      	ldr	r1, [pc, #600]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005190:	4b91      	ldr	r3, [pc, #580]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005196:	f023 020c 	bic.w	r2, r3, #12
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	498e      	ldr	r1, [pc, #568]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0304 	and.w	r3, r3, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80051b2:	4b89      	ldr	r3, [pc, #548]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c0:	4985      	ldr	r1, [pc, #532]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051d4:	4b80      	ldr	r3, [pc, #512]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e2:	497d      	ldr	r1, [pc, #500]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051f6:	4b78      	ldr	r3, [pc, #480]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005204:	4974      	ldr	r1, [pc, #464]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005218:	4b6f      	ldr	r3, [pc, #444]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005226:	496c      	ldr	r1, [pc, #432]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800523a:	4b67      	ldr	r3, [pc, #412]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005248:	4963      	ldr	r1, [pc, #396]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800525c:	4b5e      	ldr	r3, [pc, #376]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800526a:	495b      	ldr	r1, [pc, #364]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800527e:	4b56      	ldr	r3, [pc, #344]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005284:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528c:	4952      	ldr	r1, [pc, #328]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80052a0:	4b4d      	ldr	r3, [pc, #308]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ae:	494a      	ldr	r1, [pc, #296]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052c2:	4b45      	ldr	r3, [pc, #276]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	4941      	ldr	r1, [pc, #260]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80052e4:	4b3c      	ldr	r3, [pc, #240]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ea:	f023 0203 	bic.w	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f2:	4939      	ldr	r1, [pc, #228]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d028      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005306:	4b34      	ldr	r3, [pc, #208]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005314:	4930      	ldr	r1, [pc, #192]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005324:	d106      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005326:	4b2c      	ldr	r3, [pc, #176]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	4a2b      	ldr	r2, [pc, #172]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800532c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005330:	60d3      	str	r3, [r2, #12]
 8005332:	e011      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800533c:	d10c      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	3304      	adds	r3, #4
 8005342:	2101      	movs	r1, #1
 8005344:	4618      	mov	r0, r3
 8005346:	f000 f8f9 	bl	800553c <RCCEx_PLLSAI1_Config>
 800534a:	4603      	mov	r3, r0
 800534c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800534e:	7cfb      	ldrb	r3, [r7, #19]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d04d      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800536c:	d108      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800536e:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005370:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800537a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800537e:	e012      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005380:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005382:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005386:	4a14      	ldr	r2, [pc, #80]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800538c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005390:	4b11      	ldr	r3, [pc, #68]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800539e:	490e      	ldr	r1, [pc, #56]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ae:	d106      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b0:	4b09      	ldr	r3, [pc, #36]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a08      	ldr	r2, [pc, #32]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ba:	60d3      	str	r3, [r2, #12]
 80053bc:	e020      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c6:	d109      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053c8:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a02      	ldr	r2, [pc, #8]	; (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d2:	60d3      	str	r3, [r2, #12]
 80053d4:	e014      	b.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053e4:	d10c      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3304      	adds	r3, #4
 80053ea:	2101      	movs	r1, #1
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 f8a5 	bl	800553c <RCCEx_PLLSAI1_Config>
 80053f2:	4603      	mov	r3, r0
 80053f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053f6:	7cfb      	ldrb	r3, [r7, #19]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80053fc:	7cfb      	ldrb	r3, [r7, #19]
 80053fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d028      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800540c:	4b4a      	ldr	r3, [pc, #296]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541a:	4947      	ldr	r1, [pc, #284]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800542a:	d106      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800542c:	4b42      	ldr	r3, [pc, #264]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	4a41      	ldr	r2, [pc, #260]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005436:	60d3      	str	r3, [r2, #12]
 8005438:	e011      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800543e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005442:	d10c      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	2101      	movs	r1, #1
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f876 	bl	800553c <RCCEx_PLLSAI1_Config>
 8005450:	4603      	mov	r3, r0
 8005452:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005454:	7cfb      	ldrb	r3, [r7, #19]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800545a:	7cfb      	ldrb	r3, [r7, #19]
 800545c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01e      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800546a:	4b33      	ldr	r3, [pc, #204]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800547a:	492f      	ldr	r1, [pc, #188]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800548c:	d10c      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3304      	adds	r3, #4
 8005492:	2102      	movs	r1, #2
 8005494:	4618      	mov	r0, r3
 8005496:	f000 f851 	bl	800553c <RCCEx_PLLSAI1_Config>
 800549a:	4603      	mov	r3, r0
 800549c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800549e:	7cfb      	ldrb	r3, [r7, #19]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054b4:	4b20      	ldr	r3, [pc, #128]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ba:	f023 0204 	bic.w	r2, r3, #4
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c4:	491c      	ldr	r1, [pc, #112]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00b      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80054d8:	4b17      	ldr	r3, [pc, #92]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054de:	f023 0218 	bic.w	r2, r3, #24
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e8:	4913      	ldr	r1, [pc, #76]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d017      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005502:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800550c:	490a      	ldr	r1, [pc, #40]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800551a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800551e:	d105      	bne.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005520:	4b05      	ldr	r3, [pc, #20]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4a04      	ldr	r2, [pc, #16]	; (8005538 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800552a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800552c:	7cbb      	ldrb	r3, [r7, #18]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40021000 	.word	0x40021000

0800553c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005546:	2300      	movs	r3, #0
 8005548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800554a:	4b72      	ldr	r3, [pc, #456]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f003 0303 	and.w	r3, r3, #3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00e      	beq.n	8005574 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005556:	4b6f      	ldr	r3, [pc, #444]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0203 	and.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d103      	bne.n	800556e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
       ||
 800556a:	2b00      	cmp	r3, #0
 800556c:	d142      	bne.n	80055f4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	73fb      	strb	r3, [r7, #15]
 8005572:	e03f      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b03      	cmp	r3, #3
 800557a:	d018      	beq.n	80055ae <RCCEx_PLLSAI1_Config+0x72>
 800557c:	2b03      	cmp	r3, #3
 800557e:	d825      	bhi.n	80055cc <RCCEx_PLLSAI1_Config+0x90>
 8005580:	2b01      	cmp	r3, #1
 8005582:	d002      	beq.n	800558a <RCCEx_PLLSAI1_Config+0x4e>
 8005584:	2b02      	cmp	r3, #2
 8005586:	d009      	beq.n	800559c <RCCEx_PLLSAI1_Config+0x60>
 8005588:	e020      	b.n	80055cc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800558a:	4b62      	ldr	r3, [pc, #392]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d11d      	bne.n	80055d2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800559a:	e01a      	b.n	80055d2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800559c:	4b5d      	ldr	r3, [pc, #372]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d116      	bne.n	80055d6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055ac:	e013      	b.n	80055d6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055ae:	4b59      	ldr	r3, [pc, #356]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055ba:	4b56      	ldr	r3, [pc, #344]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055ca:	e006      	b.n	80055da <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      break;
 80055d0:	e004      	b.n	80055dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80055d2:	bf00      	nop
 80055d4:	e002      	b.n	80055dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80055d6:	bf00      	nop
 80055d8:	e000      	b.n	80055dc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80055da:	bf00      	nop
    }

    if(status == HAL_OK)
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d108      	bne.n	80055f4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80055e2:	4b4c      	ldr	r3, [pc, #304]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f023 0203 	bic.w	r2, r3, #3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4949      	ldr	r1, [pc, #292]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f040 8086 	bne.w	8005708 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80055fc:	4b45      	ldr	r3, [pc, #276]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a44      	ldr	r2, [pc, #272]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005602:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005608:	f7fd fd0a 	bl	8003020 <HAL_GetTick>
 800560c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800560e:	e009      	b.n	8005624 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005610:	f7fd fd06 	bl	8003020 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d902      	bls.n	8005624 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	73fb      	strb	r3, [r7, #15]
        break;
 8005622:	e005      	b.n	8005630 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005624:	4b3b      	ldr	r3, [pc, #236]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1ef      	bne.n	8005610 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d168      	bne.n	8005708 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d113      	bne.n	8005664 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800563c:	4b35      	ldr	r3, [pc, #212]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	4b35      	ldr	r3, [pc, #212]	; (8005718 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005642:	4013      	ands	r3, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6892      	ldr	r2, [r2, #8]
 8005648:	0211      	lsls	r1, r2, #8
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	68d2      	ldr	r2, [r2, #12]
 800564e:	06d2      	lsls	r2, r2, #27
 8005650:	4311      	orrs	r1, r2
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6852      	ldr	r2, [r2, #4]
 8005656:	3a01      	subs	r2, #1
 8005658:	0112      	lsls	r2, r2, #4
 800565a:	430a      	orrs	r2, r1
 800565c:	492d      	ldr	r1, [pc, #180]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800565e:	4313      	orrs	r3, r2
 8005660:	610b      	str	r3, [r1, #16]
 8005662:	e02d      	b.n	80056c0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d115      	bne.n	8005696 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800566a:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	4b2b      	ldr	r3, [pc, #172]	; (800571c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005670:	4013      	ands	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6892      	ldr	r2, [r2, #8]
 8005676:	0211      	lsls	r1, r2, #8
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6912      	ldr	r2, [r2, #16]
 800567c:	0852      	lsrs	r2, r2, #1
 800567e:	3a01      	subs	r2, #1
 8005680:	0552      	lsls	r2, r2, #21
 8005682:	4311      	orrs	r1, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6852      	ldr	r2, [r2, #4]
 8005688:	3a01      	subs	r2, #1
 800568a:	0112      	lsls	r2, r2, #4
 800568c:	430a      	orrs	r2, r1
 800568e:	4921      	ldr	r1, [pc, #132]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005690:	4313      	orrs	r3, r2
 8005692:	610b      	str	r3, [r1, #16]
 8005694:	e014      	b.n	80056c0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005696:	4b1f      	ldr	r3, [pc, #124]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	4b21      	ldr	r3, [pc, #132]	; (8005720 <RCCEx_PLLSAI1_Config+0x1e4>)
 800569c:	4013      	ands	r3, r2
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6892      	ldr	r2, [r2, #8]
 80056a2:	0211      	lsls	r1, r2, #8
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6952      	ldr	r2, [r2, #20]
 80056a8:	0852      	lsrs	r2, r2, #1
 80056aa:	3a01      	subs	r2, #1
 80056ac:	0652      	lsls	r2, r2, #25
 80056ae:	4311      	orrs	r1, r2
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6852      	ldr	r2, [r2, #4]
 80056b4:	3a01      	subs	r2, #1
 80056b6:	0112      	lsls	r2, r2, #4
 80056b8:	430a      	orrs	r2, r1
 80056ba:	4916      	ldr	r1, [pc, #88]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056c0:	4b14      	ldr	r3, [pc, #80]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a13      	ldr	r2, [pc, #76]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056cc:	f7fd fca8 	bl	8003020 <HAL_GetTick>
 80056d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056d2:	e009      	b.n	80056e8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056d4:	f7fd fca4 	bl	8003020 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d902      	bls.n	80056e8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	73fb      	strb	r3, [r7, #15]
          break;
 80056e6:	e005      	b.n	80056f4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0ef      	beq.n	80056d4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d106      	bne.n	8005708 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80056fa:	4b06      	ldr	r3, [pc, #24]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	4904      	ldr	r1, [pc, #16]	; (8005714 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005704:	4313      	orrs	r3, r2
 8005706:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	40021000 	.word	0x40021000
 8005718:	07ff800f 	.word	0x07ff800f
 800571c:	ff9f800f 	.word	0xff9f800f
 8005720:	f9ff800f 	.word	0xf9ff800f

08005724 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005732:	4b72      	ldr	r3, [pc, #456]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00e      	beq.n	800575c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800573e:	4b6f      	ldr	r3, [pc, #444]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0203 	and.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d103      	bne.n	8005756 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
       ||
 8005752:	2b00      	cmp	r3, #0
 8005754:	d142      	bne.n	80057dc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
 800575a:	e03f      	b.n	80057dc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b03      	cmp	r3, #3
 8005762:	d018      	beq.n	8005796 <RCCEx_PLLSAI2_Config+0x72>
 8005764:	2b03      	cmp	r3, #3
 8005766:	d825      	bhi.n	80057b4 <RCCEx_PLLSAI2_Config+0x90>
 8005768:	2b01      	cmp	r3, #1
 800576a:	d002      	beq.n	8005772 <RCCEx_PLLSAI2_Config+0x4e>
 800576c:	2b02      	cmp	r3, #2
 800576e:	d009      	beq.n	8005784 <RCCEx_PLLSAI2_Config+0x60>
 8005770:	e020      	b.n	80057b4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005772:	4b62      	ldr	r3, [pc, #392]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d11d      	bne.n	80057ba <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005782:	e01a      	b.n	80057ba <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005784:	4b5d      	ldr	r3, [pc, #372]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578c:	2b00      	cmp	r3, #0
 800578e:	d116      	bne.n	80057be <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005794:	e013      	b.n	80057be <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005796:	4b59      	ldr	r3, [pc, #356]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10f      	bne.n	80057c2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057a2:	4b56      	ldr	r3, [pc, #344]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d109      	bne.n	80057c2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057b2:	e006      	b.n	80057c2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	73fb      	strb	r3, [r7, #15]
      break;
 80057b8:	e004      	b.n	80057c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80057ba:	bf00      	nop
 80057bc:	e002      	b.n	80057c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80057c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d108      	bne.n	80057dc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80057ca:	4b4c      	ldr	r3, [pc, #304]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f023 0203 	bic.w	r2, r3, #3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4949      	ldr	r1, [pc, #292]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f040 8086 	bne.w	80058f0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80057e4:	4b45      	ldr	r3, [pc, #276]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a44      	ldr	r2, [pc, #272]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f0:	f7fd fc16 	bl	8003020 <HAL_GetTick>
 80057f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80057f6:	e009      	b.n	800580c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057f8:	f7fd fc12 	bl	8003020 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d902      	bls.n	800580c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	73fb      	strb	r3, [r7, #15]
        break;
 800580a:	e005      	b.n	8005818 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800580c:	4b3b      	ldr	r3, [pc, #236]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1ef      	bne.n	80057f8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d168      	bne.n	80058f0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d113      	bne.n	800584c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005824:	4b35      	ldr	r3, [pc, #212]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	4b35      	ldr	r3, [pc, #212]	; (8005900 <RCCEx_PLLSAI2_Config+0x1dc>)
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6892      	ldr	r2, [r2, #8]
 8005830:	0211      	lsls	r1, r2, #8
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68d2      	ldr	r2, [r2, #12]
 8005836:	06d2      	lsls	r2, r2, #27
 8005838:	4311      	orrs	r1, r2
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	6852      	ldr	r2, [r2, #4]
 800583e:	3a01      	subs	r2, #1
 8005840:	0112      	lsls	r2, r2, #4
 8005842:	430a      	orrs	r2, r1
 8005844:	492d      	ldr	r1, [pc, #180]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005846:	4313      	orrs	r3, r2
 8005848:	614b      	str	r3, [r1, #20]
 800584a:	e02d      	b.n	80058a8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d115      	bne.n	800587e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005852:	4b2a      	ldr	r3, [pc, #168]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	4b2b      	ldr	r3, [pc, #172]	; (8005904 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005858:	4013      	ands	r3, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6892      	ldr	r2, [r2, #8]
 800585e:	0211      	lsls	r1, r2, #8
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6912      	ldr	r2, [r2, #16]
 8005864:	0852      	lsrs	r2, r2, #1
 8005866:	3a01      	subs	r2, #1
 8005868:	0552      	lsls	r2, r2, #21
 800586a:	4311      	orrs	r1, r2
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6852      	ldr	r2, [r2, #4]
 8005870:	3a01      	subs	r2, #1
 8005872:	0112      	lsls	r2, r2, #4
 8005874:	430a      	orrs	r2, r1
 8005876:	4921      	ldr	r1, [pc, #132]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005878:	4313      	orrs	r3, r2
 800587a:	614b      	str	r3, [r1, #20]
 800587c:	e014      	b.n	80058a8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800587e:	4b1f      	ldr	r3, [pc, #124]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 8005880:	695a      	ldr	r2, [r3, #20]
 8005882:	4b21      	ldr	r3, [pc, #132]	; (8005908 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005884:	4013      	ands	r3, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6892      	ldr	r2, [r2, #8]
 800588a:	0211      	lsls	r1, r2, #8
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6952      	ldr	r2, [r2, #20]
 8005890:	0852      	lsrs	r2, r2, #1
 8005892:	3a01      	subs	r2, #1
 8005894:	0652      	lsls	r2, r2, #25
 8005896:	4311      	orrs	r1, r2
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6852      	ldr	r2, [r2, #4]
 800589c:	3a01      	subs	r2, #1
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	430a      	orrs	r2, r1
 80058a2:	4916      	ldr	r1, [pc, #88]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058a8:	4b14      	ldr	r3, [pc, #80]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a13      	ldr	r2, [pc, #76]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80058ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b4:	f7fd fbb4 	bl	8003020 <HAL_GetTick>
 80058b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058ba:	e009      	b.n	80058d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058bc:	f7fd fbb0 	bl	8003020 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d902      	bls.n	80058d0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	73fb      	strb	r3, [r7, #15]
          break;
 80058ce:	e005      	b.n	80058dc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0ef      	beq.n	80058bc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	4904      	ldr	r1, [pc, #16]	; (80058fc <RCCEx_PLLSAI2_Config+0x1d8>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40021000 	.word	0x40021000
 8005900:	07ff800f 	.word	0x07ff800f
 8005904:	ff9f800f 	.word	0xff9f800f
 8005908:	f9ff800f 	.word	0xf9ff800f

0800590c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e042      	b.n	80059a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7fd f977 	bl	8002c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2224      	movs	r2, #36	; 0x24
 800593a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0201 	bic.w	r2, r2, #1
 800594c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f994 	bl	8005c7c <UART_SetConfig>
 8005954:	4603      	mov	r3, r0
 8005956:	2b01      	cmp	r3, #1
 8005958:	d101      	bne.n	800595e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e022      	b.n	80059a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fc58 	bl	800621c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800597a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800598a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fcdf 	bl	8006360 <UART_CheckIdleState>
 80059a2:	4603      	mov	r3, r0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08a      	sub	sp, #40	; 0x28
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	603b      	str	r3, [r7, #0]
 80059b8:	4613      	mov	r3, r2
 80059ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	f040 8084 	bne.w	8005ad0 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_UART_Transmit+0x28>
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e07c      	b.n	8005ad2 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_UART_Transmit+0x3a>
 80059e2:	2302      	movs	r3, #2
 80059e4:	e075      	b.n	8005ad2 <HAL_UART_Transmit+0x126>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2221      	movs	r2, #33	; 0x21
 80059fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80059fe:	f7fd fb0f 	bl	8003020 <HAL_GetTick>
 8005a02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	88fa      	ldrh	r2, [r7, #6]
 8005a08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1c:	d108      	bne.n	8005a30 <HAL_UART_Transmit+0x84>
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005a26:	2300      	movs	r3, #0
 8005a28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	e003      	b.n	8005a38 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005a40:	e02d      	b.n	8005a9e <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2180      	movs	r1, #128	; 0x80
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 fccf 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e03a      	b.n	8005ad2 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	881a      	ldrh	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a6e:	b292      	uxth	r2, r2
 8005a70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	3302      	adds	r3, #2
 8005a76:	61bb      	str	r3, [r7, #24]
 8005a78:	e008      	b.n	8005a8c <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	781a      	ldrb	r2, [r3, #0]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	b292      	uxth	r2, r2
 8005a84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1cb      	bne.n	8005a42 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2140      	movs	r1, #64	; 0x40
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fc9b 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e006      	b.n	8005ad2 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e000      	b.n	8005ad2 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005ad0:	2302      	movs	r3, #2
  }
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3720      	adds	r7, #32
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b08a      	sub	sp, #40	; 0x28
 8005ade:	af02      	add	r7, sp, #8
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	603b      	str	r3, [r7, #0]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	f040 80be 	bne.w	8005c72 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_UART_Receive+0x28>
 8005afc:	88fb      	ldrh	r3, [r7, #6]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e0b6      	b.n	8005c74 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Receive+0x3a>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e0af      	b.n	8005c74 <HAL_UART_Receive+0x19a>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2222      	movs	r2, #34	; 0x22
 8005b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005b2c:	f7fd fa78 	bl	8003020 <HAL_GetTick>
 8005b30:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	88fa      	ldrh	r2, [r7, #6]
 8005b36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	88fa      	ldrh	r2, [r7, #6]
 8005b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4a:	d10e      	bne.n	8005b6a <HAL_UART_Receive+0x90>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d105      	bne.n	8005b60 <HAL_UART_Receive+0x86>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005b5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b5e:	e02d      	b.n	8005bbc <HAL_UART_Receive+0xe2>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	22ff      	movs	r2, #255	; 0xff
 8005b64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b68:	e028      	b.n	8005bbc <HAL_UART_Receive+0xe2>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10d      	bne.n	8005b8e <HAL_UART_Receive+0xb4>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <HAL_UART_Receive+0xaa>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	22ff      	movs	r2, #255	; 0xff
 8005b7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b82:	e01b      	b.n	8005bbc <HAL_UART_Receive+0xe2>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	227f      	movs	r2, #127	; 0x7f
 8005b88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005b8c:	e016      	b.n	8005bbc <HAL_UART_Receive+0xe2>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b96:	d10d      	bne.n	8005bb4 <HAL_UART_Receive+0xda>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <HAL_UART_Receive+0xd0>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	227f      	movs	r2, #127	; 0x7f
 8005ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005ba8:	e008      	b.n	8005bbc <HAL_UART_Receive+0xe2>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	223f      	movs	r2, #63	; 0x3f
 8005bae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005bb2:	e003      	b.n	8005bbc <HAL_UART_Receive+0xe2>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bc2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bcc:	d108      	bne.n	8005be0 <HAL_UART_Receive+0x106>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	61bb      	str	r3, [r7, #24]
 8005bde:	e003      	b.n	8005be8 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005bf0:	e033      	b.n	8005c5a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2120      	movs	r1, #32
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 fbf7 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e033      	b.n	8005c74 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10c      	bne.n	8005c2c <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	8a7b      	ldrh	r3, [r7, #18]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	3302      	adds	r3, #2
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	e00d      	b.n	8005c48 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	8a7b      	ldrh	r3, [r7, #18]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	4013      	ands	r3, r2
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3301      	adds	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	3b01      	subs	r3, #1
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1c5      	bne.n	8005bf2 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e000      	b.n	8005c74 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005c72:	2302      	movs	r3, #2
  }
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c7c:	b5b0      	push	{r4, r5, r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4bb1      	ldr	r3, [pc, #708]	; (8005f78 <UART_SetConfig+0x2fc>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6812      	ldr	r2, [r2, #0]
 8005cb8:	69f9      	ldr	r1, [r7, #28]
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4aa7      	ldr	r2, [pc, #668]	; (8005f7c <UART_SetConfig+0x300>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a1b      	ldr	r3, [r3, #32]
 8005ce8:	69fa      	ldr	r2, [r7, #28]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005cf8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	69f9      	ldr	r1, [r7, #28]
 8005d02:	430b      	orrs	r3, r1
 8005d04:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	f023 010f 	bic.w	r1, r3, #15
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a97      	ldr	r2, [pc, #604]	; (8005f80 <UART_SetConfig+0x304>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d121      	bne.n	8005d6a <UART_SetConfig+0xee>
 8005d26:	4b97      	ldr	r3, [pc, #604]	; (8005f84 <UART_SetConfig+0x308>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f003 0303 	and.w	r3, r3, #3
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d817      	bhi.n	8005d64 <UART_SetConfig+0xe8>
 8005d34:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <UART_SetConfig+0xc0>)
 8005d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3a:	bf00      	nop
 8005d3c:	08005d4d 	.word	0x08005d4d
 8005d40:	08005d59 	.word	0x08005d59
 8005d44:	08005d53 	.word	0x08005d53
 8005d48:	08005d5f 	.word	0x08005d5f
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	76fb      	strb	r3, [r7, #27]
 8005d50:	e0e7      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005d52:	2302      	movs	r3, #2
 8005d54:	76fb      	strb	r3, [r7, #27]
 8005d56:	e0e4      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	76fb      	strb	r3, [r7, #27]
 8005d5c:	e0e1      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005d5e:	2308      	movs	r3, #8
 8005d60:	76fb      	strb	r3, [r7, #27]
 8005d62:	e0de      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005d64:	2310      	movs	r3, #16
 8005d66:	76fb      	strb	r3, [r7, #27]
 8005d68:	e0db      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a86      	ldr	r2, [pc, #536]	; (8005f88 <UART_SetConfig+0x30c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d132      	bne.n	8005dda <UART_SetConfig+0x15e>
 8005d74:	4b83      	ldr	r3, [pc, #524]	; (8005f84 <UART_SetConfig+0x308>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f003 030c 	and.w	r3, r3, #12
 8005d7e:	2b0c      	cmp	r3, #12
 8005d80:	d828      	bhi.n	8005dd4 <UART_SetConfig+0x158>
 8005d82:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <UART_SetConfig+0x10c>)
 8005d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d88:	08005dbd 	.word	0x08005dbd
 8005d8c:	08005dd5 	.word	0x08005dd5
 8005d90:	08005dd5 	.word	0x08005dd5
 8005d94:	08005dd5 	.word	0x08005dd5
 8005d98:	08005dc9 	.word	0x08005dc9
 8005d9c:	08005dd5 	.word	0x08005dd5
 8005da0:	08005dd5 	.word	0x08005dd5
 8005da4:	08005dd5 	.word	0x08005dd5
 8005da8:	08005dc3 	.word	0x08005dc3
 8005dac:	08005dd5 	.word	0x08005dd5
 8005db0:	08005dd5 	.word	0x08005dd5
 8005db4:	08005dd5 	.word	0x08005dd5
 8005db8:	08005dcf 	.word	0x08005dcf
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	76fb      	strb	r3, [r7, #27]
 8005dc0:	e0af      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	76fb      	strb	r3, [r7, #27]
 8005dc6:	e0ac      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005dc8:	2304      	movs	r3, #4
 8005dca:	76fb      	strb	r3, [r7, #27]
 8005dcc:	e0a9      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005dce:	2308      	movs	r3, #8
 8005dd0:	76fb      	strb	r3, [r7, #27]
 8005dd2:	e0a6      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	76fb      	strb	r3, [r7, #27]
 8005dd8:	e0a3      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a6b      	ldr	r2, [pc, #428]	; (8005f8c <UART_SetConfig+0x310>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d120      	bne.n	8005e26 <UART_SetConfig+0x1aa>
 8005de4:	4b67      	ldr	r3, [pc, #412]	; (8005f84 <UART_SetConfig+0x308>)
 8005de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dee:	2b30      	cmp	r3, #48	; 0x30
 8005df0:	d013      	beq.n	8005e1a <UART_SetConfig+0x19e>
 8005df2:	2b30      	cmp	r3, #48	; 0x30
 8005df4:	d814      	bhi.n	8005e20 <UART_SetConfig+0x1a4>
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d009      	beq.n	8005e0e <UART_SetConfig+0x192>
 8005dfa:	2b20      	cmp	r3, #32
 8005dfc:	d810      	bhi.n	8005e20 <UART_SetConfig+0x1a4>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <UART_SetConfig+0x18c>
 8005e02:	2b10      	cmp	r3, #16
 8005e04:	d006      	beq.n	8005e14 <UART_SetConfig+0x198>
 8005e06:	e00b      	b.n	8005e20 <UART_SetConfig+0x1a4>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	76fb      	strb	r3, [r7, #27]
 8005e0c:	e089      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	76fb      	strb	r3, [r7, #27]
 8005e12:	e086      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005e14:	2304      	movs	r3, #4
 8005e16:	76fb      	strb	r3, [r7, #27]
 8005e18:	e083      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	76fb      	strb	r3, [r7, #27]
 8005e1e:	e080      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005e20:	2310      	movs	r3, #16
 8005e22:	76fb      	strb	r3, [r7, #27]
 8005e24:	e07d      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a59      	ldr	r2, [pc, #356]	; (8005f90 <UART_SetConfig+0x314>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d120      	bne.n	8005e72 <UART_SetConfig+0x1f6>
 8005e30:	4b54      	ldr	r3, [pc, #336]	; (8005f84 <UART_SetConfig+0x308>)
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e3c:	d013      	beq.n	8005e66 <UART_SetConfig+0x1ea>
 8005e3e:	2bc0      	cmp	r3, #192	; 0xc0
 8005e40:	d814      	bhi.n	8005e6c <UART_SetConfig+0x1f0>
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d009      	beq.n	8005e5a <UART_SetConfig+0x1de>
 8005e46:	2b80      	cmp	r3, #128	; 0x80
 8005e48:	d810      	bhi.n	8005e6c <UART_SetConfig+0x1f0>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d002      	beq.n	8005e54 <UART_SetConfig+0x1d8>
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d006      	beq.n	8005e60 <UART_SetConfig+0x1e4>
 8005e52:	e00b      	b.n	8005e6c <UART_SetConfig+0x1f0>
 8005e54:	2300      	movs	r3, #0
 8005e56:	76fb      	strb	r3, [r7, #27]
 8005e58:	e063      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	76fb      	strb	r3, [r7, #27]
 8005e5e:	e060      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005e60:	2304      	movs	r3, #4
 8005e62:	76fb      	strb	r3, [r7, #27]
 8005e64:	e05d      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005e66:	2308      	movs	r3, #8
 8005e68:	76fb      	strb	r3, [r7, #27]
 8005e6a:	e05a      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	76fb      	strb	r3, [r7, #27]
 8005e70:	e057      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a47      	ldr	r2, [pc, #284]	; (8005f94 <UART_SetConfig+0x318>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d125      	bne.n	8005ec8 <UART_SetConfig+0x24c>
 8005e7c:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <UART_SetConfig+0x308>)
 8005e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e8a:	d017      	beq.n	8005ebc <UART_SetConfig+0x240>
 8005e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e90:	d817      	bhi.n	8005ec2 <UART_SetConfig+0x246>
 8005e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e96:	d00b      	beq.n	8005eb0 <UART_SetConfig+0x234>
 8005e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e9c:	d811      	bhi.n	8005ec2 <UART_SetConfig+0x246>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <UART_SetConfig+0x22e>
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea6:	d006      	beq.n	8005eb6 <UART_SetConfig+0x23a>
 8005ea8:	e00b      	b.n	8005ec2 <UART_SetConfig+0x246>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	76fb      	strb	r3, [r7, #27]
 8005eae:	e038      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	76fb      	strb	r3, [r7, #27]
 8005eb4:	e035      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005eb6:	2304      	movs	r3, #4
 8005eb8:	76fb      	strb	r3, [r7, #27]
 8005eba:	e032      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	76fb      	strb	r3, [r7, #27]
 8005ec0:	e02f      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005ec2:	2310      	movs	r3, #16
 8005ec4:	76fb      	strb	r3, [r7, #27]
 8005ec6:	e02c      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a2b      	ldr	r2, [pc, #172]	; (8005f7c <UART_SetConfig+0x300>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d125      	bne.n	8005f1e <UART_SetConfig+0x2a2>
 8005ed2:	4b2c      	ldr	r3, [pc, #176]	; (8005f84 <UART_SetConfig+0x308>)
 8005ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005edc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ee0:	d017      	beq.n	8005f12 <UART_SetConfig+0x296>
 8005ee2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ee6:	d817      	bhi.n	8005f18 <UART_SetConfig+0x29c>
 8005ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eec:	d00b      	beq.n	8005f06 <UART_SetConfig+0x28a>
 8005eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef2:	d811      	bhi.n	8005f18 <UART_SetConfig+0x29c>
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <UART_SetConfig+0x284>
 8005ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005efc:	d006      	beq.n	8005f0c <UART_SetConfig+0x290>
 8005efe:	e00b      	b.n	8005f18 <UART_SetConfig+0x29c>
 8005f00:	2300      	movs	r3, #0
 8005f02:	76fb      	strb	r3, [r7, #27]
 8005f04:	e00d      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005f06:	2302      	movs	r3, #2
 8005f08:	76fb      	strb	r3, [r7, #27]
 8005f0a:	e00a      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	76fb      	strb	r3, [r7, #27]
 8005f10:	e007      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005f12:	2308      	movs	r3, #8
 8005f14:	76fb      	strb	r3, [r7, #27]
 8005f16:	e004      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	76fb      	strb	r3, [r7, #27]
 8005f1c:	e001      	b.n	8005f22 <UART_SetConfig+0x2a6>
 8005f1e:	2310      	movs	r3, #16
 8005f20:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a15      	ldr	r2, [pc, #84]	; (8005f7c <UART_SetConfig+0x300>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	f040 809f 	bne.w	800606c <UART_SetConfig+0x3f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f2e:	7efb      	ldrb	r3, [r7, #27]
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d837      	bhi.n	8005fa4 <UART_SetConfig+0x328>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <UART_SetConfig+0x2c0>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005f61 	.word	0x08005f61
 8005f40:	08005fa5 	.word	0x08005fa5
 8005f44:	08005f69 	.word	0x08005f69
 8005f48:	08005fa5 	.word	0x08005fa5
 8005f4c:	08005f6f 	.word	0x08005f6f
 8005f50:	08005fa5 	.word	0x08005fa5
 8005f54:	08005fa5 	.word	0x08005fa5
 8005f58:	08005fa5 	.word	0x08005fa5
 8005f5c:	08005f9d 	.word	0x08005f9d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f60:	f7fe fece 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8005f64:	6178      	str	r0, [r7, #20]
        break;
 8005f66:	e022      	b.n	8005fae <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f68:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <UART_SetConfig+0x31c>)
 8005f6a:	617b      	str	r3, [r7, #20]
        break;
 8005f6c:	e01f      	b.n	8005fae <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f6e:	f7fe fe2f 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 8005f72:	6178      	str	r0, [r7, #20]
        break;
 8005f74:	e01b      	b.n	8005fae <UART_SetConfig+0x332>
 8005f76:	bf00      	nop
 8005f78:	cfff69f3 	.word	0xcfff69f3
 8005f7c:	40008000 	.word	0x40008000
 8005f80:	40013800 	.word	0x40013800
 8005f84:	40021000 	.word	0x40021000
 8005f88:	40004400 	.word	0x40004400
 8005f8c:	40004800 	.word	0x40004800
 8005f90:	40004c00 	.word	0x40004c00
 8005f94:	40005000 	.word	0x40005000
 8005f98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa0:	617b      	str	r3, [r7, #20]
        break;
 8005fa2:	e004      	b.n	8005fae <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	76bb      	strb	r3, [r7, #26]
        break;
 8005fac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 811b 	beq.w	80061ec <UART_SetConfig+0x570>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	4a96      	ldr	r2, [pc, #600]	; (8006214 <UART_SetConfig+0x598>)
 8005fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc8:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	4413      	add	r3, r2
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d305      	bcc.n	8005fe6 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d902      	bls.n	8005fec <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	76bb      	strb	r3, [r7, #26]
 8005fea:	e0ff      	b.n	80061ec <UART_SetConfig+0x570>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff8:	4a86      	ldr	r2, [pc, #536]	; (8006214 <UART_SetConfig+0x598>)
 8005ffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	f04f 0300 	mov.w	r3, #0
 8006004:	f7fa fe58 	bl	8000cb8 <__aeabi_uldivmod>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4610      	mov	r0, r2
 800600e:	4619      	mov	r1, r3
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	020b      	lsls	r3, r1, #8
 800601a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800601e:	0202      	lsls	r2, r0, #8
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	6849      	ldr	r1, [r1, #4]
 8006024:	0849      	lsrs	r1, r1, #1
 8006026:	4608      	mov	r0, r1
 8006028:	f04f 0100 	mov.w	r1, #0
 800602c:	1814      	adds	r4, r2, r0
 800602e:	eb43 0501 	adc.w	r5, r3, r1
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	461a      	mov	r2, r3
 8006038:	f04f 0300 	mov.w	r3, #0
 800603c:	4620      	mov	r0, r4
 800603e:	4629      	mov	r1, r5
 8006040:	f7fa fe3a 	bl	8000cb8 <__aeabi_uldivmod>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4613      	mov	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006052:	d308      	bcc.n	8006066 <UART_SetConfig+0x3ea>
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800605a:	d204      	bcs.n	8006066 <UART_SetConfig+0x3ea>
        {
          huart->Instance->BRR = usartdiv;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	60da      	str	r2, [r3, #12]
 8006064:	e0c2      	b.n	80061ec <UART_SetConfig+0x570>
        }
        else
        {
          ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	76bb      	strb	r3, [r7, #26]
 800606a:	e0bf      	b.n	80061ec <UART_SetConfig+0x570>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006074:	d165      	bne.n	8006142 <UART_SetConfig+0x4c6>
  {
    switch (clocksource)
 8006076:	7efb      	ldrb	r3, [r7, #27]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d828      	bhi.n	80060ce <UART_SetConfig+0x452>
 800607c:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <UART_SetConfig+0x408>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060b1 	.word	0x080060b1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	080060cf 	.word	0x080060cf
 8006094:	080060bf 	.word	0x080060bf
 8006098:	080060cf 	.word	0x080060cf
 800609c:	080060cf 	.word	0x080060cf
 80060a0:	080060cf 	.word	0x080060cf
 80060a4:	080060c7 	.word	0x080060c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a8:	f7fe fe2a 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 80060ac:	6178      	str	r0, [r7, #20]
        break;
 80060ae:	e013      	b.n	80060d8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060b0:	f7fe fe3c 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 80060b4:	6178      	str	r0, [r7, #20]
        break;
 80060b6:	e00f      	b.n	80060d8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b8:	4b57      	ldr	r3, [pc, #348]	; (8006218 <UART_SetConfig+0x59c>)
 80060ba:	617b      	str	r3, [r7, #20]
        break;
 80060bc:	e00c      	b.n	80060d8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060be:	f7fe fd87 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 80060c2:	6178      	str	r0, [r7, #20]
        break;
 80060c4:	e008      	b.n	80060d8 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ca:	617b      	str	r3, [r7, #20]
        break;
 80060cc:	e004      	b.n	80060d8 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	76bb      	strb	r3, [r7, #26]
        break;
 80060d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8086 	beq.w	80061ec <UART_SetConfig+0x570>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	4a4b      	ldr	r2, [pc, #300]	; (8006214 <UART_SetConfig+0x598>)
 80060e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ea:	461a      	mov	r2, r3
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f2:	005a      	lsls	r2, r3, #1
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	441a      	add	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	fbb2 f3f3 	udiv	r3, r2, r3
 8006104:	b29b      	uxth	r3, r3
 8006106:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b0f      	cmp	r3, #15
 800610c:	d916      	bls.n	800613c <UART_SetConfig+0x4c0>
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006114:	d212      	bcs.n	800613c <UART_SetConfig+0x4c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	b29b      	uxth	r3, r3
 800611a:	f023 030f 	bic.w	r3, r3, #15
 800611e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	085b      	lsrs	r3, r3, #1
 8006124:	b29b      	uxth	r3, r3
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	b29a      	uxth	r2, r3
 800612c:	89fb      	ldrh	r3, [r7, #14]
 800612e:	4313      	orrs	r3, r2
 8006130:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	89fa      	ldrh	r2, [r7, #14]
 8006138:	60da      	str	r2, [r3, #12]
 800613a:	e057      	b.n	80061ec <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	76bb      	strb	r3, [r7, #26]
 8006140:	e054      	b.n	80061ec <UART_SetConfig+0x570>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006142:	7efb      	ldrb	r3, [r7, #27]
 8006144:	2b08      	cmp	r3, #8
 8006146:	d828      	bhi.n	800619a <UART_SetConfig+0x51e>
 8006148:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0x4d4>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006175 	.word	0x08006175
 8006154:	0800617d 	.word	0x0800617d
 8006158:	08006185 	.word	0x08006185
 800615c:	0800619b 	.word	0x0800619b
 8006160:	0800618b 	.word	0x0800618b
 8006164:	0800619b 	.word	0x0800619b
 8006168:	0800619b 	.word	0x0800619b
 800616c:	0800619b 	.word	0x0800619b
 8006170:	08006193 	.word	0x08006193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006174:	f7fe fdc4 	bl	8004d00 <HAL_RCC_GetPCLK1Freq>
 8006178:	6178      	str	r0, [r7, #20]
        break;
 800617a:	e013      	b.n	80061a4 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800617c:	f7fe fdd6 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 8006180:	6178      	str	r0, [r7, #20]
        break;
 8006182:	e00f      	b.n	80061a4 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006184:	4b24      	ldr	r3, [pc, #144]	; (8006218 <UART_SetConfig+0x59c>)
 8006186:	617b      	str	r3, [r7, #20]
        break;
 8006188:	e00c      	b.n	80061a4 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800618a:	f7fe fd21 	bl	8004bd0 <HAL_RCC_GetSysClockFreq>
 800618e:	6178      	str	r0, [r7, #20]
        break;
 8006190:	e008      	b.n	80061a4 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006196:	617b      	str	r3, [r7, #20]
        break;
 8006198:	e004      	b.n	80061a4 <UART_SetConfig+0x528>
      default:
        pclk = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	76bb      	strb	r3, [r7, #26]
        break;
 80061a2:	bf00      	nop
    }

    if (pclk != 0U)
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d020      	beq.n	80061ec <UART_SetConfig+0x570>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	4a19      	ldr	r2, [pc, #100]	; (8006214 <UART_SetConfig+0x598>)
 80061b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061b4:	461a      	mov	r2, r3
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	085b      	lsrs	r3, r3, #1
 80061c2:	441a      	add	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b0f      	cmp	r3, #15
 80061d4:	d908      	bls.n	80061e8 <UART_SetConfig+0x56c>
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061dc:	d204      	bcs.n	80061e8 <UART_SetConfig+0x56c>
      {
        huart->Instance->BRR = usartdiv;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	60da      	str	r2, [r3, #12]
 80061e6:	e001      	b.n	80061ec <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006208:	7ebb      	ldrb	r3, [r7, #26]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bdb0      	pop	{r4, r5, r7, pc}
 8006212:	bf00      	nop
 8006214:	08035a7c 	.word	0x08035a7c
 8006218:	00f42400 	.word	0x00f42400

0800621c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	f003 0301 	and.w	r3, r3, #1
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	430a      	orrs	r2, r1
 8006266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	f003 0308 	and.w	r3, r3, #8
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00a      	beq.n	80062ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01a      	beq.n	8006332 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006316:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631a:	d10a      	bne.n	8006332 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	605a      	str	r2, [r3, #4]
  }
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006370:	f7fc fe56 	bl	8003020 <HAL_GetTick>
 8006374:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0308 	and.w	r3, r3, #8
 8006380:	2b08      	cmp	r3, #8
 8006382:	d10e      	bne.n	80063a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006384:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f82c 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e022      	b.n	80063e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d10e      	bne.n	80063ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f816 	bl	80063f0 <UART_WaitOnFlagUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e00c      	b.n	80063e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	603b      	str	r3, [r7, #0]
 80063fc:	4613      	mov	r3, r2
 80063fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006400:	e062      	b.n	80064c8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006408:	d05e      	beq.n	80064c8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640a:	f7fc fe09 	bl	8003020 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	429a      	cmp	r2, r3
 8006418:	d302      	bcc.n	8006420 <UART_WaitOnFlagUntilTimeout+0x30>
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d11d      	bne.n	800645c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800642e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689a      	ldr	r2, [r3, #8]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0201 	bic.w	r2, r2, #1
 800643e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2220      	movs	r2, #32
 800644c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e045      	b.n	80064e8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	d02e      	beq.n	80064c8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006478:	d126      	bne.n	80064c8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006482:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006492:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0201 	bic.w	r2, r2, #1
 80064a2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2220      	movs	r2, #32
 80064b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e00f      	b.n	80064e8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69da      	ldr	r2, [r3, #28]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4013      	ands	r3, r2
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	bf0c      	ite	eq
 80064d8:	2301      	moveq	r3, #1
 80064da:	2300      	movne	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	461a      	mov	r2, r3
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d08d      	beq.n	8006402 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d101      	bne.n	8006506 <HAL_UARTEx_DisableFifoMode+0x16>
 8006502:	2302      	movs	r3, #2
 8006504:	e027      	b.n	8006556 <HAL_UARTEx_DisableFifoMode+0x66>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2224      	movs	r2, #36	; 0x24
 8006512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0201 	bic.w	r2, r2, #1
 800652c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006534:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006576:	2302      	movs	r3, #2
 8006578:	e02d      	b.n	80065d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2224      	movs	r2, #36	; 0x24
 8006586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0201 	bic.w	r2, r2, #1
 80065a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f850 	bl	800665c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b084      	sub	sp, #16
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e02d      	b.n	8006652 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2224      	movs	r2, #36	; 0x24
 8006602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f812 	bl	800665c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800665c:	b480      	push	{r7}
 800665e:	b089      	sub	sp, #36	; 0x24
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006664:	4a2f      	ldr	r2, [pc, #188]	; (8006724 <UARTEx_SetNbDataToProcess+0xc8>)
 8006666:	f107 0314 	add.w	r3, r7, #20
 800666a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800666e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006672:	4a2d      	ldr	r2, [pc, #180]	; (8006728 <UARTEx_SetNbDataToProcess+0xcc>)
 8006674:	f107 030c 	add.w	r3, r7, #12
 8006678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800667c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006684:	2b00      	cmp	r3, #0
 8006686:	d108      	bne.n	800669a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006698:	e03d      	b.n	8006716 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800669a:	2308      	movs	r3, #8
 800669c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800669e:	2308      	movs	r3, #8
 80066a0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	0e5b      	lsrs	r3, r3, #25
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	0f5b      	lsrs	r3, r3, #29
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80066c2:	7fbb      	ldrb	r3, [r7, #30]
 80066c4:	7f3a      	ldrb	r2, [r7, #28]
 80066c6:	f107 0120 	add.w	r1, r7, #32
 80066ca:	440a      	add	r2, r1
 80066cc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80066d0:	fb02 f303 	mul.w	r3, r2, r3
 80066d4:	7f3a      	ldrb	r2, [r7, #28]
 80066d6:	f107 0120 	add.w	r1, r7, #32
 80066da:	440a      	add	r2, r1
 80066dc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80066e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80066e4:	b29a      	uxth	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80066ec:	7ffb      	ldrb	r3, [r7, #31]
 80066ee:	7f7a      	ldrb	r2, [r7, #29]
 80066f0:	f107 0120 	add.w	r1, r7, #32
 80066f4:	440a      	add	r2, r1
 80066f6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
 80066fe:	7f7a      	ldrb	r2, [r7, #29]
 8006700:	f107 0120 	add.w	r1, r7, #32
 8006704:	440a      	add	r2, r1
 8006706:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800670a:	fb93 f3f2 	sdiv	r3, r3, r2
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006716:	bf00      	nop
 8006718:	3724      	adds	r7, #36	; 0x24
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop
 8006724:	0800b838 	.word	0x0800b838
 8006728:	0800b840 	.word	0x0800b840

0800672c <__assert_func>:
 800672c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800672e:	4614      	mov	r4, r2
 8006730:	461a      	mov	r2, r3
 8006732:	4b09      	ldr	r3, [pc, #36]	; (8006758 <__assert_func+0x2c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4605      	mov	r5, r0
 8006738:	68d8      	ldr	r0, [r3, #12]
 800673a:	b14c      	cbz	r4, 8006750 <__assert_func+0x24>
 800673c:	4b07      	ldr	r3, [pc, #28]	; (800675c <__assert_func+0x30>)
 800673e:	9100      	str	r1, [sp, #0]
 8006740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006744:	4906      	ldr	r1, [pc, #24]	; (8006760 <__assert_func+0x34>)
 8006746:	462b      	mov	r3, r5
 8006748:	f000 f828 	bl	800679c <fiprintf>
 800674c:	f002 f922 	bl	8008994 <abort>
 8006750:	4b04      	ldr	r3, [pc, #16]	; (8006764 <__assert_func+0x38>)
 8006752:	461c      	mov	r4, r3
 8006754:	e7f3      	b.n	800673e <__assert_func+0x12>
 8006756:	bf00      	nop
 8006758:	2000000c 	.word	0x2000000c
 800675c:	08035a94 	.word	0x08035a94
 8006760:	08035aa1 	.word	0x08035aa1
 8006764:	08035acf 	.word	0x08035acf

08006768 <__errno>:
 8006768:	4b01      	ldr	r3, [pc, #4]	; (8006770 <__errno+0x8>)
 800676a:	6818      	ldr	r0, [r3, #0]
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	2000000c 	.word	0x2000000c

08006774 <exit>:
 8006774:	b508      	push	{r3, lr}
 8006776:	4b07      	ldr	r3, [pc, #28]	; (8006794 <exit+0x20>)
 8006778:	4604      	mov	r4, r0
 800677a:	b113      	cbz	r3, 8006782 <exit+0xe>
 800677c:	2100      	movs	r1, #0
 800677e:	f3af 8000 	nop.w
 8006782:	4b05      	ldr	r3, [pc, #20]	; (8006798 <exit+0x24>)
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006788:	b103      	cbz	r3, 800678c <exit+0x18>
 800678a:	4798      	blx	r3
 800678c:	4620      	mov	r0, r4
 800678e:	f7fc fad1 	bl	8002d34 <_exit>
 8006792:	bf00      	nop
 8006794:	00000000 	.word	0x00000000
 8006798:	08035ad0 	.word	0x08035ad0

0800679c <fiprintf>:
 800679c:	b40e      	push	{r1, r2, r3}
 800679e:	b503      	push	{r0, r1, lr}
 80067a0:	4601      	mov	r1, r0
 80067a2:	ab03      	add	r3, sp, #12
 80067a4:	4805      	ldr	r0, [pc, #20]	; (80067bc <fiprintf+0x20>)
 80067a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80067aa:	6800      	ldr	r0, [r0, #0]
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	f000 f90f 	bl	80069d0 <_vfiprintf_r>
 80067b2:	b002      	add	sp, #8
 80067b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80067b8:	b003      	add	sp, #12
 80067ba:	4770      	bx	lr
 80067bc:	2000000c 	.word	0x2000000c

080067c0 <__libc_init_array>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	4d0d      	ldr	r5, [pc, #52]	; (80067f8 <__libc_init_array+0x38>)
 80067c4:	4c0d      	ldr	r4, [pc, #52]	; (80067fc <__libc_init_array+0x3c>)
 80067c6:	1b64      	subs	r4, r4, r5
 80067c8:	10a4      	asrs	r4, r4, #2
 80067ca:	2600      	movs	r6, #0
 80067cc:	42a6      	cmp	r6, r4
 80067ce:	d109      	bne.n	80067e4 <__libc_init_array+0x24>
 80067d0:	4d0b      	ldr	r5, [pc, #44]	; (8006800 <__libc_init_array+0x40>)
 80067d2:	4c0c      	ldr	r4, [pc, #48]	; (8006804 <__libc_init_array+0x44>)
 80067d4:	f004 fc9e 	bl	800b114 <_init>
 80067d8:	1b64      	subs	r4, r4, r5
 80067da:	10a4      	asrs	r4, r4, #2
 80067dc:	2600      	movs	r6, #0
 80067de:	42a6      	cmp	r6, r4
 80067e0:	d105      	bne.n	80067ee <__libc_init_array+0x2e>
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067e8:	4798      	blx	r3
 80067ea:	3601      	adds	r6, #1
 80067ec:	e7ee      	b.n	80067cc <__libc_init_array+0xc>
 80067ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f2:	4798      	blx	r3
 80067f4:	3601      	adds	r6, #1
 80067f6:	e7f2      	b.n	80067de <__libc_init_array+0x1e>
 80067f8:	08035f4c 	.word	0x08035f4c
 80067fc:	08035f4c 	.word	0x08035f4c
 8006800:	08035f4c 	.word	0x08035f4c
 8006804:	08035f50 	.word	0x08035f50

08006808 <malloc>:
 8006808:	4b02      	ldr	r3, [pc, #8]	; (8006814 <malloc+0xc>)
 800680a:	4601      	mov	r1, r0
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	f000 b85b 	b.w	80068c8 <_malloc_r>
 8006812:	bf00      	nop
 8006814:	2000000c 	.word	0x2000000c

08006818 <memset>:
 8006818:	4402      	add	r2, r0
 800681a:	4603      	mov	r3, r0
 800681c:	4293      	cmp	r3, r2
 800681e:	d100      	bne.n	8006822 <memset+0xa>
 8006820:	4770      	bx	lr
 8006822:	f803 1b01 	strb.w	r1, [r3], #1
 8006826:	e7f9      	b.n	800681c <memset+0x4>

08006828 <_free_r>:
 8006828:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800682a:	2900      	cmp	r1, #0
 800682c:	d048      	beq.n	80068c0 <_free_r+0x98>
 800682e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006832:	9001      	str	r0, [sp, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f1a1 0404 	sub.w	r4, r1, #4
 800683a:	bfb8      	it	lt
 800683c:	18e4      	addlt	r4, r4, r3
 800683e:	f003 fcf3 	bl	800a228 <__malloc_lock>
 8006842:	4a20      	ldr	r2, [pc, #128]	; (80068c4 <_free_r+0x9c>)
 8006844:	9801      	ldr	r0, [sp, #4]
 8006846:	6813      	ldr	r3, [r2, #0]
 8006848:	4615      	mov	r5, r2
 800684a:	b933      	cbnz	r3, 800685a <_free_r+0x32>
 800684c:	6063      	str	r3, [r4, #4]
 800684e:	6014      	str	r4, [r2, #0]
 8006850:	b003      	add	sp, #12
 8006852:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006856:	f003 bced 	b.w	800a234 <__malloc_unlock>
 800685a:	42a3      	cmp	r3, r4
 800685c:	d90b      	bls.n	8006876 <_free_r+0x4e>
 800685e:	6821      	ldr	r1, [r4, #0]
 8006860:	1862      	adds	r2, r4, r1
 8006862:	4293      	cmp	r3, r2
 8006864:	bf04      	itt	eq
 8006866:	681a      	ldreq	r2, [r3, #0]
 8006868:	685b      	ldreq	r3, [r3, #4]
 800686a:	6063      	str	r3, [r4, #4]
 800686c:	bf04      	itt	eq
 800686e:	1852      	addeq	r2, r2, r1
 8006870:	6022      	streq	r2, [r4, #0]
 8006872:	602c      	str	r4, [r5, #0]
 8006874:	e7ec      	b.n	8006850 <_free_r+0x28>
 8006876:	461a      	mov	r2, r3
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	b10b      	cbz	r3, 8006880 <_free_r+0x58>
 800687c:	42a3      	cmp	r3, r4
 800687e:	d9fa      	bls.n	8006876 <_free_r+0x4e>
 8006880:	6811      	ldr	r1, [r2, #0]
 8006882:	1855      	adds	r5, r2, r1
 8006884:	42a5      	cmp	r5, r4
 8006886:	d10b      	bne.n	80068a0 <_free_r+0x78>
 8006888:	6824      	ldr	r4, [r4, #0]
 800688a:	4421      	add	r1, r4
 800688c:	1854      	adds	r4, r2, r1
 800688e:	42a3      	cmp	r3, r4
 8006890:	6011      	str	r1, [r2, #0]
 8006892:	d1dd      	bne.n	8006850 <_free_r+0x28>
 8006894:	681c      	ldr	r4, [r3, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	6053      	str	r3, [r2, #4]
 800689a:	4421      	add	r1, r4
 800689c:	6011      	str	r1, [r2, #0]
 800689e:	e7d7      	b.n	8006850 <_free_r+0x28>
 80068a0:	d902      	bls.n	80068a8 <_free_r+0x80>
 80068a2:	230c      	movs	r3, #12
 80068a4:	6003      	str	r3, [r0, #0]
 80068a6:	e7d3      	b.n	8006850 <_free_r+0x28>
 80068a8:	6825      	ldr	r5, [r4, #0]
 80068aa:	1961      	adds	r1, r4, r5
 80068ac:	428b      	cmp	r3, r1
 80068ae:	bf04      	itt	eq
 80068b0:	6819      	ldreq	r1, [r3, #0]
 80068b2:	685b      	ldreq	r3, [r3, #4]
 80068b4:	6063      	str	r3, [r4, #4]
 80068b6:	bf04      	itt	eq
 80068b8:	1949      	addeq	r1, r1, r5
 80068ba:	6021      	streq	r1, [r4, #0]
 80068bc:	6054      	str	r4, [r2, #4]
 80068be:	e7c7      	b.n	8006850 <_free_r+0x28>
 80068c0:	b003      	add	sp, #12
 80068c2:	bd30      	pop	{r4, r5, pc}
 80068c4:	20000200 	.word	0x20000200

080068c8 <_malloc_r>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	1ccd      	adds	r5, r1, #3
 80068cc:	f025 0503 	bic.w	r5, r5, #3
 80068d0:	3508      	adds	r5, #8
 80068d2:	2d0c      	cmp	r5, #12
 80068d4:	bf38      	it	cc
 80068d6:	250c      	movcc	r5, #12
 80068d8:	2d00      	cmp	r5, #0
 80068da:	4606      	mov	r6, r0
 80068dc:	db01      	blt.n	80068e2 <_malloc_r+0x1a>
 80068de:	42a9      	cmp	r1, r5
 80068e0:	d903      	bls.n	80068ea <_malloc_r+0x22>
 80068e2:	230c      	movs	r3, #12
 80068e4:	6033      	str	r3, [r6, #0]
 80068e6:	2000      	movs	r0, #0
 80068e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068ea:	f003 fc9d 	bl	800a228 <__malloc_lock>
 80068ee:	4921      	ldr	r1, [pc, #132]	; (8006974 <_malloc_r+0xac>)
 80068f0:	680a      	ldr	r2, [r1, #0]
 80068f2:	4614      	mov	r4, r2
 80068f4:	b99c      	cbnz	r4, 800691e <_malloc_r+0x56>
 80068f6:	4f20      	ldr	r7, [pc, #128]	; (8006978 <_malloc_r+0xb0>)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	b923      	cbnz	r3, 8006906 <_malloc_r+0x3e>
 80068fc:	4621      	mov	r1, r4
 80068fe:	4630      	mov	r0, r6
 8006900:	f001 f89e 	bl	8007a40 <_sbrk_r>
 8006904:	6038      	str	r0, [r7, #0]
 8006906:	4629      	mov	r1, r5
 8006908:	4630      	mov	r0, r6
 800690a:	f001 f899 	bl	8007a40 <_sbrk_r>
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d123      	bne.n	800695a <_malloc_r+0x92>
 8006912:	230c      	movs	r3, #12
 8006914:	6033      	str	r3, [r6, #0]
 8006916:	4630      	mov	r0, r6
 8006918:	f003 fc8c 	bl	800a234 <__malloc_unlock>
 800691c:	e7e3      	b.n	80068e6 <_malloc_r+0x1e>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	1b5b      	subs	r3, r3, r5
 8006922:	d417      	bmi.n	8006954 <_malloc_r+0x8c>
 8006924:	2b0b      	cmp	r3, #11
 8006926:	d903      	bls.n	8006930 <_malloc_r+0x68>
 8006928:	6023      	str	r3, [r4, #0]
 800692a:	441c      	add	r4, r3
 800692c:	6025      	str	r5, [r4, #0]
 800692e:	e004      	b.n	800693a <_malloc_r+0x72>
 8006930:	6863      	ldr	r3, [r4, #4]
 8006932:	42a2      	cmp	r2, r4
 8006934:	bf0c      	ite	eq
 8006936:	600b      	streq	r3, [r1, #0]
 8006938:	6053      	strne	r3, [r2, #4]
 800693a:	4630      	mov	r0, r6
 800693c:	f003 fc7a 	bl	800a234 <__malloc_unlock>
 8006940:	f104 000b 	add.w	r0, r4, #11
 8006944:	1d23      	adds	r3, r4, #4
 8006946:	f020 0007 	bic.w	r0, r0, #7
 800694a:	1ac2      	subs	r2, r0, r3
 800694c:	d0cc      	beq.n	80068e8 <_malloc_r+0x20>
 800694e:	1a1b      	subs	r3, r3, r0
 8006950:	50a3      	str	r3, [r4, r2]
 8006952:	e7c9      	b.n	80068e8 <_malloc_r+0x20>
 8006954:	4622      	mov	r2, r4
 8006956:	6864      	ldr	r4, [r4, #4]
 8006958:	e7cc      	b.n	80068f4 <_malloc_r+0x2c>
 800695a:	1cc4      	adds	r4, r0, #3
 800695c:	f024 0403 	bic.w	r4, r4, #3
 8006960:	42a0      	cmp	r0, r4
 8006962:	d0e3      	beq.n	800692c <_malloc_r+0x64>
 8006964:	1a21      	subs	r1, r4, r0
 8006966:	4630      	mov	r0, r6
 8006968:	f001 f86a 	bl	8007a40 <_sbrk_r>
 800696c:	3001      	adds	r0, #1
 800696e:	d1dd      	bne.n	800692c <_malloc_r+0x64>
 8006970:	e7cf      	b.n	8006912 <_malloc_r+0x4a>
 8006972:	bf00      	nop
 8006974:	20000200 	.word	0x20000200
 8006978:	20000204 	.word	0x20000204

0800697c <__sfputc_r>:
 800697c:	6893      	ldr	r3, [r2, #8]
 800697e:	3b01      	subs	r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	b410      	push	{r4}
 8006984:	6093      	str	r3, [r2, #8]
 8006986:	da08      	bge.n	800699a <__sfputc_r+0x1e>
 8006988:	6994      	ldr	r4, [r2, #24]
 800698a:	42a3      	cmp	r3, r4
 800698c:	db01      	blt.n	8006992 <__sfputc_r+0x16>
 800698e:	290a      	cmp	r1, #10
 8006990:	d103      	bne.n	800699a <__sfputc_r+0x1e>
 8006992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006996:	f001 bf3d 	b.w	8008814 <__swbuf_r>
 800699a:	6813      	ldr	r3, [r2, #0]
 800699c:	1c58      	adds	r0, r3, #1
 800699e:	6010      	str	r0, [r2, #0]
 80069a0:	7019      	strb	r1, [r3, #0]
 80069a2:	4608      	mov	r0, r1
 80069a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <__sfputs_r>:
 80069aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ac:	4606      	mov	r6, r0
 80069ae:	460f      	mov	r7, r1
 80069b0:	4614      	mov	r4, r2
 80069b2:	18d5      	adds	r5, r2, r3
 80069b4:	42ac      	cmp	r4, r5
 80069b6:	d101      	bne.n	80069bc <__sfputs_r+0x12>
 80069b8:	2000      	movs	r0, #0
 80069ba:	e007      	b.n	80069cc <__sfputs_r+0x22>
 80069bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c0:	463a      	mov	r2, r7
 80069c2:	4630      	mov	r0, r6
 80069c4:	f7ff ffda 	bl	800697c <__sfputc_r>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d1f3      	bne.n	80069b4 <__sfputs_r+0xa>
 80069cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069d0 <_vfiprintf_r>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	460d      	mov	r5, r1
 80069d6:	b09d      	sub	sp, #116	; 0x74
 80069d8:	4614      	mov	r4, r2
 80069da:	4698      	mov	r8, r3
 80069dc:	4606      	mov	r6, r0
 80069de:	b118      	cbz	r0, 80069e8 <_vfiprintf_r+0x18>
 80069e0:	6983      	ldr	r3, [r0, #24]
 80069e2:	b90b      	cbnz	r3, 80069e8 <_vfiprintf_r+0x18>
 80069e4:	f002 ff6e 	bl	80098c4 <__sinit>
 80069e8:	4b89      	ldr	r3, [pc, #548]	; (8006c10 <_vfiprintf_r+0x240>)
 80069ea:	429d      	cmp	r5, r3
 80069ec:	d11b      	bne.n	8006a26 <_vfiprintf_r+0x56>
 80069ee:	6875      	ldr	r5, [r6, #4]
 80069f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069f2:	07d9      	lsls	r1, r3, #31
 80069f4:	d405      	bmi.n	8006a02 <_vfiprintf_r+0x32>
 80069f6:	89ab      	ldrh	r3, [r5, #12]
 80069f8:	059a      	lsls	r2, r3, #22
 80069fa:	d402      	bmi.n	8006a02 <_vfiprintf_r+0x32>
 80069fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069fe:	f003 fb72 	bl	800a0e6 <__retarget_lock_acquire_recursive>
 8006a02:	89ab      	ldrh	r3, [r5, #12]
 8006a04:	071b      	lsls	r3, r3, #28
 8006a06:	d501      	bpl.n	8006a0c <_vfiprintf_r+0x3c>
 8006a08:	692b      	ldr	r3, [r5, #16]
 8006a0a:	b9eb      	cbnz	r3, 8006a48 <_vfiprintf_r+0x78>
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f001 ff52 	bl	80088b8 <__swsetup_r>
 8006a14:	b1c0      	cbz	r0, 8006a48 <_vfiprintf_r+0x78>
 8006a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a18:	07dc      	lsls	r4, r3, #31
 8006a1a:	d50e      	bpl.n	8006a3a <_vfiprintf_r+0x6a>
 8006a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a20:	b01d      	add	sp, #116	; 0x74
 8006a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a26:	4b7b      	ldr	r3, [pc, #492]	; (8006c14 <_vfiprintf_r+0x244>)
 8006a28:	429d      	cmp	r5, r3
 8006a2a:	d101      	bne.n	8006a30 <_vfiprintf_r+0x60>
 8006a2c:	68b5      	ldr	r5, [r6, #8]
 8006a2e:	e7df      	b.n	80069f0 <_vfiprintf_r+0x20>
 8006a30:	4b79      	ldr	r3, [pc, #484]	; (8006c18 <_vfiprintf_r+0x248>)
 8006a32:	429d      	cmp	r5, r3
 8006a34:	bf08      	it	eq
 8006a36:	68f5      	ldreq	r5, [r6, #12]
 8006a38:	e7da      	b.n	80069f0 <_vfiprintf_r+0x20>
 8006a3a:	89ab      	ldrh	r3, [r5, #12]
 8006a3c:	0598      	lsls	r0, r3, #22
 8006a3e:	d4ed      	bmi.n	8006a1c <_vfiprintf_r+0x4c>
 8006a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a42:	f003 fb51 	bl	800a0e8 <__retarget_lock_release_recursive>
 8006a46:	e7e9      	b.n	8006a1c <_vfiprintf_r+0x4c>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a4c:	2320      	movs	r3, #32
 8006a4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a56:	2330      	movs	r3, #48	; 0x30
 8006a58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c1c <_vfiprintf_r+0x24c>
 8006a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a60:	f04f 0901 	mov.w	r9, #1
 8006a64:	4623      	mov	r3, r4
 8006a66:	469a      	mov	sl, r3
 8006a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a6c:	b10a      	cbz	r2, 8006a72 <_vfiprintf_r+0xa2>
 8006a6e:	2a25      	cmp	r2, #37	; 0x25
 8006a70:	d1f9      	bne.n	8006a66 <_vfiprintf_r+0x96>
 8006a72:	ebba 0b04 	subs.w	fp, sl, r4
 8006a76:	d00b      	beq.n	8006a90 <_vfiprintf_r+0xc0>
 8006a78:	465b      	mov	r3, fp
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f7ff ff93 	bl	80069aa <__sfputs_r>
 8006a84:	3001      	adds	r0, #1
 8006a86:	f000 80aa 	beq.w	8006bde <_vfiprintf_r+0x20e>
 8006a8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a8c:	445a      	add	r2, fp
 8006a8e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a90:	f89a 3000 	ldrb.w	r3, [sl]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 80a2 	beq.w	8006bde <_vfiprintf_r+0x20e>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aa4:	f10a 0a01 	add.w	sl, sl, #1
 8006aa8:	9304      	str	r3, [sp, #16]
 8006aaa:	9307      	str	r3, [sp, #28]
 8006aac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ab0:	931a      	str	r3, [sp, #104]	; 0x68
 8006ab2:	4654      	mov	r4, sl
 8006ab4:	2205      	movs	r2, #5
 8006ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aba:	4858      	ldr	r0, [pc, #352]	; (8006c1c <_vfiprintf_r+0x24c>)
 8006abc:	f7f9 fba8 	bl	8000210 <memchr>
 8006ac0:	9a04      	ldr	r2, [sp, #16]
 8006ac2:	b9d8      	cbnz	r0, 8006afc <_vfiprintf_r+0x12c>
 8006ac4:	06d1      	lsls	r1, r2, #27
 8006ac6:	bf44      	itt	mi
 8006ac8:	2320      	movmi	r3, #32
 8006aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ace:	0713      	lsls	r3, r2, #28
 8006ad0:	bf44      	itt	mi
 8006ad2:	232b      	movmi	r3, #43	; 0x2b
 8006ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8006adc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ade:	d015      	beq.n	8006b0c <_vfiprintf_r+0x13c>
 8006ae0:	9a07      	ldr	r2, [sp, #28]
 8006ae2:	4654      	mov	r4, sl
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	f04f 0c0a 	mov.w	ip, #10
 8006aea:	4621      	mov	r1, r4
 8006aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006af0:	3b30      	subs	r3, #48	; 0x30
 8006af2:	2b09      	cmp	r3, #9
 8006af4:	d94e      	bls.n	8006b94 <_vfiprintf_r+0x1c4>
 8006af6:	b1b0      	cbz	r0, 8006b26 <_vfiprintf_r+0x156>
 8006af8:	9207      	str	r2, [sp, #28]
 8006afa:	e014      	b.n	8006b26 <_vfiprintf_r+0x156>
 8006afc:	eba0 0308 	sub.w	r3, r0, r8
 8006b00:	fa09 f303 	lsl.w	r3, r9, r3
 8006b04:	4313      	orrs	r3, r2
 8006b06:	9304      	str	r3, [sp, #16]
 8006b08:	46a2      	mov	sl, r4
 8006b0a:	e7d2      	b.n	8006ab2 <_vfiprintf_r+0xe2>
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	1d19      	adds	r1, r3, #4
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	9103      	str	r1, [sp, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	bfbb      	ittet	lt
 8006b18:	425b      	neglt	r3, r3
 8006b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8006b1e:	9307      	strge	r3, [sp, #28]
 8006b20:	9307      	strlt	r3, [sp, #28]
 8006b22:	bfb8      	it	lt
 8006b24:	9204      	strlt	r2, [sp, #16]
 8006b26:	7823      	ldrb	r3, [r4, #0]
 8006b28:	2b2e      	cmp	r3, #46	; 0x2e
 8006b2a:	d10c      	bne.n	8006b46 <_vfiprintf_r+0x176>
 8006b2c:	7863      	ldrb	r3, [r4, #1]
 8006b2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b30:	d135      	bne.n	8006b9e <_vfiprintf_r+0x1ce>
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	1d1a      	adds	r2, r3, #4
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	9203      	str	r2, [sp, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bfb8      	it	lt
 8006b3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b42:	3402      	adds	r4, #2
 8006b44:	9305      	str	r3, [sp, #20]
 8006b46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c2c <_vfiprintf_r+0x25c>
 8006b4a:	7821      	ldrb	r1, [r4, #0]
 8006b4c:	2203      	movs	r2, #3
 8006b4e:	4650      	mov	r0, sl
 8006b50:	f7f9 fb5e 	bl	8000210 <memchr>
 8006b54:	b140      	cbz	r0, 8006b68 <_vfiprintf_r+0x198>
 8006b56:	2340      	movs	r3, #64	; 0x40
 8006b58:	eba0 000a 	sub.w	r0, r0, sl
 8006b5c:	fa03 f000 	lsl.w	r0, r3, r0
 8006b60:	9b04      	ldr	r3, [sp, #16]
 8006b62:	4303      	orrs	r3, r0
 8006b64:	3401      	adds	r4, #1
 8006b66:	9304      	str	r3, [sp, #16]
 8006b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6c:	482c      	ldr	r0, [pc, #176]	; (8006c20 <_vfiprintf_r+0x250>)
 8006b6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b72:	2206      	movs	r2, #6
 8006b74:	f7f9 fb4c 	bl	8000210 <memchr>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d03f      	beq.n	8006bfc <_vfiprintf_r+0x22c>
 8006b7c:	4b29      	ldr	r3, [pc, #164]	; (8006c24 <_vfiprintf_r+0x254>)
 8006b7e:	bb1b      	cbnz	r3, 8006bc8 <_vfiprintf_r+0x1f8>
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	3307      	adds	r3, #7
 8006b84:	f023 0307 	bic.w	r3, r3, #7
 8006b88:	3308      	adds	r3, #8
 8006b8a:	9303      	str	r3, [sp, #12]
 8006b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8e:	443b      	add	r3, r7
 8006b90:	9309      	str	r3, [sp, #36]	; 0x24
 8006b92:	e767      	b.n	8006a64 <_vfiprintf_r+0x94>
 8006b94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b98:	460c      	mov	r4, r1
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	e7a5      	b.n	8006aea <_vfiprintf_r+0x11a>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	3401      	adds	r4, #1
 8006ba2:	9305      	str	r3, [sp, #20]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f04f 0c0a 	mov.w	ip, #10
 8006baa:	4620      	mov	r0, r4
 8006bac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bb0:	3a30      	subs	r2, #48	; 0x30
 8006bb2:	2a09      	cmp	r2, #9
 8006bb4:	d903      	bls.n	8006bbe <_vfiprintf_r+0x1ee>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d0c5      	beq.n	8006b46 <_vfiprintf_r+0x176>
 8006bba:	9105      	str	r1, [sp, #20]
 8006bbc:	e7c3      	b.n	8006b46 <_vfiprintf_r+0x176>
 8006bbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e7f0      	b.n	8006baa <_vfiprintf_r+0x1da>
 8006bc8:	ab03      	add	r3, sp, #12
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	462a      	mov	r2, r5
 8006bce:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <_vfiprintf_r+0x258>)
 8006bd0:	a904      	add	r1, sp, #16
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	f000 f8cc 	bl	8006d70 <_printf_float>
 8006bd8:	4607      	mov	r7, r0
 8006bda:	1c78      	adds	r0, r7, #1
 8006bdc:	d1d6      	bne.n	8006b8c <_vfiprintf_r+0x1bc>
 8006bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006be0:	07d9      	lsls	r1, r3, #31
 8006be2:	d405      	bmi.n	8006bf0 <_vfiprintf_r+0x220>
 8006be4:	89ab      	ldrh	r3, [r5, #12]
 8006be6:	059a      	lsls	r2, r3, #22
 8006be8:	d402      	bmi.n	8006bf0 <_vfiprintf_r+0x220>
 8006bea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bec:	f003 fa7c 	bl	800a0e8 <__retarget_lock_release_recursive>
 8006bf0:	89ab      	ldrh	r3, [r5, #12]
 8006bf2:	065b      	lsls	r3, r3, #25
 8006bf4:	f53f af12 	bmi.w	8006a1c <_vfiprintf_r+0x4c>
 8006bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bfa:	e711      	b.n	8006a20 <_vfiprintf_r+0x50>
 8006bfc:	ab03      	add	r3, sp, #12
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	462a      	mov	r2, r5
 8006c02:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <_vfiprintf_r+0x258>)
 8006c04:	a904      	add	r1, sp, #16
 8006c06:	4630      	mov	r0, r6
 8006c08:	f000 fb56 	bl	80072b8 <_printf_i>
 8006c0c:	e7e4      	b.n	8006bd8 <_vfiprintf_r+0x208>
 8006c0e:	bf00      	nop
 8006c10:	08035d28 	.word	0x08035d28
 8006c14:	08035d48 	.word	0x08035d48
 8006c18:	08035d08 	.word	0x08035d08
 8006c1c:	08035ad4 	.word	0x08035ad4
 8006c20:	08035ade 	.word	0x08035ade
 8006c24:	08006d71 	.word	0x08006d71
 8006c28:	080069ab 	.word	0x080069ab
 8006c2c:	08035ada 	.word	0x08035ada

08006c30 <__cvt>:
 8006c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c34:	ec55 4b10 	vmov	r4, r5, d0
 8006c38:	2d00      	cmp	r5, #0
 8006c3a:	460e      	mov	r6, r1
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	462b      	mov	r3, r5
 8006c40:	bfbb      	ittet	lt
 8006c42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006c46:	461d      	movlt	r5, r3
 8006c48:	2300      	movge	r3, #0
 8006c4a:	232d      	movlt	r3, #45	; 0x2d
 8006c4c:	700b      	strb	r3, [r1, #0]
 8006c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006c54:	4691      	mov	r9, r2
 8006c56:	f023 0820 	bic.w	r8, r3, #32
 8006c5a:	bfbc      	itt	lt
 8006c5c:	4622      	movlt	r2, r4
 8006c5e:	4614      	movlt	r4, r2
 8006c60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c64:	d005      	beq.n	8006c72 <__cvt+0x42>
 8006c66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006c6a:	d100      	bne.n	8006c6e <__cvt+0x3e>
 8006c6c:	3601      	adds	r6, #1
 8006c6e:	2102      	movs	r1, #2
 8006c70:	e000      	b.n	8006c74 <__cvt+0x44>
 8006c72:	2103      	movs	r1, #3
 8006c74:	ab03      	add	r3, sp, #12
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	ab02      	add	r3, sp, #8
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	ec45 4b10 	vmov	d0, r4, r5
 8006c80:	4653      	mov	r3, sl
 8006c82:	4632      	mov	r2, r6
 8006c84:	f001 ff18 	bl	8008ab8 <_dtoa_r>
 8006c88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	d102      	bne.n	8006c96 <__cvt+0x66>
 8006c90:	f019 0f01 	tst.w	r9, #1
 8006c94:	d022      	beq.n	8006cdc <__cvt+0xac>
 8006c96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c9a:	eb07 0906 	add.w	r9, r7, r6
 8006c9e:	d110      	bne.n	8006cc2 <__cvt+0x92>
 8006ca0:	783b      	ldrb	r3, [r7, #0]
 8006ca2:	2b30      	cmp	r3, #48	; 0x30
 8006ca4:	d10a      	bne.n	8006cbc <__cvt+0x8c>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4620      	mov	r0, r4
 8006cac:	4629      	mov	r1, r5
 8006cae:	f7f9 ff23 	bl	8000af8 <__aeabi_dcmpeq>
 8006cb2:	b918      	cbnz	r0, 8006cbc <__cvt+0x8c>
 8006cb4:	f1c6 0601 	rsb	r6, r6, #1
 8006cb8:	f8ca 6000 	str.w	r6, [sl]
 8006cbc:	f8da 3000 	ldr.w	r3, [sl]
 8006cc0:	4499      	add	r9, r3
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7f9 ff15 	bl	8000af8 <__aeabi_dcmpeq>
 8006cce:	b108      	cbz	r0, 8006cd4 <__cvt+0xa4>
 8006cd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8006cd4:	2230      	movs	r2, #48	; 0x30
 8006cd6:	9b03      	ldr	r3, [sp, #12]
 8006cd8:	454b      	cmp	r3, r9
 8006cda:	d307      	bcc.n	8006cec <__cvt+0xbc>
 8006cdc:	9b03      	ldr	r3, [sp, #12]
 8006cde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ce0:	1bdb      	subs	r3, r3, r7
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	6013      	str	r3, [r2, #0]
 8006ce6:	b004      	add	sp, #16
 8006ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cec:	1c59      	adds	r1, r3, #1
 8006cee:	9103      	str	r1, [sp, #12]
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	e7f0      	b.n	8006cd6 <__cvt+0xa6>

08006cf4 <__exponent>:
 8006cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2900      	cmp	r1, #0
 8006cfa:	bfb8      	it	lt
 8006cfc:	4249      	neglt	r1, r1
 8006cfe:	f803 2b02 	strb.w	r2, [r3], #2
 8006d02:	bfb4      	ite	lt
 8006d04:	222d      	movlt	r2, #45	; 0x2d
 8006d06:	222b      	movge	r2, #43	; 0x2b
 8006d08:	2909      	cmp	r1, #9
 8006d0a:	7042      	strb	r2, [r0, #1]
 8006d0c:	dd2a      	ble.n	8006d64 <__exponent+0x70>
 8006d0e:	f10d 0407 	add.w	r4, sp, #7
 8006d12:	46a4      	mov	ip, r4
 8006d14:	270a      	movs	r7, #10
 8006d16:	46a6      	mov	lr, r4
 8006d18:	460a      	mov	r2, r1
 8006d1a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d1e:	fb07 1516 	mls	r5, r7, r6, r1
 8006d22:	3530      	adds	r5, #48	; 0x30
 8006d24:	2a63      	cmp	r2, #99	; 0x63
 8006d26:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006d2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d2e:	4631      	mov	r1, r6
 8006d30:	dcf1      	bgt.n	8006d16 <__exponent+0x22>
 8006d32:	3130      	adds	r1, #48	; 0x30
 8006d34:	f1ae 0502 	sub.w	r5, lr, #2
 8006d38:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006d3c:	1c44      	adds	r4, r0, #1
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4561      	cmp	r1, ip
 8006d42:	d30a      	bcc.n	8006d5a <__exponent+0x66>
 8006d44:	f10d 0209 	add.w	r2, sp, #9
 8006d48:	eba2 020e 	sub.w	r2, r2, lr
 8006d4c:	4565      	cmp	r5, ip
 8006d4e:	bf88      	it	hi
 8006d50:	2200      	movhi	r2, #0
 8006d52:	4413      	add	r3, r2
 8006d54:	1a18      	subs	r0, r3, r0
 8006d56:	b003      	add	sp, #12
 8006d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006d62:	e7ed      	b.n	8006d40 <__exponent+0x4c>
 8006d64:	2330      	movs	r3, #48	; 0x30
 8006d66:	3130      	adds	r1, #48	; 0x30
 8006d68:	7083      	strb	r3, [r0, #2]
 8006d6a:	70c1      	strb	r1, [r0, #3]
 8006d6c:	1d03      	adds	r3, r0, #4
 8006d6e:	e7f1      	b.n	8006d54 <__exponent+0x60>

08006d70 <_printf_float>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	ed2d 8b02 	vpush	{d8}
 8006d78:	b08d      	sub	sp, #52	; 0x34
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006d80:	4616      	mov	r6, r2
 8006d82:	461f      	mov	r7, r3
 8006d84:	4605      	mov	r5, r0
 8006d86:	f003 f9a9 	bl	800a0dc <_localeconv_r>
 8006d8a:	f8d0 a000 	ldr.w	sl, [r0]
 8006d8e:	4650      	mov	r0, sl
 8006d90:	f7f9 fa36 	bl	8000200 <strlen>
 8006d94:	2300      	movs	r3, #0
 8006d96:	930a      	str	r3, [sp, #40]	; 0x28
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	9305      	str	r3, [sp, #20]
 8006d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8006da0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006da4:	3307      	adds	r3, #7
 8006da6:	f023 0307 	bic.w	r3, r3, #7
 8006daa:	f103 0208 	add.w	r2, r3, #8
 8006dae:	f8c8 2000 	str.w	r2, [r8]
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006dba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006dbe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006dc2:	9307      	str	r3, [sp, #28]
 8006dc4:	f8cd 8018 	str.w	r8, [sp, #24]
 8006dc8:	ee08 0a10 	vmov	s16, r0
 8006dcc:	4b9f      	ldr	r3, [pc, #636]	; (800704c <_printf_float+0x2dc>)
 8006dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dd6:	f7f9 fec1 	bl	8000b5c <__aeabi_dcmpun>
 8006dda:	bb88      	cbnz	r0, 8006e40 <_printf_float+0xd0>
 8006ddc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006de0:	4b9a      	ldr	r3, [pc, #616]	; (800704c <_printf_float+0x2dc>)
 8006de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006de6:	f7f9 fe9b 	bl	8000b20 <__aeabi_dcmple>
 8006dea:	bb48      	cbnz	r0, 8006e40 <_printf_float+0xd0>
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	4640      	mov	r0, r8
 8006df2:	4649      	mov	r1, r9
 8006df4:	f7f9 fe8a 	bl	8000b0c <__aeabi_dcmplt>
 8006df8:	b110      	cbz	r0, 8006e00 <_printf_float+0x90>
 8006dfa:	232d      	movs	r3, #45	; 0x2d
 8006dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e00:	4b93      	ldr	r3, [pc, #588]	; (8007050 <_printf_float+0x2e0>)
 8006e02:	4894      	ldr	r0, [pc, #592]	; (8007054 <_printf_float+0x2e4>)
 8006e04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e08:	bf94      	ite	ls
 8006e0a:	4698      	movls	r8, r3
 8006e0c:	4680      	movhi	r8, r0
 8006e0e:	2303      	movs	r3, #3
 8006e10:	6123      	str	r3, [r4, #16]
 8006e12:	9b05      	ldr	r3, [sp, #20]
 8006e14:	f023 0204 	bic.w	r2, r3, #4
 8006e18:	6022      	str	r2, [r4, #0]
 8006e1a:	f04f 0900 	mov.w	r9, #0
 8006e1e:	9700      	str	r7, [sp, #0]
 8006e20:	4633      	mov	r3, r6
 8006e22:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e24:	4621      	mov	r1, r4
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 f9d8 	bl	80071dc <_printf_common>
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f040 8090 	bne.w	8006f52 <_printf_float+0x1e2>
 8006e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e36:	b00d      	add	sp, #52	; 0x34
 8006e38:	ecbd 8b02 	vpop	{d8}
 8006e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e40:	4642      	mov	r2, r8
 8006e42:	464b      	mov	r3, r9
 8006e44:	4640      	mov	r0, r8
 8006e46:	4649      	mov	r1, r9
 8006e48:	f7f9 fe88 	bl	8000b5c <__aeabi_dcmpun>
 8006e4c:	b140      	cbz	r0, 8006e60 <_printf_float+0xf0>
 8006e4e:	464b      	mov	r3, r9
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bfbc      	itt	lt
 8006e54:	232d      	movlt	r3, #45	; 0x2d
 8006e56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006e5a:	487f      	ldr	r0, [pc, #508]	; (8007058 <_printf_float+0x2e8>)
 8006e5c:	4b7f      	ldr	r3, [pc, #508]	; (800705c <_printf_float+0x2ec>)
 8006e5e:	e7d1      	b.n	8006e04 <_printf_float+0x94>
 8006e60:	6863      	ldr	r3, [r4, #4]
 8006e62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006e66:	9206      	str	r2, [sp, #24]
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	d13f      	bne.n	8006eec <_printf_float+0x17c>
 8006e6c:	2306      	movs	r3, #6
 8006e6e:	6063      	str	r3, [r4, #4]
 8006e70:	9b05      	ldr	r3, [sp, #20]
 8006e72:	6861      	ldr	r1, [r4, #4]
 8006e74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006e78:	2300      	movs	r3, #0
 8006e7a:	9303      	str	r3, [sp, #12]
 8006e7c:	ab0a      	add	r3, sp, #40	; 0x28
 8006e7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006e82:	ab09      	add	r3, sp, #36	; 0x24
 8006e84:	ec49 8b10 	vmov	d0, r8, r9
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	6022      	str	r2, [r4, #0]
 8006e8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006e90:	4628      	mov	r0, r5
 8006e92:	f7ff fecd 	bl	8006c30 <__cvt>
 8006e96:	9b06      	ldr	r3, [sp, #24]
 8006e98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e9a:	2b47      	cmp	r3, #71	; 0x47
 8006e9c:	4680      	mov	r8, r0
 8006e9e:	d108      	bne.n	8006eb2 <_printf_float+0x142>
 8006ea0:	1cc8      	adds	r0, r1, #3
 8006ea2:	db02      	blt.n	8006eaa <_printf_float+0x13a>
 8006ea4:	6863      	ldr	r3, [r4, #4]
 8006ea6:	4299      	cmp	r1, r3
 8006ea8:	dd41      	ble.n	8006f2e <_printf_float+0x1be>
 8006eaa:	f1ab 0b02 	sub.w	fp, fp, #2
 8006eae:	fa5f fb8b 	uxtb.w	fp, fp
 8006eb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006eb6:	d820      	bhi.n	8006efa <_printf_float+0x18a>
 8006eb8:	3901      	subs	r1, #1
 8006eba:	465a      	mov	r2, fp
 8006ebc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ec0:	9109      	str	r1, [sp, #36]	; 0x24
 8006ec2:	f7ff ff17 	bl	8006cf4 <__exponent>
 8006ec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ec8:	1813      	adds	r3, r2, r0
 8006eca:	2a01      	cmp	r2, #1
 8006ecc:	4681      	mov	r9, r0
 8006ece:	6123      	str	r3, [r4, #16]
 8006ed0:	dc02      	bgt.n	8006ed8 <_printf_float+0x168>
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	07d2      	lsls	r2, r2, #31
 8006ed6:	d501      	bpl.n	8006edc <_printf_float+0x16c>
 8006ed8:	3301      	adds	r3, #1
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d09c      	beq.n	8006e1e <_printf_float+0xae>
 8006ee4:	232d      	movs	r3, #45	; 0x2d
 8006ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eea:	e798      	b.n	8006e1e <_printf_float+0xae>
 8006eec:	9a06      	ldr	r2, [sp, #24]
 8006eee:	2a47      	cmp	r2, #71	; 0x47
 8006ef0:	d1be      	bne.n	8006e70 <_printf_float+0x100>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1bc      	bne.n	8006e70 <_printf_float+0x100>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e7b9      	b.n	8006e6e <_printf_float+0xfe>
 8006efa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006efe:	d118      	bne.n	8006f32 <_printf_float+0x1c2>
 8006f00:	2900      	cmp	r1, #0
 8006f02:	6863      	ldr	r3, [r4, #4]
 8006f04:	dd0b      	ble.n	8006f1e <_printf_float+0x1ae>
 8006f06:	6121      	str	r1, [r4, #16]
 8006f08:	b913      	cbnz	r3, 8006f10 <_printf_float+0x1a0>
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	07d0      	lsls	r0, r2, #31
 8006f0e:	d502      	bpl.n	8006f16 <_printf_float+0x1a6>
 8006f10:	3301      	adds	r3, #1
 8006f12:	440b      	add	r3, r1
 8006f14:	6123      	str	r3, [r4, #16]
 8006f16:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f18:	f04f 0900 	mov.w	r9, #0
 8006f1c:	e7de      	b.n	8006edc <_printf_float+0x16c>
 8006f1e:	b913      	cbnz	r3, 8006f26 <_printf_float+0x1b6>
 8006f20:	6822      	ldr	r2, [r4, #0]
 8006f22:	07d2      	lsls	r2, r2, #31
 8006f24:	d501      	bpl.n	8006f2a <_printf_float+0x1ba>
 8006f26:	3302      	adds	r3, #2
 8006f28:	e7f4      	b.n	8006f14 <_printf_float+0x1a4>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e7f2      	b.n	8006f14 <_printf_float+0x1a4>
 8006f2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f34:	4299      	cmp	r1, r3
 8006f36:	db05      	blt.n	8006f44 <_printf_float+0x1d4>
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	6121      	str	r1, [r4, #16]
 8006f3c:	07d8      	lsls	r0, r3, #31
 8006f3e:	d5ea      	bpl.n	8006f16 <_printf_float+0x1a6>
 8006f40:	1c4b      	adds	r3, r1, #1
 8006f42:	e7e7      	b.n	8006f14 <_printf_float+0x1a4>
 8006f44:	2900      	cmp	r1, #0
 8006f46:	bfd4      	ite	le
 8006f48:	f1c1 0202 	rsble	r2, r1, #2
 8006f4c:	2201      	movgt	r2, #1
 8006f4e:	4413      	add	r3, r2
 8006f50:	e7e0      	b.n	8006f14 <_printf_float+0x1a4>
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	055a      	lsls	r2, r3, #21
 8006f56:	d407      	bmi.n	8006f68 <_printf_float+0x1f8>
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	4642      	mov	r2, r8
 8006f5c:	4631      	mov	r1, r6
 8006f5e:	4628      	mov	r0, r5
 8006f60:	47b8      	blx	r7
 8006f62:	3001      	adds	r0, #1
 8006f64:	d12c      	bne.n	8006fc0 <_printf_float+0x250>
 8006f66:	e764      	b.n	8006e32 <_printf_float+0xc2>
 8006f68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f6c:	f240 80e0 	bls.w	8007130 <_printf_float+0x3c0>
 8006f70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f74:	2200      	movs	r2, #0
 8006f76:	2300      	movs	r3, #0
 8006f78:	f7f9 fdbe 	bl	8000af8 <__aeabi_dcmpeq>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d034      	beq.n	8006fea <_printf_float+0x27a>
 8006f80:	4a37      	ldr	r2, [pc, #220]	; (8007060 <_printf_float+0x2f0>)
 8006f82:	2301      	movs	r3, #1
 8006f84:	4631      	mov	r1, r6
 8006f86:	4628      	mov	r0, r5
 8006f88:	47b8      	blx	r7
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	f43f af51 	beq.w	8006e32 <_printf_float+0xc2>
 8006f90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f94:	429a      	cmp	r2, r3
 8006f96:	db02      	blt.n	8006f9e <_printf_float+0x22e>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	07d8      	lsls	r0, r3, #31
 8006f9c:	d510      	bpl.n	8006fc0 <_printf_float+0x250>
 8006f9e:	ee18 3a10 	vmov	r3, s16
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	f43f af41 	beq.w	8006e32 <_printf_float+0xc2>
 8006fb0:	f04f 0800 	mov.w	r8, #0
 8006fb4:	f104 091a 	add.w	r9, r4, #26
 8006fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	4543      	cmp	r3, r8
 8006fbe:	dc09      	bgt.n	8006fd4 <_printf_float+0x264>
 8006fc0:	6823      	ldr	r3, [r4, #0]
 8006fc2:	079b      	lsls	r3, r3, #30
 8006fc4:	f100 8105 	bmi.w	80071d2 <_printf_float+0x462>
 8006fc8:	68e0      	ldr	r0, [r4, #12]
 8006fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fcc:	4298      	cmp	r0, r3
 8006fce:	bfb8      	it	lt
 8006fd0:	4618      	movlt	r0, r3
 8006fd2:	e730      	b.n	8006e36 <_printf_float+0xc6>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	464a      	mov	r2, r9
 8006fd8:	4631      	mov	r1, r6
 8006fda:	4628      	mov	r0, r5
 8006fdc:	47b8      	blx	r7
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f43f af27 	beq.w	8006e32 <_printf_float+0xc2>
 8006fe4:	f108 0801 	add.w	r8, r8, #1
 8006fe8:	e7e6      	b.n	8006fb8 <_printf_float+0x248>
 8006fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	dc39      	bgt.n	8007064 <_printf_float+0x2f4>
 8006ff0:	4a1b      	ldr	r2, [pc, #108]	; (8007060 <_printf_float+0x2f0>)
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	4631      	mov	r1, r6
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	47b8      	blx	r7
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	f43f af19 	beq.w	8006e32 <_printf_float+0xc2>
 8007000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007004:	4313      	orrs	r3, r2
 8007006:	d102      	bne.n	800700e <_printf_float+0x29e>
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	07d9      	lsls	r1, r3, #31
 800700c:	d5d8      	bpl.n	8006fc0 <_printf_float+0x250>
 800700e:	ee18 3a10 	vmov	r3, s16
 8007012:	4652      	mov	r2, sl
 8007014:	4631      	mov	r1, r6
 8007016:	4628      	mov	r0, r5
 8007018:	47b8      	blx	r7
 800701a:	3001      	adds	r0, #1
 800701c:	f43f af09 	beq.w	8006e32 <_printf_float+0xc2>
 8007020:	f04f 0900 	mov.w	r9, #0
 8007024:	f104 0a1a 	add.w	sl, r4, #26
 8007028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702a:	425b      	negs	r3, r3
 800702c:	454b      	cmp	r3, r9
 800702e:	dc01      	bgt.n	8007034 <_printf_float+0x2c4>
 8007030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007032:	e792      	b.n	8006f5a <_printf_float+0x1ea>
 8007034:	2301      	movs	r3, #1
 8007036:	4652      	mov	r2, sl
 8007038:	4631      	mov	r1, r6
 800703a:	4628      	mov	r0, r5
 800703c:	47b8      	blx	r7
 800703e:	3001      	adds	r0, #1
 8007040:	f43f aef7 	beq.w	8006e32 <_printf_float+0xc2>
 8007044:	f109 0901 	add.w	r9, r9, #1
 8007048:	e7ee      	b.n	8007028 <_printf_float+0x2b8>
 800704a:	bf00      	nop
 800704c:	7fefffff 	.word	0x7fefffff
 8007050:	08035ae5 	.word	0x08035ae5
 8007054:	08035ae9 	.word	0x08035ae9
 8007058:	08035af1 	.word	0x08035af1
 800705c:	08035aed 	.word	0x08035aed
 8007060:	08035af5 	.word	0x08035af5
 8007064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007066:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007068:	429a      	cmp	r2, r3
 800706a:	bfa8      	it	ge
 800706c:	461a      	movge	r2, r3
 800706e:	2a00      	cmp	r2, #0
 8007070:	4691      	mov	r9, r2
 8007072:	dc37      	bgt.n	80070e4 <_printf_float+0x374>
 8007074:	f04f 0b00 	mov.w	fp, #0
 8007078:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800707c:	f104 021a 	add.w	r2, r4, #26
 8007080:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007082:	9305      	str	r3, [sp, #20]
 8007084:	eba3 0309 	sub.w	r3, r3, r9
 8007088:	455b      	cmp	r3, fp
 800708a:	dc33      	bgt.n	80070f4 <_printf_float+0x384>
 800708c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007090:	429a      	cmp	r2, r3
 8007092:	db3b      	blt.n	800710c <_printf_float+0x39c>
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	07da      	lsls	r2, r3, #31
 8007098:	d438      	bmi.n	800710c <_printf_float+0x39c>
 800709a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800709c:	9b05      	ldr	r3, [sp, #20]
 800709e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	eba2 0901 	sub.w	r9, r2, r1
 80070a6:	4599      	cmp	r9, r3
 80070a8:	bfa8      	it	ge
 80070aa:	4699      	movge	r9, r3
 80070ac:	f1b9 0f00 	cmp.w	r9, #0
 80070b0:	dc35      	bgt.n	800711e <_printf_float+0x3ae>
 80070b2:	f04f 0800 	mov.w	r8, #0
 80070b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070ba:	f104 0a1a 	add.w	sl, r4, #26
 80070be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c2:	1a9b      	subs	r3, r3, r2
 80070c4:	eba3 0309 	sub.w	r3, r3, r9
 80070c8:	4543      	cmp	r3, r8
 80070ca:	f77f af79 	ble.w	8006fc0 <_printf_float+0x250>
 80070ce:	2301      	movs	r3, #1
 80070d0:	4652      	mov	r2, sl
 80070d2:	4631      	mov	r1, r6
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	f43f aeaa 	beq.w	8006e32 <_printf_float+0xc2>
 80070de:	f108 0801 	add.w	r8, r8, #1
 80070e2:	e7ec      	b.n	80070be <_printf_float+0x34e>
 80070e4:	4613      	mov	r3, r2
 80070e6:	4631      	mov	r1, r6
 80070e8:	4642      	mov	r2, r8
 80070ea:	4628      	mov	r0, r5
 80070ec:	47b8      	blx	r7
 80070ee:	3001      	adds	r0, #1
 80070f0:	d1c0      	bne.n	8007074 <_printf_float+0x304>
 80070f2:	e69e      	b.n	8006e32 <_printf_float+0xc2>
 80070f4:	2301      	movs	r3, #1
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	9205      	str	r2, [sp, #20]
 80070fc:	47b8      	blx	r7
 80070fe:	3001      	adds	r0, #1
 8007100:	f43f ae97 	beq.w	8006e32 <_printf_float+0xc2>
 8007104:	9a05      	ldr	r2, [sp, #20]
 8007106:	f10b 0b01 	add.w	fp, fp, #1
 800710a:	e7b9      	b.n	8007080 <_printf_float+0x310>
 800710c:	ee18 3a10 	vmov	r3, s16
 8007110:	4652      	mov	r2, sl
 8007112:	4631      	mov	r1, r6
 8007114:	4628      	mov	r0, r5
 8007116:	47b8      	blx	r7
 8007118:	3001      	adds	r0, #1
 800711a:	d1be      	bne.n	800709a <_printf_float+0x32a>
 800711c:	e689      	b.n	8006e32 <_printf_float+0xc2>
 800711e:	9a05      	ldr	r2, [sp, #20]
 8007120:	464b      	mov	r3, r9
 8007122:	4442      	add	r2, r8
 8007124:	4631      	mov	r1, r6
 8007126:	4628      	mov	r0, r5
 8007128:	47b8      	blx	r7
 800712a:	3001      	adds	r0, #1
 800712c:	d1c1      	bne.n	80070b2 <_printf_float+0x342>
 800712e:	e680      	b.n	8006e32 <_printf_float+0xc2>
 8007130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007132:	2a01      	cmp	r2, #1
 8007134:	dc01      	bgt.n	800713a <_printf_float+0x3ca>
 8007136:	07db      	lsls	r3, r3, #31
 8007138:	d538      	bpl.n	80071ac <_printf_float+0x43c>
 800713a:	2301      	movs	r3, #1
 800713c:	4642      	mov	r2, r8
 800713e:	4631      	mov	r1, r6
 8007140:	4628      	mov	r0, r5
 8007142:	47b8      	blx	r7
 8007144:	3001      	adds	r0, #1
 8007146:	f43f ae74 	beq.w	8006e32 <_printf_float+0xc2>
 800714a:	ee18 3a10 	vmov	r3, s16
 800714e:	4652      	mov	r2, sl
 8007150:	4631      	mov	r1, r6
 8007152:	4628      	mov	r0, r5
 8007154:	47b8      	blx	r7
 8007156:	3001      	adds	r0, #1
 8007158:	f43f ae6b 	beq.w	8006e32 <_printf_float+0xc2>
 800715c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007160:	2200      	movs	r2, #0
 8007162:	2300      	movs	r3, #0
 8007164:	f7f9 fcc8 	bl	8000af8 <__aeabi_dcmpeq>
 8007168:	b9d8      	cbnz	r0, 80071a2 <_printf_float+0x432>
 800716a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800716c:	f108 0201 	add.w	r2, r8, #1
 8007170:	3b01      	subs	r3, #1
 8007172:	4631      	mov	r1, r6
 8007174:	4628      	mov	r0, r5
 8007176:	47b8      	blx	r7
 8007178:	3001      	adds	r0, #1
 800717a:	d10e      	bne.n	800719a <_printf_float+0x42a>
 800717c:	e659      	b.n	8006e32 <_printf_float+0xc2>
 800717e:	2301      	movs	r3, #1
 8007180:	4652      	mov	r2, sl
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	47b8      	blx	r7
 8007188:	3001      	adds	r0, #1
 800718a:	f43f ae52 	beq.w	8006e32 <_printf_float+0xc2>
 800718e:	f108 0801 	add.w	r8, r8, #1
 8007192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007194:	3b01      	subs	r3, #1
 8007196:	4543      	cmp	r3, r8
 8007198:	dcf1      	bgt.n	800717e <_printf_float+0x40e>
 800719a:	464b      	mov	r3, r9
 800719c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80071a0:	e6dc      	b.n	8006f5c <_printf_float+0x1ec>
 80071a2:	f04f 0800 	mov.w	r8, #0
 80071a6:	f104 0a1a 	add.w	sl, r4, #26
 80071aa:	e7f2      	b.n	8007192 <_printf_float+0x422>
 80071ac:	2301      	movs	r3, #1
 80071ae:	4642      	mov	r2, r8
 80071b0:	e7df      	b.n	8007172 <_printf_float+0x402>
 80071b2:	2301      	movs	r3, #1
 80071b4:	464a      	mov	r2, r9
 80071b6:	4631      	mov	r1, r6
 80071b8:	4628      	mov	r0, r5
 80071ba:	47b8      	blx	r7
 80071bc:	3001      	adds	r0, #1
 80071be:	f43f ae38 	beq.w	8006e32 <_printf_float+0xc2>
 80071c2:	f108 0801 	add.w	r8, r8, #1
 80071c6:	68e3      	ldr	r3, [r4, #12]
 80071c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80071ca:	1a5b      	subs	r3, r3, r1
 80071cc:	4543      	cmp	r3, r8
 80071ce:	dcf0      	bgt.n	80071b2 <_printf_float+0x442>
 80071d0:	e6fa      	b.n	8006fc8 <_printf_float+0x258>
 80071d2:	f04f 0800 	mov.w	r8, #0
 80071d6:	f104 0919 	add.w	r9, r4, #25
 80071da:	e7f4      	b.n	80071c6 <_printf_float+0x456>

080071dc <_printf_common>:
 80071dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	4616      	mov	r6, r2
 80071e2:	4699      	mov	r9, r3
 80071e4:	688a      	ldr	r2, [r1, #8]
 80071e6:	690b      	ldr	r3, [r1, #16]
 80071e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071ec:	4293      	cmp	r3, r2
 80071ee:	bfb8      	it	lt
 80071f0:	4613      	movlt	r3, r2
 80071f2:	6033      	str	r3, [r6, #0]
 80071f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071f8:	4607      	mov	r7, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	b10a      	cbz	r2, 8007202 <_printf_common+0x26>
 80071fe:	3301      	adds	r3, #1
 8007200:	6033      	str	r3, [r6, #0]
 8007202:	6823      	ldr	r3, [r4, #0]
 8007204:	0699      	lsls	r1, r3, #26
 8007206:	bf42      	ittt	mi
 8007208:	6833      	ldrmi	r3, [r6, #0]
 800720a:	3302      	addmi	r3, #2
 800720c:	6033      	strmi	r3, [r6, #0]
 800720e:	6825      	ldr	r5, [r4, #0]
 8007210:	f015 0506 	ands.w	r5, r5, #6
 8007214:	d106      	bne.n	8007224 <_printf_common+0x48>
 8007216:	f104 0a19 	add.w	sl, r4, #25
 800721a:	68e3      	ldr	r3, [r4, #12]
 800721c:	6832      	ldr	r2, [r6, #0]
 800721e:	1a9b      	subs	r3, r3, r2
 8007220:	42ab      	cmp	r3, r5
 8007222:	dc26      	bgt.n	8007272 <_printf_common+0x96>
 8007224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007228:	1e13      	subs	r3, r2, #0
 800722a:	6822      	ldr	r2, [r4, #0]
 800722c:	bf18      	it	ne
 800722e:	2301      	movne	r3, #1
 8007230:	0692      	lsls	r2, r2, #26
 8007232:	d42b      	bmi.n	800728c <_printf_common+0xb0>
 8007234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007238:	4649      	mov	r1, r9
 800723a:	4638      	mov	r0, r7
 800723c:	47c0      	blx	r8
 800723e:	3001      	adds	r0, #1
 8007240:	d01e      	beq.n	8007280 <_printf_common+0xa4>
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	68e5      	ldr	r5, [r4, #12]
 8007246:	6832      	ldr	r2, [r6, #0]
 8007248:	f003 0306 	and.w	r3, r3, #6
 800724c:	2b04      	cmp	r3, #4
 800724e:	bf08      	it	eq
 8007250:	1aad      	subeq	r5, r5, r2
 8007252:	68a3      	ldr	r3, [r4, #8]
 8007254:	6922      	ldr	r2, [r4, #16]
 8007256:	bf0c      	ite	eq
 8007258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800725c:	2500      	movne	r5, #0
 800725e:	4293      	cmp	r3, r2
 8007260:	bfc4      	itt	gt
 8007262:	1a9b      	subgt	r3, r3, r2
 8007264:	18ed      	addgt	r5, r5, r3
 8007266:	2600      	movs	r6, #0
 8007268:	341a      	adds	r4, #26
 800726a:	42b5      	cmp	r5, r6
 800726c:	d11a      	bne.n	80072a4 <_printf_common+0xc8>
 800726e:	2000      	movs	r0, #0
 8007270:	e008      	b.n	8007284 <_printf_common+0xa8>
 8007272:	2301      	movs	r3, #1
 8007274:	4652      	mov	r2, sl
 8007276:	4649      	mov	r1, r9
 8007278:	4638      	mov	r0, r7
 800727a:	47c0      	blx	r8
 800727c:	3001      	adds	r0, #1
 800727e:	d103      	bne.n	8007288 <_printf_common+0xac>
 8007280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007288:	3501      	adds	r5, #1
 800728a:	e7c6      	b.n	800721a <_printf_common+0x3e>
 800728c:	18e1      	adds	r1, r4, r3
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	2030      	movs	r0, #48	; 0x30
 8007292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007296:	4422      	add	r2, r4
 8007298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800729c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072a0:	3302      	adds	r3, #2
 80072a2:	e7c7      	b.n	8007234 <_printf_common+0x58>
 80072a4:	2301      	movs	r3, #1
 80072a6:	4622      	mov	r2, r4
 80072a8:	4649      	mov	r1, r9
 80072aa:	4638      	mov	r0, r7
 80072ac:	47c0      	blx	r8
 80072ae:	3001      	adds	r0, #1
 80072b0:	d0e6      	beq.n	8007280 <_printf_common+0xa4>
 80072b2:	3601      	adds	r6, #1
 80072b4:	e7d9      	b.n	800726a <_printf_common+0x8e>
	...

080072b8 <_printf_i>:
 80072b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072bc:	460c      	mov	r4, r1
 80072be:	4691      	mov	r9, r2
 80072c0:	7e27      	ldrb	r7, [r4, #24]
 80072c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072c4:	2f78      	cmp	r7, #120	; 0x78
 80072c6:	4680      	mov	r8, r0
 80072c8:	469a      	mov	sl, r3
 80072ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072ce:	d807      	bhi.n	80072e0 <_printf_i+0x28>
 80072d0:	2f62      	cmp	r7, #98	; 0x62
 80072d2:	d80a      	bhi.n	80072ea <_printf_i+0x32>
 80072d4:	2f00      	cmp	r7, #0
 80072d6:	f000 80d8 	beq.w	800748a <_printf_i+0x1d2>
 80072da:	2f58      	cmp	r7, #88	; 0x58
 80072dc:	f000 80a3 	beq.w	8007426 <_printf_i+0x16e>
 80072e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072e8:	e03a      	b.n	8007360 <_printf_i+0xa8>
 80072ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072ee:	2b15      	cmp	r3, #21
 80072f0:	d8f6      	bhi.n	80072e0 <_printf_i+0x28>
 80072f2:	a001      	add	r0, pc, #4	; (adr r0, 80072f8 <_printf_i+0x40>)
 80072f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80072f8:	08007351 	.word	0x08007351
 80072fc:	08007365 	.word	0x08007365
 8007300:	080072e1 	.word	0x080072e1
 8007304:	080072e1 	.word	0x080072e1
 8007308:	080072e1 	.word	0x080072e1
 800730c:	080072e1 	.word	0x080072e1
 8007310:	08007365 	.word	0x08007365
 8007314:	080072e1 	.word	0x080072e1
 8007318:	080072e1 	.word	0x080072e1
 800731c:	080072e1 	.word	0x080072e1
 8007320:	080072e1 	.word	0x080072e1
 8007324:	08007471 	.word	0x08007471
 8007328:	08007395 	.word	0x08007395
 800732c:	08007453 	.word	0x08007453
 8007330:	080072e1 	.word	0x080072e1
 8007334:	080072e1 	.word	0x080072e1
 8007338:	08007493 	.word	0x08007493
 800733c:	080072e1 	.word	0x080072e1
 8007340:	08007395 	.word	0x08007395
 8007344:	080072e1 	.word	0x080072e1
 8007348:	080072e1 	.word	0x080072e1
 800734c:	0800745b 	.word	0x0800745b
 8007350:	680b      	ldr	r3, [r1, #0]
 8007352:	1d1a      	adds	r2, r3, #4
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	600a      	str	r2, [r1, #0]
 8007358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800735c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007360:	2301      	movs	r3, #1
 8007362:	e0a3      	b.n	80074ac <_printf_i+0x1f4>
 8007364:	6825      	ldr	r5, [r4, #0]
 8007366:	6808      	ldr	r0, [r1, #0]
 8007368:	062e      	lsls	r6, r5, #24
 800736a:	f100 0304 	add.w	r3, r0, #4
 800736e:	d50a      	bpl.n	8007386 <_printf_i+0xce>
 8007370:	6805      	ldr	r5, [r0, #0]
 8007372:	600b      	str	r3, [r1, #0]
 8007374:	2d00      	cmp	r5, #0
 8007376:	da03      	bge.n	8007380 <_printf_i+0xc8>
 8007378:	232d      	movs	r3, #45	; 0x2d
 800737a:	426d      	negs	r5, r5
 800737c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007380:	485e      	ldr	r0, [pc, #376]	; (80074fc <_printf_i+0x244>)
 8007382:	230a      	movs	r3, #10
 8007384:	e019      	b.n	80073ba <_printf_i+0x102>
 8007386:	f015 0f40 	tst.w	r5, #64	; 0x40
 800738a:	6805      	ldr	r5, [r0, #0]
 800738c:	600b      	str	r3, [r1, #0]
 800738e:	bf18      	it	ne
 8007390:	b22d      	sxthne	r5, r5
 8007392:	e7ef      	b.n	8007374 <_printf_i+0xbc>
 8007394:	680b      	ldr	r3, [r1, #0]
 8007396:	6825      	ldr	r5, [r4, #0]
 8007398:	1d18      	adds	r0, r3, #4
 800739a:	6008      	str	r0, [r1, #0]
 800739c:	0628      	lsls	r0, r5, #24
 800739e:	d501      	bpl.n	80073a4 <_printf_i+0xec>
 80073a0:	681d      	ldr	r5, [r3, #0]
 80073a2:	e002      	b.n	80073aa <_printf_i+0xf2>
 80073a4:	0669      	lsls	r1, r5, #25
 80073a6:	d5fb      	bpl.n	80073a0 <_printf_i+0xe8>
 80073a8:	881d      	ldrh	r5, [r3, #0]
 80073aa:	4854      	ldr	r0, [pc, #336]	; (80074fc <_printf_i+0x244>)
 80073ac:	2f6f      	cmp	r7, #111	; 0x6f
 80073ae:	bf0c      	ite	eq
 80073b0:	2308      	moveq	r3, #8
 80073b2:	230a      	movne	r3, #10
 80073b4:	2100      	movs	r1, #0
 80073b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073ba:	6866      	ldr	r6, [r4, #4]
 80073bc:	60a6      	str	r6, [r4, #8]
 80073be:	2e00      	cmp	r6, #0
 80073c0:	bfa2      	ittt	ge
 80073c2:	6821      	ldrge	r1, [r4, #0]
 80073c4:	f021 0104 	bicge.w	r1, r1, #4
 80073c8:	6021      	strge	r1, [r4, #0]
 80073ca:	b90d      	cbnz	r5, 80073d0 <_printf_i+0x118>
 80073cc:	2e00      	cmp	r6, #0
 80073ce:	d04d      	beq.n	800746c <_printf_i+0x1b4>
 80073d0:	4616      	mov	r6, r2
 80073d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80073d6:	fb03 5711 	mls	r7, r3, r1, r5
 80073da:	5dc7      	ldrb	r7, [r0, r7]
 80073dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073e0:	462f      	mov	r7, r5
 80073e2:	42bb      	cmp	r3, r7
 80073e4:	460d      	mov	r5, r1
 80073e6:	d9f4      	bls.n	80073d2 <_printf_i+0x11a>
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d10b      	bne.n	8007404 <_printf_i+0x14c>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	07df      	lsls	r7, r3, #31
 80073f0:	d508      	bpl.n	8007404 <_printf_i+0x14c>
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	6861      	ldr	r1, [r4, #4]
 80073f6:	4299      	cmp	r1, r3
 80073f8:	bfde      	ittt	le
 80073fa:	2330      	movle	r3, #48	; 0x30
 80073fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007400:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007404:	1b92      	subs	r2, r2, r6
 8007406:	6122      	str	r2, [r4, #16]
 8007408:	f8cd a000 	str.w	sl, [sp]
 800740c:	464b      	mov	r3, r9
 800740e:	aa03      	add	r2, sp, #12
 8007410:	4621      	mov	r1, r4
 8007412:	4640      	mov	r0, r8
 8007414:	f7ff fee2 	bl	80071dc <_printf_common>
 8007418:	3001      	adds	r0, #1
 800741a:	d14c      	bne.n	80074b6 <_printf_i+0x1fe>
 800741c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007420:	b004      	add	sp, #16
 8007422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007426:	4835      	ldr	r0, [pc, #212]	; (80074fc <_printf_i+0x244>)
 8007428:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	680e      	ldr	r6, [r1, #0]
 8007430:	061f      	lsls	r7, r3, #24
 8007432:	f856 5b04 	ldr.w	r5, [r6], #4
 8007436:	600e      	str	r6, [r1, #0]
 8007438:	d514      	bpl.n	8007464 <_printf_i+0x1ac>
 800743a:	07d9      	lsls	r1, r3, #31
 800743c:	bf44      	itt	mi
 800743e:	f043 0320 	orrmi.w	r3, r3, #32
 8007442:	6023      	strmi	r3, [r4, #0]
 8007444:	b91d      	cbnz	r5, 800744e <_printf_i+0x196>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	f023 0320 	bic.w	r3, r3, #32
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	2310      	movs	r3, #16
 8007450:	e7b0      	b.n	80073b4 <_printf_i+0xfc>
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	f043 0320 	orr.w	r3, r3, #32
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	2378      	movs	r3, #120	; 0x78
 800745c:	4828      	ldr	r0, [pc, #160]	; (8007500 <_printf_i+0x248>)
 800745e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007462:	e7e3      	b.n	800742c <_printf_i+0x174>
 8007464:	065e      	lsls	r6, r3, #25
 8007466:	bf48      	it	mi
 8007468:	b2ad      	uxthmi	r5, r5
 800746a:	e7e6      	b.n	800743a <_printf_i+0x182>
 800746c:	4616      	mov	r6, r2
 800746e:	e7bb      	b.n	80073e8 <_printf_i+0x130>
 8007470:	680b      	ldr	r3, [r1, #0]
 8007472:	6826      	ldr	r6, [r4, #0]
 8007474:	6960      	ldr	r0, [r4, #20]
 8007476:	1d1d      	adds	r5, r3, #4
 8007478:	600d      	str	r5, [r1, #0]
 800747a:	0635      	lsls	r5, r6, #24
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	d501      	bpl.n	8007484 <_printf_i+0x1cc>
 8007480:	6018      	str	r0, [r3, #0]
 8007482:	e002      	b.n	800748a <_printf_i+0x1d2>
 8007484:	0671      	lsls	r1, r6, #25
 8007486:	d5fb      	bpl.n	8007480 <_printf_i+0x1c8>
 8007488:	8018      	strh	r0, [r3, #0]
 800748a:	2300      	movs	r3, #0
 800748c:	6123      	str	r3, [r4, #16]
 800748e:	4616      	mov	r6, r2
 8007490:	e7ba      	b.n	8007408 <_printf_i+0x150>
 8007492:	680b      	ldr	r3, [r1, #0]
 8007494:	1d1a      	adds	r2, r3, #4
 8007496:	600a      	str	r2, [r1, #0]
 8007498:	681e      	ldr	r6, [r3, #0]
 800749a:	6862      	ldr	r2, [r4, #4]
 800749c:	2100      	movs	r1, #0
 800749e:	4630      	mov	r0, r6
 80074a0:	f7f8 feb6 	bl	8000210 <memchr>
 80074a4:	b108      	cbz	r0, 80074aa <_printf_i+0x1f2>
 80074a6:	1b80      	subs	r0, r0, r6
 80074a8:	6060      	str	r0, [r4, #4]
 80074aa:	6863      	ldr	r3, [r4, #4]
 80074ac:	6123      	str	r3, [r4, #16]
 80074ae:	2300      	movs	r3, #0
 80074b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074b4:	e7a8      	b.n	8007408 <_printf_i+0x150>
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	4632      	mov	r2, r6
 80074ba:	4649      	mov	r1, r9
 80074bc:	4640      	mov	r0, r8
 80074be:	47d0      	blx	sl
 80074c0:	3001      	adds	r0, #1
 80074c2:	d0ab      	beq.n	800741c <_printf_i+0x164>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	079b      	lsls	r3, r3, #30
 80074c8:	d413      	bmi.n	80074f2 <_printf_i+0x23a>
 80074ca:	68e0      	ldr	r0, [r4, #12]
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	4298      	cmp	r0, r3
 80074d0:	bfb8      	it	lt
 80074d2:	4618      	movlt	r0, r3
 80074d4:	e7a4      	b.n	8007420 <_printf_i+0x168>
 80074d6:	2301      	movs	r3, #1
 80074d8:	4632      	mov	r2, r6
 80074da:	4649      	mov	r1, r9
 80074dc:	4640      	mov	r0, r8
 80074de:	47d0      	blx	sl
 80074e0:	3001      	adds	r0, #1
 80074e2:	d09b      	beq.n	800741c <_printf_i+0x164>
 80074e4:	3501      	adds	r5, #1
 80074e6:	68e3      	ldr	r3, [r4, #12]
 80074e8:	9903      	ldr	r1, [sp, #12]
 80074ea:	1a5b      	subs	r3, r3, r1
 80074ec:	42ab      	cmp	r3, r5
 80074ee:	dcf2      	bgt.n	80074d6 <_printf_i+0x21e>
 80074f0:	e7eb      	b.n	80074ca <_printf_i+0x212>
 80074f2:	2500      	movs	r5, #0
 80074f4:	f104 0619 	add.w	r6, r4, #25
 80074f8:	e7f5      	b.n	80074e6 <_printf_i+0x22e>
 80074fa:	bf00      	nop
 80074fc:	08035af7 	.word	0x08035af7
 8007500:	08035b08 	.word	0x08035b08

08007504 <_scanf_float>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	b087      	sub	sp, #28
 800750a:	4617      	mov	r7, r2
 800750c:	9303      	str	r3, [sp, #12]
 800750e:	688b      	ldr	r3, [r1, #8]
 8007510:	1e5a      	subs	r2, r3, #1
 8007512:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007516:	bf83      	ittte	hi
 8007518:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800751c:	195b      	addhi	r3, r3, r5
 800751e:	9302      	strhi	r3, [sp, #8]
 8007520:	2300      	movls	r3, #0
 8007522:	bf86      	itte	hi
 8007524:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007528:	608b      	strhi	r3, [r1, #8]
 800752a:	9302      	strls	r3, [sp, #8]
 800752c:	680b      	ldr	r3, [r1, #0]
 800752e:	468b      	mov	fp, r1
 8007530:	2500      	movs	r5, #0
 8007532:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007536:	f84b 3b1c 	str.w	r3, [fp], #28
 800753a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800753e:	4680      	mov	r8, r0
 8007540:	460c      	mov	r4, r1
 8007542:	465e      	mov	r6, fp
 8007544:	46aa      	mov	sl, r5
 8007546:	46a9      	mov	r9, r5
 8007548:	9501      	str	r5, [sp, #4]
 800754a:	68a2      	ldr	r2, [r4, #8]
 800754c:	b152      	cbz	r2, 8007564 <_scanf_float+0x60>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b4e      	cmp	r3, #78	; 0x4e
 8007554:	d864      	bhi.n	8007620 <_scanf_float+0x11c>
 8007556:	2b40      	cmp	r3, #64	; 0x40
 8007558:	d83c      	bhi.n	80075d4 <_scanf_float+0xd0>
 800755a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800755e:	b2c8      	uxtb	r0, r1
 8007560:	280e      	cmp	r0, #14
 8007562:	d93a      	bls.n	80075da <_scanf_float+0xd6>
 8007564:	f1b9 0f00 	cmp.w	r9, #0
 8007568:	d003      	beq.n	8007572 <_scanf_float+0x6e>
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007576:	f1ba 0f01 	cmp.w	sl, #1
 800757a:	f200 8113 	bhi.w	80077a4 <_scanf_float+0x2a0>
 800757e:	455e      	cmp	r6, fp
 8007580:	f200 8105 	bhi.w	800778e <_scanf_float+0x28a>
 8007584:	2501      	movs	r5, #1
 8007586:	4628      	mov	r0, r5
 8007588:	b007      	add	sp, #28
 800758a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800758e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007592:	2a0d      	cmp	r2, #13
 8007594:	d8e6      	bhi.n	8007564 <_scanf_float+0x60>
 8007596:	a101      	add	r1, pc, #4	; (adr r1, 800759c <_scanf_float+0x98>)
 8007598:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800759c:	080076db 	.word	0x080076db
 80075a0:	08007565 	.word	0x08007565
 80075a4:	08007565 	.word	0x08007565
 80075a8:	08007565 	.word	0x08007565
 80075ac:	0800773b 	.word	0x0800773b
 80075b0:	08007713 	.word	0x08007713
 80075b4:	08007565 	.word	0x08007565
 80075b8:	08007565 	.word	0x08007565
 80075bc:	080076e9 	.word	0x080076e9
 80075c0:	08007565 	.word	0x08007565
 80075c4:	08007565 	.word	0x08007565
 80075c8:	08007565 	.word	0x08007565
 80075cc:	08007565 	.word	0x08007565
 80075d0:	080076a1 	.word	0x080076a1
 80075d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80075d8:	e7db      	b.n	8007592 <_scanf_float+0x8e>
 80075da:	290e      	cmp	r1, #14
 80075dc:	d8c2      	bhi.n	8007564 <_scanf_float+0x60>
 80075de:	a001      	add	r0, pc, #4	; (adr r0, 80075e4 <_scanf_float+0xe0>)
 80075e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80075e4:	08007693 	.word	0x08007693
 80075e8:	08007565 	.word	0x08007565
 80075ec:	08007693 	.word	0x08007693
 80075f0:	08007727 	.word	0x08007727
 80075f4:	08007565 	.word	0x08007565
 80075f8:	08007641 	.word	0x08007641
 80075fc:	0800767d 	.word	0x0800767d
 8007600:	0800767d 	.word	0x0800767d
 8007604:	0800767d 	.word	0x0800767d
 8007608:	0800767d 	.word	0x0800767d
 800760c:	0800767d 	.word	0x0800767d
 8007610:	0800767d 	.word	0x0800767d
 8007614:	0800767d 	.word	0x0800767d
 8007618:	0800767d 	.word	0x0800767d
 800761c:	0800767d 	.word	0x0800767d
 8007620:	2b6e      	cmp	r3, #110	; 0x6e
 8007622:	d809      	bhi.n	8007638 <_scanf_float+0x134>
 8007624:	2b60      	cmp	r3, #96	; 0x60
 8007626:	d8b2      	bhi.n	800758e <_scanf_float+0x8a>
 8007628:	2b54      	cmp	r3, #84	; 0x54
 800762a:	d077      	beq.n	800771c <_scanf_float+0x218>
 800762c:	2b59      	cmp	r3, #89	; 0x59
 800762e:	d199      	bne.n	8007564 <_scanf_float+0x60>
 8007630:	2d07      	cmp	r5, #7
 8007632:	d197      	bne.n	8007564 <_scanf_float+0x60>
 8007634:	2508      	movs	r5, #8
 8007636:	e029      	b.n	800768c <_scanf_float+0x188>
 8007638:	2b74      	cmp	r3, #116	; 0x74
 800763a:	d06f      	beq.n	800771c <_scanf_float+0x218>
 800763c:	2b79      	cmp	r3, #121	; 0x79
 800763e:	e7f6      	b.n	800762e <_scanf_float+0x12a>
 8007640:	6821      	ldr	r1, [r4, #0]
 8007642:	05c8      	lsls	r0, r1, #23
 8007644:	d51a      	bpl.n	800767c <_scanf_float+0x178>
 8007646:	9b02      	ldr	r3, [sp, #8]
 8007648:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800764c:	6021      	str	r1, [r4, #0]
 800764e:	f109 0901 	add.w	r9, r9, #1
 8007652:	b11b      	cbz	r3, 800765c <_scanf_float+0x158>
 8007654:	3b01      	subs	r3, #1
 8007656:	3201      	adds	r2, #1
 8007658:	9302      	str	r3, [sp, #8]
 800765a:	60a2      	str	r2, [r4, #8]
 800765c:	68a3      	ldr	r3, [r4, #8]
 800765e:	3b01      	subs	r3, #1
 8007660:	60a3      	str	r3, [r4, #8]
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	3301      	adds	r3, #1
 8007666:	6123      	str	r3, [r4, #16]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3b01      	subs	r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	607b      	str	r3, [r7, #4]
 8007670:	f340 8084 	ble.w	800777c <_scanf_float+0x278>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	3301      	adds	r3, #1
 8007678:	603b      	str	r3, [r7, #0]
 800767a:	e766      	b.n	800754a <_scanf_float+0x46>
 800767c:	eb1a 0f05 	cmn.w	sl, r5
 8007680:	f47f af70 	bne.w	8007564 <_scanf_float+0x60>
 8007684:	6822      	ldr	r2, [r4, #0]
 8007686:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800768a:	6022      	str	r2, [r4, #0]
 800768c:	f806 3b01 	strb.w	r3, [r6], #1
 8007690:	e7e4      	b.n	800765c <_scanf_float+0x158>
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	0610      	lsls	r0, r2, #24
 8007696:	f57f af65 	bpl.w	8007564 <_scanf_float+0x60>
 800769a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800769e:	e7f4      	b.n	800768a <_scanf_float+0x186>
 80076a0:	f1ba 0f00 	cmp.w	sl, #0
 80076a4:	d10e      	bne.n	80076c4 <_scanf_float+0x1c0>
 80076a6:	f1b9 0f00 	cmp.w	r9, #0
 80076aa:	d10e      	bne.n	80076ca <_scanf_float+0x1c6>
 80076ac:	6822      	ldr	r2, [r4, #0]
 80076ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80076b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80076b6:	d108      	bne.n	80076ca <_scanf_float+0x1c6>
 80076b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80076bc:	6022      	str	r2, [r4, #0]
 80076be:	f04f 0a01 	mov.w	sl, #1
 80076c2:	e7e3      	b.n	800768c <_scanf_float+0x188>
 80076c4:	f1ba 0f02 	cmp.w	sl, #2
 80076c8:	d055      	beq.n	8007776 <_scanf_float+0x272>
 80076ca:	2d01      	cmp	r5, #1
 80076cc:	d002      	beq.n	80076d4 <_scanf_float+0x1d0>
 80076ce:	2d04      	cmp	r5, #4
 80076d0:	f47f af48 	bne.w	8007564 <_scanf_float+0x60>
 80076d4:	3501      	adds	r5, #1
 80076d6:	b2ed      	uxtb	r5, r5
 80076d8:	e7d8      	b.n	800768c <_scanf_float+0x188>
 80076da:	f1ba 0f01 	cmp.w	sl, #1
 80076de:	f47f af41 	bne.w	8007564 <_scanf_float+0x60>
 80076e2:	f04f 0a02 	mov.w	sl, #2
 80076e6:	e7d1      	b.n	800768c <_scanf_float+0x188>
 80076e8:	b97d      	cbnz	r5, 800770a <_scanf_float+0x206>
 80076ea:	f1b9 0f00 	cmp.w	r9, #0
 80076ee:	f47f af3c 	bne.w	800756a <_scanf_float+0x66>
 80076f2:	6822      	ldr	r2, [r4, #0]
 80076f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80076f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80076fc:	f47f af39 	bne.w	8007572 <_scanf_float+0x6e>
 8007700:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007704:	6022      	str	r2, [r4, #0]
 8007706:	2501      	movs	r5, #1
 8007708:	e7c0      	b.n	800768c <_scanf_float+0x188>
 800770a:	2d03      	cmp	r5, #3
 800770c:	d0e2      	beq.n	80076d4 <_scanf_float+0x1d0>
 800770e:	2d05      	cmp	r5, #5
 8007710:	e7de      	b.n	80076d0 <_scanf_float+0x1cc>
 8007712:	2d02      	cmp	r5, #2
 8007714:	f47f af26 	bne.w	8007564 <_scanf_float+0x60>
 8007718:	2503      	movs	r5, #3
 800771a:	e7b7      	b.n	800768c <_scanf_float+0x188>
 800771c:	2d06      	cmp	r5, #6
 800771e:	f47f af21 	bne.w	8007564 <_scanf_float+0x60>
 8007722:	2507      	movs	r5, #7
 8007724:	e7b2      	b.n	800768c <_scanf_float+0x188>
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	0591      	lsls	r1, r2, #22
 800772a:	f57f af1b 	bpl.w	8007564 <_scanf_float+0x60>
 800772e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007732:	6022      	str	r2, [r4, #0]
 8007734:	f8cd 9004 	str.w	r9, [sp, #4]
 8007738:	e7a8      	b.n	800768c <_scanf_float+0x188>
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007740:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007744:	d006      	beq.n	8007754 <_scanf_float+0x250>
 8007746:	0550      	lsls	r0, r2, #21
 8007748:	f57f af0c 	bpl.w	8007564 <_scanf_float+0x60>
 800774c:	f1b9 0f00 	cmp.w	r9, #0
 8007750:	f43f af0f 	beq.w	8007572 <_scanf_float+0x6e>
 8007754:	0591      	lsls	r1, r2, #22
 8007756:	bf58      	it	pl
 8007758:	9901      	ldrpl	r1, [sp, #4]
 800775a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800775e:	bf58      	it	pl
 8007760:	eba9 0101 	subpl.w	r1, r9, r1
 8007764:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007768:	bf58      	it	pl
 800776a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800776e:	6022      	str	r2, [r4, #0]
 8007770:	f04f 0900 	mov.w	r9, #0
 8007774:	e78a      	b.n	800768c <_scanf_float+0x188>
 8007776:	f04f 0a03 	mov.w	sl, #3
 800777a:	e787      	b.n	800768c <_scanf_float+0x188>
 800777c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007780:	4639      	mov	r1, r7
 8007782:	4640      	mov	r0, r8
 8007784:	4798      	blx	r3
 8007786:	2800      	cmp	r0, #0
 8007788:	f43f aedf 	beq.w	800754a <_scanf_float+0x46>
 800778c:	e6ea      	b.n	8007564 <_scanf_float+0x60>
 800778e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007792:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007796:	463a      	mov	r2, r7
 8007798:	4640      	mov	r0, r8
 800779a:	4798      	blx	r3
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	3b01      	subs	r3, #1
 80077a0:	6123      	str	r3, [r4, #16]
 80077a2:	e6ec      	b.n	800757e <_scanf_float+0x7a>
 80077a4:	1e6b      	subs	r3, r5, #1
 80077a6:	2b06      	cmp	r3, #6
 80077a8:	d825      	bhi.n	80077f6 <_scanf_float+0x2f2>
 80077aa:	2d02      	cmp	r5, #2
 80077ac:	d836      	bhi.n	800781c <_scanf_float+0x318>
 80077ae:	455e      	cmp	r6, fp
 80077b0:	f67f aee8 	bls.w	8007584 <_scanf_float+0x80>
 80077b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077bc:	463a      	mov	r2, r7
 80077be:	4640      	mov	r0, r8
 80077c0:	4798      	blx	r3
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	6123      	str	r3, [r4, #16]
 80077c8:	e7f1      	b.n	80077ae <_scanf_float+0x2aa>
 80077ca:	9802      	ldr	r0, [sp, #8]
 80077cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80077d4:	9002      	str	r0, [sp, #8]
 80077d6:	463a      	mov	r2, r7
 80077d8:	4640      	mov	r0, r8
 80077da:	4798      	blx	r3
 80077dc:	6923      	ldr	r3, [r4, #16]
 80077de:	3b01      	subs	r3, #1
 80077e0:	6123      	str	r3, [r4, #16]
 80077e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80077e6:	fa5f fa8a 	uxtb.w	sl, sl
 80077ea:	f1ba 0f02 	cmp.w	sl, #2
 80077ee:	d1ec      	bne.n	80077ca <_scanf_float+0x2c6>
 80077f0:	3d03      	subs	r5, #3
 80077f2:	b2ed      	uxtb	r5, r5
 80077f4:	1b76      	subs	r6, r6, r5
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	05da      	lsls	r2, r3, #23
 80077fa:	d52f      	bpl.n	800785c <_scanf_float+0x358>
 80077fc:	055b      	lsls	r3, r3, #21
 80077fe:	d510      	bpl.n	8007822 <_scanf_float+0x31e>
 8007800:	455e      	cmp	r6, fp
 8007802:	f67f aebf 	bls.w	8007584 <_scanf_float+0x80>
 8007806:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800780a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800780e:	463a      	mov	r2, r7
 8007810:	4640      	mov	r0, r8
 8007812:	4798      	blx	r3
 8007814:	6923      	ldr	r3, [r4, #16]
 8007816:	3b01      	subs	r3, #1
 8007818:	6123      	str	r3, [r4, #16]
 800781a:	e7f1      	b.n	8007800 <_scanf_float+0x2fc>
 800781c:	46aa      	mov	sl, r5
 800781e:	9602      	str	r6, [sp, #8]
 8007820:	e7df      	b.n	80077e2 <_scanf_float+0x2de>
 8007822:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	2965      	cmp	r1, #101	; 0x65
 800782a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800782e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007832:	6123      	str	r3, [r4, #16]
 8007834:	d00c      	beq.n	8007850 <_scanf_float+0x34c>
 8007836:	2945      	cmp	r1, #69	; 0x45
 8007838:	d00a      	beq.n	8007850 <_scanf_float+0x34c>
 800783a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800783e:	463a      	mov	r2, r7
 8007840:	4640      	mov	r0, r8
 8007842:	4798      	blx	r3
 8007844:	6923      	ldr	r3, [r4, #16]
 8007846:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800784a:	3b01      	subs	r3, #1
 800784c:	1eb5      	subs	r5, r6, #2
 800784e:	6123      	str	r3, [r4, #16]
 8007850:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007854:	463a      	mov	r2, r7
 8007856:	4640      	mov	r0, r8
 8007858:	4798      	blx	r3
 800785a:	462e      	mov	r6, r5
 800785c:	6825      	ldr	r5, [r4, #0]
 800785e:	f015 0510 	ands.w	r5, r5, #16
 8007862:	d158      	bne.n	8007916 <_scanf_float+0x412>
 8007864:	7035      	strb	r5, [r6, #0]
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800786c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007870:	d11c      	bne.n	80078ac <_scanf_float+0x3a8>
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	454b      	cmp	r3, r9
 8007876:	eba3 0209 	sub.w	r2, r3, r9
 800787a:	d124      	bne.n	80078c6 <_scanf_float+0x3c2>
 800787c:	2200      	movs	r2, #0
 800787e:	4659      	mov	r1, fp
 8007880:	4640      	mov	r0, r8
 8007882:	f000 ff3b 	bl	80086fc <_strtod_r>
 8007886:	9b03      	ldr	r3, [sp, #12]
 8007888:	6821      	ldr	r1, [r4, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f011 0f02 	tst.w	r1, #2
 8007890:	ec57 6b10 	vmov	r6, r7, d0
 8007894:	f103 0204 	add.w	r2, r3, #4
 8007898:	d020      	beq.n	80078dc <_scanf_float+0x3d8>
 800789a:	9903      	ldr	r1, [sp, #12]
 800789c:	600a      	str	r2, [r1, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	e9c3 6700 	strd	r6, r7, [r3]
 80078a4:	68e3      	ldr	r3, [r4, #12]
 80078a6:	3301      	adds	r3, #1
 80078a8:	60e3      	str	r3, [r4, #12]
 80078aa:	e66c      	b.n	8007586 <_scanf_float+0x82>
 80078ac:	9b04      	ldr	r3, [sp, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0e4      	beq.n	800787c <_scanf_float+0x378>
 80078b2:	9905      	ldr	r1, [sp, #20]
 80078b4:	230a      	movs	r3, #10
 80078b6:	462a      	mov	r2, r5
 80078b8:	3101      	adds	r1, #1
 80078ba:	4640      	mov	r0, r8
 80078bc:	f000 ffa8 	bl	8008810 <_strtol_r>
 80078c0:	9b04      	ldr	r3, [sp, #16]
 80078c2:	9e05      	ldr	r6, [sp, #20]
 80078c4:	1ac2      	subs	r2, r0, r3
 80078c6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80078ca:	429e      	cmp	r6, r3
 80078cc:	bf28      	it	cs
 80078ce:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80078d2:	4912      	ldr	r1, [pc, #72]	; (800791c <_scanf_float+0x418>)
 80078d4:	4630      	mov	r0, r6
 80078d6:	f000 f8c9 	bl	8007a6c <siprintf>
 80078da:	e7cf      	b.n	800787c <_scanf_float+0x378>
 80078dc:	f011 0f04 	tst.w	r1, #4
 80078e0:	9903      	ldr	r1, [sp, #12]
 80078e2:	600a      	str	r2, [r1, #0]
 80078e4:	d1db      	bne.n	800789e <_scanf_float+0x39a>
 80078e6:	f8d3 8000 	ldr.w	r8, [r3]
 80078ea:	ee10 2a10 	vmov	r2, s0
 80078ee:	ee10 0a10 	vmov	r0, s0
 80078f2:	463b      	mov	r3, r7
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f9 f931 	bl	8000b5c <__aeabi_dcmpun>
 80078fa:	b128      	cbz	r0, 8007908 <_scanf_float+0x404>
 80078fc:	4808      	ldr	r0, [pc, #32]	; (8007920 <_scanf_float+0x41c>)
 80078fe:	f000 f8af 	bl	8007a60 <nanf>
 8007902:	ed88 0a00 	vstr	s0, [r8]
 8007906:	e7cd      	b.n	80078a4 <_scanf_float+0x3a0>
 8007908:	4630      	mov	r0, r6
 800790a:	4639      	mov	r1, r7
 800790c:	f7f9 f984 	bl	8000c18 <__aeabi_d2f>
 8007910:	f8c8 0000 	str.w	r0, [r8]
 8007914:	e7c6      	b.n	80078a4 <_scanf_float+0x3a0>
 8007916:	2500      	movs	r5, #0
 8007918:	e635      	b.n	8007586 <_scanf_float+0x82>
 800791a:	bf00      	nop
 800791c:	08035b19 	.word	0x08035b19
 8007920:	08035acf 	.word	0x08035acf

08007924 <iprintf>:
 8007924:	b40f      	push	{r0, r1, r2, r3}
 8007926:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <iprintf+0x2c>)
 8007928:	b513      	push	{r0, r1, r4, lr}
 800792a:	681c      	ldr	r4, [r3, #0]
 800792c:	b124      	cbz	r4, 8007938 <iprintf+0x14>
 800792e:	69a3      	ldr	r3, [r4, #24]
 8007930:	b913      	cbnz	r3, 8007938 <iprintf+0x14>
 8007932:	4620      	mov	r0, r4
 8007934:	f001 ffc6 	bl	80098c4 <__sinit>
 8007938:	ab05      	add	r3, sp, #20
 800793a:	9a04      	ldr	r2, [sp, #16]
 800793c:	68a1      	ldr	r1, [r4, #8]
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	4620      	mov	r0, r4
 8007942:	f7ff f845 	bl	80069d0 <_vfiprintf_r>
 8007946:	b002      	add	sp, #8
 8007948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800794c:	b004      	add	sp, #16
 800794e:	4770      	bx	lr
 8007950:	2000000c 	.word	0x2000000c

08007954 <_puts_r>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	460e      	mov	r6, r1
 8007958:	4605      	mov	r5, r0
 800795a:	b118      	cbz	r0, 8007964 <_puts_r+0x10>
 800795c:	6983      	ldr	r3, [r0, #24]
 800795e:	b90b      	cbnz	r3, 8007964 <_puts_r+0x10>
 8007960:	f001 ffb0 	bl	80098c4 <__sinit>
 8007964:	69ab      	ldr	r3, [r5, #24]
 8007966:	68ac      	ldr	r4, [r5, #8]
 8007968:	b913      	cbnz	r3, 8007970 <_puts_r+0x1c>
 800796a:	4628      	mov	r0, r5
 800796c:	f001 ffaa 	bl	80098c4 <__sinit>
 8007970:	4b2c      	ldr	r3, [pc, #176]	; (8007a24 <_puts_r+0xd0>)
 8007972:	429c      	cmp	r4, r3
 8007974:	d120      	bne.n	80079b8 <_puts_r+0x64>
 8007976:	686c      	ldr	r4, [r5, #4]
 8007978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800797a:	07db      	lsls	r3, r3, #31
 800797c:	d405      	bmi.n	800798a <_puts_r+0x36>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	0598      	lsls	r0, r3, #22
 8007982:	d402      	bmi.n	800798a <_puts_r+0x36>
 8007984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007986:	f002 fbae 	bl	800a0e6 <__retarget_lock_acquire_recursive>
 800798a:	89a3      	ldrh	r3, [r4, #12]
 800798c:	0719      	lsls	r1, r3, #28
 800798e:	d51d      	bpl.n	80079cc <_puts_r+0x78>
 8007990:	6923      	ldr	r3, [r4, #16]
 8007992:	b1db      	cbz	r3, 80079cc <_puts_r+0x78>
 8007994:	3e01      	subs	r6, #1
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800799c:	3b01      	subs	r3, #1
 800799e:	60a3      	str	r3, [r4, #8]
 80079a0:	bb39      	cbnz	r1, 80079f2 <_puts_r+0x9e>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	da38      	bge.n	8007a18 <_puts_r+0xc4>
 80079a6:	4622      	mov	r2, r4
 80079a8:	210a      	movs	r1, #10
 80079aa:	4628      	mov	r0, r5
 80079ac:	f000 ff32 	bl	8008814 <__swbuf_r>
 80079b0:	3001      	adds	r0, #1
 80079b2:	d011      	beq.n	80079d8 <_puts_r+0x84>
 80079b4:	250a      	movs	r5, #10
 80079b6:	e011      	b.n	80079dc <_puts_r+0x88>
 80079b8:	4b1b      	ldr	r3, [pc, #108]	; (8007a28 <_puts_r+0xd4>)
 80079ba:	429c      	cmp	r4, r3
 80079bc:	d101      	bne.n	80079c2 <_puts_r+0x6e>
 80079be:	68ac      	ldr	r4, [r5, #8]
 80079c0:	e7da      	b.n	8007978 <_puts_r+0x24>
 80079c2:	4b1a      	ldr	r3, [pc, #104]	; (8007a2c <_puts_r+0xd8>)
 80079c4:	429c      	cmp	r4, r3
 80079c6:	bf08      	it	eq
 80079c8:	68ec      	ldreq	r4, [r5, #12]
 80079ca:	e7d5      	b.n	8007978 <_puts_r+0x24>
 80079cc:	4621      	mov	r1, r4
 80079ce:	4628      	mov	r0, r5
 80079d0:	f000 ff72 	bl	80088b8 <__swsetup_r>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	d0dd      	beq.n	8007994 <_puts_r+0x40>
 80079d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80079dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079de:	07da      	lsls	r2, r3, #31
 80079e0:	d405      	bmi.n	80079ee <_puts_r+0x9a>
 80079e2:	89a3      	ldrh	r3, [r4, #12]
 80079e4:	059b      	lsls	r3, r3, #22
 80079e6:	d402      	bmi.n	80079ee <_puts_r+0x9a>
 80079e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ea:	f002 fb7d 	bl	800a0e8 <__retarget_lock_release_recursive>
 80079ee:	4628      	mov	r0, r5
 80079f0:	bd70      	pop	{r4, r5, r6, pc}
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	da04      	bge.n	8007a00 <_puts_r+0xac>
 80079f6:	69a2      	ldr	r2, [r4, #24]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	dc06      	bgt.n	8007a0a <_puts_r+0xb6>
 80079fc:	290a      	cmp	r1, #10
 80079fe:	d004      	beq.n	8007a0a <_puts_r+0xb6>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	6022      	str	r2, [r4, #0]
 8007a06:	7019      	strb	r1, [r3, #0]
 8007a08:	e7c5      	b.n	8007996 <_puts_r+0x42>
 8007a0a:	4622      	mov	r2, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f000 ff01 	bl	8008814 <__swbuf_r>
 8007a12:	3001      	adds	r0, #1
 8007a14:	d1bf      	bne.n	8007996 <_puts_r+0x42>
 8007a16:	e7df      	b.n	80079d8 <_puts_r+0x84>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	250a      	movs	r5, #10
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	6022      	str	r2, [r4, #0]
 8007a20:	701d      	strb	r5, [r3, #0]
 8007a22:	e7db      	b.n	80079dc <_puts_r+0x88>
 8007a24:	08035d28 	.word	0x08035d28
 8007a28:	08035d48 	.word	0x08035d48
 8007a2c:	08035d08 	.word	0x08035d08

08007a30 <puts>:
 8007a30:	4b02      	ldr	r3, [pc, #8]	; (8007a3c <puts+0xc>)
 8007a32:	4601      	mov	r1, r0
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	f7ff bf8d 	b.w	8007954 <_puts_r>
 8007a3a:	bf00      	nop
 8007a3c:	2000000c 	.word	0x2000000c

08007a40 <_sbrk_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d06      	ldr	r5, [pc, #24]	; (8007a5c <_sbrk_r+0x1c>)
 8007a44:	2300      	movs	r3, #0
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7fb f9ea 	bl	8002e24 <_sbrk>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_sbrk_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_sbrk_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	200002f0 	.word	0x200002f0

08007a60 <nanf>:
 8007a60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007a68 <nanf+0x8>
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	7fc00000 	.word	0x7fc00000

08007a6c <siprintf>:
 8007a6c:	b40e      	push	{r1, r2, r3}
 8007a6e:	b500      	push	{lr}
 8007a70:	b09c      	sub	sp, #112	; 0x70
 8007a72:	ab1d      	add	r3, sp, #116	; 0x74
 8007a74:	9002      	str	r0, [sp, #8]
 8007a76:	9006      	str	r0, [sp, #24]
 8007a78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a7c:	4809      	ldr	r0, [pc, #36]	; (8007aa4 <siprintf+0x38>)
 8007a7e:	9107      	str	r1, [sp, #28]
 8007a80:	9104      	str	r1, [sp, #16]
 8007a82:	4909      	ldr	r1, [pc, #36]	; (8007aa8 <siprintf+0x3c>)
 8007a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a88:	9105      	str	r1, [sp, #20]
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	9301      	str	r3, [sp, #4]
 8007a8e:	a902      	add	r1, sp, #8
 8007a90:	f003 f922 	bl	800acd8 <_svfiprintf_r>
 8007a94:	9b02      	ldr	r3, [sp, #8]
 8007a96:	2200      	movs	r2, #0
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	b01c      	add	sp, #112	; 0x70
 8007a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007aa0:	b003      	add	sp, #12
 8007aa2:	4770      	bx	lr
 8007aa4:	2000000c 	.word	0x2000000c
 8007aa8:	ffff0208 	.word	0xffff0208

08007aac <sulp>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4604      	mov	r4, r0
 8007ab0:	460d      	mov	r5, r1
 8007ab2:	ec45 4b10 	vmov	d0, r4, r5
 8007ab6:	4616      	mov	r6, r2
 8007ab8:	f002 ff2e 	bl	800a918 <__ulp>
 8007abc:	ec51 0b10 	vmov	r0, r1, d0
 8007ac0:	b17e      	cbz	r6, 8007ae2 <sulp+0x36>
 8007ac2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ac6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	dd09      	ble.n	8007ae2 <sulp+0x36>
 8007ace:	051b      	lsls	r3, r3, #20
 8007ad0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ad4:	2400      	movs	r4, #0
 8007ad6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007ada:	4622      	mov	r2, r4
 8007adc:	462b      	mov	r3, r5
 8007ade:	f7f8 fda3 	bl	8000628 <__aeabi_dmul>
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	0000      	movs	r0, r0
	...

08007ae8 <_strtod_l>:
 8007ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aec:	b0a3      	sub	sp, #140	; 0x8c
 8007aee:	461f      	mov	r7, r3
 8007af0:	2300      	movs	r3, #0
 8007af2:	931e      	str	r3, [sp, #120]	; 0x78
 8007af4:	4ba4      	ldr	r3, [pc, #656]	; (8007d88 <_strtod_l+0x2a0>)
 8007af6:	9219      	str	r2, [sp, #100]	; 0x64
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	9307      	str	r3, [sp, #28]
 8007afc:	4604      	mov	r4, r0
 8007afe:	4618      	mov	r0, r3
 8007b00:	4688      	mov	r8, r1
 8007b02:	f7f8 fb7d 	bl	8000200 <strlen>
 8007b06:	f04f 0a00 	mov.w	sl, #0
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	f04f 0b00 	mov.w	fp, #0
 8007b10:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	2a2b      	cmp	r2, #43	; 0x2b
 8007b1a:	d04c      	beq.n	8007bb6 <_strtod_l+0xce>
 8007b1c:	d839      	bhi.n	8007b92 <_strtod_l+0xaa>
 8007b1e:	2a0d      	cmp	r2, #13
 8007b20:	d832      	bhi.n	8007b88 <_strtod_l+0xa0>
 8007b22:	2a08      	cmp	r2, #8
 8007b24:	d832      	bhi.n	8007b8c <_strtod_l+0xa4>
 8007b26:	2a00      	cmp	r2, #0
 8007b28:	d03c      	beq.n	8007ba4 <_strtod_l+0xbc>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b2e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007b30:	7833      	ldrb	r3, [r6, #0]
 8007b32:	2b30      	cmp	r3, #48	; 0x30
 8007b34:	f040 80b4 	bne.w	8007ca0 <_strtod_l+0x1b8>
 8007b38:	7873      	ldrb	r3, [r6, #1]
 8007b3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b3e:	2b58      	cmp	r3, #88	; 0x58
 8007b40:	d16c      	bne.n	8007c1c <_strtod_l+0x134>
 8007b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b44:	9301      	str	r3, [sp, #4]
 8007b46:	ab1e      	add	r3, sp, #120	; 0x78
 8007b48:	9702      	str	r7, [sp, #8]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	4a8f      	ldr	r2, [pc, #572]	; (8007d8c <_strtod_l+0x2a4>)
 8007b4e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007b50:	a91d      	add	r1, sp, #116	; 0x74
 8007b52:	4620      	mov	r0, r4
 8007b54:	f001 ffba 	bl	8009acc <__gethex>
 8007b58:	f010 0707 	ands.w	r7, r0, #7
 8007b5c:	4605      	mov	r5, r0
 8007b5e:	d005      	beq.n	8007b6c <_strtod_l+0x84>
 8007b60:	2f06      	cmp	r7, #6
 8007b62:	d12a      	bne.n	8007bba <_strtod_l+0xd2>
 8007b64:	3601      	adds	r6, #1
 8007b66:	2300      	movs	r3, #0
 8007b68:	961d      	str	r6, [sp, #116]	; 0x74
 8007b6a:	930e      	str	r3, [sp, #56]	; 0x38
 8007b6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f040 8596 	bne.w	80086a0 <_strtod_l+0xbb8>
 8007b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b76:	b1db      	cbz	r3, 8007bb0 <_strtod_l+0xc8>
 8007b78:	4652      	mov	r2, sl
 8007b7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b7e:	ec43 2b10 	vmov	d0, r2, r3
 8007b82:	b023      	add	sp, #140	; 0x8c
 8007b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b88:	2a20      	cmp	r2, #32
 8007b8a:	d1ce      	bne.n	8007b2a <_strtod_l+0x42>
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	931d      	str	r3, [sp, #116]	; 0x74
 8007b90:	e7c0      	b.n	8007b14 <_strtod_l+0x2c>
 8007b92:	2a2d      	cmp	r2, #45	; 0x2d
 8007b94:	d1c9      	bne.n	8007b2a <_strtod_l+0x42>
 8007b96:	2201      	movs	r2, #1
 8007b98:	920e      	str	r2, [sp, #56]	; 0x38
 8007b9a:	1c5a      	adds	r2, r3, #1
 8007b9c:	921d      	str	r2, [sp, #116]	; 0x74
 8007b9e:	785b      	ldrb	r3, [r3, #1]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1c4      	bne.n	8007b2e <_strtod_l+0x46>
 8007ba4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ba6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f040 8576 	bne.w	800869c <_strtod_l+0xbb4>
 8007bb0:	4652      	mov	r2, sl
 8007bb2:	465b      	mov	r3, fp
 8007bb4:	e7e3      	b.n	8007b7e <_strtod_l+0x96>
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	e7ee      	b.n	8007b98 <_strtod_l+0xb0>
 8007bba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007bbc:	b13a      	cbz	r2, 8007bce <_strtod_l+0xe6>
 8007bbe:	2135      	movs	r1, #53	; 0x35
 8007bc0:	a820      	add	r0, sp, #128	; 0x80
 8007bc2:	f002 ffb4 	bl	800ab2e <__copybits>
 8007bc6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f002 fb79 	bl	800a2c0 <_Bfree>
 8007bce:	3f01      	subs	r7, #1
 8007bd0:	2f05      	cmp	r7, #5
 8007bd2:	d807      	bhi.n	8007be4 <_strtod_l+0xfc>
 8007bd4:	e8df f007 	tbb	[pc, r7]
 8007bd8:	1d180b0e 	.word	0x1d180b0e
 8007bdc:	030e      	.short	0x030e
 8007bde:	f04f 0b00 	mov.w	fp, #0
 8007be2:	46da      	mov	sl, fp
 8007be4:	0728      	lsls	r0, r5, #28
 8007be6:	d5c1      	bpl.n	8007b6c <_strtod_l+0x84>
 8007be8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007bec:	e7be      	b.n	8007b6c <_strtod_l+0x84>
 8007bee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8007bf2:	e7f7      	b.n	8007be4 <_strtod_l+0xfc>
 8007bf4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007bf8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007bfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007bfe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c06:	e7ed      	b.n	8007be4 <_strtod_l+0xfc>
 8007c08:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007d90 <_strtod_l+0x2a8>
 8007c0c:	f04f 0a00 	mov.w	sl, #0
 8007c10:	e7e8      	b.n	8007be4 <_strtod_l+0xfc>
 8007c12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007c16:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007c1a:	e7e3      	b.n	8007be4 <_strtod_l+0xfc>
 8007c1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c1e:	1c5a      	adds	r2, r3, #1
 8007c20:	921d      	str	r2, [sp, #116]	; 0x74
 8007c22:	785b      	ldrb	r3, [r3, #1]
 8007c24:	2b30      	cmp	r3, #48	; 0x30
 8007c26:	d0f9      	beq.n	8007c1c <_strtod_l+0x134>
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d09f      	beq.n	8007b6c <_strtod_l+0x84>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f04f 0900 	mov.w	r9, #0
 8007c32:	9304      	str	r3, [sp, #16]
 8007c34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c36:	930a      	str	r3, [sp, #40]	; 0x28
 8007c38:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007c3c:	464f      	mov	r7, r9
 8007c3e:	220a      	movs	r2, #10
 8007c40:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007c42:	7806      	ldrb	r6, [r0, #0]
 8007c44:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007c48:	b2d9      	uxtb	r1, r3
 8007c4a:	2909      	cmp	r1, #9
 8007c4c:	d92a      	bls.n	8007ca4 <_strtod_l+0x1bc>
 8007c4e:	9907      	ldr	r1, [sp, #28]
 8007c50:	462a      	mov	r2, r5
 8007c52:	f003 f9d0 	bl	800aff6 <strncmp>
 8007c56:	b398      	cbz	r0, 8007cc0 <_strtod_l+0x1d8>
 8007c58:	2000      	movs	r0, #0
 8007c5a:	4633      	mov	r3, r6
 8007c5c:	463d      	mov	r5, r7
 8007c5e:	9007      	str	r0, [sp, #28]
 8007c60:	4602      	mov	r2, r0
 8007c62:	2b65      	cmp	r3, #101	; 0x65
 8007c64:	d001      	beq.n	8007c6a <_strtod_l+0x182>
 8007c66:	2b45      	cmp	r3, #69	; 0x45
 8007c68:	d118      	bne.n	8007c9c <_strtod_l+0x1b4>
 8007c6a:	b91d      	cbnz	r5, 8007c74 <_strtod_l+0x18c>
 8007c6c:	9b04      	ldr	r3, [sp, #16]
 8007c6e:	4303      	orrs	r3, r0
 8007c70:	d098      	beq.n	8007ba4 <_strtod_l+0xbc>
 8007c72:	2500      	movs	r5, #0
 8007c74:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007c78:	f108 0301 	add.w	r3, r8, #1
 8007c7c:	931d      	str	r3, [sp, #116]	; 0x74
 8007c7e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007c82:	2b2b      	cmp	r3, #43	; 0x2b
 8007c84:	d075      	beq.n	8007d72 <_strtod_l+0x28a>
 8007c86:	2b2d      	cmp	r3, #45	; 0x2d
 8007c88:	d07b      	beq.n	8007d82 <_strtod_l+0x29a>
 8007c8a:	f04f 0c00 	mov.w	ip, #0
 8007c8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007c92:	2909      	cmp	r1, #9
 8007c94:	f240 8082 	bls.w	8007d9c <_strtod_l+0x2b4>
 8007c98:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007c9c:	2600      	movs	r6, #0
 8007c9e:	e09d      	b.n	8007ddc <_strtod_l+0x2f4>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e7c4      	b.n	8007c2e <_strtod_l+0x146>
 8007ca4:	2f08      	cmp	r7, #8
 8007ca6:	bfd8      	it	le
 8007ca8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007caa:	f100 0001 	add.w	r0, r0, #1
 8007cae:	bfda      	itte	le
 8007cb0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007cb4:	9309      	strle	r3, [sp, #36]	; 0x24
 8007cb6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007cba:	3701      	adds	r7, #1
 8007cbc:	901d      	str	r0, [sp, #116]	; 0x74
 8007cbe:	e7bf      	b.n	8007c40 <_strtod_l+0x158>
 8007cc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cc2:	195a      	adds	r2, r3, r5
 8007cc4:	921d      	str	r2, [sp, #116]	; 0x74
 8007cc6:	5d5b      	ldrb	r3, [r3, r5]
 8007cc8:	2f00      	cmp	r7, #0
 8007cca:	d037      	beq.n	8007d3c <_strtod_l+0x254>
 8007ccc:	9007      	str	r0, [sp, #28]
 8007cce:	463d      	mov	r5, r7
 8007cd0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007cd4:	2a09      	cmp	r2, #9
 8007cd6:	d912      	bls.n	8007cfe <_strtod_l+0x216>
 8007cd8:	2201      	movs	r2, #1
 8007cda:	e7c2      	b.n	8007c62 <_strtod_l+0x17a>
 8007cdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	921d      	str	r2, [sp, #116]	; 0x74
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	3001      	adds	r0, #1
 8007ce6:	2b30      	cmp	r3, #48	; 0x30
 8007ce8:	d0f8      	beq.n	8007cdc <_strtod_l+0x1f4>
 8007cea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007cee:	2a08      	cmp	r2, #8
 8007cf0:	f200 84db 	bhi.w	80086aa <_strtod_l+0xbc2>
 8007cf4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007cf6:	9007      	str	r0, [sp, #28]
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	920a      	str	r2, [sp, #40]	; 0x28
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	3b30      	subs	r3, #48	; 0x30
 8007d00:	f100 0201 	add.w	r2, r0, #1
 8007d04:	d014      	beq.n	8007d30 <_strtod_l+0x248>
 8007d06:	9907      	ldr	r1, [sp, #28]
 8007d08:	4411      	add	r1, r2
 8007d0a:	9107      	str	r1, [sp, #28]
 8007d0c:	462a      	mov	r2, r5
 8007d0e:	eb00 0e05 	add.w	lr, r0, r5
 8007d12:	210a      	movs	r1, #10
 8007d14:	4572      	cmp	r2, lr
 8007d16:	d113      	bne.n	8007d40 <_strtod_l+0x258>
 8007d18:	182a      	adds	r2, r5, r0
 8007d1a:	2a08      	cmp	r2, #8
 8007d1c:	f105 0501 	add.w	r5, r5, #1
 8007d20:	4405      	add	r5, r0
 8007d22:	dc1c      	bgt.n	8007d5e <_strtod_l+0x276>
 8007d24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d26:	220a      	movs	r2, #10
 8007d28:	fb02 3301 	mla	r3, r2, r1, r3
 8007d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d2e:	2200      	movs	r2, #0
 8007d30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d32:	1c59      	adds	r1, r3, #1
 8007d34:	911d      	str	r1, [sp, #116]	; 0x74
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	4610      	mov	r0, r2
 8007d3a:	e7c9      	b.n	8007cd0 <_strtod_l+0x1e8>
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	e7d2      	b.n	8007ce6 <_strtod_l+0x1fe>
 8007d40:	2a08      	cmp	r2, #8
 8007d42:	dc04      	bgt.n	8007d4e <_strtod_l+0x266>
 8007d44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007d46:	434e      	muls	r6, r1
 8007d48:	9609      	str	r6, [sp, #36]	; 0x24
 8007d4a:	3201      	adds	r2, #1
 8007d4c:	e7e2      	b.n	8007d14 <_strtod_l+0x22c>
 8007d4e:	f102 0c01 	add.w	ip, r2, #1
 8007d52:	f1bc 0f10 	cmp.w	ip, #16
 8007d56:	bfd8      	it	le
 8007d58:	fb01 f909 	mulle.w	r9, r1, r9
 8007d5c:	e7f5      	b.n	8007d4a <_strtod_l+0x262>
 8007d5e:	2d10      	cmp	r5, #16
 8007d60:	bfdc      	itt	le
 8007d62:	220a      	movle	r2, #10
 8007d64:	fb02 3909 	mlale	r9, r2, r9, r3
 8007d68:	e7e1      	b.n	8007d2e <_strtod_l+0x246>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	9307      	str	r3, [sp, #28]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	e77c      	b.n	8007c6c <_strtod_l+0x184>
 8007d72:	f04f 0c00 	mov.w	ip, #0
 8007d76:	f108 0302 	add.w	r3, r8, #2
 8007d7a:	931d      	str	r3, [sp, #116]	; 0x74
 8007d7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007d80:	e785      	b.n	8007c8e <_strtod_l+0x1a6>
 8007d82:	f04f 0c01 	mov.w	ip, #1
 8007d86:	e7f6      	b.n	8007d76 <_strtod_l+0x28e>
 8007d88:	08035dd4 	.word	0x08035dd4
 8007d8c:	08035b20 	.word	0x08035b20
 8007d90:	7ff00000 	.word	0x7ff00000
 8007d94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d96:	1c59      	adds	r1, r3, #1
 8007d98:	911d      	str	r1, [sp, #116]	; 0x74
 8007d9a:	785b      	ldrb	r3, [r3, #1]
 8007d9c:	2b30      	cmp	r3, #48	; 0x30
 8007d9e:	d0f9      	beq.n	8007d94 <_strtod_l+0x2ac>
 8007da0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007da4:	2908      	cmp	r1, #8
 8007da6:	f63f af79 	bhi.w	8007c9c <_strtod_l+0x1b4>
 8007daa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007dae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007db0:	9308      	str	r3, [sp, #32]
 8007db2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007db4:	1c59      	adds	r1, r3, #1
 8007db6:	911d      	str	r1, [sp, #116]	; 0x74
 8007db8:	785b      	ldrb	r3, [r3, #1]
 8007dba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007dbe:	2e09      	cmp	r6, #9
 8007dc0:	d937      	bls.n	8007e32 <_strtod_l+0x34a>
 8007dc2:	9e08      	ldr	r6, [sp, #32]
 8007dc4:	1b89      	subs	r1, r1, r6
 8007dc6:	2908      	cmp	r1, #8
 8007dc8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007dcc:	dc02      	bgt.n	8007dd4 <_strtod_l+0x2ec>
 8007dce:	4576      	cmp	r6, lr
 8007dd0:	bfa8      	it	ge
 8007dd2:	4676      	movge	r6, lr
 8007dd4:	f1bc 0f00 	cmp.w	ip, #0
 8007dd8:	d000      	beq.n	8007ddc <_strtod_l+0x2f4>
 8007dda:	4276      	negs	r6, r6
 8007ddc:	2d00      	cmp	r5, #0
 8007dde:	d14f      	bne.n	8007e80 <_strtod_l+0x398>
 8007de0:	9904      	ldr	r1, [sp, #16]
 8007de2:	4301      	orrs	r1, r0
 8007de4:	f47f aec2 	bne.w	8007b6c <_strtod_l+0x84>
 8007de8:	2a00      	cmp	r2, #0
 8007dea:	f47f aedb 	bne.w	8007ba4 <_strtod_l+0xbc>
 8007dee:	2b69      	cmp	r3, #105	; 0x69
 8007df0:	d027      	beq.n	8007e42 <_strtod_l+0x35a>
 8007df2:	dc24      	bgt.n	8007e3e <_strtod_l+0x356>
 8007df4:	2b49      	cmp	r3, #73	; 0x49
 8007df6:	d024      	beq.n	8007e42 <_strtod_l+0x35a>
 8007df8:	2b4e      	cmp	r3, #78	; 0x4e
 8007dfa:	f47f aed3 	bne.w	8007ba4 <_strtod_l+0xbc>
 8007dfe:	499e      	ldr	r1, [pc, #632]	; (8008078 <_strtod_l+0x590>)
 8007e00:	a81d      	add	r0, sp, #116	; 0x74
 8007e02:	f002 f8bb 	bl	8009f7c <__match>
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f43f aecc 	beq.w	8007ba4 <_strtod_l+0xbc>
 8007e0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b28      	cmp	r3, #40	; 0x28
 8007e12:	d12d      	bne.n	8007e70 <_strtod_l+0x388>
 8007e14:	4999      	ldr	r1, [pc, #612]	; (800807c <_strtod_l+0x594>)
 8007e16:	aa20      	add	r2, sp, #128	; 0x80
 8007e18:	a81d      	add	r0, sp, #116	; 0x74
 8007e1a:	f002 f8c3 	bl	8009fa4 <__hexnan>
 8007e1e:	2805      	cmp	r0, #5
 8007e20:	d126      	bne.n	8007e70 <_strtod_l+0x388>
 8007e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e24:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007e28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007e2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007e30:	e69c      	b.n	8007b6c <_strtod_l+0x84>
 8007e32:	210a      	movs	r1, #10
 8007e34:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007e38:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007e3c:	e7b9      	b.n	8007db2 <_strtod_l+0x2ca>
 8007e3e:	2b6e      	cmp	r3, #110	; 0x6e
 8007e40:	e7db      	b.n	8007dfa <_strtod_l+0x312>
 8007e42:	498f      	ldr	r1, [pc, #572]	; (8008080 <_strtod_l+0x598>)
 8007e44:	a81d      	add	r0, sp, #116	; 0x74
 8007e46:	f002 f899 	bl	8009f7c <__match>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	f43f aeaa 	beq.w	8007ba4 <_strtod_l+0xbc>
 8007e50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e52:	498c      	ldr	r1, [pc, #560]	; (8008084 <_strtod_l+0x59c>)
 8007e54:	3b01      	subs	r3, #1
 8007e56:	a81d      	add	r0, sp, #116	; 0x74
 8007e58:	931d      	str	r3, [sp, #116]	; 0x74
 8007e5a:	f002 f88f 	bl	8009f7c <__match>
 8007e5e:	b910      	cbnz	r0, 8007e66 <_strtod_l+0x37e>
 8007e60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e62:	3301      	adds	r3, #1
 8007e64:	931d      	str	r3, [sp, #116]	; 0x74
 8007e66:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008094 <_strtod_l+0x5ac>
 8007e6a:	f04f 0a00 	mov.w	sl, #0
 8007e6e:	e67d      	b.n	8007b6c <_strtod_l+0x84>
 8007e70:	4885      	ldr	r0, [pc, #532]	; (8008088 <_strtod_l+0x5a0>)
 8007e72:	f003 f831 	bl	800aed8 <nan>
 8007e76:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007e7a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007e7e:	e675      	b.n	8007b6c <_strtod_l+0x84>
 8007e80:	9b07      	ldr	r3, [sp, #28]
 8007e82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e84:	1af3      	subs	r3, r6, r3
 8007e86:	2f00      	cmp	r7, #0
 8007e88:	bf08      	it	eq
 8007e8a:	462f      	moveq	r7, r5
 8007e8c:	2d10      	cmp	r5, #16
 8007e8e:	9308      	str	r3, [sp, #32]
 8007e90:	46a8      	mov	r8, r5
 8007e92:	bfa8      	it	ge
 8007e94:	f04f 0810 	movge.w	r8, #16
 8007e98:	f7f8 fb4c 	bl	8000534 <__aeabi_ui2d>
 8007e9c:	2d09      	cmp	r5, #9
 8007e9e:	4682      	mov	sl, r0
 8007ea0:	468b      	mov	fp, r1
 8007ea2:	dd13      	ble.n	8007ecc <_strtod_l+0x3e4>
 8007ea4:	4b79      	ldr	r3, [pc, #484]	; (800808c <_strtod_l+0x5a4>)
 8007ea6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007eaa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007eae:	f7f8 fbbb 	bl	8000628 <__aeabi_dmul>
 8007eb2:	4682      	mov	sl, r0
 8007eb4:	4648      	mov	r0, r9
 8007eb6:	468b      	mov	fp, r1
 8007eb8:	f7f8 fb3c 	bl	8000534 <__aeabi_ui2d>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4650      	mov	r0, sl
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	f7f8 f9fa 	bl	80002bc <__adddf3>
 8007ec8:	4682      	mov	sl, r0
 8007eca:	468b      	mov	fp, r1
 8007ecc:	2d0f      	cmp	r5, #15
 8007ece:	dc38      	bgt.n	8007f42 <_strtod_l+0x45a>
 8007ed0:	9b08      	ldr	r3, [sp, #32]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f43f ae4a 	beq.w	8007b6c <_strtod_l+0x84>
 8007ed8:	dd24      	ble.n	8007f24 <_strtod_l+0x43c>
 8007eda:	2b16      	cmp	r3, #22
 8007edc:	dc0b      	bgt.n	8007ef6 <_strtod_l+0x40e>
 8007ede:	4d6b      	ldr	r5, [pc, #428]	; (800808c <_strtod_l+0x5a4>)
 8007ee0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007ee4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007ee8:	4652      	mov	r2, sl
 8007eea:	465b      	mov	r3, fp
 8007eec:	f7f8 fb9c 	bl	8000628 <__aeabi_dmul>
 8007ef0:	4682      	mov	sl, r0
 8007ef2:	468b      	mov	fp, r1
 8007ef4:	e63a      	b.n	8007b6c <_strtod_l+0x84>
 8007ef6:	9a08      	ldr	r2, [sp, #32]
 8007ef8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007efc:	4293      	cmp	r3, r2
 8007efe:	db20      	blt.n	8007f42 <_strtod_l+0x45a>
 8007f00:	4c62      	ldr	r4, [pc, #392]	; (800808c <_strtod_l+0x5a4>)
 8007f02:	f1c5 050f 	rsb	r5, r5, #15
 8007f06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f0a:	4652      	mov	r2, sl
 8007f0c:	465b      	mov	r3, fp
 8007f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f12:	f7f8 fb89 	bl	8000628 <__aeabi_dmul>
 8007f16:	9b08      	ldr	r3, [sp, #32]
 8007f18:	1b5d      	subs	r5, r3, r5
 8007f1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f22:	e7e3      	b.n	8007eec <_strtod_l+0x404>
 8007f24:	9b08      	ldr	r3, [sp, #32]
 8007f26:	3316      	adds	r3, #22
 8007f28:	db0b      	blt.n	8007f42 <_strtod_l+0x45a>
 8007f2a:	9b07      	ldr	r3, [sp, #28]
 8007f2c:	4a57      	ldr	r2, [pc, #348]	; (800808c <_strtod_l+0x5a4>)
 8007f2e:	1b9e      	subs	r6, r3, r6
 8007f30:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007f34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f38:	4650      	mov	r0, sl
 8007f3a:	4659      	mov	r1, fp
 8007f3c:	f7f8 fc9e 	bl	800087c <__aeabi_ddiv>
 8007f40:	e7d6      	b.n	8007ef0 <_strtod_l+0x408>
 8007f42:	9b08      	ldr	r3, [sp, #32]
 8007f44:	eba5 0808 	sub.w	r8, r5, r8
 8007f48:	4498      	add	r8, r3
 8007f4a:	f1b8 0f00 	cmp.w	r8, #0
 8007f4e:	dd71      	ble.n	8008034 <_strtod_l+0x54c>
 8007f50:	f018 030f 	ands.w	r3, r8, #15
 8007f54:	d00a      	beq.n	8007f6c <_strtod_l+0x484>
 8007f56:	494d      	ldr	r1, [pc, #308]	; (800808c <_strtod_l+0x5a4>)
 8007f58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f5c:	4652      	mov	r2, sl
 8007f5e:	465b      	mov	r3, fp
 8007f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f64:	f7f8 fb60 	bl	8000628 <__aeabi_dmul>
 8007f68:	4682      	mov	sl, r0
 8007f6a:	468b      	mov	fp, r1
 8007f6c:	f038 080f 	bics.w	r8, r8, #15
 8007f70:	d04d      	beq.n	800800e <_strtod_l+0x526>
 8007f72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007f76:	dd22      	ble.n	8007fbe <_strtod_l+0x4d6>
 8007f78:	2500      	movs	r5, #0
 8007f7a:	462e      	mov	r6, r5
 8007f7c:	9509      	str	r5, [sp, #36]	; 0x24
 8007f7e:	9507      	str	r5, [sp, #28]
 8007f80:	2322      	movs	r3, #34	; 0x22
 8007f82:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008094 <_strtod_l+0x5ac>
 8007f86:	6023      	str	r3, [r4, #0]
 8007f88:	f04f 0a00 	mov.w	sl, #0
 8007f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f43f adec 	beq.w	8007b6c <_strtod_l+0x84>
 8007f94:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007f96:	4620      	mov	r0, r4
 8007f98:	f002 f992 	bl	800a2c0 <_Bfree>
 8007f9c:	9907      	ldr	r1, [sp, #28]
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f002 f98e 	bl	800a2c0 <_Bfree>
 8007fa4:	4631      	mov	r1, r6
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f002 f98a 	bl	800a2c0 <_Bfree>
 8007fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f002 f986 	bl	800a2c0 <_Bfree>
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f002 f982 	bl	800a2c0 <_Bfree>
 8007fbc:	e5d6      	b.n	8007b6c <_strtod_l+0x84>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007fc4:	4650      	mov	r0, sl
 8007fc6:	4659      	mov	r1, fp
 8007fc8:	4699      	mov	r9, r3
 8007fca:	f1b8 0f01 	cmp.w	r8, #1
 8007fce:	dc21      	bgt.n	8008014 <_strtod_l+0x52c>
 8007fd0:	b10b      	cbz	r3, 8007fd6 <_strtod_l+0x4ee>
 8007fd2:	4682      	mov	sl, r0
 8007fd4:	468b      	mov	fp, r1
 8007fd6:	4b2e      	ldr	r3, [pc, #184]	; (8008090 <_strtod_l+0x5a8>)
 8007fd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007fdc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007fe0:	4652      	mov	r2, sl
 8007fe2:	465b      	mov	r3, fp
 8007fe4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007fe8:	f7f8 fb1e 	bl	8000628 <__aeabi_dmul>
 8007fec:	4b29      	ldr	r3, [pc, #164]	; (8008094 <_strtod_l+0x5ac>)
 8007fee:	460a      	mov	r2, r1
 8007ff0:	400b      	ands	r3, r1
 8007ff2:	4929      	ldr	r1, [pc, #164]	; (8008098 <_strtod_l+0x5b0>)
 8007ff4:	428b      	cmp	r3, r1
 8007ff6:	4682      	mov	sl, r0
 8007ff8:	d8be      	bhi.n	8007f78 <_strtod_l+0x490>
 8007ffa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007ffe:	428b      	cmp	r3, r1
 8008000:	bf86      	itte	hi
 8008002:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800809c <_strtod_l+0x5b4>
 8008006:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800800a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800800e:	2300      	movs	r3, #0
 8008010:	9304      	str	r3, [sp, #16]
 8008012:	e081      	b.n	8008118 <_strtod_l+0x630>
 8008014:	f018 0f01 	tst.w	r8, #1
 8008018:	d007      	beq.n	800802a <_strtod_l+0x542>
 800801a:	4b1d      	ldr	r3, [pc, #116]	; (8008090 <_strtod_l+0x5a8>)
 800801c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	f7f8 fb00 	bl	8000628 <__aeabi_dmul>
 8008028:	2301      	movs	r3, #1
 800802a:	f109 0901 	add.w	r9, r9, #1
 800802e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008032:	e7ca      	b.n	8007fca <_strtod_l+0x4e2>
 8008034:	d0eb      	beq.n	800800e <_strtod_l+0x526>
 8008036:	f1c8 0800 	rsb	r8, r8, #0
 800803a:	f018 020f 	ands.w	r2, r8, #15
 800803e:	d00a      	beq.n	8008056 <_strtod_l+0x56e>
 8008040:	4b12      	ldr	r3, [pc, #72]	; (800808c <_strtod_l+0x5a4>)
 8008042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008046:	4650      	mov	r0, sl
 8008048:	4659      	mov	r1, fp
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	f7f8 fc15 	bl	800087c <__aeabi_ddiv>
 8008052:	4682      	mov	sl, r0
 8008054:	468b      	mov	fp, r1
 8008056:	ea5f 1828 	movs.w	r8, r8, asr #4
 800805a:	d0d8      	beq.n	800800e <_strtod_l+0x526>
 800805c:	f1b8 0f1f 	cmp.w	r8, #31
 8008060:	dd1e      	ble.n	80080a0 <_strtod_l+0x5b8>
 8008062:	2500      	movs	r5, #0
 8008064:	462e      	mov	r6, r5
 8008066:	9509      	str	r5, [sp, #36]	; 0x24
 8008068:	9507      	str	r5, [sp, #28]
 800806a:	2322      	movs	r3, #34	; 0x22
 800806c:	f04f 0a00 	mov.w	sl, #0
 8008070:	f04f 0b00 	mov.w	fp, #0
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	e789      	b.n	8007f8c <_strtod_l+0x4a4>
 8008078:	08035af2 	.word	0x08035af2
 800807c:	08035b34 	.word	0x08035b34
 8008080:	08035aea 	.word	0x08035aea
 8008084:	08035c74 	.word	0x08035c74
 8008088:	08035acf 	.word	0x08035acf
 800808c:	08035e70 	.word	0x08035e70
 8008090:	08035e48 	.word	0x08035e48
 8008094:	7ff00000 	.word	0x7ff00000
 8008098:	7ca00000 	.word	0x7ca00000
 800809c:	7fefffff 	.word	0x7fefffff
 80080a0:	f018 0310 	ands.w	r3, r8, #16
 80080a4:	bf18      	it	ne
 80080a6:	236a      	movne	r3, #106	; 0x6a
 80080a8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008460 <_strtod_l+0x978>
 80080ac:	9304      	str	r3, [sp, #16]
 80080ae:	4650      	mov	r0, sl
 80080b0:	4659      	mov	r1, fp
 80080b2:	2300      	movs	r3, #0
 80080b4:	f018 0f01 	tst.w	r8, #1
 80080b8:	d004      	beq.n	80080c4 <_strtod_l+0x5dc>
 80080ba:	e9d9 2300 	ldrd	r2, r3, [r9]
 80080be:	f7f8 fab3 	bl	8000628 <__aeabi_dmul>
 80080c2:	2301      	movs	r3, #1
 80080c4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80080c8:	f109 0908 	add.w	r9, r9, #8
 80080cc:	d1f2      	bne.n	80080b4 <_strtod_l+0x5cc>
 80080ce:	b10b      	cbz	r3, 80080d4 <_strtod_l+0x5ec>
 80080d0:	4682      	mov	sl, r0
 80080d2:	468b      	mov	fp, r1
 80080d4:	9b04      	ldr	r3, [sp, #16]
 80080d6:	b1bb      	cbz	r3, 8008108 <_strtod_l+0x620>
 80080d8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80080dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	4659      	mov	r1, fp
 80080e4:	dd10      	ble.n	8008108 <_strtod_l+0x620>
 80080e6:	2b1f      	cmp	r3, #31
 80080e8:	f340 8128 	ble.w	800833c <_strtod_l+0x854>
 80080ec:	2b34      	cmp	r3, #52	; 0x34
 80080ee:	bfde      	ittt	le
 80080f0:	3b20      	suble	r3, #32
 80080f2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80080f6:	fa02 f303 	lslle.w	r3, r2, r3
 80080fa:	f04f 0a00 	mov.w	sl, #0
 80080fe:	bfcc      	ite	gt
 8008100:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008104:	ea03 0b01 	andle.w	fp, r3, r1
 8008108:	2200      	movs	r2, #0
 800810a:	2300      	movs	r3, #0
 800810c:	4650      	mov	r0, sl
 800810e:	4659      	mov	r1, fp
 8008110:	f7f8 fcf2 	bl	8000af8 <__aeabi_dcmpeq>
 8008114:	2800      	cmp	r0, #0
 8008116:	d1a4      	bne.n	8008062 <_strtod_l+0x57a>
 8008118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800811e:	462b      	mov	r3, r5
 8008120:	463a      	mov	r2, r7
 8008122:	4620      	mov	r0, r4
 8008124:	f002 f938 	bl	800a398 <__s2b>
 8008128:	9009      	str	r0, [sp, #36]	; 0x24
 800812a:	2800      	cmp	r0, #0
 800812c:	f43f af24 	beq.w	8007f78 <_strtod_l+0x490>
 8008130:	9b07      	ldr	r3, [sp, #28]
 8008132:	1b9e      	subs	r6, r3, r6
 8008134:	9b08      	ldr	r3, [sp, #32]
 8008136:	2b00      	cmp	r3, #0
 8008138:	bfb4      	ite	lt
 800813a:	4633      	movlt	r3, r6
 800813c:	2300      	movge	r3, #0
 800813e:	9310      	str	r3, [sp, #64]	; 0x40
 8008140:	9b08      	ldr	r3, [sp, #32]
 8008142:	2500      	movs	r5, #0
 8008144:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008148:	9318      	str	r3, [sp, #96]	; 0x60
 800814a:	462e      	mov	r6, r5
 800814c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814e:	4620      	mov	r0, r4
 8008150:	6859      	ldr	r1, [r3, #4]
 8008152:	f002 f875 	bl	800a240 <_Balloc>
 8008156:	9007      	str	r0, [sp, #28]
 8008158:	2800      	cmp	r0, #0
 800815a:	f43f af11 	beq.w	8007f80 <_strtod_l+0x498>
 800815e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008160:	691a      	ldr	r2, [r3, #16]
 8008162:	3202      	adds	r2, #2
 8008164:	f103 010c 	add.w	r1, r3, #12
 8008168:	0092      	lsls	r2, r2, #2
 800816a:	300c      	adds	r0, #12
 800816c:	f002 f834 	bl	800a1d8 <memcpy>
 8008170:	ec4b ab10 	vmov	d0, sl, fp
 8008174:	aa20      	add	r2, sp, #128	; 0x80
 8008176:	a91f      	add	r1, sp, #124	; 0x7c
 8008178:	4620      	mov	r0, r4
 800817a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800817e:	f002 fc47 	bl	800aa10 <__d2b>
 8008182:	901e      	str	r0, [sp, #120]	; 0x78
 8008184:	2800      	cmp	r0, #0
 8008186:	f43f aefb 	beq.w	8007f80 <_strtod_l+0x498>
 800818a:	2101      	movs	r1, #1
 800818c:	4620      	mov	r0, r4
 800818e:	f002 f99d 	bl	800a4cc <__i2b>
 8008192:	4606      	mov	r6, r0
 8008194:	2800      	cmp	r0, #0
 8008196:	f43f aef3 	beq.w	8007f80 <_strtod_l+0x498>
 800819a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800819c:	9904      	ldr	r1, [sp, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	bfab      	itete	ge
 80081a2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80081a4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80081a6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80081a8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80081ac:	bfac      	ite	ge
 80081ae:	eb03 0902 	addge.w	r9, r3, r2
 80081b2:	1ad7      	sublt	r7, r2, r3
 80081b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80081b6:	eba3 0801 	sub.w	r8, r3, r1
 80081ba:	4490      	add	r8, r2
 80081bc:	4ba3      	ldr	r3, [pc, #652]	; (800844c <_strtod_l+0x964>)
 80081be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80081c2:	4598      	cmp	r8, r3
 80081c4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80081c8:	f280 80cc 	bge.w	8008364 <_strtod_l+0x87c>
 80081cc:	eba3 0308 	sub.w	r3, r3, r8
 80081d0:	2b1f      	cmp	r3, #31
 80081d2:	eba2 0203 	sub.w	r2, r2, r3
 80081d6:	f04f 0101 	mov.w	r1, #1
 80081da:	f300 80b6 	bgt.w	800834a <_strtod_l+0x862>
 80081de:	fa01 f303 	lsl.w	r3, r1, r3
 80081e2:	9311      	str	r3, [sp, #68]	; 0x44
 80081e4:	2300      	movs	r3, #0
 80081e6:	930c      	str	r3, [sp, #48]	; 0x30
 80081e8:	eb09 0802 	add.w	r8, r9, r2
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	45c1      	cmp	r9, r8
 80081f0:	4417      	add	r7, r2
 80081f2:	441f      	add	r7, r3
 80081f4:	464b      	mov	r3, r9
 80081f6:	bfa8      	it	ge
 80081f8:	4643      	movge	r3, r8
 80081fa:	42bb      	cmp	r3, r7
 80081fc:	bfa8      	it	ge
 80081fe:	463b      	movge	r3, r7
 8008200:	2b00      	cmp	r3, #0
 8008202:	bfc2      	ittt	gt
 8008204:	eba8 0803 	subgt.w	r8, r8, r3
 8008208:	1aff      	subgt	r7, r7, r3
 800820a:	eba9 0903 	subgt.w	r9, r9, r3
 800820e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008210:	2b00      	cmp	r3, #0
 8008212:	dd17      	ble.n	8008244 <_strtod_l+0x75c>
 8008214:	4631      	mov	r1, r6
 8008216:	461a      	mov	r2, r3
 8008218:	4620      	mov	r0, r4
 800821a:	f002 fa13 	bl	800a644 <__pow5mult>
 800821e:	4606      	mov	r6, r0
 8008220:	2800      	cmp	r0, #0
 8008222:	f43f aead 	beq.w	8007f80 <_strtod_l+0x498>
 8008226:	4601      	mov	r1, r0
 8008228:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800822a:	4620      	mov	r0, r4
 800822c:	f002 f964 	bl	800a4f8 <__multiply>
 8008230:	900f      	str	r0, [sp, #60]	; 0x3c
 8008232:	2800      	cmp	r0, #0
 8008234:	f43f aea4 	beq.w	8007f80 <_strtod_l+0x498>
 8008238:	991e      	ldr	r1, [sp, #120]	; 0x78
 800823a:	4620      	mov	r0, r4
 800823c:	f002 f840 	bl	800a2c0 <_Bfree>
 8008240:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008242:	931e      	str	r3, [sp, #120]	; 0x78
 8008244:	f1b8 0f00 	cmp.w	r8, #0
 8008248:	f300 8091 	bgt.w	800836e <_strtod_l+0x886>
 800824c:	9b08      	ldr	r3, [sp, #32]
 800824e:	2b00      	cmp	r3, #0
 8008250:	dd08      	ble.n	8008264 <_strtod_l+0x77c>
 8008252:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008254:	9907      	ldr	r1, [sp, #28]
 8008256:	4620      	mov	r0, r4
 8008258:	f002 f9f4 	bl	800a644 <__pow5mult>
 800825c:	9007      	str	r0, [sp, #28]
 800825e:	2800      	cmp	r0, #0
 8008260:	f43f ae8e 	beq.w	8007f80 <_strtod_l+0x498>
 8008264:	2f00      	cmp	r7, #0
 8008266:	dd08      	ble.n	800827a <_strtod_l+0x792>
 8008268:	9907      	ldr	r1, [sp, #28]
 800826a:	463a      	mov	r2, r7
 800826c:	4620      	mov	r0, r4
 800826e:	f002 fa43 	bl	800a6f8 <__lshift>
 8008272:	9007      	str	r0, [sp, #28]
 8008274:	2800      	cmp	r0, #0
 8008276:	f43f ae83 	beq.w	8007f80 <_strtod_l+0x498>
 800827a:	f1b9 0f00 	cmp.w	r9, #0
 800827e:	dd08      	ble.n	8008292 <_strtod_l+0x7aa>
 8008280:	4631      	mov	r1, r6
 8008282:	464a      	mov	r2, r9
 8008284:	4620      	mov	r0, r4
 8008286:	f002 fa37 	bl	800a6f8 <__lshift>
 800828a:	4606      	mov	r6, r0
 800828c:	2800      	cmp	r0, #0
 800828e:	f43f ae77 	beq.w	8007f80 <_strtod_l+0x498>
 8008292:	9a07      	ldr	r2, [sp, #28]
 8008294:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008296:	4620      	mov	r0, r4
 8008298:	f002 fab6 	bl	800a808 <__mdiff>
 800829c:	4605      	mov	r5, r0
 800829e:	2800      	cmp	r0, #0
 80082a0:	f43f ae6e 	beq.w	8007f80 <_strtod_l+0x498>
 80082a4:	68c3      	ldr	r3, [r0, #12]
 80082a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082a8:	2300      	movs	r3, #0
 80082aa:	60c3      	str	r3, [r0, #12]
 80082ac:	4631      	mov	r1, r6
 80082ae:	f002 fa8f 	bl	800a7d0 <__mcmp>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	da65      	bge.n	8008382 <_strtod_l+0x89a>
 80082b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082b8:	ea53 030a 	orrs.w	r3, r3, sl
 80082bc:	f040 8087 	bne.w	80083ce <_strtod_l+0x8e6>
 80082c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f040 8082 	bne.w	80083ce <_strtod_l+0x8e6>
 80082ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80082ce:	0d1b      	lsrs	r3, r3, #20
 80082d0:	051b      	lsls	r3, r3, #20
 80082d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80082d6:	d97a      	bls.n	80083ce <_strtod_l+0x8e6>
 80082d8:	696b      	ldr	r3, [r5, #20]
 80082da:	b913      	cbnz	r3, 80082e2 <_strtod_l+0x7fa>
 80082dc:	692b      	ldr	r3, [r5, #16]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	dd75      	ble.n	80083ce <_strtod_l+0x8e6>
 80082e2:	4629      	mov	r1, r5
 80082e4:	2201      	movs	r2, #1
 80082e6:	4620      	mov	r0, r4
 80082e8:	f002 fa06 	bl	800a6f8 <__lshift>
 80082ec:	4631      	mov	r1, r6
 80082ee:	4605      	mov	r5, r0
 80082f0:	f002 fa6e 	bl	800a7d0 <__mcmp>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	dd6a      	ble.n	80083ce <_strtod_l+0x8e6>
 80082f8:	9904      	ldr	r1, [sp, #16]
 80082fa:	4a55      	ldr	r2, [pc, #340]	; (8008450 <_strtod_l+0x968>)
 80082fc:	465b      	mov	r3, fp
 80082fe:	2900      	cmp	r1, #0
 8008300:	f000 8085 	beq.w	800840e <_strtod_l+0x926>
 8008304:	ea02 010b 	and.w	r1, r2, fp
 8008308:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800830c:	dc7f      	bgt.n	800840e <_strtod_l+0x926>
 800830e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008312:	f77f aeaa 	ble.w	800806a <_strtod_l+0x582>
 8008316:	4a4f      	ldr	r2, [pc, #316]	; (8008454 <_strtod_l+0x96c>)
 8008318:	2300      	movs	r3, #0
 800831a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800831e:	4650      	mov	r0, sl
 8008320:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008324:	4659      	mov	r1, fp
 8008326:	f7f8 f97f 	bl	8000628 <__aeabi_dmul>
 800832a:	460b      	mov	r3, r1
 800832c:	4303      	orrs	r3, r0
 800832e:	bf08      	it	eq
 8008330:	2322      	moveq	r3, #34	; 0x22
 8008332:	4682      	mov	sl, r0
 8008334:	468b      	mov	fp, r1
 8008336:	bf08      	it	eq
 8008338:	6023      	streq	r3, [r4, #0]
 800833a:	e62b      	b.n	8007f94 <_strtod_l+0x4ac>
 800833c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008340:	fa02 f303 	lsl.w	r3, r2, r3
 8008344:	ea03 0a0a 	and.w	sl, r3, sl
 8008348:	e6de      	b.n	8008108 <_strtod_l+0x620>
 800834a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800834e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008352:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008356:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800835a:	fa01 f308 	lsl.w	r3, r1, r8
 800835e:	930c      	str	r3, [sp, #48]	; 0x30
 8008360:	9111      	str	r1, [sp, #68]	; 0x44
 8008362:	e741      	b.n	80081e8 <_strtod_l+0x700>
 8008364:	2300      	movs	r3, #0
 8008366:	930c      	str	r3, [sp, #48]	; 0x30
 8008368:	2301      	movs	r3, #1
 800836a:	9311      	str	r3, [sp, #68]	; 0x44
 800836c:	e73c      	b.n	80081e8 <_strtod_l+0x700>
 800836e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008370:	4642      	mov	r2, r8
 8008372:	4620      	mov	r0, r4
 8008374:	f002 f9c0 	bl	800a6f8 <__lshift>
 8008378:	901e      	str	r0, [sp, #120]	; 0x78
 800837a:	2800      	cmp	r0, #0
 800837c:	f47f af66 	bne.w	800824c <_strtod_l+0x764>
 8008380:	e5fe      	b.n	8007f80 <_strtod_l+0x498>
 8008382:	465f      	mov	r7, fp
 8008384:	d16e      	bne.n	8008464 <_strtod_l+0x97c>
 8008386:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008388:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800838c:	b342      	cbz	r2, 80083e0 <_strtod_l+0x8f8>
 800838e:	4a32      	ldr	r2, [pc, #200]	; (8008458 <_strtod_l+0x970>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d128      	bne.n	80083e6 <_strtod_l+0x8fe>
 8008394:	9b04      	ldr	r3, [sp, #16]
 8008396:	4650      	mov	r0, sl
 8008398:	b1eb      	cbz	r3, 80083d6 <_strtod_l+0x8ee>
 800839a:	4a2d      	ldr	r2, [pc, #180]	; (8008450 <_strtod_l+0x968>)
 800839c:	403a      	ands	r2, r7
 800839e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80083a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80083a6:	d819      	bhi.n	80083dc <_strtod_l+0x8f4>
 80083a8:	0d12      	lsrs	r2, r2, #20
 80083aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80083ae:	fa01 f303 	lsl.w	r3, r1, r3
 80083b2:	4298      	cmp	r0, r3
 80083b4:	d117      	bne.n	80083e6 <_strtod_l+0x8fe>
 80083b6:	4b29      	ldr	r3, [pc, #164]	; (800845c <_strtod_l+0x974>)
 80083b8:	429f      	cmp	r7, r3
 80083ba:	d102      	bne.n	80083c2 <_strtod_l+0x8da>
 80083bc:	3001      	adds	r0, #1
 80083be:	f43f addf 	beq.w	8007f80 <_strtod_l+0x498>
 80083c2:	4b23      	ldr	r3, [pc, #140]	; (8008450 <_strtod_l+0x968>)
 80083c4:	403b      	ands	r3, r7
 80083c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80083ca:	f04f 0a00 	mov.w	sl, #0
 80083ce:	9b04      	ldr	r3, [sp, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1a0      	bne.n	8008316 <_strtod_l+0x82e>
 80083d4:	e5de      	b.n	8007f94 <_strtod_l+0x4ac>
 80083d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083da:	e7ea      	b.n	80083b2 <_strtod_l+0x8ca>
 80083dc:	460b      	mov	r3, r1
 80083de:	e7e8      	b.n	80083b2 <_strtod_l+0x8ca>
 80083e0:	ea53 030a 	orrs.w	r3, r3, sl
 80083e4:	d088      	beq.n	80082f8 <_strtod_l+0x810>
 80083e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083e8:	b1db      	cbz	r3, 8008422 <_strtod_l+0x93a>
 80083ea:	423b      	tst	r3, r7
 80083ec:	d0ef      	beq.n	80083ce <_strtod_l+0x8e6>
 80083ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083f0:	9a04      	ldr	r2, [sp, #16]
 80083f2:	4650      	mov	r0, sl
 80083f4:	4659      	mov	r1, fp
 80083f6:	b1c3      	cbz	r3, 800842a <_strtod_l+0x942>
 80083f8:	f7ff fb58 	bl	8007aac <sulp>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008404:	f7f7 ff5a 	bl	80002bc <__adddf3>
 8008408:	4682      	mov	sl, r0
 800840a:	468b      	mov	fp, r1
 800840c:	e7df      	b.n	80083ce <_strtod_l+0x8e6>
 800840e:	4013      	ands	r3, r2
 8008410:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008414:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008418:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800841c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008420:	e7d5      	b.n	80083ce <_strtod_l+0x8e6>
 8008422:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008424:	ea13 0f0a 	tst.w	r3, sl
 8008428:	e7e0      	b.n	80083ec <_strtod_l+0x904>
 800842a:	f7ff fb3f 	bl	8007aac <sulp>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008436:	f7f7 ff3f 	bl	80002b8 <__aeabi_dsub>
 800843a:	2200      	movs	r2, #0
 800843c:	2300      	movs	r3, #0
 800843e:	4682      	mov	sl, r0
 8008440:	468b      	mov	fp, r1
 8008442:	f7f8 fb59 	bl	8000af8 <__aeabi_dcmpeq>
 8008446:	2800      	cmp	r0, #0
 8008448:	d0c1      	beq.n	80083ce <_strtod_l+0x8e6>
 800844a:	e60e      	b.n	800806a <_strtod_l+0x582>
 800844c:	fffffc02 	.word	0xfffffc02
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	39500000 	.word	0x39500000
 8008458:	000fffff 	.word	0x000fffff
 800845c:	7fefffff 	.word	0x7fefffff
 8008460:	08035b48 	.word	0x08035b48
 8008464:	4631      	mov	r1, r6
 8008466:	4628      	mov	r0, r5
 8008468:	f002 fb2e 	bl	800aac8 <__ratio>
 800846c:	ec59 8b10 	vmov	r8, r9, d0
 8008470:	ee10 0a10 	vmov	r0, s0
 8008474:	2200      	movs	r2, #0
 8008476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800847a:	4649      	mov	r1, r9
 800847c:	f7f8 fb50 	bl	8000b20 <__aeabi_dcmple>
 8008480:	2800      	cmp	r0, #0
 8008482:	d07c      	beq.n	800857e <_strtod_l+0xa96>
 8008484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d04c      	beq.n	8008524 <_strtod_l+0xa3c>
 800848a:	4b95      	ldr	r3, [pc, #596]	; (80086e0 <_strtod_l+0xbf8>)
 800848c:	2200      	movs	r2, #0
 800848e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008492:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80086e0 <_strtod_l+0xbf8>
 8008496:	f04f 0800 	mov.w	r8, #0
 800849a:	4b92      	ldr	r3, [pc, #584]	; (80086e4 <_strtod_l+0xbfc>)
 800849c:	403b      	ands	r3, r7
 800849e:	9311      	str	r3, [sp, #68]	; 0x44
 80084a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80084a2:	4b91      	ldr	r3, [pc, #580]	; (80086e8 <_strtod_l+0xc00>)
 80084a4:	429a      	cmp	r2, r3
 80084a6:	f040 80b2 	bne.w	800860e <_strtod_l+0xb26>
 80084aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80084ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084b2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80084b6:	ec4b ab10 	vmov	d0, sl, fp
 80084ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80084be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084c2:	f002 fa29 	bl	800a918 <__ulp>
 80084c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084ca:	ec53 2b10 	vmov	r2, r3, d0
 80084ce:	f7f8 f8ab 	bl	8000628 <__aeabi_dmul>
 80084d2:	4652      	mov	r2, sl
 80084d4:	465b      	mov	r3, fp
 80084d6:	f7f7 fef1 	bl	80002bc <__adddf3>
 80084da:	460b      	mov	r3, r1
 80084dc:	4981      	ldr	r1, [pc, #516]	; (80086e4 <_strtod_l+0xbfc>)
 80084de:	4a83      	ldr	r2, [pc, #524]	; (80086ec <_strtod_l+0xc04>)
 80084e0:	4019      	ands	r1, r3
 80084e2:	4291      	cmp	r1, r2
 80084e4:	4682      	mov	sl, r0
 80084e6:	d95e      	bls.n	80085a6 <_strtod_l+0xabe>
 80084e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d103      	bne.n	80084fa <_strtod_l+0xa12>
 80084f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f4:	3301      	adds	r3, #1
 80084f6:	f43f ad43 	beq.w	8007f80 <_strtod_l+0x498>
 80084fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80086f8 <_strtod_l+0xc10>
 80084fe:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008502:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008504:	4620      	mov	r0, r4
 8008506:	f001 fedb 	bl	800a2c0 <_Bfree>
 800850a:	9907      	ldr	r1, [sp, #28]
 800850c:	4620      	mov	r0, r4
 800850e:	f001 fed7 	bl	800a2c0 <_Bfree>
 8008512:	4631      	mov	r1, r6
 8008514:	4620      	mov	r0, r4
 8008516:	f001 fed3 	bl	800a2c0 <_Bfree>
 800851a:	4629      	mov	r1, r5
 800851c:	4620      	mov	r0, r4
 800851e:	f001 fecf 	bl	800a2c0 <_Bfree>
 8008522:	e613      	b.n	800814c <_strtod_l+0x664>
 8008524:	f1ba 0f00 	cmp.w	sl, #0
 8008528:	d11b      	bne.n	8008562 <_strtod_l+0xa7a>
 800852a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800852e:	b9f3      	cbnz	r3, 800856e <_strtod_l+0xa86>
 8008530:	4b6b      	ldr	r3, [pc, #428]	; (80086e0 <_strtod_l+0xbf8>)
 8008532:	2200      	movs	r2, #0
 8008534:	4640      	mov	r0, r8
 8008536:	4649      	mov	r1, r9
 8008538:	f7f8 fae8 	bl	8000b0c <__aeabi_dcmplt>
 800853c:	b9d0      	cbnz	r0, 8008574 <_strtod_l+0xa8c>
 800853e:	4640      	mov	r0, r8
 8008540:	4649      	mov	r1, r9
 8008542:	4b6b      	ldr	r3, [pc, #428]	; (80086f0 <_strtod_l+0xc08>)
 8008544:	2200      	movs	r2, #0
 8008546:	f7f8 f86f 	bl	8000628 <__aeabi_dmul>
 800854a:	4680      	mov	r8, r0
 800854c:	4689      	mov	r9, r1
 800854e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008552:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008556:	931b      	str	r3, [sp, #108]	; 0x6c
 8008558:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800855c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008560:	e79b      	b.n	800849a <_strtod_l+0x9b2>
 8008562:	f1ba 0f01 	cmp.w	sl, #1
 8008566:	d102      	bne.n	800856e <_strtod_l+0xa86>
 8008568:	2f00      	cmp	r7, #0
 800856a:	f43f ad7e 	beq.w	800806a <_strtod_l+0x582>
 800856e:	4b61      	ldr	r3, [pc, #388]	; (80086f4 <_strtod_l+0xc0c>)
 8008570:	2200      	movs	r2, #0
 8008572:	e78c      	b.n	800848e <_strtod_l+0x9a6>
 8008574:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80086f0 <_strtod_l+0xc08>
 8008578:	f04f 0800 	mov.w	r8, #0
 800857c:	e7e7      	b.n	800854e <_strtod_l+0xa66>
 800857e:	4b5c      	ldr	r3, [pc, #368]	; (80086f0 <_strtod_l+0xc08>)
 8008580:	4640      	mov	r0, r8
 8008582:	4649      	mov	r1, r9
 8008584:	2200      	movs	r2, #0
 8008586:	f7f8 f84f 	bl	8000628 <__aeabi_dmul>
 800858a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800858c:	4680      	mov	r8, r0
 800858e:	4689      	mov	r9, r1
 8008590:	b933      	cbnz	r3, 80085a0 <_strtod_l+0xab8>
 8008592:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008596:	9012      	str	r0, [sp, #72]	; 0x48
 8008598:	9313      	str	r3, [sp, #76]	; 0x4c
 800859a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800859e:	e7dd      	b.n	800855c <_strtod_l+0xa74>
 80085a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80085a4:	e7f9      	b.n	800859a <_strtod_l+0xab2>
 80085a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80085aa:	9b04      	ldr	r3, [sp, #16]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d1a8      	bne.n	8008502 <_strtod_l+0xa1a>
 80085b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085b6:	0d1b      	lsrs	r3, r3, #20
 80085b8:	051b      	lsls	r3, r3, #20
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d1a1      	bne.n	8008502 <_strtod_l+0xa1a>
 80085be:	4640      	mov	r0, r8
 80085c0:	4649      	mov	r1, r9
 80085c2:	f7f8 fb91 	bl	8000ce8 <__aeabi_d2lz>
 80085c6:	f7f8 f801 	bl	80005cc <__aeabi_l2d>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f7 fe71 	bl	80002b8 <__aeabi_dsub>
 80085d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085dc:	ea43 030a 	orr.w	r3, r3, sl
 80085e0:	4313      	orrs	r3, r2
 80085e2:	4680      	mov	r8, r0
 80085e4:	4689      	mov	r9, r1
 80085e6:	d053      	beq.n	8008690 <_strtod_l+0xba8>
 80085e8:	a335      	add	r3, pc, #212	; (adr r3, 80086c0 <_strtod_l+0xbd8>)
 80085ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ee:	f7f8 fa8d 	bl	8000b0c <__aeabi_dcmplt>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	f47f acce 	bne.w	8007f94 <_strtod_l+0x4ac>
 80085f8:	a333      	add	r3, pc, #204	; (adr r3, 80086c8 <_strtod_l+0xbe0>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	4640      	mov	r0, r8
 8008600:	4649      	mov	r1, r9
 8008602:	f7f8 faa1 	bl	8000b48 <__aeabi_dcmpgt>
 8008606:	2800      	cmp	r0, #0
 8008608:	f43f af7b 	beq.w	8008502 <_strtod_l+0xa1a>
 800860c:	e4c2      	b.n	8007f94 <_strtod_l+0x4ac>
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	b333      	cbz	r3, 8008660 <_strtod_l+0xb78>
 8008612:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008614:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008618:	d822      	bhi.n	8008660 <_strtod_l+0xb78>
 800861a:	a32d      	add	r3, pc, #180	; (adr r3, 80086d0 <_strtod_l+0xbe8>)
 800861c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008620:	4640      	mov	r0, r8
 8008622:	4649      	mov	r1, r9
 8008624:	f7f8 fa7c 	bl	8000b20 <__aeabi_dcmple>
 8008628:	b1a0      	cbz	r0, 8008654 <_strtod_l+0xb6c>
 800862a:	4649      	mov	r1, r9
 800862c:	4640      	mov	r0, r8
 800862e:	f7f8 fad3 	bl	8000bd8 <__aeabi_d2uiz>
 8008632:	2801      	cmp	r0, #1
 8008634:	bf38      	it	cc
 8008636:	2001      	movcc	r0, #1
 8008638:	f7f7 ff7c 	bl	8000534 <__aeabi_ui2d>
 800863c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800863e:	4680      	mov	r8, r0
 8008640:	4689      	mov	r9, r1
 8008642:	bb13      	cbnz	r3, 800868a <_strtod_l+0xba2>
 8008644:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008648:	9014      	str	r0, [sp, #80]	; 0x50
 800864a:	9315      	str	r3, [sp, #84]	; 0x54
 800864c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008650:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008656:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008658:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800865c:	1a9b      	subs	r3, r3, r2
 800865e:	930d      	str	r3, [sp, #52]	; 0x34
 8008660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008664:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008668:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800866c:	f002 f954 	bl	800a918 <__ulp>
 8008670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008674:	ec53 2b10 	vmov	r2, r3, d0
 8008678:	f7f7 ffd6 	bl	8000628 <__aeabi_dmul>
 800867c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008680:	f7f7 fe1c 	bl	80002bc <__adddf3>
 8008684:	4682      	mov	sl, r0
 8008686:	468b      	mov	fp, r1
 8008688:	e78f      	b.n	80085aa <_strtod_l+0xac2>
 800868a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800868e:	e7dd      	b.n	800864c <_strtod_l+0xb64>
 8008690:	a311      	add	r3, pc, #68	; (adr r3, 80086d8 <_strtod_l+0xbf0>)
 8008692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008696:	f7f8 fa39 	bl	8000b0c <__aeabi_dcmplt>
 800869a:	e7b4      	b.n	8008606 <_strtod_l+0xb1e>
 800869c:	2300      	movs	r3, #0
 800869e:	930e      	str	r3, [sp, #56]	; 0x38
 80086a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80086a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80086a4:	6013      	str	r3, [r2, #0]
 80086a6:	f7ff ba65 	b.w	8007b74 <_strtod_l+0x8c>
 80086aa:	2b65      	cmp	r3, #101	; 0x65
 80086ac:	f43f ab5d 	beq.w	8007d6a <_strtod_l+0x282>
 80086b0:	2b45      	cmp	r3, #69	; 0x45
 80086b2:	f43f ab5a 	beq.w	8007d6a <_strtod_l+0x282>
 80086b6:	2201      	movs	r2, #1
 80086b8:	f7ff bb92 	b.w	8007de0 <_strtod_l+0x2f8>
 80086bc:	f3af 8000 	nop.w
 80086c0:	94a03595 	.word	0x94a03595
 80086c4:	3fdfffff 	.word	0x3fdfffff
 80086c8:	35afe535 	.word	0x35afe535
 80086cc:	3fe00000 	.word	0x3fe00000
 80086d0:	ffc00000 	.word	0xffc00000
 80086d4:	41dfffff 	.word	0x41dfffff
 80086d8:	94a03595 	.word	0x94a03595
 80086dc:	3fcfffff 	.word	0x3fcfffff
 80086e0:	3ff00000 	.word	0x3ff00000
 80086e4:	7ff00000 	.word	0x7ff00000
 80086e8:	7fe00000 	.word	0x7fe00000
 80086ec:	7c9fffff 	.word	0x7c9fffff
 80086f0:	3fe00000 	.word	0x3fe00000
 80086f4:	bff00000 	.word	0xbff00000
 80086f8:	7fefffff 	.word	0x7fefffff

080086fc <_strtod_r>:
 80086fc:	4b01      	ldr	r3, [pc, #4]	; (8008704 <_strtod_r+0x8>)
 80086fe:	f7ff b9f3 	b.w	8007ae8 <_strtod_l>
 8008702:	bf00      	nop
 8008704:	20000074 	.word	0x20000074

08008708 <_strtol_l.isra.0>:
 8008708:	2b01      	cmp	r3, #1
 800870a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800870e:	d001      	beq.n	8008714 <_strtol_l.isra.0+0xc>
 8008710:	2b24      	cmp	r3, #36	; 0x24
 8008712:	d906      	bls.n	8008722 <_strtol_l.isra.0+0x1a>
 8008714:	f7fe f828 	bl	8006768 <__errno>
 8008718:	2316      	movs	r3, #22
 800871a:	6003      	str	r3, [r0, #0]
 800871c:	2000      	movs	r0, #0
 800871e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008722:	4f3a      	ldr	r7, [pc, #232]	; (800880c <_strtol_l.isra.0+0x104>)
 8008724:	468e      	mov	lr, r1
 8008726:	4676      	mov	r6, lr
 8008728:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800872c:	5de5      	ldrb	r5, [r4, r7]
 800872e:	f015 0508 	ands.w	r5, r5, #8
 8008732:	d1f8      	bne.n	8008726 <_strtol_l.isra.0+0x1e>
 8008734:	2c2d      	cmp	r4, #45	; 0x2d
 8008736:	d134      	bne.n	80087a2 <_strtol_l.isra.0+0x9a>
 8008738:	f89e 4000 	ldrb.w	r4, [lr]
 800873c:	f04f 0801 	mov.w	r8, #1
 8008740:	f106 0e02 	add.w	lr, r6, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d05c      	beq.n	8008802 <_strtol_l.isra.0+0xfa>
 8008748:	2b10      	cmp	r3, #16
 800874a:	d10c      	bne.n	8008766 <_strtol_l.isra.0+0x5e>
 800874c:	2c30      	cmp	r4, #48	; 0x30
 800874e:	d10a      	bne.n	8008766 <_strtol_l.isra.0+0x5e>
 8008750:	f89e 4000 	ldrb.w	r4, [lr]
 8008754:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008758:	2c58      	cmp	r4, #88	; 0x58
 800875a:	d14d      	bne.n	80087f8 <_strtol_l.isra.0+0xf0>
 800875c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008760:	2310      	movs	r3, #16
 8008762:	f10e 0e02 	add.w	lr, lr, #2
 8008766:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800876a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800876e:	2600      	movs	r6, #0
 8008770:	fbbc f9f3 	udiv	r9, ip, r3
 8008774:	4635      	mov	r5, r6
 8008776:	fb03 ca19 	mls	sl, r3, r9, ip
 800877a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800877e:	2f09      	cmp	r7, #9
 8008780:	d818      	bhi.n	80087b4 <_strtol_l.isra.0+0xac>
 8008782:	463c      	mov	r4, r7
 8008784:	42a3      	cmp	r3, r4
 8008786:	dd24      	ble.n	80087d2 <_strtol_l.isra.0+0xca>
 8008788:	2e00      	cmp	r6, #0
 800878a:	db1f      	blt.n	80087cc <_strtol_l.isra.0+0xc4>
 800878c:	45a9      	cmp	r9, r5
 800878e:	d31d      	bcc.n	80087cc <_strtol_l.isra.0+0xc4>
 8008790:	d101      	bne.n	8008796 <_strtol_l.isra.0+0x8e>
 8008792:	45a2      	cmp	sl, r4
 8008794:	db1a      	blt.n	80087cc <_strtol_l.isra.0+0xc4>
 8008796:	fb05 4503 	mla	r5, r5, r3, r4
 800879a:	2601      	movs	r6, #1
 800879c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80087a0:	e7eb      	b.n	800877a <_strtol_l.isra.0+0x72>
 80087a2:	2c2b      	cmp	r4, #43	; 0x2b
 80087a4:	bf08      	it	eq
 80087a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80087aa:	46a8      	mov	r8, r5
 80087ac:	bf08      	it	eq
 80087ae:	f106 0e02 	addeq.w	lr, r6, #2
 80087b2:	e7c7      	b.n	8008744 <_strtol_l.isra.0+0x3c>
 80087b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80087b8:	2f19      	cmp	r7, #25
 80087ba:	d801      	bhi.n	80087c0 <_strtol_l.isra.0+0xb8>
 80087bc:	3c37      	subs	r4, #55	; 0x37
 80087be:	e7e1      	b.n	8008784 <_strtol_l.isra.0+0x7c>
 80087c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80087c4:	2f19      	cmp	r7, #25
 80087c6:	d804      	bhi.n	80087d2 <_strtol_l.isra.0+0xca>
 80087c8:	3c57      	subs	r4, #87	; 0x57
 80087ca:	e7db      	b.n	8008784 <_strtol_l.isra.0+0x7c>
 80087cc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80087d0:	e7e4      	b.n	800879c <_strtol_l.isra.0+0x94>
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	da05      	bge.n	80087e2 <_strtol_l.isra.0+0xda>
 80087d6:	2322      	movs	r3, #34	; 0x22
 80087d8:	6003      	str	r3, [r0, #0]
 80087da:	4665      	mov	r5, ip
 80087dc:	b942      	cbnz	r2, 80087f0 <_strtol_l.isra.0+0xe8>
 80087de:	4628      	mov	r0, r5
 80087e0:	e79d      	b.n	800871e <_strtol_l.isra.0+0x16>
 80087e2:	f1b8 0f00 	cmp.w	r8, #0
 80087e6:	d000      	beq.n	80087ea <_strtol_l.isra.0+0xe2>
 80087e8:	426d      	negs	r5, r5
 80087ea:	2a00      	cmp	r2, #0
 80087ec:	d0f7      	beq.n	80087de <_strtol_l.isra.0+0xd6>
 80087ee:	b10e      	cbz	r6, 80087f4 <_strtol_l.isra.0+0xec>
 80087f0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80087f4:	6011      	str	r1, [r2, #0]
 80087f6:	e7f2      	b.n	80087de <_strtol_l.isra.0+0xd6>
 80087f8:	2430      	movs	r4, #48	; 0x30
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1b3      	bne.n	8008766 <_strtol_l.isra.0+0x5e>
 80087fe:	2308      	movs	r3, #8
 8008800:	e7b1      	b.n	8008766 <_strtol_l.isra.0+0x5e>
 8008802:	2c30      	cmp	r4, #48	; 0x30
 8008804:	d0a4      	beq.n	8008750 <_strtol_l.isra.0+0x48>
 8008806:	230a      	movs	r3, #10
 8008808:	e7ad      	b.n	8008766 <_strtol_l.isra.0+0x5e>
 800880a:	bf00      	nop
 800880c:	08035b71 	.word	0x08035b71

08008810 <_strtol_r>:
 8008810:	f7ff bf7a 	b.w	8008708 <_strtol_l.isra.0>

08008814 <__swbuf_r>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	460e      	mov	r6, r1
 8008818:	4614      	mov	r4, r2
 800881a:	4605      	mov	r5, r0
 800881c:	b118      	cbz	r0, 8008826 <__swbuf_r+0x12>
 800881e:	6983      	ldr	r3, [r0, #24]
 8008820:	b90b      	cbnz	r3, 8008826 <__swbuf_r+0x12>
 8008822:	f001 f84f 	bl	80098c4 <__sinit>
 8008826:	4b21      	ldr	r3, [pc, #132]	; (80088ac <__swbuf_r+0x98>)
 8008828:	429c      	cmp	r4, r3
 800882a:	d12b      	bne.n	8008884 <__swbuf_r+0x70>
 800882c:	686c      	ldr	r4, [r5, #4]
 800882e:	69a3      	ldr	r3, [r4, #24]
 8008830:	60a3      	str	r3, [r4, #8]
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	071a      	lsls	r2, r3, #28
 8008836:	d52f      	bpl.n	8008898 <__swbuf_r+0x84>
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	b36b      	cbz	r3, 8008898 <__swbuf_r+0x84>
 800883c:	6923      	ldr	r3, [r4, #16]
 800883e:	6820      	ldr	r0, [r4, #0]
 8008840:	1ac0      	subs	r0, r0, r3
 8008842:	6963      	ldr	r3, [r4, #20]
 8008844:	b2f6      	uxtb	r6, r6
 8008846:	4283      	cmp	r3, r0
 8008848:	4637      	mov	r7, r6
 800884a:	dc04      	bgt.n	8008856 <__swbuf_r+0x42>
 800884c:	4621      	mov	r1, r4
 800884e:	4628      	mov	r0, r5
 8008850:	f000 ffa4 	bl	800979c <_fflush_r>
 8008854:	bb30      	cbnz	r0, 80088a4 <__swbuf_r+0x90>
 8008856:	68a3      	ldr	r3, [r4, #8]
 8008858:	3b01      	subs	r3, #1
 800885a:	60a3      	str	r3, [r4, #8]
 800885c:	6823      	ldr	r3, [r4, #0]
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	6022      	str	r2, [r4, #0]
 8008862:	701e      	strb	r6, [r3, #0]
 8008864:	6963      	ldr	r3, [r4, #20]
 8008866:	3001      	adds	r0, #1
 8008868:	4283      	cmp	r3, r0
 800886a:	d004      	beq.n	8008876 <__swbuf_r+0x62>
 800886c:	89a3      	ldrh	r3, [r4, #12]
 800886e:	07db      	lsls	r3, r3, #31
 8008870:	d506      	bpl.n	8008880 <__swbuf_r+0x6c>
 8008872:	2e0a      	cmp	r6, #10
 8008874:	d104      	bne.n	8008880 <__swbuf_r+0x6c>
 8008876:	4621      	mov	r1, r4
 8008878:	4628      	mov	r0, r5
 800887a:	f000 ff8f 	bl	800979c <_fflush_r>
 800887e:	b988      	cbnz	r0, 80088a4 <__swbuf_r+0x90>
 8008880:	4638      	mov	r0, r7
 8008882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008884:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <__swbuf_r+0x9c>)
 8008886:	429c      	cmp	r4, r3
 8008888:	d101      	bne.n	800888e <__swbuf_r+0x7a>
 800888a:	68ac      	ldr	r4, [r5, #8]
 800888c:	e7cf      	b.n	800882e <__swbuf_r+0x1a>
 800888e:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <__swbuf_r+0xa0>)
 8008890:	429c      	cmp	r4, r3
 8008892:	bf08      	it	eq
 8008894:	68ec      	ldreq	r4, [r5, #12]
 8008896:	e7ca      	b.n	800882e <__swbuf_r+0x1a>
 8008898:	4621      	mov	r1, r4
 800889a:	4628      	mov	r0, r5
 800889c:	f000 f80c 	bl	80088b8 <__swsetup_r>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d0cb      	beq.n	800883c <__swbuf_r+0x28>
 80088a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80088a8:	e7ea      	b.n	8008880 <__swbuf_r+0x6c>
 80088aa:	bf00      	nop
 80088ac:	08035d28 	.word	0x08035d28
 80088b0:	08035d48 	.word	0x08035d48
 80088b4:	08035d08 	.word	0x08035d08

080088b8 <__swsetup_r>:
 80088b8:	4b32      	ldr	r3, [pc, #200]	; (8008984 <__swsetup_r+0xcc>)
 80088ba:	b570      	push	{r4, r5, r6, lr}
 80088bc:	681d      	ldr	r5, [r3, #0]
 80088be:	4606      	mov	r6, r0
 80088c0:	460c      	mov	r4, r1
 80088c2:	b125      	cbz	r5, 80088ce <__swsetup_r+0x16>
 80088c4:	69ab      	ldr	r3, [r5, #24]
 80088c6:	b913      	cbnz	r3, 80088ce <__swsetup_r+0x16>
 80088c8:	4628      	mov	r0, r5
 80088ca:	f000 fffb 	bl	80098c4 <__sinit>
 80088ce:	4b2e      	ldr	r3, [pc, #184]	; (8008988 <__swsetup_r+0xd0>)
 80088d0:	429c      	cmp	r4, r3
 80088d2:	d10f      	bne.n	80088f4 <__swsetup_r+0x3c>
 80088d4:	686c      	ldr	r4, [r5, #4]
 80088d6:	89a3      	ldrh	r3, [r4, #12]
 80088d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088dc:	0719      	lsls	r1, r3, #28
 80088de:	d42c      	bmi.n	800893a <__swsetup_r+0x82>
 80088e0:	06dd      	lsls	r5, r3, #27
 80088e2:	d411      	bmi.n	8008908 <__swsetup_r+0x50>
 80088e4:	2309      	movs	r3, #9
 80088e6:	6033      	str	r3, [r6, #0]
 80088e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088ec:	81a3      	strh	r3, [r4, #12]
 80088ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088f2:	e03e      	b.n	8008972 <__swsetup_r+0xba>
 80088f4:	4b25      	ldr	r3, [pc, #148]	; (800898c <__swsetup_r+0xd4>)
 80088f6:	429c      	cmp	r4, r3
 80088f8:	d101      	bne.n	80088fe <__swsetup_r+0x46>
 80088fa:	68ac      	ldr	r4, [r5, #8]
 80088fc:	e7eb      	b.n	80088d6 <__swsetup_r+0x1e>
 80088fe:	4b24      	ldr	r3, [pc, #144]	; (8008990 <__swsetup_r+0xd8>)
 8008900:	429c      	cmp	r4, r3
 8008902:	bf08      	it	eq
 8008904:	68ec      	ldreq	r4, [r5, #12]
 8008906:	e7e6      	b.n	80088d6 <__swsetup_r+0x1e>
 8008908:	0758      	lsls	r0, r3, #29
 800890a:	d512      	bpl.n	8008932 <__swsetup_r+0x7a>
 800890c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800890e:	b141      	cbz	r1, 8008922 <__swsetup_r+0x6a>
 8008910:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008914:	4299      	cmp	r1, r3
 8008916:	d002      	beq.n	800891e <__swsetup_r+0x66>
 8008918:	4630      	mov	r0, r6
 800891a:	f7fd ff85 	bl	8006828 <_free_r>
 800891e:	2300      	movs	r3, #0
 8008920:	6363      	str	r3, [r4, #52]	; 0x34
 8008922:	89a3      	ldrh	r3, [r4, #12]
 8008924:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008928:	81a3      	strh	r3, [r4, #12]
 800892a:	2300      	movs	r3, #0
 800892c:	6063      	str	r3, [r4, #4]
 800892e:	6923      	ldr	r3, [r4, #16]
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f043 0308 	orr.w	r3, r3, #8
 8008938:	81a3      	strh	r3, [r4, #12]
 800893a:	6923      	ldr	r3, [r4, #16]
 800893c:	b94b      	cbnz	r3, 8008952 <__swsetup_r+0x9a>
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008948:	d003      	beq.n	8008952 <__swsetup_r+0x9a>
 800894a:	4621      	mov	r1, r4
 800894c:	4630      	mov	r0, r6
 800894e:	f001 fbf1 	bl	800a134 <__smakebuf_r>
 8008952:	89a0      	ldrh	r0, [r4, #12]
 8008954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008958:	f010 0301 	ands.w	r3, r0, #1
 800895c:	d00a      	beq.n	8008974 <__swsetup_r+0xbc>
 800895e:	2300      	movs	r3, #0
 8008960:	60a3      	str	r3, [r4, #8]
 8008962:	6963      	ldr	r3, [r4, #20]
 8008964:	425b      	negs	r3, r3
 8008966:	61a3      	str	r3, [r4, #24]
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	b943      	cbnz	r3, 800897e <__swsetup_r+0xc6>
 800896c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008970:	d1ba      	bne.n	80088e8 <__swsetup_r+0x30>
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	0781      	lsls	r1, r0, #30
 8008976:	bf58      	it	pl
 8008978:	6963      	ldrpl	r3, [r4, #20]
 800897a:	60a3      	str	r3, [r4, #8]
 800897c:	e7f4      	b.n	8008968 <__swsetup_r+0xb0>
 800897e:	2000      	movs	r0, #0
 8008980:	e7f7      	b.n	8008972 <__swsetup_r+0xba>
 8008982:	bf00      	nop
 8008984:	2000000c 	.word	0x2000000c
 8008988:	08035d28 	.word	0x08035d28
 800898c:	08035d48 	.word	0x08035d48
 8008990:	08035d08 	.word	0x08035d08

08008994 <abort>:
 8008994:	b508      	push	{r3, lr}
 8008996:	2006      	movs	r0, #6
 8008998:	f002 face 	bl	800af38 <raise>
 800899c:	2001      	movs	r0, #1
 800899e:	f7fa f9c9 	bl	8002d34 <_exit>

080089a2 <quorem>:
 80089a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a6:	6903      	ldr	r3, [r0, #16]
 80089a8:	690c      	ldr	r4, [r1, #16]
 80089aa:	42a3      	cmp	r3, r4
 80089ac:	4607      	mov	r7, r0
 80089ae:	f2c0 8081 	blt.w	8008ab4 <quorem+0x112>
 80089b2:	3c01      	subs	r4, #1
 80089b4:	f101 0814 	add.w	r8, r1, #20
 80089b8:	f100 0514 	add.w	r5, r0, #20
 80089bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089c0:	9301      	str	r3, [sp, #4]
 80089c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089ca:	3301      	adds	r3, #1
 80089cc:	429a      	cmp	r2, r3
 80089ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80089d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80089d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80089da:	d331      	bcc.n	8008a40 <quorem+0x9e>
 80089dc:	f04f 0e00 	mov.w	lr, #0
 80089e0:	4640      	mov	r0, r8
 80089e2:	46ac      	mov	ip, r5
 80089e4:	46f2      	mov	sl, lr
 80089e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80089ea:	b293      	uxth	r3, r2
 80089ec:	fb06 e303 	mla	r3, r6, r3, lr
 80089f0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	ebaa 0303 	sub.w	r3, sl, r3
 80089fa:	0c12      	lsrs	r2, r2, #16
 80089fc:	f8dc a000 	ldr.w	sl, [ip]
 8008a00:	fb06 e202 	mla	r2, r6, r2, lr
 8008a04:	fa13 f38a 	uxtah	r3, r3, sl
 8008a08:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a0c:	fa1f fa82 	uxth.w	sl, r2
 8008a10:	f8dc 2000 	ldr.w	r2, [ip]
 8008a14:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008a18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a22:	4581      	cmp	r9, r0
 8008a24:	f84c 3b04 	str.w	r3, [ip], #4
 8008a28:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a2c:	d2db      	bcs.n	80089e6 <quorem+0x44>
 8008a2e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a32:	b92b      	cbnz	r3, 8008a40 <quorem+0x9e>
 8008a34:	9b01      	ldr	r3, [sp, #4]
 8008a36:	3b04      	subs	r3, #4
 8008a38:	429d      	cmp	r5, r3
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	d32e      	bcc.n	8008a9c <quorem+0xfa>
 8008a3e:	613c      	str	r4, [r7, #16]
 8008a40:	4638      	mov	r0, r7
 8008a42:	f001 fec5 	bl	800a7d0 <__mcmp>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	db24      	blt.n	8008a94 <quorem+0xf2>
 8008a4a:	3601      	adds	r6, #1
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f04f 0c00 	mov.w	ip, #0
 8008a52:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a56:	f8d0 e000 	ldr.w	lr, [r0]
 8008a5a:	b293      	uxth	r3, r2
 8008a5c:	ebac 0303 	sub.w	r3, ip, r3
 8008a60:	0c12      	lsrs	r2, r2, #16
 8008a62:	fa13 f38e 	uxtah	r3, r3, lr
 8008a66:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008a6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a74:	45c1      	cmp	r9, r8
 8008a76:	f840 3b04 	str.w	r3, [r0], #4
 8008a7a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008a7e:	d2e8      	bcs.n	8008a52 <quorem+0xb0>
 8008a80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a88:	b922      	cbnz	r2, 8008a94 <quorem+0xf2>
 8008a8a:	3b04      	subs	r3, #4
 8008a8c:	429d      	cmp	r5, r3
 8008a8e:	461a      	mov	r2, r3
 8008a90:	d30a      	bcc.n	8008aa8 <quorem+0x106>
 8008a92:	613c      	str	r4, [r7, #16]
 8008a94:	4630      	mov	r0, r6
 8008a96:	b003      	add	sp, #12
 8008a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	6812      	ldr	r2, [r2, #0]
 8008a9e:	3b04      	subs	r3, #4
 8008aa0:	2a00      	cmp	r2, #0
 8008aa2:	d1cc      	bne.n	8008a3e <quorem+0x9c>
 8008aa4:	3c01      	subs	r4, #1
 8008aa6:	e7c7      	b.n	8008a38 <quorem+0x96>
 8008aa8:	6812      	ldr	r2, [r2, #0]
 8008aaa:	3b04      	subs	r3, #4
 8008aac:	2a00      	cmp	r2, #0
 8008aae:	d1f0      	bne.n	8008a92 <quorem+0xf0>
 8008ab0:	3c01      	subs	r4, #1
 8008ab2:	e7eb      	b.n	8008a8c <quorem+0xea>
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	e7ee      	b.n	8008a96 <quorem+0xf4>

08008ab8 <_dtoa_r>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	ed2d 8b02 	vpush	{d8}
 8008ac0:	ec57 6b10 	vmov	r6, r7, d0
 8008ac4:	b095      	sub	sp, #84	; 0x54
 8008ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008acc:	9105      	str	r1, [sp, #20]
 8008ace:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ad6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ad8:	b975      	cbnz	r5, 8008af8 <_dtoa_r+0x40>
 8008ada:	2010      	movs	r0, #16
 8008adc:	f7fd fe94 	bl	8006808 <malloc>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	6260      	str	r0, [r4, #36]	; 0x24
 8008ae4:	b920      	cbnz	r0, 8008af0 <_dtoa_r+0x38>
 8008ae6:	4bb2      	ldr	r3, [pc, #712]	; (8008db0 <_dtoa_r+0x2f8>)
 8008ae8:	21ea      	movs	r1, #234	; 0xea
 8008aea:	48b2      	ldr	r0, [pc, #712]	; (8008db4 <_dtoa_r+0x2fc>)
 8008aec:	f7fd fe1e 	bl	800672c <__assert_func>
 8008af0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008af4:	6005      	str	r5, [r0, #0]
 8008af6:	60c5      	str	r5, [r0, #12]
 8008af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008afa:	6819      	ldr	r1, [r3, #0]
 8008afc:	b151      	cbz	r1, 8008b14 <_dtoa_r+0x5c>
 8008afe:	685a      	ldr	r2, [r3, #4]
 8008b00:	604a      	str	r2, [r1, #4]
 8008b02:	2301      	movs	r3, #1
 8008b04:	4093      	lsls	r3, r2
 8008b06:	608b      	str	r3, [r1, #8]
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f001 fbd9 	bl	800a2c0 <_Bfree>
 8008b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
 8008b14:	1e3b      	subs	r3, r7, #0
 8008b16:	bfb9      	ittee	lt
 8008b18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b1c:	9303      	strlt	r3, [sp, #12]
 8008b1e:	2300      	movge	r3, #0
 8008b20:	f8c8 3000 	strge.w	r3, [r8]
 8008b24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008b28:	4ba3      	ldr	r3, [pc, #652]	; (8008db8 <_dtoa_r+0x300>)
 8008b2a:	bfbc      	itt	lt
 8008b2c:	2201      	movlt	r2, #1
 8008b2e:	f8c8 2000 	strlt.w	r2, [r8]
 8008b32:	ea33 0309 	bics.w	r3, r3, r9
 8008b36:	d11b      	bne.n	8008b70 <_dtoa_r+0xb8>
 8008b38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b3e:	6013      	str	r3, [r2, #0]
 8008b40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b44:	4333      	orrs	r3, r6
 8008b46:	f000 857a 	beq.w	800963e <_dtoa_r+0xb86>
 8008b4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b4c:	b963      	cbnz	r3, 8008b68 <_dtoa_r+0xb0>
 8008b4e:	4b9b      	ldr	r3, [pc, #620]	; (8008dbc <_dtoa_r+0x304>)
 8008b50:	e024      	b.n	8008b9c <_dtoa_r+0xe4>
 8008b52:	4b9b      	ldr	r3, [pc, #620]	; (8008dc0 <_dtoa_r+0x308>)
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	3308      	adds	r3, #8
 8008b58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b5a:	6013      	str	r3, [r2, #0]
 8008b5c:	9800      	ldr	r0, [sp, #0]
 8008b5e:	b015      	add	sp, #84	; 0x54
 8008b60:	ecbd 8b02 	vpop	{d8}
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	4b94      	ldr	r3, [pc, #592]	; (8008dbc <_dtoa_r+0x304>)
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	3303      	adds	r3, #3
 8008b6e:	e7f3      	b.n	8008b58 <_dtoa_r+0xa0>
 8008b70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b74:	2200      	movs	r2, #0
 8008b76:	ec51 0b17 	vmov	r0, r1, d7
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008b80:	f7f7 ffba 	bl	8000af8 <__aeabi_dcmpeq>
 8008b84:	4680      	mov	r8, r0
 8008b86:	b158      	cbz	r0, 8008ba0 <_dtoa_r+0xe8>
 8008b88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 8551 	beq.w	8009638 <_dtoa_r+0xb80>
 8008b96:	488b      	ldr	r0, [pc, #556]	; (8008dc4 <_dtoa_r+0x30c>)
 8008b98:	6018      	str	r0, [r3, #0]
 8008b9a:	1e43      	subs	r3, r0, #1
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	e7dd      	b.n	8008b5c <_dtoa_r+0xa4>
 8008ba0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008ba4:	aa12      	add	r2, sp, #72	; 0x48
 8008ba6:	a913      	add	r1, sp, #76	; 0x4c
 8008ba8:	4620      	mov	r0, r4
 8008baa:	f001 ff31 	bl	800aa10 <__d2b>
 8008bae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bb2:	4683      	mov	fp, r0
 8008bb4:	2d00      	cmp	r5, #0
 8008bb6:	d07c      	beq.n	8008cb2 <_dtoa_r+0x1fa>
 8008bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008bbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008bc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008bca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008bce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008bd2:	4b7d      	ldr	r3, [pc, #500]	; (8008dc8 <_dtoa_r+0x310>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	4639      	mov	r1, r7
 8008bda:	f7f7 fb6d 	bl	80002b8 <__aeabi_dsub>
 8008bde:	a36e      	add	r3, pc, #440	; (adr r3, 8008d98 <_dtoa_r+0x2e0>)
 8008be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be4:	f7f7 fd20 	bl	8000628 <__aeabi_dmul>
 8008be8:	a36d      	add	r3, pc, #436	; (adr r3, 8008da0 <_dtoa_r+0x2e8>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	f7f7 fb65 	bl	80002bc <__adddf3>
 8008bf2:	4606      	mov	r6, r0
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	460f      	mov	r7, r1
 8008bf8:	f7f7 fcac 	bl	8000554 <__aeabi_i2d>
 8008bfc:	a36a      	add	r3, pc, #424	; (adr r3, 8008da8 <_dtoa_r+0x2f0>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fd11 	bl	8000628 <__aeabi_dmul>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	f7f7 fb55 	bl	80002bc <__adddf3>
 8008c12:	4606      	mov	r6, r0
 8008c14:	460f      	mov	r7, r1
 8008c16:	f7f7 ffb7 	bl	8000b88 <__aeabi_d2iz>
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	4682      	mov	sl, r0
 8008c1e:	2300      	movs	r3, #0
 8008c20:	4630      	mov	r0, r6
 8008c22:	4639      	mov	r1, r7
 8008c24:	f7f7 ff72 	bl	8000b0c <__aeabi_dcmplt>
 8008c28:	b148      	cbz	r0, 8008c3e <_dtoa_r+0x186>
 8008c2a:	4650      	mov	r0, sl
 8008c2c:	f7f7 fc92 	bl	8000554 <__aeabi_i2d>
 8008c30:	4632      	mov	r2, r6
 8008c32:	463b      	mov	r3, r7
 8008c34:	f7f7 ff60 	bl	8000af8 <__aeabi_dcmpeq>
 8008c38:	b908      	cbnz	r0, 8008c3e <_dtoa_r+0x186>
 8008c3a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008c3e:	f1ba 0f16 	cmp.w	sl, #22
 8008c42:	d854      	bhi.n	8008cee <_dtoa_r+0x236>
 8008c44:	4b61      	ldr	r3, [pc, #388]	; (8008dcc <_dtoa_r+0x314>)
 8008c46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c52:	f7f7 ff5b 	bl	8000b0c <__aeabi_dcmplt>
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d04b      	beq.n	8008cf2 <_dtoa_r+0x23a>
 8008c5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008c5e:	2300      	movs	r3, #0
 8008c60:	930e      	str	r3, [sp, #56]	; 0x38
 8008c62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c64:	1b5d      	subs	r5, r3, r5
 8008c66:	1e6b      	subs	r3, r5, #1
 8008c68:	9304      	str	r3, [sp, #16]
 8008c6a:	bf43      	ittte	mi
 8008c6c:	2300      	movmi	r3, #0
 8008c6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8008c72:	9304      	strmi	r3, [sp, #16]
 8008c74:	f04f 0800 	movpl.w	r8, #0
 8008c78:	f1ba 0f00 	cmp.w	sl, #0
 8008c7c:	db3b      	blt.n	8008cf6 <_dtoa_r+0x23e>
 8008c7e:	9b04      	ldr	r3, [sp, #16]
 8008c80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008c84:	4453      	add	r3, sl
 8008c86:	9304      	str	r3, [sp, #16]
 8008c88:	2300      	movs	r3, #0
 8008c8a:	9306      	str	r3, [sp, #24]
 8008c8c:	9b05      	ldr	r3, [sp, #20]
 8008c8e:	2b09      	cmp	r3, #9
 8008c90:	d869      	bhi.n	8008d66 <_dtoa_r+0x2ae>
 8008c92:	2b05      	cmp	r3, #5
 8008c94:	bfc4      	itt	gt
 8008c96:	3b04      	subgt	r3, #4
 8008c98:	9305      	strgt	r3, [sp, #20]
 8008c9a:	9b05      	ldr	r3, [sp, #20]
 8008c9c:	f1a3 0302 	sub.w	r3, r3, #2
 8008ca0:	bfcc      	ite	gt
 8008ca2:	2500      	movgt	r5, #0
 8008ca4:	2501      	movle	r5, #1
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d869      	bhi.n	8008d7e <_dtoa_r+0x2c6>
 8008caa:	e8df f003 	tbb	[pc, r3]
 8008cae:	4e2c      	.short	0x4e2c
 8008cb0:	5a4c      	.short	0x5a4c
 8008cb2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008cb6:	441d      	add	r5, r3
 8008cb8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008cbc:	2b20      	cmp	r3, #32
 8008cbe:	bfc1      	itttt	gt
 8008cc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008cc4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008cc8:	fa09 f303 	lslgt.w	r3, r9, r3
 8008ccc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008cd0:	bfda      	itte	le
 8008cd2:	f1c3 0320 	rsble	r3, r3, #32
 8008cd6:	fa06 f003 	lslle.w	r0, r6, r3
 8008cda:	4318      	orrgt	r0, r3
 8008cdc:	f7f7 fc2a 	bl	8000534 <__aeabi_ui2d>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ce8:	3d01      	subs	r5, #1
 8008cea:	9310      	str	r3, [sp, #64]	; 0x40
 8008cec:	e771      	b.n	8008bd2 <_dtoa_r+0x11a>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e7b6      	b.n	8008c60 <_dtoa_r+0x1a8>
 8008cf2:	900e      	str	r0, [sp, #56]	; 0x38
 8008cf4:	e7b5      	b.n	8008c62 <_dtoa_r+0x1aa>
 8008cf6:	f1ca 0300 	rsb	r3, sl, #0
 8008cfa:	9306      	str	r3, [sp, #24]
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	eba8 080a 	sub.w	r8, r8, sl
 8008d02:	930d      	str	r3, [sp, #52]	; 0x34
 8008d04:	e7c2      	b.n	8008c8c <_dtoa_r+0x1d4>
 8008d06:	2300      	movs	r3, #0
 8008d08:	9308      	str	r3, [sp, #32]
 8008d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dc39      	bgt.n	8008d84 <_dtoa_r+0x2cc>
 8008d10:	f04f 0901 	mov.w	r9, #1
 8008d14:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d18:	464b      	mov	r3, r9
 8008d1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008d1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008d20:	2200      	movs	r2, #0
 8008d22:	6042      	str	r2, [r0, #4]
 8008d24:	2204      	movs	r2, #4
 8008d26:	f102 0614 	add.w	r6, r2, #20
 8008d2a:	429e      	cmp	r6, r3
 8008d2c:	6841      	ldr	r1, [r0, #4]
 8008d2e:	d92f      	bls.n	8008d90 <_dtoa_r+0x2d8>
 8008d30:	4620      	mov	r0, r4
 8008d32:	f001 fa85 	bl	800a240 <_Balloc>
 8008d36:	9000      	str	r0, [sp, #0]
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d14b      	bne.n	8008dd4 <_dtoa_r+0x31c>
 8008d3c:	4b24      	ldr	r3, [pc, #144]	; (8008dd0 <_dtoa_r+0x318>)
 8008d3e:	4602      	mov	r2, r0
 8008d40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008d44:	e6d1      	b.n	8008aea <_dtoa_r+0x32>
 8008d46:	2301      	movs	r3, #1
 8008d48:	e7de      	b.n	8008d08 <_dtoa_r+0x250>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9308      	str	r3, [sp, #32]
 8008d4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d50:	eb0a 0903 	add.w	r9, sl, r3
 8008d54:	f109 0301 	add.w	r3, r9, #1
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	bfb8      	it	lt
 8008d5e:	2301      	movlt	r3, #1
 8008d60:	e7dd      	b.n	8008d1e <_dtoa_r+0x266>
 8008d62:	2301      	movs	r3, #1
 8008d64:	e7f2      	b.n	8008d4c <_dtoa_r+0x294>
 8008d66:	2501      	movs	r5, #1
 8008d68:	2300      	movs	r3, #0
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	9508      	str	r5, [sp, #32]
 8008d6e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d78:	2312      	movs	r3, #18
 8008d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8008d7c:	e7cf      	b.n	8008d1e <_dtoa_r+0x266>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	9308      	str	r3, [sp, #32]
 8008d82:	e7f4      	b.n	8008d6e <_dtoa_r+0x2b6>
 8008d84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008d88:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	e7c6      	b.n	8008d1e <_dtoa_r+0x266>
 8008d90:	3101      	adds	r1, #1
 8008d92:	6041      	str	r1, [r0, #4]
 8008d94:	0052      	lsls	r2, r2, #1
 8008d96:	e7c6      	b.n	8008d26 <_dtoa_r+0x26e>
 8008d98:	636f4361 	.word	0x636f4361
 8008d9c:	3fd287a7 	.word	0x3fd287a7
 8008da0:	8b60c8b3 	.word	0x8b60c8b3
 8008da4:	3fc68a28 	.word	0x3fc68a28
 8008da8:	509f79fb 	.word	0x509f79fb
 8008dac:	3fd34413 	.word	0x3fd34413
 8008db0:	08035c7e 	.word	0x08035c7e
 8008db4:	08035c95 	.word	0x08035c95
 8008db8:	7ff00000 	.word	0x7ff00000
 8008dbc:	08035c7a 	.word	0x08035c7a
 8008dc0:	08035c71 	.word	0x08035c71
 8008dc4:	08035af6 	.word	0x08035af6
 8008dc8:	3ff80000 	.word	0x3ff80000
 8008dcc:	08035e70 	.word	0x08035e70
 8008dd0:	08035cf4 	.word	0x08035cf4
 8008dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dd6:	9a00      	ldr	r2, [sp, #0]
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	9b01      	ldr	r3, [sp, #4]
 8008ddc:	2b0e      	cmp	r3, #14
 8008dde:	f200 80ad 	bhi.w	8008f3c <_dtoa_r+0x484>
 8008de2:	2d00      	cmp	r5, #0
 8008de4:	f000 80aa 	beq.w	8008f3c <_dtoa_r+0x484>
 8008de8:	f1ba 0f00 	cmp.w	sl, #0
 8008dec:	dd36      	ble.n	8008e5c <_dtoa_r+0x3a4>
 8008dee:	4ac3      	ldr	r2, [pc, #780]	; (80090fc <_dtoa_r+0x644>)
 8008df0:	f00a 030f 	and.w	r3, sl, #15
 8008df4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008df8:	ed93 7b00 	vldr	d7, [r3]
 8008dfc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008e00:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008e04:	eeb0 8a47 	vmov.f32	s16, s14
 8008e08:	eef0 8a67 	vmov.f32	s17, s15
 8008e0c:	d016      	beq.n	8008e3c <_dtoa_r+0x384>
 8008e0e:	4bbc      	ldr	r3, [pc, #752]	; (8009100 <_dtoa_r+0x648>)
 8008e10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e18:	f7f7 fd30 	bl	800087c <__aeabi_ddiv>
 8008e1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e20:	f007 070f 	and.w	r7, r7, #15
 8008e24:	2503      	movs	r5, #3
 8008e26:	4eb6      	ldr	r6, [pc, #728]	; (8009100 <_dtoa_r+0x648>)
 8008e28:	b957      	cbnz	r7, 8008e40 <_dtoa_r+0x388>
 8008e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2e:	ec53 2b18 	vmov	r2, r3, d8
 8008e32:	f7f7 fd23 	bl	800087c <__aeabi_ddiv>
 8008e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e3a:	e029      	b.n	8008e90 <_dtoa_r+0x3d8>
 8008e3c:	2502      	movs	r5, #2
 8008e3e:	e7f2      	b.n	8008e26 <_dtoa_r+0x36e>
 8008e40:	07f9      	lsls	r1, r7, #31
 8008e42:	d508      	bpl.n	8008e56 <_dtoa_r+0x39e>
 8008e44:	ec51 0b18 	vmov	r0, r1, d8
 8008e48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e4c:	f7f7 fbec 	bl	8000628 <__aeabi_dmul>
 8008e50:	ec41 0b18 	vmov	d8, r0, r1
 8008e54:	3501      	adds	r5, #1
 8008e56:	107f      	asrs	r7, r7, #1
 8008e58:	3608      	adds	r6, #8
 8008e5a:	e7e5      	b.n	8008e28 <_dtoa_r+0x370>
 8008e5c:	f000 80a6 	beq.w	8008fac <_dtoa_r+0x4f4>
 8008e60:	f1ca 0600 	rsb	r6, sl, #0
 8008e64:	4ba5      	ldr	r3, [pc, #660]	; (80090fc <_dtoa_r+0x644>)
 8008e66:	4fa6      	ldr	r7, [pc, #664]	; (8009100 <_dtoa_r+0x648>)
 8008e68:	f006 020f 	and.w	r2, r6, #15
 8008e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008e78:	f7f7 fbd6 	bl	8000628 <__aeabi_dmul>
 8008e7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e80:	1136      	asrs	r6, r6, #4
 8008e82:	2300      	movs	r3, #0
 8008e84:	2502      	movs	r5, #2
 8008e86:	2e00      	cmp	r6, #0
 8008e88:	f040 8085 	bne.w	8008f96 <_dtoa_r+0x4de>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1d2      	bne.n	8008e36 <_dtoa_r+0x37e>
 8008e90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f000 808c 	beq.w	8008fb0 <_dtoa_r+0x4f8>
 8008e98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008e9c:	4b99      	ldr	r3, [pc, #612]	; (8009104 <_dtoa_r+0x64c>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	f7f7 fe32 	bl	8000b0c <__aeabi_dcmplt>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	f000 8081 	beq.w	8008fb0 <_dtoa_r+0x4f8>
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d07d      	beq.n	8008fb0 <_dtoa_r+0x4f8>
 8008eb4:	f1b9 0f00 	cmp.w	r9, #0
 8008eb8:	dd3c      	ble.n	8008f34 <_dtoa_r+0x47c>
 8008eba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008ebe:	9307      	str	r3, [sp, #28]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4b91      	ldr	r3, [pc, #580]	; (8009108 <_dtoa_r+0x650>)
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f7f7 fbae 	bl	8000628 <__aeabi_dmul>
 8008ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008ed6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008eda:	4628      	mov	r0, r5
 8008edc:	f7f7 fb3a 	bl	8000554 <__aeabi_i2d>
 8008ee0:	4632      	mov	r2, r6
 8008ee2:	463b      	mov	r3, r7
 8008ee4:	f7f7 fba0 	bl	8000628 <__aeabi_dmul>
 8008ee8:	4b88      	ldr	r3, [pc, #544]	; (800910c <_dtoa_r+0x654>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	f7f7 f9e6 	bl	80002bc <__adddf3>
 8008ef0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ef8:	9303      	str	r3, [sp, #12]
 8008efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d15c      	bne.n	8008fba <_dtoa_r+0x502>
 8008f00:	4b83      	ldr	r3, [pc, #524]	; (8009110 <_dtoa_r+0x658>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	4630      	mov	r0, r6
 8008f06:	4639      	mov	r1, r7
 8008f08:	f7f7 f9d6 	bl	80002b8 <__aeabi_dsub>
 8008f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f10:	4606      	mov	r6, r0
 8008f12:	460f      	mov	r7, r1
 8008f14:	f7f7 fe18 	bl	8000b48 <__aeabi_dcmpgt>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	f040 8296 	bne.w	800944a <_dtoa_r+0x992>
 8008f1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f22:	4630      	mov	r0, r6
 8008f24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f28:	4639      	mov	r1, r7
 8008f2a:	f7f7 fdef 	bl	8000b0c <__aeabi_dcmplt>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f040 8288 	bne.w	8009444 <_dtoa_r+0x98c>
 8008f34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f2c0 8158 	blt.w	80091f4 <_dtoa_r+0x73c>
 8008f44:	f1ba 0f0e 	cmp.w	sl, #14
 8008f48:	f300 8154 	bgt.w	80091f4 <_dtoa_r+0x73c>
 8008f4c:	4b6b      	ldr	r3, [pc, #428]	; (80090fc <_dtoa_r+0x644>)
 8008f4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f280 80e3 	bge.w	8009124 <_dtoa_r+0x66c>
 8008f5e:	9b01      	ldr	r3, [sp, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f300 80df 	bgt.w	8009124 <_dtoa_r+0x66c>
 8008f66:	f040 826d 	bne.w	8009444 <_dtoa_r+0x98c>
 8008f6a:	4b69      	ldr	r3, [pc, #420]	; (8009110 <_dtoa_r+0x658>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 fb59 	bl	8000628 <__aeabi_dmul>
 8008f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f7a:	f7f7 fddb 	bl	8000b34 <__aeabi_dcmpge>
 8008f7e:	9e01      	ldr	r6, [sp, #4]
 8008f80:	4637      	mov	r7, r6
 8008f82:	2800      	cmp	r0, #0
 8008f84:	f040 8243 	bne.w	800940e <_dtoa_r+0x956>
 8008f88:	9d00      	ldr	r5, [sp, #0]
 8008f8a:	2331      	movs	r3, #49	; 0x31
 8008f8c:	f805 3b01 	strb.w	r3, [r5], #1
 8008f90:	f10a 0a01 	add.w	sl, sl, #1
 8008f94:	e23f      	b.n	8009416 <_dtoa_r+0x95e>
 8008f96:	07f2      	lsls	r2, r6, #31
 8008f98:	d505      	bpl.n	8008fa6 <_dtoa_r+0x4ee>
 8008f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f9e:	f7f7 fb43 	bl	8000628 <__aeabi_dmul>
 8008fa2:	3501      	adds	r5, #1
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	1076      	asrs	r6, r6, #1
 8008fa8:	3708      	adds	r7, #8
 8008faa:	e76c      	b.n	8008e86 <_dtoa_r+0x3ce>
 8008fac:	2502      	movs	r5, #2
 8008fae:	e76f      	b.n	8008e90 <_dtoa_r+0x3d8>
 8008fb0:	9b01      	ldr	r3, [sp, #4]
 8008fb2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8008fb8:	e78d      	b.n	8008ed6 <_dtoa_r+0x41e>
 8008fba:	9900      	ldr	r1, [sp, #0]
 8008fbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008fbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fc0:	4b4e      	ldr	r3, [pc, #312]	; (80090fc <_dtoa_r+0x644>)
 8008fc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fc6:	4401      	add	r1, r0
 8008fc8:	9102      	str	r1, [sp, #8]
 8008fca:	9908      	ldr	r1, [sp, #32]
 8008fcc:	eeb0 8a47 	vmov.f32	s16, s14
 8008fd0:	eef0 8a67 	vmov.f32	s17, s15
 8008fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	d045      	beq.n	800906c <_dtoa_r+0x5b4>
 8008fe0:	494c      	ldr	r1, [pc, #304]	; (8009114 <_dtoa_r+0x65c>)
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	f7f7 fc4a 	bl	800087c <__aeabi_ddiv>
 8008fe8:	ec53 2b18 	vmov	r2, r3, d8
 8008fec:	f7f7 f964 	bl	80002b8 <__aeabi_dsub>
 8008ff0:	9d00      	ldr	r5, [sp, #0]
 8008ff2:	ec41 0b18 	vmov	d8, r0, r1
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7f7 fdc5 	bl	8000b88 <__aeabi_d2iz>
 8008ffe:	900c      	str	r0, [sp, #48]	; 0x30
 8009000:	f7f7 faa8 	bl	8000554 <__aeabi_i2d>
 8009004:	4602      	mov	r2, r0
 8009006:	460b      	mov	r3, r1
 8009008:	4630      	mov	r0, r6
 800900a:	4639      	mov	r1, r7
 800900c:	f7f7 f954 	bl	80002b8 <__aeabi_dsub>
 8009010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009012:	3330      	adds	r3, #48	; 0x30
 8009014:	f805 3b01 	strb.w	r3, [r5], #1
 8009018:	ec53 2b18 	vmov	r2, r3, d8
 800901c:	4606      	mov	r6, r0
 800901e:	460f      	mov	r7, r1
 8009020:	f7f7 fd74 	bl	8000b0c <__aeabi_dcmplt>
 8009024:	2800      	cmp	r0, #0
 8009026:	d165      	bne.n	80090f4 <_dtoa_r+0x63c>
 8009028:	4632      	mov	r2, r6
 800902a:	463b      	mov	r3, r7
 800902c:	4935      	ldr	r1, [pc, #212]	; (8009104 <_dtoa_r+0x64c>)
 800902e:	2000      	movs	r0, #0
 8009030:	f7f7 f942 	bl	80002b8 <__aeabi_dsub>
 8009034:	ec53 2b18 	vmov	r2, r3, d8
 8009038:	f7f7 fd68 	bl	8000b0c <__aeabi_dcmplt>
 800903c:	2800      	cmp	r0, #0
 800903e:	f040 80b9 	bne.w	80091b4 <_dtoa_r+0x6fc>
 8009042:	9b02      	ldr	r3, [sp, #8]
 8009044:	429d      	cmp	r5, r3
 8009046:	f43f af75 	beq.w	8008f34 <_dtoa_r+0x47c>
 800904a:	4b2f      	ldr	r3, [pc, #188]	; (8009108 <_dtoa_r+0x650>)
 800904c:	ec51 0b18 	vmov	r0, r1, d8
 8009050:	2200      	movs	r2, #0
 8009052:	f7f7 fae9 	bl	8000628 <__aeabi_dmul>
 8009056:	4b2c      	ldr	r3, [pc, #176]	; (8009108 <_dtoa_r+0x650>)
 8009058:	ec41 0b18 	vmov	d8, r0, r1
 800905c:	2200      	movs	r2, #0
 800905e:	4630      	mov	r0, r6
 8009060:	4639      	mov	r1, r7
 8009062:	f7f7 fae1 	bl	8000628 <__aeabi_dmul>
 8009066:	4606      	mov	r6, r0
 8009068:	460f      	mov	r7, r1
 800906a:	e7c4      	b.n	8008ff6 <_dtoa_r+0x53e>
 800906c:	ec51 0b17 	vmov	r0, r1, d7
 8009070:	f7f7 fada 	bl	8000628 <__aeabi_dmul>
 8009074:	9b02      	ldr	r3, [sp, #8]
 8009076:	9d00      	ldr	r5, [sp, #0]
 8009078:	930c      	str	r3, [sp, #48]	; 0x30
 800907a:	ec41 0b18 	vmov	d8, r0, r1
 800907e:	4639      	mov	r1, r7
 8009080:	4630      	mov	r0, r6
 8009082:	f7f7 fd81 	bl	8000b88 <__aeabi_d2iz>
 8009086:	9011      	str	r0, [sp, #68]	; 0x44
 8009088:	f7f7 fa64 	bl	8000554 <__aeabi_i2d>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4630      	mov	r0, r6
 8009092:	4639      	mov	r1, r7
 8009094:	f7f7 f910 	bl	80002b8 <__aeabi_dsub>
 8009098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800909a:	3330      	adds	r3, #48	; 0x30
 800909c:	f805 3b01 	strb.w	r3, [r5], #1
 80090a0:	9b02      	ldr	r3, [sp, #8]
 80090a2:	429d      	cmp	r5, r3
 80090a4:	4606      	mov	r6, r0
 80090a6:	460f      	mov	r7, r1
 80090a8:	f04f 0200 	mov.w	r2, #0
 80090ac:	d134      	bne.n	8009118 <_dtoa_r+0x660>
 80090ae:	4b19      	ldr	r3, [pc, #100]	; (8009114 <_dtoa_r+0x65c>)
 80090b0:	ec51 0b18 	vmov	r0, r1, d8
 80090b4:	f7f7 f902 	bl	80002bc <__adddf3>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4630      	mov	r0, r6
 80090be:	4639      	mov	r1, r7
 80090c0:	f7f7 fd42 	bl	8000b48 <__aeabi_dcmpgt>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d175      	bne.n	80091b4 <_dtoa_r+0x6fc>
 80090c8:	ec53 2b18 	vmov	r2, r3, d8
 80090cc:	4911      	ldr	r1, [pc, #68]	; (8009114 <_dtoa_r+0x65c>)
 80090ce:	2000      	movs	r0, #0
 80090d0:	f7f7 f8f2 	bl	80002b8 <__aeabi_dsub>
 80090d4:	4602      	mov	r2, r0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4630      	mov	r0, r6
 80090da:	4639      	mov	r1, r7
 80090dc:	f7f7 fd16 	bl	8000b0c <__aeabi_dcmplt>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	f43f af27 	beq.w	8008f34 <_dtoa_r+0x47c>
 80090e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090e8:	1e6b      	subs	r3, r5, #1
 80090ea:	930c      	str	r3, [sp, #48]	; 0x30
 80090ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090f0:	2b30      	cmp	r3, #48	; 0x30
 80090f2:	d0f8      	beq.n	80090e6 <_dtoa_r+0x62e>
 80090f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80090f8:	e04a      	b.n	8009190 <_dtoa_r+0x6d8>
 80090fa:	bf00      	nop
 80090fc:	08035e70 	.word	0x08035e70
 8009100:	08035e48 	.word	0x08035e48
 8009104:	3ff00000 	.word	0x3ff00000
 8009108:	40240000 	.word	0x40240000
 800910c:	401c0000 	.word	0x401c0000
 8009110:	40140000 	.word	0x40140000
 8009114:	3fe00000 	.word	0x3fe00000
 8009118:	4baf      	ldr	r3, [pc, #700]	; (80093d8 <_dtoa_r+0x920>)
 800911a:	f7f7 fa85 	bl	8000628 <__aeabi_dmul>
 800911e:	4606      	mov	r6, r0
 8009120:	460f      	mov	r7, r1
 8009122:	e7ac      	b.n	800907e <_dtoa_r+0x5c6>
 8009124:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009128:	9d00      	ldr	r5, [sp, #0]
 800912a:	4642      	mov	r2, r8
 800912c:	464b      	mov	r3, r9
 800912e:	4630      	mov	r0, r6
 8009130:	4639      	mov	r1, r7
 8009132:	f7f7 fba3 	bl	800087c <__aeabi_ddiv>
 8009136:	f7f7 fd27 	bl	8000b88 <__aeabi_d2iz>
 800913a:	9002      	str	r0, [sp, #8]
 800913c:	f7f7 fa0a 	bl	8000554 <__aeabi_i2d>
 8009140:	4642      	mov	r2, r8
 8009142:	464b      	mov	r3, r9
 8009144:	f7f7 fa70 	bl	8000628 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4630      	mov	r0, r6
 800914e:	4639      	mov	r1, r7
 8009150:	f7f7 f8b2 	bl	80002b8 <__aeabi_dsub>
 8009154:	9e02      	ldr	r6, [sp, #8]
 8009156:	9f01      	ldr	r7, [sp, #4]
 8009158:	3630      	adds	r6, #48	; 0x30
 800915a:	f805 6b01 	strb.w	r6, [r5], #1
 800915e:	9e00      	ldr	r6, [sp, #0]
 8009160:	1bae      	subs	r6, r5, r6
 8009162:	42b7      	cmp	r7, r6
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	d137      	bne.n	80091da <_dtoa_r+0x722>
 800916a:	f7f7 f8a7 	bl	80002bc <__adddf3>
 800916e:	4642      	mov	r2, r8
 8009170:	464b      	mov	r3, r9
 8009172:	4606      	mov	r6, r0
 8009174:	460f      	mov	r7, r1
 8009176:	f7f7 fce7 	bl	8000b48 <__aeabi_dcmpgt>
 800917a:	b9c8      	cbnz	r0, 80091b0 <_dtoa_r+0x6f8>
 800917c:	4642      	mov	r2, r8
 800917e:	464b      	mov	r3, r9
 8009180:	4630      	mov	r0, r6
 8009182:	4639      	mov	r1, r7
 8009184:	f7f7 fcb8 	bl	8000af8 <__aeabi_dcmpeq>
 8009188:	b110      	cbz	r0, 8009190 <_dtoa_r+0x6d8>
 800918a:	9b02      	ldr	r3, [sp, #8]
 800918c:	07d9      	lsls	r1, r3, #31
 800918e:	d40f      	bmi.n	80091b0 <_dtoa_r+0x6f8>
 8009190:	4620      	mov	r0, r4
 8009192:	4659      	mov	r1, fp
 8009194:	f001 f894 	bl	800a2c0 <_Bfree>
 8009198:	2300      	movs	r3, #0
 800919a:	702b      	strb	r3, [r5, #0]
 800919c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800919e:	f10a 0001 	add.w	r0, sl, #1
 80091a2:	6018      	str	r0, [r3, #0]
 80091a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f43f acd8 	beq.w	8008b5c <_dtoa_r+0xa4>
 80091ac:	601d      	str	r5, [r3, #0]
 80091ae:	e4d5      	b.n	8008b5c <_dtoa_r+0xa4>
 80091b0:	f8cd a01c 	str.w	sl, [sp, #28]
 80091b4:	462b      	mov	r3, r5
 80091b6:	461d      	mov	r5, r3
 80091b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091bc:	2a39      	cmp	r2, #57	; 0x39
 80091be:	d108      	bne.n	80091d2 <_dtoa_r+0x71a>
 80091c0:	9a00      	ldr	r2, [sp, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d1f7      	bne.n	80091b6 <_dtoa_r+0x6fe>
 80091c6:	9a07      	ldr	r2, [sp, #28]
 80091c8:	9900      	ldr	r1, [sp, #0]
 80091ca:	3201      	adds	r2, #1
 80091cc:	9207      	str	r2, [sp, #28]
 80091ce:	2230      	movs	r2, #48	; 0x30
 80091d0:	700a      	strb	r2, [r1, #0]
 80091d2:	781a      	ldrb	r2, [r3, #0]
 80091d4:	3201      	adds	r2, #1
 80091d6:	701a      	strb	r2, [r3, #0]
 80091d8:	e78c      	b.n	80090f4 <_dtoa_r+0x63c>
 80091da:	4b7f      	ldr	r3, [pc, #508]	; (80093d8 <_dtoa_r+0x920>)
 80091dc:	2200      	movs	r2, #0
 80091de:	f7f7 fa23 	bl	8000628 <__aeabi_dmul>
 80091e2:	2200      	movs	r2, #0
 80091e4:	2300      	movs	r3, #0
 80091e6:	4606      	mov	r6, r0
 80091e8:	460f      	mov	r7, r1
 80091ea:	f7f7 fc85 	bl	8000af8 <__aeabi_dcmpeq>
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d09b      	beq.n	800912a <_dtoa_r+0x672>
 80091f2:	e7cd      	b.n	8009190 <_dtoa_r+0x6d8>
 80091f4:	9a08      	ldr	r2, [sp, #32]
 80091f6:	2a00      	cmp	r2, #0
 80091f8:	f000 80c4 	beq.w	8009384 <_dtoa_r+0x8cc>
 80091fc:	9a05      	ldr	r2, [sp, #20]
 80091fe:	2a01      	cmp	r2, #1
 8009200:	f300 80a8 	bgt.w	8009354 <_dtoa_r+0x89c>
 8009204:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009206:	2a00      	cmp	r2, #0
 8009208:	f000 80a0 	beq.w	800934c <_dtoa_r+0x894>
 800920c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009210:	9e06      	ldr	r6, [sp, #24]
 8009212:	4645      	mov	r5, r8
 8009214:	9a04      	ldr	r2, [sp, #16]
 8009216:	2101      	movs	r1, #1
 8009218:	441a      	add	r2, r3
 800921a:	4620      	mov	r0, r4
 800921c:	4498      	add	r8, r3
 800921e:	9204      	str	r2, [sp, #16]
 8009220:	f001 f954 	bl	800a4cc <__i2b>
 8009224:	4607      	mov	r7, r0
 8009226:	2d00      	cmp	r5, #0
 8009228:	dd0b      	ble.n	8009242 <_dtoa_r+0x78a>
 800922a:	9b04      	ldr	r3, [sp, #16]
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd08      	ble.n	8009242 <_dtoa_r+0x78a>
 8009230:	42ab      	cmp	r3, r5
 8009232:	9a04      	ldr	r2, [sp, #16]
 8009234:	bfa8      	it	ge
 8009236:	462b      	movge	r3, r5
 8009238:	eba8 0803 	sub.w	r8, r8, r3
 800923c:	1aed      	subs	r5, r5, r3
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	9304      	str	r3, [sp, #16]
 8009242:	9b06      	ldr	r3, [sp, #24]
 8009244:	b1fb      	cbz	r3, 8009286 <_dtoa_r+0x7ce>
 8009246:	9b08      	ldr	r3, [sp, #32]
 8009248:	2b00      	cmp	r3, #0
 800924a:	f000 809f 	beq.w	800938c <_dtoa_r+0x8d4>
 800924e:	2e00      	cmp	r6, #0
 8009250:	dd11      	ble.n	8009276 <_dtoa_r+0x7be>
 8009252:	4639      	mov	r1, r7
 8009254:	4632      	mov	r2, r6
 8009256:	4620      	mov	r0, r4
 8009258:	f001 f9f4 	bl	800a644 <__pow5mult>
 800925c:	465a      	mov	r2, fp
 800925e:	4601      	mov	r1, r0
 8009260:	4607      	mov	r7, r0
 8009262:	4620      	mov	r0, r4
 8009264:	f001 f948 	bl	800a4f8 <__multiply>
 8009268:	4659      	mov	r1, fp
 800926a:	9007      	str	r0, [sp, #28]
 800926c:	4620      	mov	r0, r4
 800926e:	f001 f827 	bl	800a2c0 <_Bfree>
 8009272:	9b07      	ldr	r3, [sp, #28]
 8009274:	469b      	mov	fp, r3
 8009276:	9b06      	ldr	r3, [sp, #24]
 8009278:	1b9a      	subs	r2, r3, r6
 800927a:	d004      	beq.n	8009286 <_dtoa_r+0x7ce>
 800927c:	4659      	mov	r1, fp
 800927e:	4620      	mov	r0, r4
 8009280:	f001 f9e0 	bl	800a644 <__pow5mult>
 8009284:	4683      	mov	fp, r0
 8009286:	2101      	movs	r1, #1
 8009288:	4620      	mov	r0, r4
 800928a:	f001 f91f 	bl	800a4cc <__i2b>
 800928e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009290:	2b00      	cmp	r3, #0
 8009292:	4606      	mov	r6, r0
 8009294:	dd7c      	ble.n	8009390 <_dtoa_r+0x8d8>
 8009296:	461a      	mov	r2, r3
 8009298:	4601      	mov	r1, r0
 800929a:	4620      	mov	r0, r4
 800929c:	f001 f9d2 	bl	800a644 <__pow5mult>
 80092a0:	9b05      	ldr	r3, [sp, #20]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	4606      	mov	r6, r0
 80092a6:	dd76      	ble.n	8009396 <_dtoa_r+0x8de>
 80092a8:	2300      	movs	r3, #0
 80092aa:	9306      	str	r3, [sp, #24]
 80092ac:	6933      	ldr	r3, [r6, #16]
 80092ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092b2:	6918      	ldr	r0, [r3, #16]
 80092b4:	f001 f8ba 	bl	800a42c <__hi0bits>
 80092b8:	f1c0 0020 	rsb	r0, r0, #32
 80092bc:	9b04      	ldr	r3, [sp, #16]
 80092be:	4418      	add	r0, r3
 80092c0:	f010 001f 	ands.w	r0, r0, #31
 80092c4:	f000 8086 	beq.w	80093d4 <_dtoa_r+0x91c>
 80092c8:	f1c0 0320 	rsb	r3, r0, #32
 80092cc:	2b04      	cmp	r3, #4
 80092ce:	dd7f      	ble.n	80093d0 <_dtoa_r+0x918>
 80092d0:	f1c0 001c 	rsb	r0, r0, #28
 80092d4:	9b04      	ldr	r3, [sp, #16]
 80092d6:	4403      	add	r3, r0
 80092d8:	4480      	add	r8, r0
 80092da:	4405      	add	r5, r0
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	f1b8 0f00 	cmp.w	r8, #0
 80092e2:	dd05      	ble.n	80092f0 <_dtoa_r+0x838>
 80092e4:	4659      	mov	r1, fp
 80092e6:	4642      	mov	r2, r8
 80092e8:	4620      	mov	r0, r4
 80092ea:	f001 fa05 	bl	800a6f8 <__lshift>
 80092ee:	4683      	mov	fp, r0
 80092f0:	9b04      	ldr	r3, [sp, #16]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dd05      	ble.n	8009302 <_dtoa_r+0x84a>
 80092f6:	4631      	mov	r1, r6
 80092f8:	461a      	mov	r2, r3
 80092fa:	4620      	mov	r0, r4
 80092fc:	f001 f9fc 	bl	800a6f8 <__lshift>
 8009300:	4606      	mov	r6, r0
 8009302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009304:	2b00      	cmp	r3, #0
 8009306:	d069      	beq.n	80093dc <_dtoa_r+0x924>
 8009308:	4631      	mov	r1, r6
 800930a:	4658      	mov	r0, fp
 800930c:	f001 fa60 	bl	800a7d0 <__mcmp>
 8009310:	2800      	cmp	r0, #0
 8009312:	da63      	bge.n	80093dc <_dtoa_r+0x924>
 8009314:	2300      	movs	r3, #0
 8009316:	4659      	mov	r1, fp
 8009318:	220a      	movs	r2, #10
 800931a:	4620      	mov	r0, r4
 800931c:	f000 fff2 	bl	800a304 <__multadd>
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009326:	4683      	mov	fp, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 818f 	beq.w	800964c <_dtoa_r+0xb94>
 800932e:	4639      	mov	r1, r7
 8009330:	2300      	movs	r3, #0
 8009332:	220a      	movs	r2, #10
 8009334:	4620      	mov	r0, r4
 8009336:	f000 ffe5 	bl	800a304 <__multadd>
 800933a:	f1b9 0f00 	cmp.w	r9, #0
 800933e:	4607      	mov	r7, r0
 8009340:	f300 808e 	bgt.w	8009460 <_dtoa_r+0x9a8>
 8009344:	9b05      	ldr	r3, [sp, #20]
 8009346:	2b02      	cmp	r3, #2
 8009348:	dc50      	bgt.n	80093ec <_dtoa_r+0x934>
 800934a:	e089      	b.n	8009460 <_dtoa_r+0x9a8>
 800934c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800934e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009352:	e75d      	b.n	8009210 <_dtoa_r+0x758>
 8009354:	9b01      	ldr	r3, [sp, #4]
 8009356:	1e5e      	subs	r6, r3, #1
 8009358:	9b06      	ldr	r3, [sp, #24]
 800935a:	42b3      	cmp	r3, r6
 800935c:	bfbf      	itttt	lt
 800935e:	9b06      	ldrlt	r3, [sp, #24]
 8009360:	9606      	strlt	r6, [sp, #24]
 8009362:	1af2      	sublt	r2, r6, r3
 8009364:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009366:	bfb6      	itet	lt
 8009368:	189b      	addlt	r3, r3, r2
 800936a:	1b9e      	subge	r6, r3, r6
 800936c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	bfb8      	it	lt
 8009372:	2600      	movlt	r6, #0
 8009374:	2b00      	cmp	r3, #0
 8009376:	bfb5      	itete	lt
 8009378:	eba8 0503 	sublt.w	r5, r8, r3
 800937c:	9b01      	ldrge	r3, [sp, #4]
 800937e:	2300      	movlt	r3, #0
 8009380:	4645      	movge	r5, r8
 8009382:	e747      	b.n	8009214 <_dtoa_r+0x75c>
 8009384:	9e06      	ldr	r6, [sp, #24]
 8009386:	9f08      	ldr	r7, [sp, #32]
 8009388:	4645      	mov	r5, r8
 800938a:	e74c      	b.n	8009226 <_dtoa_r+0x76e>
 800938c:	9a06      	ldr	r2, [sp, #24]
 800938e:	e775      	b.n	800927c <_dtoa_r+0x7c4>
 8009390:	9b05      	ldr	r3, [sp, #20]
 8009392:	2b01      	cmp	r3, #1
 8009394:	dc18      	bgt.n	80093c8 <_dtoa_r+0x910>
 8009396:	9b02      	ldr	r3, [sp, #8]
 8009398:	b9b3      	cbnz	r3, 80093c8 <_dtoa_r+0x910>
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093a0:	b9a3      	cbnz	r3, 80093cc <_dtoa_r+0x914>
 80093a2:	9b03      	ldr	r3, [sp, #12]
 80093a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093a8:	0d1b      	lsrs	r3, r3, #20
 80093aa:	051b      	lsls	r3, r3, #20
 80093ac:	b12b      	cbz	r3, 80093ba <_dtoa_r+0x902>
 80093ae:	9b04      	ldr	r3, [sp, #16]
 80093b0:	3301      	adds	r3, #1
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	f108 0801 	add.w	r8, r8, #1
 80093b8:	2301      	movs	r3, #1
 80093ba:	9306      	str	r3, [sp, #24]
 80093bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093be:	2b00      	cmp	r3, #0
 80093c0:	f47f af74 	bne.w	80092ac <_dtoa_r+0x7f4>
 80093c4:	2001      	movs	r0, #1
 80093c6:	e779      	b.n	80092bc <_dtoa_r+0x804>
 80093c8:	2300      	movs	r3, #0
 80093ca:	e7f6      	b.n	80093ba <_dtoa_r+0x902>
 80093cc:	9b02      	ldr	r3, [sp, #8]
 80093ce:	e7f4      	b.n	80093ba <_dtoa_r+0x902>
 80093d0:	d085      	beq.n	80092de <_dtoa_r+0x826>
 80093d2:	4618      	mov	r0, r3
 80093d4:	301c      	adds	r0, #28
 80093d6:	e77d      	b.n	80092d4 <_dtoa_r+0x81c>
 80093d8:	40240000 	.word	0x40240000
 80093dc:	9b01      	ldr	r3, [sp, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc38      	bgt.n	8009454 <_dtoa_r+0x99c>
 80093e2:	9b05      	ldr	r3, [sp, #20]
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	dd35      	ble.n	8009454 <_dtoa_r+0x99c>
 80093e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80093ec:	f1b9 0f00 	cmp.w	r9, #0
 80093f0:	d10d      	bne.n	800940e <_dtoa_r+0x956>
 80093f2:	4631      	mov	r1, r6
 80093f4:	464b      	mov	r3, r9
 80093f6:	2205      	movs	r2, #5
 80093f8:	4620      	mov	r0, r4
 80093fa:	f000 ff83 	bl	800a304 <__multadd>
 80093fe:	4601      	mov	r1, r0
 8009400:	4606      	mov	r6, r0
 8009402:	4658      	mov	r0, fp
 8009404:	f001 f9e4 	bl	800a7d0 <__mcmp>
 8009408:	2800      	cmp	r0, #0
 800940a:	f73f adbd 	bgt.w	8008f88 <_dtoa_r+0x4d0>
 800940e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009410:	9d00      	ldr	r5, [sp, #0]
 8009412:	ea6f 0a03 	mvn.w	sl, r3
 8009416:	f04f 0800 	mov.w	r8, #0
 800941a:	4631      	mov	r1, r6
 800941c:	4620      	mov	r0, r4
 800941e:	f000 ff4f 	bl	800a2c0 <_Bfree>
 8009422:	2f00      	cmp	r7, #0
 8009424:	f43f aeb4 	beq.w	8009190 <_dtoa_r+0x6d8>
 8009428:	f1b8 0f00 	cmp.w	r8, #0
 800942c:	d005      	beq.n	800943a <_dtoa_r+0x982>
 800942e:	45b8      	cmp	r8, r7
 8009430:	d003      	beq.n	800943a <_dtoa_r+0x982>
 8009432:	4641      	mov	r1, r8
 8009434:	4620      	mov	r0, r4
 8009436:	f000 ff43 	bl	800a2c0 <_Bfree>
 800943a:	4639      	mov	r1, r7
 800943c:	4620      	mov	r0, r4
 800943e:	f000 ff3f 	bl	800a2c0 <_Bfree>
 8009442:	e6a5      	b.n	8009190 <_dtoa_r+0x6d8>
 8009444:	2600      	movs	r6, #0
 8009446:	4637      	mov	r7, r6
 8009448:	e7e1      	b.n	800940e <_dtoa_r+0x956>
 800944a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800944c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009450:	4637      	mov	r7, r6
 8009452:	e599      	b.n	8008f88 <_dtoa_r+0x4d0>
 8009454:	9b08      	ldr	r3, [sp, #32]
 8009456:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	f000 80fd 	beq.w	800965a <_dtoa_r+0xba2>
 8009460:	2d00      	cmp	r5, #0
 8009462:	dd05      	ble.n	8009470 <_dtoa_r+0x9b8>
 8009464:	4639      	mov	r1, r7
 8009466:	462a      	mov	r2, r5
 8009468:	4620      	mov	r0, r4
 800946a:	f001 f945 	bl	800a6f8 <__lshift>
 800946e:	4607      	mov	r7, r0
 8009470:	9b06      	ldr	r3, [sp, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d05c      	beq.n	8009530 <_dtoa_r+0xa78>
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fee1 	bl	800a240 <_Balloc>
 800947e:	4605      	mov	r5, r0
 8009480:	b928      	cbnz	r0, 800948e <_dtoa_r+0x9d6>
 8009482:	4b80      	ldr	r3, [pc, #512]	; (8009684 <_dtoa_r+0xbcc>)
 8009484:	4602      	mov	r2, r0
 8009486:	f240 21ea 	movw	r1, #746	; 0x2ea
 800948a:	f7ff bb2e 	b.w	8008aea <_dtoa_r+0x32>
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	3202      	adds	r2, #2
 8009492:	0092      	lsls	r2, r2, #2
 8009494:	f107 010c 	add.w	r1, r7, #12
 8009498:	300c      	adds	r0, #12
 800949a:	f000 fe9d 	bl	800a1d8 <memcpy>
 800949e:	2201      	movs	r2, #1
 80094a0:	4629      	mov	r1, r5
 80094a2:	4620      	mov	r0, r4
 80094a4:	f001 f928 	bl	800a6f8 <__lshift>
 80094a8:	9b00      	ldr	r3, [sp, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	9301      	str	r3, [sp, #4]
 80094ae:	9b00      	ldr	r3, [sp, #0]
 80094b0:	444b      	add	r3, r9
 80094b2:	9307      	str	r3, [sp, #28]
 80094b4:	9b02      	ldr	r3, [sp, #8]
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	46b8      	mov	r8, r7
 80094bc:	9306      	str	r3, [sp, #24]
 80094be:	4607      	mov	r7, r0
 80094c0:	9b01      	ldr	r3, [sp, #4]
 80094c2:	4631      	mov	r1, r6
 80094c4:	3b01      	subs	r3, #1
 80094c6:	4658      	mov	r0, fp
 80094c8:	9302      	str	r3, [sp, #8]
 80094ca:	f7ff fa6a 	bl	80089a2 <quorem>
 80094ce:	4603      	mov	r3, r0
 80094d0:	3330      	adds	r3, #48	; 0x30
 80094d2:	9004      	str	r0, [sp, #16]
 80094d4:	4641      	mov	r1, r8
 80094d6:	4658      	mov	r0, fp
 80094d8:	9308      	str	r3, [sp, #32]
 80094da:	f001 f979 	bl	800a7d0 <__mcmp>
 80094de:	463a      	mov	r2, r7
 80094e0:	4681      	mov	r9, r0
 80094e2:	4631      	mov	r1, r6
 80094e4:	4620      	mov	r0, r4
 80094e6:	f001 f98f 	bl	800a808 <__mdiff>
 80094ea:	68c2      	ldr	r2, [r0, #12]
 80094ec:	9b08      	ldr	r3, [sp, #32]
 80094ee:	4605      	mov	r5, r0
 80094f0:	bb02      	cbnz	r2, 8009534 <_dtoa_r+0xa7c>
 80094f2:	4601      	mov	r1, r0
 80094f4:	4658      	mov	r0, fp
 80094f6:	f001 f96b 	bl	800a7d0 <__mcmp>
 80094fa:	9b08      	ldr	r3, [sp, #32]
 80094fc:	4602      	mov	r2, r0
 80094fe:	4629      	mov	r1, r5
 8009500:	4620      	mov	r0, r4
 8009502:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009506:	f000 fedb 	bl	800a2c0 <_Bfree>
 800950a:	9b05      	ldr	r3, [sp, #20]
 800950c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800950e:	9d01      	ldr	r5, [sp, #4]
 8009510:	ea43 0102 	orr.w	r1, r3, r2
 8009514:	9b06      	ldr	r3, [sp, #24]
 8009516:	430b      	orrs	r3, r1
 8009518:	9b08      	ldr	r3, [sp, #32]
 800951a:	d10d      	bne.n	8009538 <_dtoa_r+0xa80>
 800951c:	2b39      	cmp	r3, #57	; 0x39
 800951e:	d029      	beq.n	8009574 <_dtoa_r+0xabc>
 8009520:	f1b9 0f00 	cmp.w	r9, #0
 8009524:	dd01      	ble.n	800952a <_dtoa_r+0xa72>
 8009526:	9b04      	ldr	r3, [sp, #16]
 8009528:	3331      	adds	r3, #49	; 0x31
 800952a:	9a02      	ldr	r2, [sp, #8]
 800952c:	7013      	strb	r3, [r2, #0]
 800952e:	e774      	b.n	800941a <_dtoa_r+0x962>
 8009530:	4638      	mov	r0, r7
 8009532:	e7b9      	b.n	80094a8 <_dtoa_r+0x9f0>
 8009534:	2201      	movs	r2, #1
 8009536:	e7e2      	b.n	80094fe <_dtoa_r+0xa46>
 8009538:	f1b9 0f00 	cmp.w	r9, #0
 800953c:	db06      	blt.n	800954c <_dtoa_r+0xa94>
 800953e:	9905      	ldr	r1, [sp, #20]
 8009540:	ea41 0909 	orr.w	r9, r1, r9
 8009544:	9906      	ldr	r1, [sp, #24]
 8009546:	ea59 0101 	orrs.w	r1, r9, r1
 800954a:	d120      	bne.n	800958e <_dtoa_r+0xad6>
 800954c:	2a00      	cmp	r2, #0
 800954e:	ddec      	ble.n	800952a <_dtoa_r+0xa72>
 8009550:	4659      	mov	r1, fp
 8009552:	2201      	movs	r2, #1
 8009554:	4620      	mov	r0, r4
 8009556:	9301      	str	r3, [sp, #4]
 8009558:	f001 f8ce 	bl	800a6f8 <__lshift>
 800955c:	4631      	mov	r1, r6
 800955e:	4683      	mov	fp, r0
 8009560:	f001 f936 	bl	800a7d0 <__mcmp>
 8009564:	2800      	cmp	r0, #0
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	dc02      	bgt.n	8009570 <_dtoa_r+0xab8>
 800956a:	d1de      	bne.n	800952a <_dtoa_r+0xa72>
 800956c:	07da      	lsls	r2, r3, #31
 800956e:	d5dc      	bpl.n	800952a <_dtoa_r+0xa72>
 8009570:	2b39      	cmp	r3, #57	; 0x39
 8009572:	d1d8      	bne.n	8009526 <_dtoa_r+0xa6e>
 8009574:	9a02      	ldr	r2, [sp, #8]
 8009576:	2339      	movs	r3, #57	; 0x39
 8009578:	7013      	strb	r3, [r2, #0]
 800957a:	462b      	mov	r3, r5
 800957c:	461d      	mov	r5, r3
 800957e:	3b01      	subs	r3, #1
 8009580:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009584:	2a39      	cmp	r2, #57	; 0x39
 8009586:	d050      	beq.n	800962a <_dtoa_r+0xb72>
 8009588:	3201      	adds	r2, #1
 800958a:	701a      	strb	r2, [r3, #0]
 800958c:	e745      	b.n	800941a <_dtoa_r+0x962>
 800958e:	2a00      	cmp	r2, #0
 8009590:	dd03      	ble.n	800959a <_dtoa_r+0xae2>
 8009592:	2b39      	cmp	r3, #57	; 0x39
 8009594:	d0ee      	beq.n	8009574 <_dtoa_r+0xabc>
 8009596:	3301      	adds	r3, #1
 8009598:	e7c7      	b.n	800952a <_dtoa_r+0xa72>
 800959a:	9a01      	ldr	r2, [sp, #4]
 800959c:	9907      	ldr	r1, [sp, #28]
 800959e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80095a2:	428a      	cmp	r2, r1
 80095a4:	d02a      	beq.n	80095fc <_dtoa_r+0xb44>
 80095a6:	4659      	mov	r1, fp
 80095a8:	2300      	movs	r3, #0
 80095aa:	220a      	movs	r2, #10
 80095ac:	4620      	mov	r0, r4
 80095ae:	f000 fea9 	bl	800a304 <__multadd>
 80095b2:	45b8      	cmp	r8, r7
 80095b4:	4683      	mov	fp, r0
 80095b6:	f04f 0300 	mov.w	r3, #0
 80095ba:	f04f 020a 	mov.w	r2, #10
 80095be:	4641      	mov	r1, r8
 80095c0:	4620      	mov	r0, r4
 80095c2:	d107      	bne.n	80095d4 <_dtoa_r+0xb1c>
 80095c4:	f000 fe9e 	bl	800a304 <__multadd>
 80095c8:	4680      	mov	r8, r0
 80095ca:	4607      	mov	r7, r0
 80095cc:	9b01      	ldr	r3, [sp, #4]
 80095ce:	3301      	adds	r3, #1
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	e775      	b.n	80094c0 <_dtoa_r+0xa08>
 80095d4:	f000 fe96 	bl	800a304 <__multadd>
 80095d8:	4639      	mov	r1, r7
 80095da:	4680      	mov	r8, r0
 80095dc:	2300      	movs	r3, #0
 80095de:	220a      	movs	r2, #10
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fe8f 	bl	800a304 <__multadd>
 80095e6:	4607      	mov	r7, r0
 80095e8:	e7f0      	b.n	80095cc <_dtoa_r+0xb14>
 80095ea:	f1b9 0f00 	cmp.w	r9, #0
 80095ee:	9a00      	ldr	r2, [sp, #0]
 80095f0:	bfcc      	ite	gt
 80095f2:	464d      	movgt	r5, r9
 80095f4:	2501      	movle	r5, #1
 80095f6:	4415      	add	r5, r2
 80095f8:	f04f 0800 	mov.w	r8, #0
 80095fc:	4659      	mov	r1, fp
 80095fe:	2201      	movs	r2, #1
 8009600:	4620      	mov	r0, r4
 8009602:	9301      	str	r3, [sp, #4]
 8009604:	f001 f878 	bl	800a6f8 <__lshift>
 8009608:	4631      	mov	r1, r6
 800960a:	4683      	mov	fp, r0
 800960c:	f001 f8e0 	bl	800a7d0 <__mcmp>
 8009610:	2800      	cmp	r0, #0
 8009612:	dcb2      	bgt.n	800957a <_dtoa_r+0xac2>
 8009614:	d102      	bne.n	800961c <_dtoa_r+0xb64>
 8009616:	9b01      	ldr	r3, [sp, #4]
 8009618:	07db      	lsls	r3, r3, #31
 800961a:	d4ae      	bmi.n	800957a <_dtoa_r+0xac2>
 800961c:	462b      	mov	r3, r5
 800961e:	461d      	mov	r5, r3
 8009620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009624:	2a30      	cmp	r2, #48	; 0x30
 8009626:	d0fa      	beq.n	800961e <_dtoa_r+0xb66>
 8009628:	e6f7      	b.n	800941a <_dtoa_r+0x962>
 800962a:	9a00      	ldr	r2, [sp, #0]
 800962c:	429a      	cmp	r2, r3
 800962e:	d1a5      	bne.n	800957c <_dtoa_r+0xac4>
 8009630:	f10a 0a01 	add.w	sl, sl, #1
 8009634:	2331      	movs	r3, #49	; 0x31
 8009636:	e779      	b.n	800952c <_dtoa_r+0xa74>
 8009638:	4b13      	ldr	r3, [pc, #76]	; (8009688 <_dtoa_r+0xbd0>)
 800963a:	f7ff baaf 	b.w	8008b9c <_dtoa_r+0xe4>
 800963e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009640:	2b00      	cmp	r3, #0
 8009642:	f47f aa86 	bne.w	8008b52 <_dtoa_r+0x9a>
 8009646:	4b11      	ldr	r3, [pc, #68]	; (800968c <_dtoa_r+0xbd4>)
 8009648:	f7ff baa8 	b.w	8008b9c <_dtoa_r+0xe4>
 800964c:	f1b9 0f00 	cmp.w	r9, #0
 8009650:	dc03      	bgt.n	800965a <_dtoa_r+0xba2>
 8009652:	9b05      	ldr	r3, [sp, #20]
 8009654:	2b02      	cmp	r3, #2
 8009656:	f73f aec9 	bgt.w	80093ec <_dtoa_r+0x934>
 800965a:	9d00      	ldr	r5, [sp, #0]
 800965c:	4631      	mov	r1, r6
 800965e:	4658      	mov	r0, fp
 8009660:	f7ff f99f 	bl	80089a2 <quorem>
 8009664:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009668:	f805 3b01 	strb.w	r3, [r5], #1
 800966c:	9a00      	ldr	r2, [sp, #0]
 800966e:	1aaa      	subs	r2, r5, r2
 8009670:	4591      	cmp	r9, r2
 8009672:	ddba      	ble.n	80095ea <_dtoa_r+0xb32>
 8009674:	4659      	mov	r1, fp
 8009676:	2300      	movs	r3, #0
 8009678:	220a      	movs	r2, #10
 800967a:	4620      	mov	r0, r4
 800967c:	f000 fe42 	bl	800a304 <__multadd>
 8009680:	4683      	mov	fp, r0
 8009682:	e7eb      	b.n	800965c <_dtoa_r+0xba4>
 8009684:	08035cf4 	.word	0x08035cf4
 8009688:	08035af5 	.word	0x08035af5
 800968c:	08035c71 	.word	0x08035c71

08009690 <__sflush_r>:
 8009690:	898a      	ldrh	r2, [r1, #12]
 8009692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009696:	4605      	mov	r5, r0
 8009698:	0710      	lsls	r0, r2, #28
 800969a:	460c      	mov	r4, r1
 800969c:	d458      	bmi.n	8009750 <__sflush_r+0xc0>
 800969e:	684b      	ldr	r3, [r1, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	dc05      	bgt.n	80096b0 <__sflush_r+0x20>
 80096a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	dc02      	bgt.n	80096b0 <__sflush_r+0x20>
 80096aa:	2000      	movs	r0, #0
 80096ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b2:	2e00      	cmp	r6, #0
 80096b4:	d0f9      	beq.n	80096aa <__sflush_r+0x1a>
 80096b6:	2300      	movs	r3, #0
 80096b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096bc:	682f      	ldr	r7, [r5, #0]
 80096be:	602b      	str	r3, [r5, #0]
 80096c0:	d032      	beq.n	8009728 <__sflush_r+0x98>
 80096c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	075a      	lsls	r2, r3, #29
 80096c8:	d505      	bpl.n	80096d6 <__sflush_r+0x46>
 80096ca:	6863      	ldr	r3, [r4, #4]
 80096cc:	1ac0      	subs	r0, r0, r3
 80096ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096d0:	b10b      	cbz	r3, 80096d6 <__sflush_r+0x46>
 80096d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096d4:	1ac0      	subs	r0, r0, r3
 80096d6:	2300      	movs	r3, #0
 80096d8:	4602      	mov	r2, r0
 80096da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096dc:	6a21      	ldr	r1, [r4, #32]
 80096de:	4628      	mov	r0, r5
 80096e0:	47b0      	blx	r6
 80096e2:	1c43      	adds	r3, r0, #1
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	d106      	bne.n	80096f6 <__sflush_r+0x66>
 80096e8:	6829      	ldr	r1, [r5, #0]
 80096ea:	291d      	cmp	r1, #29
 80096ec:	d82c      	bhi.n	8009748 <__sflush_r+0xb8>
 80096ee:	4a2a      	ldr	r2, [pc, #168]	; (8009798 <__sflush_r+0x108>)
 80096f0:	40ca      	lsrs	r2, r1
 80096f2:	07d6      	lsls	r6, r2, #31
 80096f4:	d528      	bpl.n	8009748 <__sflush_r+0xb8>
 80096f6:	2200      	movs	r2, #0
 80096f8:	6062      	str	r2, [r4, #4]
 80096fa:	04d9      	lsls	r1, r3, #19
 80096fc:	6922      	ldr	r2, [r4, #16]
 80096fe:	6022      	str	r2, [r4, #0]
 8009700:	d504      	bpl.n	800970c <__sflush_r+0x7c>
 8009702:	1c42      	adds	r2, r0, #1
 8009704:	d101      	bne.n	800970a <__sflush_r+0x7a>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	b903      	cbnz	r3, 800970c <__sflush_r+0x7c>
 800970a:	6560      	str	r0, [r4, #84]	; 0x54
 800970c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800970e:	602f      	str	r7, [r5, #0]
 8009710:	2900      	cmp	r1, #0
 8009712:	d0ca      	beq.n	80096aa <__sflush_r+0x1a>
 8009714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009718:	4299      	cmp	r1, r3
 800971a:	d002      	beq.n	8009722 <__sflush_r+0x92>
 800971c:	4628      	mov	r0, r5
 800971e:	f7fd f883 	bl	8006828 <_free_r>
 8009722:	2000      	movs	r0, #0
 8009724:	6360      	str	r0, [r4, #52]	; 0x34
 8009726:	e7c1      	b.n	80096ac <__sflush_r+0x1c>
 8009728:	6a21      	ldr	r1, [r4, #32]
 800972a:	2301      	movs	r3, #1
 800972c:	4628      	mov	r0, r5
 800972e:	47b0      	blx	r6
 8009730:	1c41      	adds	r1, r0, #1
 8009732:	d1c7      	bne.n	80096c4 <__sflush_r+0x34>
 8009734:	682b      	ldr	r3, [r5, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d0c4      	beq.n	80096c4 <__sflush_r+0x34>
 800973a:	2b1d      	cmp	r3, #29
 800973c:	d001      	beq.n	8009742 <__sflush_r+0xb2>
 800973e:	2b16      	cmp	r3, #22
 8009740:	d101      	bne.n	8009746 <__sflush_r+0xb6>
 8009742:	602f      	str	r7, [r5, #0]
 8009744:	e7b1      	b.n	80096aa <__sflush_r+0x1a>
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	e7ad      	b.n	80096ac <__sflush_r+0x1c>
 8009750:	690f      	ldr	r7, [r1, #16]
 8009752:	2f00      	cmp	r7, #0
 8009754:	d0a9      	beq.n	80096aa <__sflush_r+0x1a>
 8009756:	0793      	lsls	r3, r2, #30
 8009758:	680e      	ldr	r6, [r1, #0]
 800975a:	bf08      	it	eq
 800975c:	694b      	ldreq	r3, [r1, #20]
 800975e:	600f      	str	r7, [r1, #0]
 8009760:	bf18      	it	ne
 8009762:	2300      	movne	r3, #0
 8009764:	eba6 0807 	sub.w	r8, r6, r7
 8009768:	608b      	str	r3, [r1, #8]
 800976a:	f1b8 0f00 	cmp.w	r8, #0
 800976e:	dd9c      	ble.n	80096aa <__sflush_r+0x1a>
 8009770:	6a21      	ldr	r1, [r4, #32]
 8009772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009774:	4643      	mov	r3, r8
 8009776:	463a      	mov	r2, r7
 8009778:	4628      	mov	r0, r5
 800977a:	47b0      	blx	r6
 800977c:	2800      	cmp	r0, #0
 800977e:	dc06      	bgt.n	800978e <__sflush_r+0xfe>
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009786:	81a3      	strh	r3, [r4, #12]
 8009788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800978c:	e78e      	b.n	80096ac <__sflush_r+0x1c>
 800978e:	4407      	add	r7, r0
 8009790:	eba8 0800 	sub.w	r8, r8, r0
 8009794:	e7e9      	b.n	800976a <__sflush_r+0xda>
 8009796:	bf00      	nop
 8009798:	20400001 	.word	0x20400001

0800979c <_fflush_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	690b      	ldr	r3, [r1, #16]
 80097a0:	4605      	mov	r5, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	b913      	cbnz	r3, 80097ac <_fflush_r+0x10>
 80097a6:	2500      	movs	r5, #0
 80097a8:	4628      	mov	r0, r5
 80097aa:	bd38      	pop	{r3, r4, r5, pc}
 80097ac:	b118      	cbz	r0, 80097b6 <_fflush_r+0x1a>
 80097ae:	6983      	ldr	r3, [r0, #24]
 80097b0:	b90b      	cbnz	r3, 80097b6 <_fflush_r+0x1a>
 80097b2:	f000 f887 	bl	80098c4 <__sinit>
 80097b6:	4b14      	ldr	r3, [pc, #80]	; (8009808 <_fflush_r+0x6c>)
 80097b8:	429c      	cmp	r4, r3
 80097ba:	d11b      	bne.n	80097f4 <_fflush_r+0x58>
 80097bc:	686c      	ldr	r4, [r5, #4]
 80097be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d0ef      	beq.n	80097a6 <_fflush_r+0xa>
 80097c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097c8:	07d0      	lsls	r0, r2, #31
 80097ca:	d404      	bmi.n	80097d6 <_fflush_r+0x3a>
 80097cc:	0599      	lsls	r1, r3, #22
 80097ce:	d402      	bmi.n	80097d6 <_fflush_r+0x3a>
 80097d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097d2:	f000 fc88 	bl	800a0e6 <__retarget_lock_acquire_recursive>
 80097d6:	4628      	mov	r0, r5
 80097d8:	4621      	mov	r1, r4
 80097da:	f7ff ff59 	bl	8009690 <__sflush_r>
 80097de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097e0:	07da      	lsls	r2, r3, #31
 80097e2:	4605      	mov	r5, r0
 80097e4:	d4e0      	bmi.n	80097a8 <_fflush_r+0xc>
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	059b      	lsls	r3, r3, #22
 80097ea:	d4dd      	bmi.n	80097a8 <_fflush_r+0xc>
 80097ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ee:	f000 fc7b 	bl	800a0e8 <__retarget_lock_release_recursive>
 80097f2:	e7d9      	b.n	80097a8 <_fflush_r+0xc>
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <_fflush_r+0x70>)
 80097f6:	429c      	cmp	r4, r3
 80097f8:	d101      	bne.n	80097fe <_fflush_r+0x62>
 80097fa:	68ac      	ldr	r4, [r5, #8]
 80097fc:	e7df      	b.n	80097be <_fflush_r+0x22>
 80097fe:	4b04      	ldr	r3, [pc, #16]	; (8009810 <_fflush_r+0x74>)
 8009800:	429c      	cmp	r4, r3
 8009802:	bf08      	it	eq
 8009804:	68ec      	ldreq	r4, [r5, #12]
 8009806:	e7da      	b.n	80097be <_fflush_r+0x22>
 8009808:	08035d28 	.word	0x08035d28
 800980c:	08035d48 	.word	0x08035d48
 8009810:	08035d08 	.word	0x08035d08

08009814 <std>:
 8009814:	2300      	movs	r3, #0
 8009816:	b510      	push	{r4, lr}
 8009818:	4604      	mov	r4, r0
 800981a:	e9c0 3300 	strd	r3, r3, [r0]
 800981e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009822:	6083      	str	r3, [r0, #8]
 8009824:	8181      	strh	r1, [r0, #12]
 8009826:	6643      	str	r3, [r0, #100]	; 0x64
 8009828:	81c2      	strh	r2, [r0, #14]
 800982a:	6183      	str	r3, [r0, #24]
 800982c:	4619      	mov	r1, r3
 800982e:	2208      	movs	r2, #8
 8009830:	305c      	adds	r0, #92	; 0x5c
 8009832:	f7fc fff1 	bl	8006818 <memset>
 8009836:	4b05      	ldr	r3, [pc, #20]	; (800984c <std+0x38>)
 8009838:	6263      	str	r3, [r4, #36]	; 0x24
 800983a:	4b05      	ldr	r3, [pc, #20]	; (8009850 <std+0x3c>)
 800983c:	62a3      	str	r3, [r4, #40]	; 0x28
 800983e:	4b05      	ldr	r3, [pc, #20]	; (8009854 <std+0x40>)
 8009840:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009842:	4b05      	ldr	r3, [pc, #20]	; (8009858 <std+0x44>)
 8009844:	6224      	str	r4, [r4, #32]
 8009846:	6323      	str	r3, [r4, #48]	; 0x30
 8009848:	bd10      	pop	{r4, pc}
 800984a:	bf00      	nop
 800984c:	0800af71 	.word	0x0800af71
 8009850:	0800af93 	.word	0x0800af93
 8009854:	0800afcb 	.word	0x0800afcb
 8009858:	0800afef 	.word	0x0800afef

0800985c <_cleanup_r>:
 800985c:	4901      	ldr	r1, [pc, #4]	; (8009864 <_cleanup_r+0x8>)
 800985e:	f000 b8af 	b.w	80099c0 <_fwalk_reent>
 8009862:	bf00      	nop
 8009864:	0800979d 	.word	0x0800979d

08009868 <__sfmoreglue>:
 8009868:	b570      	push	{r4, r5, r6, lr}
 800986a:	1e4a      	subs	r2, r1, #1
 800986c:	2568      	movs	r5, #104	; 0x68
 800986e:	4355      	muls	r5, r2
 8009870:	460e      	mov	r6, r1
 8009872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009876:	f7fd f827 	bl	80068c8 <_malloc_r>
 800987a:	4604      	mov	r4, r0
 800987c:	b140      	cbz	r0, 8009890 <__sfmoreglue+0x28>
 800987e:	2100      	movs	r1, #0
 8009880:	e9c0 1600 	strd	r1, r6, [r0]
 8009884:	300c      	adds	r0, #12
 8009886:	60a0      	str	r0, [r4, #8]
 8009888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800988c:	f7fc ffc4 	bl	8006818 <memset>
 8009890:	4620      	mov	r0, r4
 8009892:	bd70      	pop	{r4, r5, r6, pc}

08009894 <__sfp_lock_acquire>:
 8009894:	4801      	ldr	r0, [pc, #4]	; (800989c <__sfp_lock_acquire+0x8>)
 8009896:	f000 bc26 	b.w	800a0e6 <__retarget_lock_acquire_recursive>
 800989a:	bf00      	nop
 800989c:	200002ec 	.word	0x200002ec

080098a0 <__sfp_lock_release>:
 80098a0:	4801      	ldr	r0, [pc, #4]	; (80098a8 <__sfp_lock_release+0x8>)
 80098a2:	f000 bc21 	b.w	800a0e8 <__retarget_lock_release_recursive>
 80098a6:	bf00      	nop
 80098a8:	200002ec 	.word	0x200002ec

080098ac <__sinit_lock_acquire>:
 80098ac:	4801      	ldr	r0, [pc, #4]	; (80098b4 <__sinit_lock_acquire+0x8>)
 80098ae:	f000 bc1a 	b.w	800a0e6 <__retarget_lock_acquire_recursive>
 80098b2:	bf00      	nop
 80098b4:	200002e7 	.word	0x200002e7

080098b8 <__sinit_lock_release>:
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <__sinit_lock_release+0x8>)
 80098ba:	f000 bc15 	b.w	800a0e8 <__retarget_lock_release_recursive>
 80098be:	bf00      	nop
 80098c0:	200002e7 	.word	0x200002e7

080098c4 <__sinit>:
 80098c4:	b510      	push	{r4, lr}
 80098c6:	4604      	mov	r4, r0
 80098c8:	f7ff fff0 	bl	80098ac <__sinit_lock_acquire>
 80098cc:	69a3      	ldr	r3, [r4, #24]
 80098ce:	b11b      	cbz	r3, 80098d8 <__sinit+0x14>
 80098d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d4:	f7ff bff0 	b.w	80098b8 <__sinit_lock_release>
 80098d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098dc:	6523      	str	r3, [r4, #80]	; 0x50
 80098de:	4b13      	ldr	r3, [pc, #76]	; (800992c <__sinit+0x68>)
 80098e0:	4a13      	ldr	r2, [pc, #76]	; (8009930 <__sinit+0x6c>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80098e6:	42a3      	cmp	r3, r4
 80098e8:	bf04      	itt	eq
 80098ea:	2301      	moveq	r3, #1
 80098ec:	61a3      	streq	r3, [r4, #24]
 80098ee:	4620      	mov	r0, r4
 80098f0:	f000 f820 	bl	8009934 <__sfp>
 80098f4:	6060      	str	r0, [r4, #4]
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 f81c 	bl	8009934 <__sfp>
 80098fc:	60a0      	str	r0, [r4, #8]
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 f818 	bl	8009934 <__sfp>
 8009904:	2200      	movs	r2, #0
 8009906:	60e0      	str	r0, [r4, #12]
 8009908:	2104      	movs	r1, #4
 800990a:	6860      	ldr	r0, [r4, #4]
 800990c:	f7ff ff82 	bl	8009814 <std>
 8009910:	68a0      	ldr	r0, [r4, #8]
 8009912:	2201      	movs	r2, #1
 8009914:	2109      	movs	r1, #9
 8009916:	f7ff ff7d 	bl	8009814 <std>
 800991a:	68e0      	ldr	r0, [r4, #12]
 800991c:	2202      	movs	r2, #2
 800991e:	2112      	movs	r1, #18
 8009920:	f7ff ff78 	bl	8009814 <std>
 8009924:	2301      	movs	r3, #1
 8009926:	61a3      	str	r3, [r4, #24]
 8009928:	e7d2      	b.n	80098d0 <__sinit+0xc>
 800992a:	bf00      	nop
 800992c:	08035ad0 	.word	0x08035ad0
 8009930:	0800985d 	.word	0x0800985d

08009934 <__sfp>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	4607      	mov	r7, r0
 8009938:	f7ff ffac 	bl	8009894 <__sfp_lock_acquire>
 800993c:	4b1e      	ldr	r3, [pc, #120]	; (80099b8 <__sfp+0x84>)
 800993e:	681e      	ldr	r6, [r3, #0]
 8009940:	69b3      	ldr	r3, [r6, #24]
 8009942:	b913      	cbnz	r3, 800994a <__sfp+0x16>
 8009944:	4630      	mov	r0, r6
 8009946:	f7ff ffbd 	bl	80098c4 <__sinit>
 800994a:	3648      	adds	r6, #72	; 0x48
 800994c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009950:	3b01      	subs	r3, #1
 8009952:	d503      	bpl.n	800995c <__sfp+0x28>
 8009954:	6833      	ldr	r3, [r6, #0]
 8009956:	b30b      	cbz	r3, 800999c <__sfp+0x68>
 8009958:	6836      	ldr	r6, [r6, #0]
 800995a:	e7f7      	b.n	800994c <__sfp+0x18>
 800995c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009960:	b9d5      	cbnz	r5, 8009998 <__sfp+0x64>
 8009962:	4b16      	ldr	r3, [pc, #88]	; (80099bc <__sfp+0x88>)
 8009964:	60e3      	str	r3, [r4, #12]
 8009966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800996a:	6665      	str	r5, [r4, #100]	; 0x64
 800996c:	f000 fbba 	bl	800a0e4 <__retarget_lock_init_recursive>
 8009970:	f7ff ff96 	bl	80098a0 <__sfp_lock_release>
 8009974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800997c:	6025      	str	r5, [r4, #0]
 800997e:	61a5      	str	r5, [r4, #24]
 8009980:	2208      	movs	r2, #8
 8009982:	4629      	mov	r1, r5
 8009984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009988:	f7fc ff46 	bl	8006818 <memset>
 800998c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009994:	4620      	mov	r0, r4
 8009996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009998:	3468      	adds	r4, #104	; 0x68
 800999a:	e7d9      	b.n	8009950 <__sfp+0x1c>
 800999c:	2104      	movs	r1, #4
 800999e:	4638      	mov	r0, r7
 80099a0:	f7ff ff62 	bl	8009868 <__sfmoreglue>
 80099a4:	4604      	mov	r4, r0
 80099a6:	6030      	str	r0, [r6, #0]
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d1d5      	bne.n	8009958 <__sfp+0x24>
 80099ac:	f7ff ff78 	bl	80098a0 <__sfp_lock_release>
 80099b0:	230c      	movs	r3, #12
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	e7ee      	b.n	8009994 <__sfp+0x60>
 80099b6:	bf00      	nop
 80099b8:	08035ad0 	.word	0x08035ad0
 80099bc:	ffff0001 	.word	0xffff0001

080099c0 <_fwalk_reent>:
 80099c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099c4:	4606      	mov	r6, r0
 80099c6:	4688      	mov	r8, r1
 80099c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099cc:	2700      	movs	r7, #0
 80099ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099d2:	f1b9 0901 	subs.w	r9, r9, #1
 80099d6:	d505      	bpl.n	80099e4 <_fwalk_reent+0x24>
 80099d8:	6824      	ldr	r4, [r4, #0]
 80099da:	2c00      	cmp	r4, #0
 80099dc:	d1f7      	bne.n	80099ce <_fwalk_reent+0xe>
 80099de:	4638      	mov	r0, r7
 80099e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099e4:	89ab      	ldrh	r3, [r5, #12]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d907      	bls.n	80099fa <_fwalk_reent+0x3a>
 80099ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099ee:	3301      	adds	r3, #1
 80099f0:	d003      	beq.n	80099fa <_fwalk_reent+0x3a>
 80099f2:	4629      	mov	r1, r5
 80099f4:	4630      	mov	r0, r6
 80099f6:	47c0      	blx	r8
 80099f8:	4307      	orrs	r7, r0
 80099fa:	3568      	adds	r5, #104	; 0x68
 80099fc:	e7e9      	b.n	80099d2 <_fwalk_reent+0x12>

080099fe <rshift>:
 80099fe:	6903      	ldr	r3, [r0, #16]
 8009a00:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a08:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a0c:	f100 0414 	add.w	r4, r0, #20
 8009a10:	dd45      	ble.n	8009a9e <rshift+0xa0>
 8009a12:	f011 011f 	ands.w	r1, r1, #31
 8009a16:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a1a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a1e:	d10c      	bne.n	8009a3a <rshift+0x3c>
 8009a20:	f100 0710 	add.w	r7, r0, #16
 8009a24:	4629      	mov	r1, r5
 8009a26:	42b1      	cmp	r1, r6
 8009a28:	d334      	bcc.n	8009a94 <rshift+0x96>
 8009a2a:	1a9b      	subs	r3, r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	1eea      	subs	r2, r5, #3
 8009a30:	4296      	cmp	r6, r2
 8009a32:	bf38      	it	cc
 8009a34:	2300      	movcc	r3, #0
 8009a36:	4423      	add	r3, r4
 8009a38:	e015      	b.n	8009a66 <rshift+0x68>
 8009a3a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a3e:	f1c1 0820 	rsb	r8, r1, #32
 8009a42:	40cf      	lsrs	r7, r1
 8009a44:	f105 0e04 	add.w	lr, r5, #4
 8009a48:	46a1      	mov	r9, r4
 8009a4a:	4576      	cmp	r6, lr
 8009a4c:	46f4      	mov	ip, lr
 8009a4e:	d815      	bhi.n	8009a7c <rshift+0x7e>
 8009a50:	1a9b      	subs	r3, r3, r2
 8009a52:	009a      	lsls	r2, r3, #2
 8009a54:	3a04      	subs	r2, #4
 8009a56:	3501      	adds	r5, #1
 8009a58:	42ae      	cmp	r6, r5
 8009a5a:	bf38      	it	cc
 8009a5c:	2200      	movcc	r2, #0
 8009a5e:	18a3      	adds	r3, r4, r2
 8009a60:	50a7      	str	r7, [r4, r2]
 8009a62:	b107      	cbz	r7, 8009a66 <rshift+0x68>
 8009a64:	3304      	adds	r3, #4
 8009a66:	1b1a      	subs	r2, r3, r4
 8009a68:	42a3      	cmp	r3, r4
 8009a6a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a6e:	bf08      	it	eq
 8009a70:	2300      	moveq	r3, #0
 8009a72:	6102      	str	r2, [r0, #16]
 8009a74:	bf08      	it	eq
 8009a76:	6143      	streq	r3, [r0, #20]
 8009a78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a7c:	f8dc c000 	ldr.w	ip, [ip]
 8009a80:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a84:	ea4c 0707 	orr.w	r7, ip, r7
 8009a88:	f849 7b04 	str.w	r7, [r9], #4
 8009a8c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a90:	40cf      	lsrs	r7, r1
 8009a92:	e7da      	b.n	8009a4a <rshift+0x4c>
 8009a94:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a98:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a9c:	e7c3      	b.n	8009a26 <rshift+0x28>
 8009a9e:	4623      	mov	r3, r4
 8009aa0:	e7e1      	b.n	8009a66 <rshift+0x68>

08009aa2 <__hexdig_fun>:
 8009aa2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009aa6:	2b09      	cmp	r3, #9
 8009aa8:	d802      	bhi.n	8009ab0 <__hexdig_fun+0xe>
 8009aaa:	3820      	subs	r0, #32
 8009aac:	b2c0      	uxtb	r0, r0
 8009aae:	4770      	bx	lr
 8009ab0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ab4:	2b05      	cmp	r3, #5
 8009ab6:	d801      	bhi.n	8009abc <__hexdig_fun+0x1a>
 8009ab8:	3847      	subs	r0, #71	; 0x47
 8009aba:	e7f7      	b.n	8009aac <__hexdig_fun+0xa>
 8009abc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009ac0:	2b05      	cmp	r3, #5
 8009ac2:	d801      	bhi.n	8009ac8 <__hexdig_fun+0x26>
 8009ac4:	3827      	subs	r0, #39	; 0x27
 8009ac6:	e7f1      	b.n	8009aac <__hexdig_fun+0xa>
 8009ac8:	2000      	movs	r0, #0
 8009aca:	4770      	bx	lr

08009acc <__gethex>:
 8009acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	ed2d 8b02 	vpush	{d8}
 8009ad4:	b089      	sub	sp, #36	; 0x24
 8009ad6:	ee08 0a10 	vmov	s16, r0
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	4bbc      	ldr	r3, [pc, #752]	; (8009dd0 <__gethex+0x304>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	468b      	mov	fp, r1
 8009ae6:	4690      	mov	r8, r2
 8009ae8:	f7f6 fb8a 	bl	8000200 <strlen>
 8009aec:	9b01      	ldr	r3, [sp, #4]
 8009aee:	f8db 2000 	ldr.w	r2, [fp]
 8009af2:	4403      	add	r3, r0
 8009af4:	4682      	mov	sl, r0
 8009af6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009afa:	9305      	str	r3, [sp, #20]
 8009afc:	1c93      	adds	r3, r2, #2
 8009afe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b06:	32fe      	adds	r2, #254	; 0xfe
 8009b08:	18d1      	adds	r1, r2, r3
 8009b0a:	461f      	mov	r7, r3
 8009b0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b10:	9100      	str	r1, [sp, #0]
 8009b12:	2830      	cmp	r0, #48	; 0x30
 8009b14:	d0f8      	beq.n	8009b08 <__gethex+0x3c>
 8009b16:	f7ff ffc4 	bl	8009aa2 <__hexdig_fun>
 8009b1a:	4604      	mov	r4, r0
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d13a      	bne.n	8009b96 <__gethex+0xca>
 8009b20:	9901      	ldr	r1, [sp, #4]
 8009b22:	4652      	mov	r2, sl
 8009b24:	4638      	mov	r0, r7
 8009b26:	f001 fa66 	bl	800aff6 <strncmp>
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d168      	bne.n	8009c02 <__gethex+0x136>
 8009b30:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009b34:	eb07 060a 	add.w	r6, r7, sl
 8009b38:	f7ff ffb3 	bl	8009aa2 <__hexdig_fun>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d062      	beq.n	8009c06 <__gethex+0x13a>
 8009b40:	4633      	mov	r3, r6
 8009b42:	7818      	ldrb	r0, [r3, #0]
 8009b44:	2830      	cmp	r0, #48	; 0x30
 8009b46:	461f      	mov	r7, r3
 8009b48:	f103 0301 	add.w	r3, r3, #1
 8009b4c:	d0f9      	beq.n	8009b42 <__gethex+0x76>
 8009b4e:	f7ff ffa8 	bl	8009aa2 <__hexdig_fun>
 8009b52:	2301      	movs	r3, #1
 8009b54:	fab0 f480 	clz	r4, r0
 8009b58:	0964      	lsrs	r4, r4, #5
 8009b5a:	4635      	mov	r5, r6
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	463a      	mov	r2, r7
 8009b60:	4616      	mov	r6, r2
 8009b62:	3201      	adds	r2, #1
 8009b64:	7830      	ldrb	r0, [r6, #0]
 8009b66:	f7ff ff9c 	bl	8009aa2 <__hexdig_fun>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	d1f8      	bne.n	8009b60 <__gethex+0x94>
 8009b6e:	9901      	ldr	r1, [sp, #4]
 8009b70:	4652      	mov	r2, sl
 8009b72:	4630      	mov	r0, r6
 8009b74:	f001 fa3f 	bl	800aff6 <strncmp>
 8009b78:	b980      	cbnz	r0, 8009b9c <__gethex+0xd0>
 8009b7a:	b94d      	cbnz	r5, 8009b90 <__gethex+0xc4>
 8009b7c:	eb06 050a 	add.w	r5, r6, sl
 8009b80:	462a      	mov	r2, r5
 8009b82:	4616      	mov	r6, r2
 8009b84:	3201      	adds	r2, #1
 8009b86:	7830      	ldrb	r0, [r6, #0]
 8009b88:	f7ff ff8b 	bl	8009aa2 <__hexdig_fun>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d1f8      	bne.n	8009b82 <__gethex+0xb6>
 8009b90:	1bad      	subs	r5, r5, r6
 8009b92:	00ad      	lsls	r5, r5, #2
 8009b94:	e004      	b.n	8009ba0 <__gethex+0xd4>
 8009b96:	2400      	movs	r4, #0
 8009b98:	4625      	mov	r5, r4
 8009b9a:	e7e0      	b.n	8009b5e <__gethex+0x92>
 8009b9c:	2d00      	cmp	r5, #0
 8009b9e:	d1f7      	bne.n	8009b90 <__gethex+0xc4>
 8009ba0:	7833      	ldrb	r3, [r6, #0]
 8009ba2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ba6:	2b50      	cmp	r3, #80	; 0x50
 8009ba8:	d13b      	bne.n	8009c22 <__gethex+0x156>
 8009baa:	7873      	ldrb	r3, [r6, #1]
 8009bac:	2b2b      	cmp	r3, #43	; 0x2b
 8009bae:	d02c      	beq.n	8009c0a <__gethex+0x13e>
 8009bb0:	2b2d      	cmp	r3, #45	; 0x2d
 8009bb2:	d02e      	beq.n	8009c12 <__gethex+0x146>
 8009bb4:	1c71      	adds	r1, r6, #1
 8009bb6:	f04f 0900 	mov.w	r9, #0
 8009bba:	7808      	ldrb	r0, [r1, #0]
 8009bbc:	f7ff ff71 	bl	8009aa2 <__hexdig_fun>
 8009bc0:	1e43      	subs	r3, r0, #1
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b18      	cmp	r3, #24
 8009bc6:	d82c      	bhi.n	8009c22 <__gethex+0x156>
 8009bc8:	f1a0 0210 	sub.w	r2, r0, #16
 8009bcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009bd0:	f7ff ff67 	bl	8009aa2 <__hexdig_fun>
 8009bd4:	1e43      	subs	r3, r0, #1
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b18      	cmp	r3, #24
 8009bda:	d91d      	bls.n	8009c18 <__gethex+0x14c>
 8009bdc:	f1b9 0f00 	cmp.w	r9, #0
 8009be0:	d000      	beq.n	8009be4 <__gethex+0x118>
 8009be2:	4252      	negs	r2, r2
 8009be4:	4415      	add	r5, r2
 8009be6:	f8cb 1000 	str.w	r1, [fp]
 8009bea:	b1e4      	cbz	r4, 8009c26 <__gethex+0x15a>
 8009bec:	9b00      	ldr	r3, [sp, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	bf14      	ite	ne
 8009bf2:	2700      	movne	r7, #0
 8009bf4:	2706      	moveq	r7, #6
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	b009      	add	sp, #36	; 0x24
 8009bfa:	ecbd 8b02 	vpop	{d8}
 8009bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c02:	463e      	mov	r6, r7
 8009c04:	4625      	mov	r5, r4
 8009c06:	2401      	movs	r4, #1
 8009c08:	e7ca      	b.n	8009ba0 <__gethex+0xd4>
 8009c0a:	f04f 0900 	mov.w	r9, #0
 8009c0e:	1cb1      	adds	r1, r6, #2
 8009c10:	e7d3      	b.n	8009bba <__gethex+0xee>
 8009c12:	f04f 0901 	mov.w	r9, #1
 8009c16:	e7fa      	b.n	8009c0e <__gethex+0x142>
 8009c18:	230a      	movs	r3, #10
 8009c1a:	fb03 0202 	mla	r2, r3, r2, r0
 8009c1e:	3a10      	subs	r2, #16
 8009c20:	e7d4      	b.n	8009bcc <__gethex+0x100>
 8009c22:	4631      	mov	r1, r6
 8009c24:	e7df      	b.n	8009be6 <__gethex+0x11a>
 8009c26:	1bf3      	subs	r3, r6, r7
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	2b07      	cmp	r3, #7
 8009c2e:	dc0b      	bgt.n	8009c48 <__gethex+0x17c>
 8009c30:	ee18 0a10 	vmov	r0, s16
 8009c34:	f000 fb04 	bl	800a240 <_Balloc>
 8009c38:	4604      	mov	r4, r0
 8009c3a:	b940      	cbnz	r0, 8009c4e <__gethex+0x182>
 8009c3c:	4b65      	ldr	r3, [pc, #404]	; (8009dd4 <__gethex+0x308>)
 8009c3e:	4602      	mov	r2, r0
 8009c40:	21de      	movs	r1, #222	; 0xde
 8009c42:	4865      	ldr	r0, [pc, #404]	; (8009dd8 <__gethex+0x30c>)
 8009c44:	f7fc fd72 	bl	800672c <__assert_func>
 8009c48:	3101      	adds	r1, #1
 8009c4a:	105b      	asrs	r3, r3, #1
 8009c4c:	e7ee      	b.n	8009c2c <__gethex+0x160>
 8009c4e:	f100 0914 	add.w	r9, r0, #20
 8009c52:	f04f 0b00 	mov.w	fp, #0
 8009c56:	f1ca 0301 	rsb	r3, sl, #1
 8009c5a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c5e:	f8cd b000 	str.w	fp, [sp]
 8009c62:	9306      	str	r3, [sp, #24]
 8009c64:	42b7      	cmp	r7, r6
 8009c66:	d340      	bcc.n	8009cea <__gethex+0x21e>
 8009c68:	9802      	ldr	r0, [sp, #8]
 8009c6a:	9b00      	ldr	r3, [sp, #0]
 8009c6c:	f840 3b04 	str.w	r3, [r0], #4
 8009c70:	eba0 0009 	sub.w	r0, r0, r9
 8009c74:	1080      	asrs	r0, r0, #2
 8009c76:	0146      	lsls	r6, r0, #5
 8009c78:	6120      	str	r0, [r4, #16]
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 fbd6 	bl	800a42c <__hi0bits>
 8009c80:	1a30      	subs	r0, r6, r0
 8009c82:	f8d8 6000 	ldr.w	r6, [r8]
 8009c86:	42b0      	cmp	r0, r6
 8009c88:	dd63      	ble.n	8009d52 <__gethex+0x286>
 8009c8a:	1b87      	subs	r7, r0, r6
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 ff70 	bl	800ab74 <__any_on>
 8009c94:	4682      	mov	sl, r0
 8009c96:	b1a8      	cbz	r0, 8009cc4 <__gethex+0x1f8>
 8009c98:	1e7b      	subs	r3, r7, #1
 8009c9a:	1159      	asrs	r1, r3, #5
 8009c9c:	f003 021f 	and.w	r2, r3, #31
 8009ca0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009ca4:	f04f 0a01 	mov.w	sl, #1
 8009ca8:	fa0a f202 	lsl.w	r2, sl, r2
 8009cac:	420a      	tst	r2, r1
 8009cae:	d009      	beq.n	8009cc4 <__gethex+0x1f8>
 8009cb0:	4553      	cmp	r3, sl
 8009cb2:	dd05      	ble.n	8009cc0 <__gethex+0x1f4>
 8009cb4:	1eb9      	subs	r1, r7, #2
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f000 ff5c 	bl	800ab74 <__any_on>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d145      	bne.n	8009d4c <__gethex+0x280>
 8009cc0:	f04f 0a02 	mov.w	sl, #2
 8009cc4:	4639      	mov	r1, r7
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f7ff fe99 	bl	80099fe <rshift>
 8009ccc:	443d      	add	r5, r7
 8009cce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009cd2:	42ab      	cmp	r3, r5
 8009cd4:	da4c      	bge.n	8009d70 <__gethex+0x2a4>
 8009cd6:	ee18 0a10 	vmov	r0, s16
 8009cda:	4621      	mov	r1, r4
 8009cdc:	f000 faf0 	bl	800a2c0 <_Bfree>
 8009ce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	27a3      	movs	r7, #163	; 0xa3
 8009ce8:	e785      	b.n	8009bf6 <__gethex+0x12a>
 8009cea:	1e73      	subs	r3, r6, #1
 8009cec:	9a05      	ldr	r2, [sp, #20]
 8009cee:	9303      	str	r3, [sp, #12]
 8009cf0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d019      	beq.n	8009d2c <__gethex+0x260>
 8009cf8:	f1bb 0f20 	cmp.w	fp, #32
 8009cfc:	d107      	bne.n	8009d0e <__gethex+0x242>
 8009cfe:	9b02      	ldr	r3, [sp, #8]
 8009d00:	9a00      	ldr	r2, [sp, #0]
 8009d02:	f843 2b04 	str.w	r2, [r3], #4
 8009d06:	9302      	str	r3, [sp, #8]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	469b      	mov	fp, r3
 8009d0e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d12:	f7ff fec6 	bl	8009aa2 <__hexdig_fun>
 8009d16:	9b00      	ldr	r3, [sp, #0]
 8009d18:	f000 000f 	and.w	r0, r0, #15
 8009d1c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d20:	4303      	orrs	r3, r0
 8009d22:	9300      	str	r3, [sp, #0]
 8009d24:	f10b 0b04 	add.w	fp, fp, #4
 8009d28:	9b03      	ldr	r3, [sp, #12]
 8009d2a:	e00d      	b.n	8009d48 <__gethex+0x27c>
 8009d2c:	9b03      	ldr	r3, [sp, #12]
 8009d2e:	9a06      	ldr	r2, [sp, #24]
 8009d30:	4413      	add	r3, r2
 8009d32:	42bb      	cmp	r3, r7
 8009d34:	d3e0      	bcc.n	8009cf8 <__gethex+0x22c>
 8009d36:	4618      	mov	r0, r3
 8009d38:	9901      	ldr	r1, [sp, #4]
 8009d3a:	9307      	str	r3, [sp, #28]
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	f001 f95a 	bl	800aff6 <strncmp>
 8009d42:	9b07      	ldr	r3, [sp, #28]
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d1d7      	bne.n	8009cf8 <__gethex+0x22c>
 8009d48:	461e      	mov	r6, r3
 8009d4a:	e78b      	b.n	8009c64 <__gethex+0x198>
 8009d4c:	f04f 0a03 	mov.w	sl, #3
 8009d50:	e7b8      	b.n	8009cc4 <__gethex+0x1f8>
 8009d52:	da0a      	bge.n	8009d6a <__gethex+0x29e>
 8009d54:	1a37      	subs	r7, r6, r0
 8009d56:	4621      	mov	r1, r4
 8009d58:	ee18 0a10 	vmov	r0, s16
 8009d5c:	463a      	mov	r2, r7
 8009d5e:	f000 fccb 	bl	800a6f8 <__lshift>
 8009d62:	1bed      	subs	r5, r5, r7
 8009d64:	4604      	mov	r4, r0
 8009d66:	f100 0914 	add.w	r9, r0, #20
 8009d6a:	f04f 0a00 	mov.w	sl, #0
 8009d6e:	e7ae      	b.n	8009cce <__gethex+0x202>
 8009d70:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d74:	42a8      	cmp	r0, r5
 8009d76:	dd72      	ble.n	8009e5e <__gethex+0x392>
 8009d78:	1b45      	subs	r5, r0, r5
 8009d7a:	42ae      	cmp	r6, r5
 8009d7c:	dc36      	bgt.n	8009dec <__gethex+0x320>
 8009d7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d82:	2b02      	cmp	r3, #2
 8009d84:	d02a      	beq.n	8009ddc <__gethex+0x310>
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	d02c      	beq.n	8009de4 <__gethex+0x318>
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d115      	bne.n	8009dba <__gethex+0x2ee>
 8009d8e:	42ae      	cmp	r6, r5
 8009d90:	d113      	bne.n	8009dba <__gethex+0x2ee>
 8009d92:	2e01      	cmp	r6, #1
 8009d94:	d10b      	bne.n	8009dae <__gethex+0x2e2>
 8009d96:	9a04      	ldr	r2, [sp, #16]
 8009d98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d9c:	6013      	str	r3, [r2, #0]
 8009d9e:	2301      	movs	r3, #1
 8009da0:	6123      	str	r3, [r4, #16]
 8009da2:	f8c9 3000 	str.w	r3, [r9]
 8009da6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009da8:	2762      	movs	r7, #98	; 0x62
 8009daa:	601c      	str	r4, [r3, #0]
 8009dac:	e723      	b.n	8009bf6 <__gethex+0x12a>
 8009dae:	1e71      	subs	r1, r6, #1
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 fedf 	bl	800ab74 <__any_on>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d1ed      	bne.n	8009d96 <__gethex+0x2ca>
 8009dba:	ee18 0a10 	vmov	r0, s16
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	f000 fa7e 	bl	800a2c0 <_Bfree>
 8009dc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	2750      	movs	r7, #80	; 0x50
 8009dcc:	e713      	b.n	8009bf6 <__gethex+0x12a>
 8009dce:	bf00      	nop
 8009dd0:	08035dd4 	.word	0x08035dd4
 8009dd4:	08035cf4 	.word	0x08035cf4
 8009dd8:	08035d68 	.word	0x08035d68
 8009ddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1eb      	bne.n	8009dba <__gethex+0x2ee>
 8009de2:	e7d8      	b.n	8009d96 <__gethex+0x2ca>
 8009de4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1d5      	bne.n	8009d96 <__gethex+0x2ca>
 8009dea:	e7e6      	b.n	8009dba <__gethex+0x2ee>
 8009dec:	1e6f      	subs	r7, r5, #1
 8009dee:	f1ba 0f00 	cmp.w	sl, #0
 8009df2:	d131      	bne.n	8009e58 <__gethex+0x38c>
 8009df4:	b127      	cbz	r7, 8009e00 <__gethex+0x334>
 8009df6:	4639      	mov	r1, r7
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f000 febb 	bl	800ab74 <__any_on>
 8009dfe:	4682      	mov	sl, r0
 8009e00:	117b      	asrs	r3, r7, #5
 8009e02:	2101      	movs	r1, #1
 8009e04:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e08:	f007 071f 	and.w	r7, r7, #31
 8009e0c:	fa01 f707 	lsl.w	r7, r1, r7
 8009e10:	421f      	tst	r7, r3
 8009e12:	4629      	mov	r1, r5
 8009e14:	4620      	mov	r0, r4
 8009e16:	bf18      	it	ne
 8009e18:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e1c:	1b76      	subs	r6, r6, r5
 8009e1e:	f7ff fdee 	bl	80099fe <rshift>
 8009e22:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e26:	2702      	movs	r7, #2
 8009e28:	f1ba 0f00 	cmp.w	sl, #0
 8009e2c:	d048      	beq.n	8009ec0 <__gethex+0x3f4>
 8009e2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d015      	beq.n	8009e62 <__gethex+0x396>
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d017      	beq.n	8009e6a <__gethex+0x39e>
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d109      	bne.n	8009e52 <__gethex+0x386>
 8009e3e:	f01a 0f02 	tst.w	sl, #2
 8009e42:	d006      	beq.n	8009e52 <__gethex+0x386>
 8009e44:	f8d9 0000 	ldr.w	r0, [r9]
 8009e48:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e4c:	f01a 0f01 	tst.w	sl, #1
 8009e50:	d10e      	bne.n	8009e70 <__gethex+0x3a4>
 8009e52:	f047 0710 	orr.w	r7, r7, #16
 8009e56:	e033      	b.n	8009ec0 <__gethex+0x3f4>
 8009e58:	f04f 0a01 	mov.w	sl, #1
 8009e5c:	e7d0      	b.n	8009e00 <__gethex+0x334>
 8009e5e:	2701      	movs	r7, #1
 8009e60:	e7e2      	b.n	8009e28 <__gethex+0x35c>
 8009e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e64:	f1c3 0301 	rsb	r3, r3, #1
 8009e68:	9315      	str	r3, [sp, #84]	; 0x54
 8009e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d0f0      	beq.n	8009e52 <__gethex+0x386>
 8009e70:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e74:	f104 0314 	add.w	r3, r4, #20
 8009e78:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e7c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e80:	f04f 0c00 	mov.w	ip, #0
 8009e84:	4618      	mov	r0, r3
 8009e86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e8a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009e8e:	d01c      	beq.n	8009eca <__gethex+0x3fe>
 8009e90:	3201      	adds	r2, #1
 8009e92:	6002      	str	r2, [r0, #0]
 8009e94:	2f02      	cmp	r7, #2
 8009e96:	f104 0314 	add.w	r3, r4, #20
 8009e9a:	d13f      	bne.n	8009f1c <__gethex+0x450>
 8009e9c:	f8d8 2000 	ldr.w	r2, [r8]
 8009ea0:	3a01      	subs	r2, #1
 8009ea2:	42b2      	cmp	r2, r6
 8009ea4:	d10a      	bne.n	8009ebc <__gethex+0x3f0>
 8009ea6:	1171      	asrs	r1, r6, #5
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009eae:	f006 061f 	and.w	r6, r6, #31
 8009eb2:	fa02 f606 	lsl.w	r6, r2, r6
 8009eb6:	421e      	tst	r6, r3
 8009eb8:	bf18      	it	ne
 8009eba:	4617      	movne	r7, r2
 8009ebc:	f047 0720 	orr.w	r7, r7, #32
 8009ec0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ec2:	601c      	str	r4, [r3, #0]
 8009ec4:	9b04      	ldr	r3, [sp, #16]
 8009ec6:	601d      	str	r5, [r3, #0]
 8009ec8:	e695      	b.n	8009bf6 <__gethex+0x12a>
 8009eca:	4299      	cmp	r1, r3
 8009ecc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ed0:	d8d8      	bhi.n	8009e84 <__gethex+0x3b8>
 8009ed2:	68a3      	ldr	r3, [r4, #8]
 8009ed4:	459b      	cmp	fp, r3
 8009ed6:	db19      	blt.n	8009f0c <__gethex+0x440>
 8009ed8:	6861      	ldr	r1, [r4, #4]
 8009eda:	ee18 0a10 	vmov	r0, s16
 8009ede:	3101      	adds	r1, #1
 8009ee0:	f000 f9ae 	bl	800a240 <_Balloc>
 8009ee4:	4681      	mov	r9, r0
 8009ee6:	b918      	cbnz	r0, 8009ef0 <__gethex+0x424>
 8009ee8:	4b1a      	ldr	r3, [pc, #104]	; (8009f54 <__gethex+0x488>)
 8009eea:	4602      	mov	r2, r0
 8009eec:	2184      	movs	r1, #132	; 0x84
 8009eee:	e6a8      	b.n	8009c42 <__gethex+0x176>
 8009ef0:	6922      	ldr	r2, [r4, #16]
 8009ef2:	3202      	adds	r2, #2
 8009ef4:	f104 010c 	add.w	r1, r4, #12
 8009ef8:	0092      	lsls	r2, r2, #2
 8009efa:	300c      	adds	r0, #12
 8009efc:	f000 f96c 	bl	800a1d8 <memcpy>
 8009f00:	4621      	mov	r1, r4
 8009f02:	ee18 0a10 	vmov	r0, s16
 8009f06:	f000 f9db 	bl	800a2c0 <_Bfree>
 8009f0a:	464c      	mov	r4, r9
 8009f0c:	6923      	ldr	r3, [r4, #16]
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f14:	6122      	str	r2, [r4, #16]
 8009f16:	2201      	movs	r2, #1
 8009f18:	615a      	str	r2, [r3, #20]
 8009f1a:	e7bb      	b.n	8009e94 <__gethex+0x3c8>
 8009f1c:	6922      	ldr	r2, [r4, #16]
 8009f1e:	455a      	cmp	r2, fp
 8009f20:	dd0b      	ble.n	8009f3a <__gethex+0x46e>
 8009f22:	2101      	movs	r1, #1
 8009f24:	4620      	mov	r0, r4
 8009f26:	f7ff fd6a 	bl	80099fe <rshift>
 8009f2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f2e:	3501      	adds	r5, #1
 8009f30:	42ab      	cmp	r3, r5
 8009f32:	f6ff aed0 	blt.w	8009cd6 <__gethex+0x20a>
 8009f36:	2701      	movs	r7, #1
 8009f38:	e7c0      	b.n	8009ebc <__gethex+0x3f0>
 8009f3a:	f016 061f 	ands.w	r6, r6, #31
 8009f3e:	d0fa      	beq.n	8009f36 <__gethex+0x46a>
 8009f40:	449a      	add	sl, r3
 8009f42:	f1c6 0620 	rsb	r6, r6, #32
 8009f46:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009f4a:	f000 fa6f 	bl	800a42c <__hi0bits>
 8009f4e:	42b0      	cmp	r0, r6
 8009f50:	dbe7      	blt.n	8009f22 <__gethex+0x456>
 8009f52:	e7f0      	b.n	8009f36 <__gethex+0x46a>
 8009f54:	08035cf4 	.word	0x08035cf4

08009f58 <L_shift>:
 8009f58:	f1c2 0208 	rsb	r2, r2, #8
 8009f5c:	0092      	lsls	r2, r2, #2
 8009f5e:	b570      	push	{r4, r5, r6, lr}
 8009f60:	f1c2 0620 	rsb	r6, r2, #32
 8009f64:	6843      	ldr	r3, [r0, #4]
 8009f66:	6804      	ldr	r4, [r0, #0]
 8009f68:	fa03 f506 	lsl.w	r5, r3, r6
 8009f6c:	432c      	orrs	r4, r5
 8009f6e:	40d3      	lsrs	r3, r2
 8009f70:	6004      	str	r4, [r0, #0]
 8009f72:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f76:	4288      	cmp	r0, r1
 8009f78:	d3f4      	bcc.n	8009f64 <L_shift+0xc>
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}

08009f7c <__match>:
 8009f7c:	b530      	push	{r4, r5, lr}
 8009f7e:	6803      	ldr	r3, [r0, #0]
 8009f80:	3301      	adds	r3, #1
 8009f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f86:	b914      	cbnz	r4, 8009f8e <__match+0x12>
 8009f88:	6003      	str	r3, [r0, #0]
 8009f8a:	2001      	movs	r0, #1
 8009f8c:	bd30      	pop	{r4, r5, pc}
 8009f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f96:	2d19      	cmp	r5, #25
 8009f98:	bf98      	it	ls
 8009f9a:	3220      	addls	r2, #32
 8009f9c:	42a2      	cmp	r2, r4
 8009f9e:	d0f0      	beq.n	8009f82 <__match+0x6>
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	e7f3      	b.n	8009f8c <__match+0x10>

08009fa4 <__hexnan>:
 8009fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa8:	680b      	ldr	r3, [r1, #0]
 8009faa:	6801      	ldr	r1, [r0, #0]
 8009fac:	115e      	asrs	r6, r3, #5
 8009fae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fb2:	f013 031f 	ands.w	r3, r3, #31
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	bf18      	it	ne
 8009fba:	3604      	addne	r6, #4
 8009fbc:	2500      	movs	r5, #0
 8009fbe:	1f37      	subs	r7, r6, #4
 8009fc0:	4682      	mov	sl, r0
 8009fc2:	4690      	mov	r8, r2
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fca:	46b9      	mov	r9, r7
 8009fcc:	463c      	mov	r4, r7
 8009fce:	9502      	str	r5, [sp, #8]
 8009fd0:	46ab      	mov	fp, r5
 8009fd2:	784a      	ldrb	r2, [r1, #1]
 8009fd4:	1c4b      	adds	r3, r1, #1
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	b342      	cbz	r2, 800a02c <__hexnan+0x88>
 8009fda:	4610      	mov	r0, r2
 8009fdc:	9105      	str	r1, [sp, #20]
 8009fde:	9204      	str	r2, [sp, #16]
 8009fe0:	f7ff fd5f 	bl	8009aa2 <__hexdig_fun>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d14f      	bne.n	800a088 <__hexnan+0xe4>
 8009fe8:	9a04      	ldr	r2, [sp, #16]
 8009fea:	9905      	ldr	r1, [sp, #20]
 8009fec:	2a20      	cmp	r2, #32
 8009fee:	d818      	bhi.n	800a022 <__hexnan+0x7e>
 8009ff0:	9b02      	ldr	r3, [sp, #8]
 8009ff2:	459b      	cmp	fp, r3
 8009ff4:	dd13      	ble.n	800a01e <__hexnan+0x7a>
 8009ff6:	454c      	cmp	r4, r9
 8009ff8:	d206      	bcs.n	800a008 <__hexnan+0x64>
 8009ffa:	2d07      	cmp	r5, #7
 8009ffc:	dc04      	bgt.n	800a008 <__hexnan+0x64>
 8009ffe:	462a      	mov	r2, r5
 800a000:	4649      	mov	r1, r9
 800a002:	4620      	mov	r0, r4
 800a004:	f7ff ffa8 	bl	8009f58 <L_shift>
 800a008:	4544      	cmp	r4, r8
 800a00a:	d950      	bls.n	800a0ae <__hexnan+0x10a>
 800a00c:	2300      	movs	r3, #0
 800a00e:	f1a4 0904 	sub.w	r9, r4, #4
 800a012:	f844 3c04 	str.w	r3, [r4, #-4]
 800a016:	f8cd b008 	str.w	fp, [sp, #8]
 800a01a:	464c      	mov	r4, r9
 800a01c:	461d      	mov	r5, r3
 800a01e:	9903      	ldr	r1, [sp, #12]
 800a020:	e7d7      	b.n	8009fd2 <__hexnan+0x2e>
 800a022:	2a29      	cmp	r2, #41	; 0x29
 800a024:	d156      	bne.n	800a0d4 <__hexnan+0x130>
 800a026:	3102      	adds	r1, #2
 800a028:	f8ca 1000 	str.w	r1, [sl]
 800a02c:	f1bb 0f00 	cmp.w	fp, #0
 800a030:	d050      	beq.n	800a0d4 <__hexnan+0x130>
 800a032:	454c      	cmp	r4, r9
 800a034:	d206      	bcs.n	800a044 <__hexnan+0xa0>
 800a036:	2d07      	cmp	r5, #7
 800a038:	dc04      	bgt.n	800a044 <__hexnan+0xa0>
 800a03a:	462a      	mov	r2, r5
 800a03c:	4649      	mov	r1, r9
 800a03e:	4620      	mov	r0, r4
 800a040:	f7ff ff8a 	bl	8009f58 <L_shift>
 800a044:	4544      	cmp	r4, r8
 800a046:	d934      	bls.n	800a0b2 <__hexnan+0x10e>
 800a048:	f1a8 0204 	sub.w	r2, r8, #4
 800a04c:	4623      	mov	r3, r4
 800a04e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a052:	f842 1f04 	str.w	r1, [r2, #4]!
 800a056:	429f      	cmp	r7, r3
 800a058:	d2f9      	bcs.n	800a04e <__hexnan+0xaa>
 800a05a:	1b3b      	subs	r3, r7, r4
 800a05c:	f023 0303 	bic.w	r3, r3, #3
 800a060:	3304      	adds	r3, #4
 800a062:	3401      	adds	r4, #1
 800a064:	3e03      	subs	r6, #3
 800a066:	42b4      	cmp	r4, r6
 800a068:	bf88      	it	hi
 800a06a:	2304      	movhi	r3, #4
 800a06c:	4443      	add	r3, r8
 800a06e:	2200      	movs	r2, #0
 800a070:	f843 2b04 	str.w	r2, [r3], #4
 800a074:	429f      	cmp	r7, r3
 800a076:	d2fb      	bcs.n	800a070 <__hexnan+0xcc>
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	b91b      	cbnz	r3, 800a084 <__hexnan+0xe0>
 800a07c:	4547      	cmp	r7, r8
 800a07e:	d127      	bne.n	800a0d0 <__hexnan+0x12c>
 800a080:	2301      	movs	r3, #1
 800a082:	603b      	str	r3, [r7, #0]
 800a084:	2005      	movs	r0, #5
 800a086:	e026      	b.n	800a0d6 <__hexnan+0x132>
 800a088:	3501      	adds	r5, #1
 800a08a:	2d08      	cmp	r5, #8
 800a08c:	f10b 0b01 	add.w	fp, fp, #1
 800a090:	dd06      	ble.n	800a0a0 <__hexnan+0xfc>
 800a092:	4544      	cmp	r4, r8
 800a094:	d9c3      	bls.n	800a01e <__hexnan+0x7a>
 800a096:	2300      	movs	r3, #0
 800a098:	f844 3c04 	str.w	r3, [r4, #-4]
 800a09c:	2501      	movs	r5, #1
 800a09e:	3c04      	subs	r4, #4
 800a0a0:	6822      	ldr	r2, [r4, #0]
 800a0a2:	f000 000f 	and.w	r0, r0, #15
 800a0a6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a0aa:	6022      	str	r2, [r4, #0]
 800a0ac:	e7b7      	b.n	800a01e <__hexnan+0x7a>
 800a0ae:	2508      	movs	r5, #8
 800a0b0:	e7b5      	b.n	800a01e <__hexnan+0x7a>
 800a0b2:	9b01      	ldr	r3, [sp, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d0df      	beq.n	800a078 <__hexnan+0xd4>
 800a0b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0bc:	f1c3 0320 	rsb	r3, r3, #32
 800a0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a0c8:	401a      	ands	r2, r3
 800a0ca:	f846 2c04 	str.w	r2, [r6, #-4]
 800a0ce:	e7d3      	b.n	800a078 <__hexnan+0xd4>
 800a0d0:	3f04      	subs	r7, #4
 800a0d2:	e7d1      	b.n	800a078 <__hexnan+0xd4>
 800a0d4:	2004      	movs	r0, #4
 800a0d6:	b007      	add	sp, #28
 800a0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0dc <_localeconv_r>:
 800a0dc:	4800      	ldr	r0, [pc, #0]	; (800a0e0 <_localeconv_r+0x4>)
 800a0de:	4770      	bx	lr
 800a0e0:	20000164 	.word	0x20000164

0800a0e4 <__retarget_lock_init_recursive>:
 800a0e4:	4770      	bx	lr

0800a0e6 <__retarget_lock_acquire_recursive>:
 800a0e6:	4770      	bx	lr

0800a0e8 <__retarget_lock_release_recursive>:
 800a0e8:	4770      	bx	lr

0800a0ea <__swhatbuf_r>:
 800a0ea:	b570      	push	{r4, r5, r6, lr}
 800a0ec:	460e      	mov	r6, r1
 800a0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	b096      	sub	sp, #88	; 0x58
 800a0f6:	4614      	mov	r4, r2
 800a0f8:	461d      	mov	r5, r3
 800a0fa:	da07      	bge.n	800a10c <__swhatbuf_r+0x22>
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	602b      	str	r3, [r5, #0]
 800a100:	89b3      	ldrh	r3, [r6, #12]
 800a102:	061a      	lsls	r2, r3, #24
 800a104:	d410      	bmi.n	800a128 <__swhatbuf_r+0x3e>
 800a106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a10a:	e00e      	b.n	800a12a <__swhatbuf_r+0x40>
 800a10c:	466a      	mov	r2, sp
 800a10e:	f000 ffb3 	bl	800b078 <_fstat_r>
 800a112:	2800      	cmp	r0, #0
 800a114:	dbf2      	blt.n	800a0fc <__swhatbuf_r+0x12>
 800a116:	9a01      	ldr	r2, [sp, #4]
 800a118:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a11c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a120:	425a      	negs	r2, r3
 800a122:	415a      	adcs	r2, r3
 800a124:	602a      	str	r2, [r5, #0]
 800a126:	e7ee      	b.n	800a106 <__swhatbuf_r+0x1c>
 800a128:	2340      	movs	r3, #64	; 0x40
 800a12a:	2000      	movs	r0, #0
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	b016      	add	sp, #88	; 0x58
 800a130:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a134 <__smakebuf_r>:
 800a134:	898b      	ldrh	r3, [r1, #12]
 800a136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a138:	079d      	lsls	r5, r3, #30
 800a13a:	4606      	mov	r6, r0
 800a13c:	460c      	mov	r4, r1
 800a13e:	d507      	bpl.n	800a150 <__smakebuf_r+0x1c>
 800a140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a144:	6023      	str	r3, [r4, #0]
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	2301      	movs	r3, #1
 800a14a:	6163      	str	r3, [r4, #20]
 800a14c:	b002      	add	sp, #8
 800a14e:	bd70      	pop	{r4, r5, r6, pc}
 800a150:	ab01      	add	r3, sp, #4
 800a152:	466a      	mov	r2, sp
 800a154:	f7ff ffc9 	bl	800a0ea <__swhatbuf_r>
 800a158:	9900      	ldr	r1, [sp, #0]
 800a15a:	4605      	mov	r5, r0
 800a15c:	4630      	mov	r0, r6
 800a15e:	f7fc fbb3 	bl	80068c8 <_malloc_r>
 800a162:	b948      	cbnz	r0, 800a178 <__smakebuf_r+0x44>
 800a164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a168:	059a      	lsls	r2, r3, #22
 800a16a:	d4ef      	bmi.n	800a14c <__smakebuf_r+0x18>
 800a16c:	f023 0303 	bic.w	r3, r3, #3
 800a170:	f043 0302 	orr.w	r3, r3, #2
 800a174:	81a3      	strh	r3, [r4, #12]
 800a176:	e7e3      	b.n	800a140 <__smakebuf_r+0xc>
 800a178:	4b0d      	ldr	r3, [pc, #52]	; (800a1b0 <__smakebuf_r+0x7c>)
 800a17a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a17c:	89a3      	ldrh	r3, [r4, #12]
 800a17e:	6020      	str	r0, [r4, #0]
 800a180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a184:	81a3      	strh	r3, [r4, #12]
 800a186:	9b00      	ldr	r3, [sp, #0]
 800a188:	6163      	str	r3, [r4, #20]
 800a18a:	9b01      	ldr	r3, [sp, #4]
 800a18c:	6120      	str	r0, [r4, #16]
 800a18e:	b15b      	cbz	r3, 800a1a8 <__smakebuf_r+0x74>
 800a190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a194:	4630      	mov	r0, r6
 800a196:	f000 ff81 	bl	800b09c <_isatty_r>
 800a19a:	b128      	cbz	r0, 800a1a8 <__smakebuf_r+0x74>
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	f023 0303 	bic.w	r3, r3, #3
 800a1a2:	f043 0301 	orr.w	r3, r3, #1
 800a1a6:	81a3      	strh	r3, [r4, #12]
 800a1a8:	89a0      	ldrh	r0, [r4, #12]
 800a1aa:	4305      	orrs	r5, r0
 800a1ac:	81a5      	strh	r5, [r4, #12]
 800a1ae:	e7cd      	b.n	800a14c <__smakebuf_r+0x18>
 800a1b0:	0800985d 	.word	0x0800985d

0800a1b4 <__ascii_mbtowc>:
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	b901      	cbnz	r1, 800a1ba <__ascii_mbtowc+0x6>
 800a1b8:	a901      	add	r1, sp, #4
 800a1ba:	b142      	cbz	r2, 800a1ce <__ascii_mbtowc+0x1a>
 800a1bc:	b14b      	cbz	r3, 800a1d2 <__ascii_mbtowc+0x1e>
 800a1be:	7813      	ldrb	r3, [r2, #0]
 800a1c0:	600b      	str	r3, [r1, #0]
 800a1c2:	7812      	ldrb	r2, [r2, #0]
 800a1c4:	1e10      	subs	r0, r2, #0
 800a1c6:	bf18      	it	ne
 800a1c8:	2001      	movne	r0, #1
 800a1ca:	b002      	add	sp, #8
 800a1cc:	4770      	bx	lr
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	e7fb      	b.n	800a1ca <__ascii_mbtowc+0x16>
 800a1d2:	f06f 0001 	mvn.w	r0, #1
 800a1d6:	e7f8      	b.n	800a1ca <__ascii_mbtowc+0x16>

0800a1d8 <memcpy>:
 800a1d8:	440a      	add	r2, r1
 800a1da:	4291      	cmp	r1, r2
 800a1dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a1e0:	d100      	bne.n	800a1e4 <memcpy+0xc>
 800a1e2:	4770      	bx	lr
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1ee:	4291      	cmp	r1, r2
 800a1f0:	d1f9      	bne.n	800a1e6 <memcpy+0xe>
 800a1f2:	bd10      	pop	{r4, pc}

0800a1f4 <memmove>:
 800a1f4:	4288      	cmp	r0, r1
 800a1f6:	b510      	push	{r4, lr}
 800a1f8:	eb01 0402 	add.w	r4, r1, r2
 800a1fc:	d902      	bls.n	800a204 <memmove+0x10>
 800a1fe:	4284      	cmp	r4, r0
 800a200:	4623      	mov	r3, r4
 800a202:	d807      	bhi.n	800a214 <memmove+0x20>
 800a204:	1e43      	subs	r3, r0, #1
 800a206:	42a1      	cmp	r1, r4
 800a208:	d008      	beq.n	800a21c <memmove+0x28>
 800a20a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a20e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a212:	e7f8      	b.n	800a206 <memmove+0x12>
 800a214:	4402      	add	r2, r0
 800a216:	4601      	mov	r1, r0
 800a218:	428a      	cmp	r2, r1
 800a21a:	d100      	bne.n	800a21e <memmove+0x2a>
 800a21c:	bd10      	pop	{r4, pc}
 800a21e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a226:	e7f7      	b.n	800a218 <memmove+0x24>

0800a228 <__malloc_lock>:
 800a228:	4801      	ldr	r0, [pc, #4]	; (800a230 <__malloc_lock+0x8>)
 800a22a:	f7ff bf5c 	b.w	800a0e6 <__retarget_lock_acquire_recursive>
 800a22e:	bf00      	nop
 800a230:	200002e8 	.word	0x200002e8

0800a234 <__malloc_unlock>:
 800a234:	4801      	ldr	r0, [pc, #4]	; (800a23c <__malloc_unlock+0x8>)
 800a236:	f7ff bf57 	b.w	800a0e8 <__retarget_lock_release_recursive>
 800a23a:	bf00      	nop
 800a23c:	200002e8 	.word	0x200002e8

0800a240 <_Balloc>:
 800a240:	b570      	push	{r4, r5, r6, lr}
 800a242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a244:	4604      	mov	r4, r0
 800a246:	460d      	mov	r5, r1
 800a248:	b976      	cbnz	r6, 800a268 <_Balloc+0x28>
 800a24a:	2010      	movs	r0, #16
 800a24c:	f7fc fadc 	bl	8006808 <malloc>
 800a250:	4602      	mov	r2, r0
 800a252:	6260      	str	r0, [r4, #36]	; 0x24
 800a254:	b920      	cbnz	r0, 800a260 <_Balloc+0x20>
 800a256:	4b18      	ldr	r3, [pc, #96]	; (800a2b8 <_Balloc+0x78>)
 800a258:	4818      	ldr	r0, [pc, #96]	; (800a2bc <_Balloc+0x7c>)
 800a25a:	2166      	movs	r1, #102	; 0x66
 800a25c:	f7fc fa66 	bl	800672c <__assert_func>
 800a260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a264:	6006      	str	r6, [r0, #0]
 800a266:	60c6      	str	r6, [r0, #12]
 800a268:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a26a:	68f3      	ldr	r3, [r6, #12]
 800a26c:	b183      	cbz	r3, 800a290 <_Balloc+0x50>
 800a26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a276:	b9b8      	cbnz	r0, 800a2a8 <_Balloc+0x68>
 800a278:	2101      	movs	r1, #1
 800a27a:	fa01 f605 	lsl.w	r6, r1, r5
 800a27e:	1d72      	adds	r2, r6, #5
 800a280:	0092      	lsls	r2, r2, #2
 800a282:	4620      	mov	r0, r4
 800a284:	f000 fc97 	bl	800abb6 <_calloc_r>
 800a288:	b160      	cbz	r0, 800a2a4 <_Balloc+0x64>
 800a28a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a28e:	e00e      	b.n	800a2ae <_Balloc+0x6e>
 800a290:	2221      	movs	r2, #33	; 0x21
 800a292:	2104      	movs	r1, #4
 800a294:	4620      	mov	r0, r4
 800a296:	f000 fc8e 	bl	800abb6 <_calloc_r>
 800a29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29c:	60f0      	str	r0, [r6, #12]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e4      	bne.n	800a26e <_Balloc+0x2e>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	6802      	ldr	r2, [r0, #0]
 800a2aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2b4:	e7f7      	b.n	800a2a6 <_Balloc+0x66>
 800a2b6:	bf00      	nop
 800a2b8:	08035c7e 	.word	0x08035c7e
 800a2bc:	08035de8 	.word	0x08035de8

0800a2c0 <_Bfree>:
 800a2c0:	b570      	push	{r4, r5, r6, lr}
 800a2c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	b976      	cbnz	r6, 800a2e8 <_Bfree+0x28>
 800a2ca:	2010      	movs	r0, #16
 800a2cc:	f7fc fa9c 	bl	8006808 <malloc>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	6268      	str	r0, [r5, #36]	; 0x24
 800a2d4:	b920      	cbnz	r0, 800a2e0 <_Bfree+0x20>
 800a2d6:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <_Bfree+0x3c>)
 800a2d8:	4809      	ldr	r0, [pc, #36]	; (800a300 <_Bfree+0x40>)
 800a2da:	218a      	movs	r1, #138	; 0x8a
 800a2dc:	f7fc fa26 	bl	800672c <__assert_func>
 800a2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2e4:	6006      	str	r6, [r0, #0]
 800a2e6:	60c6      	str	r6, [r0, #12]
 800a2e8:	b13c      	cbz	r4, 800a2fa <_Bfree+0x3a>
 800a2ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2ec:	6862      	ldr	r2, [r4, #4]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2f4:	6021      	str	r1, [r4, #0]
 800a2f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2fa:	bd70      	pop	{r4, r5, r6, pc}
 800a2fc:	08035c7e 	.word	0x08035c7e
 800a300:	08035de8 	.word	0x08035de8

0800a304 <__multadd>:
 800a304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a308:	690e      	ldr	r6, [r1, #16]
 800a30a:	4607      	mov	r7, r0
 800a30c:	4698      	mov	r8, r3
 800a30e:	460c      	mov	r4, r1
 800a310:	f101 0014 	add.w	r0, r1, #20
 800a314:	2300      	movs	r3, #0
 800a316:	6805      	ldr	r5, [r0, #0]
 800a318:	b2a9      	uxth	r1, r5
 800a31a:	fb02 8101 	mla	r1, r2, r1, r8
 800a31e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a322:	0c2d      	lsrs	r5, r5, #16
 800a324:	fb02 c505 	mla	r5, r2, r5, ip
 800a328:	b289      	uxth	r1, r1
 800a32a:	3301      	adds	r3, #1
 800a32c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a330:	429e      	cmp	r6, r3
 800a332:	f840 1b04 	str.w	r1, [r0], #4
 800a336:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a33a:	dcec      	bgt.n	800a316 <__multadd+0x12>
 800a33c:	f1b8 0f00 	cmp.w	r8, #0
 800a340:	d022      	beq.n	800a388 <__multadd+0x84>
 800a342:	68a3      	ldr	r3, [r4, #8]
 800a344:	42b3      	cmp	r3, r6
 800a346:	dc19      	bgt.n	800a37c <__multadd+0x78>
 800a348:	6861      	ldr	r1, [r4, #4]
 800a34a:	4638      	mov	r0, r7
 800a34c:	3101      	adds	r1, #1
 800a34e:	f7ff ff77 	bl	800a240 <_Balloc>
 800a352:	4605      	mov	r5, r0
 800a354:	b928      	cbnz	r0, 800a362 <__multadd+0x5e>
 800a356:	4602      	mov	r2, r0
 800a358:	4b0d      	ldr	r3, [pc, #52]	; (800a390 <__multadd+0x8c>)
 800a35a:	480e      	ldr	r0, [pc, #56]	; (800a394 <__multadd+0x90>)
 800a35c:	21b5      	movs	r1, #181	; 0xb5
 800a35e:	f7fc f9e5 	bl	800672c <__assert_func>
 800a362:	6922      	ldr	r2, [r4, #16]
 800a364:	3202      	adds	r2, #2
 800a366:	f104 010c 	add.w	r1, r4, #12
 800a36a:	0092      	lsls	r2, r2, #2
 800a36c:	300c      	adds	r0, #12
 800a36e:	f7ff ff33 	bl	800a1d8 <memcpy>
 800a372:	4621      	mov	r1, r4
 800a374:	4638      	mov	r0, r7
 800a376:	f7ff ffa3 	bl	800a2c0 <_Bfree>
 800a37a:	462c      	mov	r4, r5
 800a37c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a380:	3601      	adds	r6, #1
 800a382:	f8c3 8014 	str.w	r8, [r3, #20]
 800a386:	6126      	str	r6, [r4, #16]
 800a388:	4620      	mov	r0, r4
 800a38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a38e:	bf00      	nop
 800a390:	08035cf4 	.word	0x08035cf4
 800a394:	08035de8 	.word	0x08035de8

0800a398 <__s2b>:
 800a398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a39c:	460c      	mov	r4, r1
 800a39e:	4615      	mov	r5, r2
 800a3a0:	461f      	mov	r7, r3
 800a3a2:	2209      	movs	r2, #9
 800a3a4:	3308      	adds	r3, #8
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	db09      	blt.n	800a3c8 <__s2b+0x30>
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	f7ff ff43 	bl	800a240 <_Balloc>
 800a3ba:	b940      	cbnz	r0, 800a3ce <__s2b+0x36>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	4b19      	ldr	r3, [pc, #100]	; (800a424 <__s2b+0x8c>)
 800a3c0:	4819      	ldr	r0, [pc, #100]	; (800a428 <__s2b+0x90>)
 800a3c2:	21ce      	movs	r1, #206	; 0xce
 800a3c4:	f7fc f9b2 	bl	800672c <__assert_func>
 800a3c8:	0052      	lsls	r2, r2, #1
 800a3ca:	3101      	adds	r1, #1
 800a3cc:	e7f0      	b.n	800a3b0 <__s2b+0x18>
 800a3ce:	9b08      	ldr	r3, [sp, #32]
 800a3d0:	6143      	str	r3, [r0, #20]
 800a3d2:	2d09      	cmp	r5, #9
 800a3d4:	f04f 0301 	mov.w	r3, #1
 800a3d8:	6103      	str	r3, [r0, #16]
 800a3da:	dd16      	ble.n	800a40a <__s2b+0x72>
 800a3dc:	f104 0909 	add.w	r9, r4, #9
 800a3e0:	46c8      	mov	r8, r9
 800a3e2:	442c      	add	r4, r5
 800a3e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3e8:	4601      	mov	r1, r0
 800a3ea:	3b30      	subs	r3, #48	; 0x30
 800a3ec:	220a      	movs	r2, #10
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f7ff ff88 	bl	800a304 <__multadd>
 800a3f4:	45a0      	cmp	r8, r4
 800a3f6:	d1f5      	bne.n	800a3e4 <__s2b+0x4c>
 800a3f8:	f1a5 0408 	sub.w	r4, r5, #8
 800a3fc:	444c      	add	r4, r9
 800a3fe:	1b2d      	subs	r5, r5, r4
 800a400:	1963      	adds	r3, r4, r5
 800a402:	42bb      	cmp	r3, r7
 800a404:	db04      	blt.n	800a410 <__s2b+0x78>
 800a406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a40a:	340a      	adds	r4, #10
 800a40c:	2509      	movs	r5, #9
 800a40e:	e7f6      	b.n	800a3fe <__s2b+0x66>
 800a410:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a414:	4601      	mov	r1, r0
 800a416:	3b30      	subs	r3, #48	; 0x30
 800a418:	220a      	movs	r2, #10
 800a41a:	4630      	mov	r0, r6
 800a41c:	f7ff ff72 	bl	800a304 <__multadd>
 800a420:	e7ee      	b.n	800a400 <__s2b+0x68>
 800a422:	bf00      	nop
 800a424:	08035cf4 	.word	0x08035cf4
 800a428:	08035de8 	.word	0x08035de8

0800a42c <__hi0bits>:
 800a42c:	0c03      	lsrs	r3, r0, #16
 800a42e:	041b      	lsls	r3, r3, #16
 800a430:	b9d3      	cbnz	r3, 800a468 <__hi0bits+0x3c>
 800a432:	0400      	lsls	r0, r0, #16
 800a434:	2310      	movs	r3, #16
 800a436:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a43a:	bf04      	itt	eq
 800a43c:	0200      	lsleq	r0, r0, #8
 800a43e:	3308      	addeq	r3, #8
 800a440:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a444:	bf04      	itt	eq
 800a446:	0100      	lsleq	r0, r0, #4
 800a448:	3304      	addeq	r3, #4
 800a44a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a44e:	bf04      	itt	eq
 800a450:	0080      	lsleq	r0, r0, #2
 800a452:	3302      	addeq	r3, #2
 800a454:	2800      	cmp	r0, #0
 800a456:	db05      	blt.n	800a464 <__hi0bits+0x38>
 800a458:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a45c:	f103 0301 	add.w	r3, r3, #1
 800a460:	bf08      	it	eq
 800a462:	2320      	moveq	r3, #32
 800a464:	4618      	mov	r0, r3
 800a466:	4770      	bx	lr
 800a468:	2300      	movs	r3, #0
 800a46a:	e7e4      	b.n	800a436 <__hi0bits+0xa>

0800a46c <__lo0bits>:
 800a46c:	6803      	ldr	r3, [r0, #0]
 800a46e:	f013 0207 	ands.w	r2, r3, #7
 800a472:	4601      	mov	r1, r0
 800a474:	d00b      	beq.n	800a48e <__lo0bits+0x22>
 800a476:	07da      	lsls	r2, r3, #31
 800a478:	d424      	bmi.n	800a4c4 <__lo0bits+0x58>
 800a47a:	0798      	lsls	r0, r3, #30
 800a47c:	bf49      	itett	mi
 800a47e:	085b      	lsrmi	r3, r3, #1
 800a480:	089b      	lsrpl	r3, r3, #2
 800a482:	2001      	movmi	r0, #1
 800a484:	600b      	strmi	r3, [r1, #0]
 800a486:	bf5c      	itt	pl
 800a488:	600b      	strpl	r3, [r1, #0]
 800a48a:	2002      	movpl	r0, #2
 800a48c:	4770      	bx	lr
 800a48e:	b298      	uxth	r0, r3
 800a490:	b9b0      	cbnz	r0, 800a4c0 <__lo0bits+0x54>
 800a492:	0c1b      	lsrs	r3, r3, #16
 800a494:	2010      	movs	r0, #16
 800a496:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a49a:	bf04      	itt	eq
 800a49c:	0a1b      	lsreq	r3, r3, #8
 800a49e:	3008      	addeq	r0, #8
 800a4a0:	071a      	lsls	r2, r3, #28
 800a4a2:	bf04      	itt	eq
 800a4a4:	091b      	lsreq	r3, r3, #4
 800a4a6:	3004      	addeq	r0, #4
 800a4a8:	079a      	lsls	r2, r3, #30
 800a4aa:	bf04      	itt	eq
 800a4ac:	089b      	lsreq	r3, r3, #2
 800a4ae:	3002      	addeq	r0, #2
 800a4b0:	07da      	lsls	r2, r3, #31
 800a4b2:	d403      	bmi.n	800a4bc <__lo0bits+0x50>
 800a4b4:	085b      	lsrs	r3, r3, #1
 800a4b6:	f100 0001 	add.w	r0, r0, #1
 800a4ba:	d005      	beq.n	800a4c8 <__lo0bits+0x5c>
 800a4bc:	600b      	str	r3, [r1, #0]
 800a4be:	4770      	bx	lr
 800a4c0:	4610      	mov	r0, r2
 800a4c2:	e7e8      	b.n	800a496 <__lo0bits+0x2a>
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	4770      	bx	lr
 800a4c8:	2020      	movs	r0, #32
 800a4ca:	4770      	bx	lr

0800a4cc <__i2b>:
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	2101      	movs	r1, #1
 800a4d2:	f7ff feb5 	bl	800a240 <_Balloc>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	b928      	cbnz	r0, 800a4e6 <__i2b+0x1a>
 800a4da:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <__i2b+0x24>)
 800a4dc:	4805      	ldr	r0, [pc, #20]	; (800a4f4 <__i2b+0x28>)
 800a4de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4e2:	f7fc f923 	bl	800672c <__assert_func>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	6144      	str	r4, [r0, #20]
 800a4ea:	6103      	str	r3, [r0, #16]
 800a4ec:	bd10      	pop	{r4, pc}
 800a4ee:	bf00      	nop
 800a4f0:	08035cf4 	.word	0x08035cf4
 800a4f4:	08035de8 	.word	0x08035de8

0800a4f8 <__multiply>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	4614      	mov	r4, r2
 800a4fe:	690a      	ldr	r2, [r1, #16]
 800a500:	6923      	ldr	r3, [r4, #16]
 800a502:	429a      	cmp	r2, r3
 800a504:	bfb8      	it	lt
 800a506:	460b      	movlt	r3, r1
 800a508:	460d      	mov	r5, r1
 800a50a:	bfbc      	itt	lt
 800a50c:	4625      	movlt	r5, r4
 800a50e:	461c      	movlt	r4, r3
 800a510:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a514:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a518:	68ab      	ldr	r3, [r5, #8]
 800a51a:	6869      	ldr	r1, [r5, #4]
 800a51c:	eb0a 0709 	add.w	r7, sl, r9
 800a520:	42bb      	cmp	r3, r7
 800a522:	b085      	sub	sp, #20
 800a524:	bfb8      	it	lt
 800a526:	3101      	addlt	r1, #1
 800a528:	f7ff fe8a 	bl	800a240 <_Balloc>
 800a52c:	b930      	cbnz	r0, 800a53c <__multiply+0x44>
 800a52e:	4602      	mov	r2, r0
 800a530:	4b42      	ldr	r3, [pc, #264]	; (800a63c <__multiply+0x144>)
 800a532:	4843      	ldr	r0, [pc, #268]	; (800a640 <__multiply+0x148>)
 800a534:	f240 115d 	movw	r1, #349	; 0x15d
 800a538:	f7fc f8f8 	bl	800672c <__assert_func>
 800a53c:	f100 0614 	add.w	r6, r0, #20
 800a540:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a544:	4633      	mov	r3, r6
 800a546:	2200      	movs	r2, #0
 800a548:	4543      	cmp	r3, r8
 800a54a:	d31e      	bcc.n	800a58a <__multiply+0x92>
 800a54c:	f105 0c14 	add.w	ip, r5, #20
 800a550:	f104 0314 	add.w	r3, r4, #20
 800a554:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a558:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a55c:	9202      	str	r2, [sp, #8]
 800a55e:	ebac 0205 	sub.w	r2, ip, r5
 800a562:	3a15      	subs	r2, #21
 800a564:	f022 0203 	bic.w	r2, r2, #3
 800a568:	3204      	adds	r2, #4
 800a56a:	f105 0115 	add.w	r1, r5, #21
 800a56e:	458c      	cmp	ip, r1
 800a570:	bf38      	it	cc
 800a572:	2204      	movcc	r2, #4
 800a574:	9201      	str	r2, [sp, #4]
 800a576:	9a02      	ldr	r2, [sp, #8]
 800a578:	9303      	str	r3, [sp, #12]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d808      	bhi.n	800a590 <__multiply+0x98>
 800a57e:	2f00      	cmp	r7, #0
 800a580:	dc55      	bgt.n	800a62e <__multiply+0x136>
 800a582:	6107      	str	r7, [r0, #16]
 800a584:	b005      	add	sp, #20
 800a586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a58a:	f843 2b04 	str.w	r2, [r3], #4
 800a58e:	e7db      	b.n	800a548 <__multiply+0x50>
 800a590:	f8b3 a000 	ldrh.w	sl, [r3]
 800a594:	f1ba 0f00 	cmp.w	sl, #0
 800a598:	d020      	beq.n	800a5dc <__multiply+0xe4>
 800a59a:	f105 0e14 	add.w	lr, r5, #20
 800a59e:	46b1      	mov	r9, r6
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a5a6:	f8d9 b000 	ldr.w	fp, [r9]
 800a5aa:	b2a1      	uxth	r1, r4
 800a5ac:	fa1f fb8b 	uxth.w	fp, fp
 800a5b0:	fb0a b101 	mla	r1, sl, r1, fp
 800a5b4:	4411      	add	r1, r2
 800a5b6:	f8d9 2000 	ldr.w	r2, [r9]
 800a5ba:	0c24      	lsrs	r4, r4, #16
 800a5bc:	0c12      	lsrs	r2, r2, #16
 800a5be:	fb0a 2404 	mla	r4, sl, r4, r2
 800a5c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a5c6:	b289      	uxth	r1, r1
 800a5c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a5cc:	45f4      	cmp	ip, lr
 800a5ce:	f849 1b04 	str.w	r1, [r9], #4
 800a5d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a5d6:	d8e4      	bhi.n	800a5a2 <__multiply+0xaa>
 800a5d8:	9901      	ldr	r1, [sp, #4]
 800a5da:	5072      	str	r2, [r6, r1]
 800a5dc:	9a03      	ldr	r2, [sp, #12]
 800a5de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	f1b9 0f00 	cmp.w	r9, #0
 800a5e8:	d01f      	beq.n	800a62a <__multiply+0x132>
 800a5ea:	6834      	ldr	r4, [r6, #0]
 800a5ec:	f105 0114 	add.w	r1, r5, #20
 800a5f0:	46b6      	mov	lr, r6
 800a5f2:	f04f 0a00 	mov.w	sl, #0
 800a5f6:	880a      	ldrh	r2, [r1, #0]
 800a5f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a5fc:	fb09 b202 	mla	r2, r9, r2, fp
 800a600:	4492      	add	sl, r2
 800a602:	b2a4      	uxth	r4, r4
 800a604:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a608:	f84e 4b04 	str.w	r4, [lr], #4
 800a60c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a610:	f8be 2000 	ldrh.w	r2, [lr]
 800a614:	0c24      	lsrs	r4, r4, #16
 800a616:	fb09 2404 	mla	r4, r9, r4, r2
 800a61a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a61e:	458c      	cmp	ip, r1
 800a620:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a624:	d8e7      	bhi.n	800a5f6 <__multiply+0xfe>
 800a626:	9a01      	ldr	r2, [sp, #4]
 800a628:	50b4      	str	r4, [r6, r2]
 800a62a:	3604      	adds	r6, #4
 800a62c:	e7a3      	b.n	800a576 <__multiply+0x7e>
 800a62e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1a5      	bne.n	800a582 <__multiply+0x8a>
 800a636:	3f01      	subs	r7, #1
 800a638:	e7a1      	b.n	800a57e <__multiply+0x86>
 800a63a:	bf00      	nop
 800a63c:	08035cf4 	.word	0x08035cf4
 800a640:	08035de8 	.word	0x08035de8

0800a644 <__pow5mult>:
 800a644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a648:	4615      	mov	r5, r2
 800a64a:	f012 0203 	ands.w	r2, r2, #3
 800a64e:	4606      	mov	r6, r0
 800a650:	460f      	mov	r7, r1
 800a652:	d007      	beq.n	800a664 <__pow5mult+0x20>
 800a654:	4c25      	ldr	r4, [pc, #148]	; (800a6ec <__pow5mult+0xa8>)
 800a656:	3a01      	subs	r2, #1
 800a658:	2300      	movs	r3, #0
 800a65a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a65e:	f7ff fe51 	bl	800a304 <__multadd>
 800a662:	4607      	mov	r7, r0
 800a664:	10ad      	asrs	r5, r5, #2
 800a666:	d03d      	beq.n	800a6e4 <__pow5mult+0xa0>
 800a668:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a66a:	b97c      	cbnz	r4, 800a68c <__pow5mult+0x48>
 800a66c:	2010      	movs	r0, #16
 800a66e:	f7fc f8cb 	bl	8006808 <malloc>
 800a672:	4602      	mov	r2, r0
 800a674:	6270      	str	r0, [r6, #36]	; 0x24
 800a676:	b928      	cbnz	r0, 800a684 <__pow5mult+0x40>
 800a678:	4b1d      	ldr	r3, [pc, #116]	; (800a6f0 <__pow5mult+0xac>)
 800a67a:	481e      	ldr	r0, [pc, #120]	; (800a6f4 <__pow5mult+0xb0>)
 800a67c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a680:	f7fc f854 	bl	800672c <__assert_func>
 800a684:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a688:	6004      	str	r4, [r0, #0]
 800a68a:	60c4      	str	r4, [r0, #12]
 800a68c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a690:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a694:	b94c      	cbnz	r4, 800a6aa <__pow5mult+0x66>
 800a696:	f240 2171 	movw	r1, #625	; 0x271
 800a69a:	4630      	mov	r0, r6
 800a69c:	f7ff ff16 	bl	800a4cc <__i2b>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	6003      	str	r3, [r0, #0]
 800a6aa:	f04f 0900 	mov.w	r9, #0
 800a6ae:	07eb      	lsls	r3, r5, #31
 800a6b0:	d50a      	bpl.n	800a6c8 <__pow5mult+0x84>
 800a6b2:	4639      	mov	r1, r7
 800a6b4:	4622      	mov	r2, r4
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f7ff ff1e 	bl	800a4f8 <__multiply>
 800a6bc:	4639      	mov	r1, r7
 800a6be:	4680      	mov	r8, r0
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f7ff fdfd 	bl	800a2c0 <_Bfree>
 800a6c6:	4647      	mov	r7, r8
 800a6c8:	106d      	asrs	r5, r5, #1
 800a6ca:	d00b      	beq.n	800a6e4 <__pow5mult+0xa0>
 800a6cc:	6820      	ldr	r0, [r4, #0]
 800a6ce:	b938      	cbnz	r0, 800a6e0 <__pow5mult+0x9c>
 800a6d0:	4622      	mov	r2, r4
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f7ff ff0f 	bl	800a4f8 <__multiply>
 800a6da:	6020      	str	r0, [r4, #0]
 800a6dc:	f8c0 9000 	str.w	r9, [r0]
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	e7e4      	b.n	800a6ae <__pow5mult+0x6a>
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ea:	bf00      	nop
 800a6ec:	08035f38 	.word	0x08035f38
 800a6f0:	08035c7e 	.word	0x08035c7e
 800a6f4:	08035de8 	.word	0x08035de8

0800a6f8 <__lshift>:
 800a6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	6849      	ldr	r1, [r1, #4]
 800a700:	6923      	ldr	r3, [r4, #16]
 800a702:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a706:	68a3      	ldr	r3, [r4, #8]
 800a708:	4607      	mov	r7, r0
 800a70a:	4691      	mov	r9, r2
 800a70c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a710:	f108 0601 	add.w	r6, r8, #1
 800a714:	42b3      	cmp	r3, r6
 800a716:	db0b      	blt.n	800a730 <__lshift+0x38>
 800a718:	4638      	mov	r0, r7
 800a71a:	f7ff fd91 	bl	800a240 <_Balloc>
 800a71e:	4605      	mov	r5, r0
 800a720:	b948      	cbnz	r0, 800a736 <__lshift+0x3e>
 800a722:	4602      	mov	r2, r0
 800a724:	4b28      	ldr	r3, [pc, #160]	; (800a7c8 <__lshift+0xd0>)
 800a726:	4829      	ldr	r0, [pc, #164]	; (800a7cc <__lshift+0xd4>)
 800a728:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a72c:	f7fb fffe 	bl	800672c <__assert_func>
 800a730:	3101      	adds	r1, #1
 800a732:	005b      	lsls	r3, r3, #1
 800a734:	e7ee      	b.n	800a714 <__lshift+0x1c>
 800a736:	2300      	movs	r3, #0
 800a738:	f100 0114 	add.w	r1, r0, #20
 800a73c:	f100 0210 	add.w	r2, r0, #16
 800a740:	4618      	mov	r0, r3
 800a742:	4553      	cmp	r3, sl
 800a744:	db33      	blt.n	800a7ae <__lshift+0xb6>
 800a746:	6920      	ldr	r0, [r4, #16]
 800a748:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a74c:	f104 0314 	add.w	r3, r4, #20
 800a750:	f019 091f 	ands.w	r9, r9, #31
 800a754:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a758:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a75c:	d02b      	beq.n	800a7b6 <__lshift+0xbe>
 800a75e:	f1c9 0e20 	rsb	lr, r9, #32
 800a762:	468a      	mov	sl, r1
 800a764:	2200      	movs	r2, #0
 800a766:	6818      	ldr	r0, [r3, #0]
 800a768:	fa00 f009 	lsl.w	r0, r0, r9
 800a76c:	4302      	orrs	r2, r0
 800a76e:	f84a 2b04 	str.w	r2, [sl], #4
 800a772:	f853 2b04 	ldr.w	r2, [r3], #4
 800a776:	459c      	cmp	ip, r3
 800a778:	fa22 f20e 	lsr.w	r2, r2, lr
 800a77c:	d8f3      	bhi.n	800a766 <__lshift+0x6e>
 800a77e:	ebac 0304 	sub.w	r3, ip, r4
 800a782:	3b15      	subs	r3, #21
 800a784:	f023 0303 	bic.w	r3, r3, #3
 800a788:	3304      	adds	r3, #4
 800a78a:	f104 0015 	add.w	r0, r4, #21
 800a78e:	4584      	cmp	ip, r0
 800a790:	bf38      	it	cc
 800a792:	2304      	movcc	r3, #4
 800a794:	50ca      	str	r2, [r1, r3]
 800a796:	b10a      	cbz	r2, 800a79c <__lshift+0xa4>
 800a798:	f108 0602 	add.w	r6, r8, #2
 800a79c:	3e01      	subs	r6, #1
 800a79e:	4638      	mov	r0, r7
 800a7a0:	612e      	str	r6, [r5, #16]
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	f7ff fd8c 	bl	800a2c0 <_Bfree>
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	e7c5      	b.n	800a742 <__lshift+0x4a>
 800a7b6:	3904      	subs	r1, #4
 800a7b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7c0:	459c      	cmp	ip, r3
 800a7c2:	d8f9      	bhi.n	800a7b8 <__lshift+0xc0>
 800a7c4:	e7ea      	b.n	800a79c <__lshift+0xa4>
 800a7c6:	bf00      	nop
 800a7c8:	08035cf4 	.word	0x08035cf4
 800a7cc:	08035de8 	.word	0x08035de8

0800a7d0 <__mcmp>:
 800a7d0:	b530      	push	{r4, r5, lr}
 800a7d2:	6902      	ldr	r2, [r0, #16]
 800a7d4:	690c      	ldr	r4, [r1, #16]
 800a7d6:	1b12      	subs	r2, r2, r4
 800a7d8:	d10e      	bne.n	800a7f8 <__mcmp+0x28>
 800a7da:	f100 0314 	add.w	r3, r0, #20
 800a7de:	3114      	adds	r1, #20
 800a7e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7f0:	42a5      	cmp	r5, r4
 800a7f2:	d003      	beq.n	800a7fc <__mcmp+0x2c>
 800a7f4:	d305      	bcc.n	800a802 <__mcmp+0x32>
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	4610      	mov	r0, r2
 800a7fa:	bd30      	pop	{r4, r5, pc}
 800a7fc:	4283      	cmp	r3, r0
 800a7fe:	d3f3      	bcc.n	800a7e8 <__mcmp+0x18>
 800a800:	e7fa      	b.n	800a7f8 <__mcmp+0x28>
 800a802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a806:	e7f7      	b.n	800a7f8 <__mcmp+0x28>

0800a808 <__mdiff>:
 800a808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	460c      	mov	r4, r1
 800a80e:	4606      	mov	r6, r0
 800a810:	4611      	mov	r1, r2
 800a812:	4620      	mov	r0, r4
 800a814:	4617      	mov	r7, r2
 800a816:	f7ff ffdb 	bl	800a7d0 <__mcmp>
 800a81a:	1e05      	subs	r5, r0, #0
 800a81c:	d110      	bne.n	800a840 <__mdiff+0x38>
 800a81e:	4629      	mov	r1, r5
 800a820:	4630      	mov	r0, r6
 800a822:	f7ff fd0d 	bl	800a240 <_Balloc>
 800a826:	b930      	cbnz	r0, 800a836 <__mdiff+0x2e>
 800a828:	4b39      	ldr	r3, [pc, #228]	; (800a910 <__mdiff+0x108>)
 800a82a:	4602      	mov	r2, r0
 800a82c:	f240 2132 	movw	r1, #562	; 0x232
 800a830:	4838      	ldr	r0, [pc, #224]	; (800a914 <__mdiff+0x10c>)
 800a832:	f7fb ff7b 	bl	800672c <__assert_func>
 800a836:	2301      	movs	r3, #1
 800a838:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a83c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a840:	bfa4      	itt	ge
 800a842:	463b      	movge	r3, r7
 800a844:	4627      	movge	r7, r4
 800a846:	4630      	mov	r0, r6
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	bfa6      	itte	ge
 800a84c:	461c      	movge	r4, r3
 800a84e:	2500      	movge	r5, #0
 800a850:	2501      	movlt	r5, #1
 800a852:	f7ff fcf5 	bl	800a240 <_Balloc>
 800a856:	b920      	cbnz	r0, 800a862 <__mdiff+0x5a>
 800a858:	4b2d      	ldr	r3, [pc, #180]	; (800a910 <__mdiff+0x108>)
 800a85a:	4602      	mov	r2, r0
 800a85c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a860:	e7e6      	b.n	800a830 <__mdiff+0x28>
 800a862:	693e      	ldr	r6, [r7, #16]
 800a864:	60c5      	str	r5, [r0, #12]
 800a866:	6925      	ldr	r5, [r4, #16]
 800a868:	f107 0114 	add.w	r1, r7, #20
 800a86c:	f104 0914 	add.w	r9, r4, #20
 800a870:	f100 0e14 	add.w	lr, r0, #20
 800a874:	f107 0210 	add.w	r2, r7, #16
 800a878:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a87c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a880:	46f2      	mov	sl, lr
 800a882:	2700      	movs	r7, #0
 800a884:	f859 3b04 	ldr.w	r3, [r9], #4
 800a888:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a88c:	fa1f f883 	uxth.w	r8, r3
 800a890:	fa17 f78b 	uxtah	r7, r7, fp
 800a894:	0c1b      	lsrs	r3, r3, #16
 800a896:	eba7 0808 	sub.w	r8, r7, r8
 800a89a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a89e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a8a2:	fa1f f888 	uxth.w	r8, r8
 800a8a6:	141f      	asrs	r7, r3, #16
 800a8a8:	454d      	cmp	r5, r9
 800a8aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a8ae:	f84a 3b04 	str.w	r3, [sl], #4
 800a8b2:	d8e7      	bhi.n	800a884 <__mdiff+0x7c>
 800a8b4:	1b2b      	subs	r3, r5, r4
 800a8b6:	3b15      	subs	r3, #21
 800a8b8:	f023 0303 	bic.w	r3, r3, #3
 800a8bc:	3304      	adds	r3, #4
 800a8be:	3415      	adds	r4, #21
 800a8c0:	42a5      	cmp	r5, r4
 800a8c2:	bf38      	it	cc
 800a8c4:	2304      	movcc	r3, #4
 800a8c6:	4419      	add	r1, r3
 800a8c8:	4473      	add	r3, lr
 800a8ca:	469e      	mov	lr, r3
 800a8cc:	460d      	mov	r5, r1
 800a8ce:	4565      	cmp	r5, ip
 800a8d0:	d30e      	bcc.n	800a8f0 <__mdiff+0xe8>
 800a8d2:	f10c 0203 	add.w	r2, ip, #3
 800a8d6:	1a52      	subs	r2, r2, r1
 800a8d8:	f022 0203 	bic.w	r2, r2, #3
 800a8dc:	3903      	subs	r1, #3
 800a8de:	458c      	cmp	ip, r1
 800a8e0:	bf38      	it	cc
 800a8e2:	2200      	movcc	r2, #0
 800a8e4:	441a      	add	r2, r3
 800a8e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a8ea:	b17b      	cbz	r3, 800a90c <__mdiff+0x104>
 800a8ec:	6106      	str	r6, [r0, #16]
 800a8ee:	e7a5      	b.n	800a83c <__mdiff+0x34>
 800a8f0:	f855 8b04 	ldr.w	r8, [r5], #4
 800a8f4:	fa17 f488 	uxtah	r4, r7, r8
 800a8f8:	1422      	asrs	r2, r4, #16
 800a8fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a8fe:	b2a4      	uxth	r4, r4
 800a900:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a904:	f84e 4b04 	str.w	r4, [lr], #4
 800a908:	1417      	asrs	r7, r2, #16
 800a90a:	e7e0      	b.n	800a8ce <__mdiff+0xc6>
 800a90c:	3e01      	subs	r6, #1
 800a90e:	e7ea      	b.n	800a8e6 <__mdiff+0xde>
 800a910:	08035cf4 	.word	0x08035cf4
 800a914:	08035de8 	.word	0x08035de8

0800a918 <__ulp>:
 800a918:	b082      	sub	sp, #8
 800a91a:	ed8d 0b00 	vstr	d0, [sp]
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	4912      	ldr	r1, [pc, #72]	; (800a96c <__ulp+0x54>)
 800a922:	4019      	ands	r1, r3
 800a924:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a928:	2900      	cmp	r1, #0
 800a92a:	dd05      	ble.n	800a938 <__ulp+0x20>
 800a92c:	2200      	movs	r2, #0
 800a92e:	460b      	mov	r3, r1
 800a930:	ec43 2b10 	vmov	d0, r2, r3
 800a934:	b002      	add	sp, #8
 800a936:	4770      	bx	lr
 800a938:	4249      	negs	r1, r1
 800a93a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a93e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a942:	f04f 0200 	mov.w	r2, #0
 800a946:	f04f 0300 	mov.w	r3, #0
 800a94a:	da04      	bge.n	800a956 <__ulp+0x3e>
 800a94c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a950:	fa41 f300 	asr.w	r3, r1, r0
 800a954:	e7ec      	b.n	800a930 <__ulp+0x18>
 800a956:	f1a0 0114 	sub.w	r1, r0, #20
 800a95a:	291e      	cmp	r1, #30
 800a95c:	bfda      	itte	le
 800a95e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a962:	fa20 f101 	lsrle.w	r1, r0, r1
 800a966:	2101      	movgt	r1, #1
 800a968:	460a      	mov	r2, r1
 800a96a:	e7e1      	b.n	800a930 <__ulp+0x18>
 800a96c:	7ff00000 	.word	0x7ff00000

0800a970 <__b2d>:
 800a970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a972:	6905      	ldr	r5, [r0, #16]
 800a974:	f100 0714 	add.w	r7, r0, #20
 800a978:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a97c:	1f2e      	subs	r6, r5, #4
 800a97e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a982:	4620      	mov	r0, r4
 800a984:	f7ff fd52 	bl	800a42c <__hi0bits>
 800a988:	f1c0 0320 	rsb	r3, r0, #32
 800a98c:	280a      	cmp	r0, #10
 800a98e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aa0c <__b2d+0x9c>
 800a992:	600b      	str	r3, [r1, #0]
 800a994:	dc14      	bgt.n	800a9c0 <__b2d+0x50>
 800a996:	f1c0 0e0b 	rsb	lr, r0, #11
 800a99a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a99e:	42b7      	cmp	r7, r6
 800a9a0:	ea41 030c 	orr.w	r3, r1, ip
 800a9a4:	bf34      	ite	cc
 800a9a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9aa:	2100      	movcs	r1, #0
 800a9ac:	3015      	adds	r0, #21
 800a9ae:	fa04 f000 	lsl.w	r0, r4, r0
 800a9b2:	fa21 f10e 	lsr.w	r1, r1, lr
 800a9b6:	ea40 0201 	orr.w	r2, r0, r1
 800a9ba:	ec43 2b10 	vmov	d0, r2, r3
 800a9be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9c0:	42b7      	cmp	r7, r6
 800a9c2:	bf3a      	itte	cc
 800a9c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9c8:	f1a5 0608 	subcc.w	r6, r5, #8
 800a9cc:	2100      	movcs	r1, #0
 800a9ce:	380b      	subs	r0, #11
 800a9d0:	d017      	beq.n	800aa02 <__b2d+0x92>
 800a9d2:	f1c0 0c20 	rsb	ip, r0, #32
 800a9d6:	fa04 f500 	lsl.w	r5, r4, r0
 800a9da:	42be      	cmp	r6, r7
 800a9dc:	fa21 f40c 	lsr.w	r4, r1, ip
 800a9e0:	ea45 0504 	orr.w	r5, r5, r4
 800a9e4:	bf8c      	ite	hi
 800a9e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a9ea:	2400      	movls	r4, #0
 800a9ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a9f0:	fa01 f000 	lsl.w	r0, r1, r0
 800a9f4:	fa24 f40c 	lsr.w	r4, r4, ip
 800a9f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9fc:	ea40 0204 	orr.w	r2, r0, r4
 800aa00:	e7db      	b.n	800a9ba <__b2d+0x4a>
 800aa02:	ea44 030c 	orr.w	r3, r4, ip
 800aa06:	460a      	mov	r2, r1
 800aa08:	e7d7      	b.n	800a9ba <__b2d+0x4a>
 800aa0a:	bf00      	nop
 800aa0c:	3ff00000 	.word	0x3ff00000

0800aa10 <__d2b>:
 800aa10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa14:	4689      	mov	r9, r1
 800aa16:	2101      	movs	r1, #1
 800aa18:	ec57 6b10 	vmov	r6, r7, d0
 800aa1c:	4690      	mov	r8, r2
 800aa1e:	f7ff fc0f 	bl	800a240 <_Balloc>
 800aa22:	4604      	mov	r4, r0
 800aa24:	b930      	cbnz	r0, 800aa34 <__d2b+0x24>
 800aa26:	4602      	mov	r2, r0
 800aa28:	4b25      	ldr	r3, [pc, #148]	; (800aac0 <__d2b+0xb0>)
 800aa2a:	4826      	ldr	r0, [pc, #152]	; (800aac4 <__d2b+0xb4>)
 800aa2c:	f240 310a 	movw	r1, #778	; 0x30a
 800aa30:	f7fb fe7c 	bl	800672c <__assert_func>
 800aa34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa3c:	bb35      	cbnz	r5, 800aa8c <__d2b+0x7c>
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	d028      	beq.n	800aa96 <__d2b+0x86>
 800aa44:	4668      	mov	r0, sp
 800aa46:	9600      	str	r6, [sp, #0]
 800aa48:	f7ff fd10 	bl	800a46c <__lo0bits>
 800aa4c:	9900      	ldr	r1, [sp, #0]
 800aa4e:	b300      	cbz	r0, 800aa92 <__d2b+0x82>
 800aa50:	9a01      	ldr	r2, [sp, #4]
 800aa52:	f1c0 0320 	rsb	r3, r0, #32
 800aa56:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5a:	430b      	orrs	r3, r1
 800aa5c:	40c2      	lsrs	r2, r0
 800aa5e:	6163      	str	r3, [r4, #20]
 800aa60:	9201      	str	r2, [sp, #4]
 800aa62:	9b01      	ldr	r3, [sp, #4]
 800aa64:	61a3      	str	r3, [r4, #24]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bf14      	ite	ne
 800aa6a:	2202      	movne	r2, #2
 800aa6c:	2201      	moveq	r2, #1
 800aa6e:	6122      	str	r2, [r4, #16]
 800aa70:	b1d5      	cbz	r5, 800aaa8 <__d2b+0x98>
 800aa72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa76:	4405      	add	r5, r0
 800aa78:	f8c9 5000 	str.w	r5, [r9]
 800aa7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa80:	f8c8 0000 	str.w	r0, [r8]
 800aa84:	4620      	mov	r0, r4
 800aa86:	b003      	add	sp, #12
 800aa88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa90:	e7d5      	b.n	800aa3e <__d2b+0x2e>
 800aa92:	6161      	str	r1, [r4, #20]
 800aa94:	e7e5      	b.n	800aa62 <__d2b+0x52>
 800aa96:	a801      	add	r0, sp, #4
 800aa98:	f7ff fce8 	bl	800a46c <__lo0bits>
 800aa9c:	9b01      	ldr	r3, [sp, #4]
 800aa9e:	6163      	str	r3, [r4, #20]
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	6122      	str	r2, [r4, #16]
 800aaa4:	3020      	adds	r0, #32
 800aaa6:	e7e3      	b.n	800aa70 <__d2b+0x60>
 800aaa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aab0:	f8c9 0000 	str.w	r0, [r9]
 800aab4:	6918      	ldr	r0, [r3, #16]
 800aab6:	f7ff fcb9 	bl	800a42c <__hi0bits>
 800aaba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aabe:	e7df      	b.n	800aa80 <__d2b+0x70>
 800aac0:	08035cf4 	.word	0x08035cf4
 800aac4:	08035de8 	.word	0x08035de8

0800aac8 <__ratio>:
 800aac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	4688      	mov	r8, r1
 800aace:	4669      	mov	r1, sp
 800aad0:	4681      	mov	r9, r0
 800aad2:	f7ff ff4d 	bl	800a970 <__b2d>
 800aad6:	a901      	add	r1, sp, #4
 800aad8:	4640      	mov	r0, r8
 800aada:	ec55 4b10 	vmov	r4, r5, d0
 800aade:	f7ff ff47 	bl	800a970 <__b2d>
 800aae2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aae6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aaea:	eba3 0c02 	sub.w	ip, r3, r2
 800aaee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aaf2:	1a9b      	subs	r3, r3, r2
 800aaf4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aaf8:	ec51 0b10 	vmov	r0, r1, d0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	bfd6      	itet	le
 800ab00:	460a      	movle	r2, r1
 800ab02:	462a      	movgt	r2, r5
 800ab04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab08:	468b      	mov	fp, r1
 800ab0a:	462f      	mov	r7, r5
 800ab0c:	bfd4      	ite	le
 800ab0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab16:	4620      	mov	r0, r4
 800ab18:	ee10 2a10 	vmov	r2, s0
 800ab1c:	465b      	mov	r3, fp
 800ab1e:	4639      	mov	r1, r7
 800ab20:	f7f5 feac 	bl	800087c <__aeabi_ddiv>
 800ab24:	ec41 0b10 	vmov	d0, r0, r1
 800ab28:	b003      	add	sp, #12
 800ab2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab2e <__copybits>:
 800ab2e:	3901      	subs	r1, #1
 800ab30:	b570      	push	{r4, r5, r6, lr}
 800ab32:	1149      	asrs	r1, r1, #5
 800ab34:	6914      	ldr	r4, [r2, #16]
 800ab36:	3101      	adds	r1, #1
 800ab38:	f102 0314 	add.w	r3, r2, #20
 800ab3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab44:	1f05      	subs	r5, r0, #4
 800ab46:	42a3      	cmp	r3, r4
 800ab48:	d30c      	bcc.n	800ab64 <__copybits+0x36>
 800ab4a:	1aa3      	subs	r3, r4, r2
 800ab4c:	3b11      	subs	r3, #17
 800ab4e:	f023 0303 	bic.w	r3, r3, #3
 800ab52:	3211      	adds	r2, #17
 800ab54:	42a2      	cmp	r2, r4
 800ab56:	bf88      	it	hi
 800ab58:	2300      	movhi	r3, #0
 800ab5a:	4418      	add	r0, r3
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4288      	cmp	r0, r1
 800ab60:	d305      	bcc.n	800ab6e <__copybits+0x40>
 800ab62:	bd70      	pop	{r4, r5, r6, pc}
 800ab64:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab68:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab6c:	e7eb      	b.n	800ab46 <__copybits+0x18>
 800ab6e:	f840 3b04 	str.w	r3, [r0], #4
 800ab72:	e7f4      	b.n	800ab5e <__copybits+0x30>

0800ab74 <__any_on>:
 800ab74:	f100 0214 	add.w	r2, r0, #20
 800ab78:	6900      	ldr	r0, [r0, #16]
 800ab7a:	114b      	asrs	r3, r1, #5
 800ab7c:	4298      	cmp	r0, r3
 800ab7e:	b510      	push	{r4, lr}
 800ab80:	db11      	blt.n	800aba6 <__any_on+0x32>
 800ab82:	dd0a      	ble.n	800ab9a <__any_on+0x26>
 800ab84:	f011 011f 	ands.w	r1, r1, #31
 800ab88:	d007      	beq.n	800ab9a <__any_on+0x26>
 800ab8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab8e:	fa24 f001 	lsr.w	r0, r4, r1
 800ab92:	fa00 f101 	lsl.w	r1, r0, r1
 800ab96:	428c      	cmp	r4, r1
 800ab98:	d10b      	bne.n	800abb2 <__any_on+0x3e>
 800ab9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d803      	bhi.n	800abaa <__any_on+0x36>
 800aba2:	2000      	movs	r0, #0
 800aba4:	bd10      	pop	{r4, pc}
 800aba6:	4603      	mov	r3, r0
 800aba8:	e7f7      	b.n	800ab9a <__any_on+0x26>
 800abaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800abae:	2900      	cmp	r1, #0
 800abb0:	d0f5      	beq.n	800ab9e <__any_on+0x2a>
 800abb2:	2001      	movs	r0, #1
 800abb4:	e7f6      	b.n	800aba4 <__any_on+0x30>

0800abb6 <_calloc_r>:
 800abb6:	b513      	push	{r0, r1, r4, lr}
 800abb8:	434a      	muls	r2, r1
 800abba:	4611      	mov	r1, r2
 800abbc:	9201      	str	r2, [sp, #4]
 800abbe:	f7fb fe83 	bl	80068c8 <_malloc_r>
 800abc2:	4604      	mov	r4, r0
 800abc4:	b118      	cbz	r0, 800abce <_calloc_r+0x18>
 800abc6:	9a01      	ldr	r2, [sp, #4]
 800abc8:	2100      	movs	r1, #0
 800abca:	f7fb fe25 	bl	8006818 <memset>
 800abce:	4620      	mov	r0, r4
 800abd0:	b002      	add	sp, #8
 800abd2:	bd10      	pop	{r4, pc}

0800abd4 <_realloc_r>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	4607      	mov	r7, r0
 800abd8:	4614      	mov	r4, r2
 800abda:	460e      	mov	r6, r1
 800abdc:	b921      	cbnz	r1, 800abe8 <_realloc_r+0x14>
 800abde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800abe2:	4611      	mov	r1, r2
 800abe4:	f7fb be70 	b.w	80068c8 <_malloc_r>
 800abe8:	b922      	cbnz	r2, 800abf4 <_realloc_r+0x20>
 800abea:	f7fb fe1d 	bl	8006828 <_free_r>
 800abee:	4625      	mov	r5, r4
 800abf0:	4628      	mov	r0, r5
 800abf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abf4:	f000 fa74 	bl	800b0e0 <_malloc_usable_size_r>
 800abf8:	42a0      	cmp	r0, r4
 800abfa:	d20f      	bcs.n	800ac1c <_realloc_r+0x48>
 800abfc:	4621      	mov	r1, r4
 800abfe:	4638      	mov	r0, r7
 800ac00:	f7fb fe62 	bl	80068c8 <_malloc_r>
 800ac04:	4605      	mov	r5, r0
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d0f2      	beq.n	800abf0 <_realloc_r+0x1c>
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	f7ff fae3 	bl	800a1d8 <memcpy>
 800ac12:	4631      	mov	r1, r6
 800ac14:	4638      	mov	r0, r7
 800ac16:	f7fb fe07 	bl	8006828 <_free_r>
 800ac1a:	e7e9      	b.n	800abf0 <_realloc_r+0x1c>
 800ac1c:	4635      	mov	r5, r6
 800ac1e:	e7e7      	b.n	800abf0 <_realloc_r+0x1c>

0800ac20 <__ssputs_r>:
 800ac20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac24:	688e      	ldr	r6, [r1, #8]
 800ac26:	429e      	cmp	r6, r3
 800ac28:	4682      	mov	sl, r0
 800ac2a:	460c      	mov	r4, r1
 800ac2c:	4690      	mov	r8, r2
 800ac2e:	461f      	mov	r7, r3
 800ac30:	d838      	bhi.n	800aca4 <__ssputs_r+0x84>
 800ac32:	898a      	ldrh	r2, [r1, #12]
 800ac34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac38:	d032      	beq.n	800aca0 <__ssputs_r+0x80>
 800ac3a:	6825      	ldr	r5, [r4, #0]
 800ac3c:	6909      	ldr	r1, [r1, #16]
 800ac3e:	eba5 0901 	sub.w	r9, r5, r1
 800ac42:	6965      	ldr	r5, [r4, #20]
 800ac44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	444b      	add	r3, r9
 800ac50:	106d      	asrs	r5, r5, #1
 800ac52:	429d      	cmp	r5, r3
 800ac54:	bf38      	it	cc
 800ac56:	461d      	movcc	r5, r3
 800ac58:	0553      	lsls	r3, r2, #21
 800ac5a:	d531      	bpl.n	800acc0 <__ssputs_r+0xa0>
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	f7fb fe33 	bl	80068c8 <_malloc_r>
 800ac62:	4606      	mov	r6, r0
 800ac64:	b950      	cbnz	r0, 800ac7c <__ssputs_r+0x5c>
 800ac66:	230c      	movs	r3, #12
 800ac68:	f8ca 3000 	str.w	r3, [sl]
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac72:	81a3      	strh	r3, [r4, #12]
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7c:	6921      	ldr	r1, [r4, #16]
 800ac7e:	464a      	mov	r2, r9
 800ac80:	f7ff faaa 	bl	800a1d8 <memcpy>
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac8e:	81a3      	strh	r3, [r4, #12]
 800ac90:	6126      	str	r6, [r4, #16]
 800ac92:	6165      	str	r5, [r4, #20]
 800ac94:	444e      	add	r6, r9
 800ac96:	eba5 0509 	sub.w	r5, r5, r9
 800ac9a:	6026      	str	r6, [r4, #0]
 800ac9c:	60a5      	str	r5, [r4, #8]
 800ac9e:	463e      	mov	r6, r7
 800aca0:	42be      	cmp	r6, r7
 800aca2:	d900      	bls.n	800aca6 <__ssputs_r+0x86>
 800aca4:	463e      	mov	r6, r7
 800aca6:	4632      	mov	r2, r6
 800aca8:	6820      	ldr	r0, [r4, #0]
 800acaa:	4641      	mov	r1, r8
 800acac:	f7ff faa2 	bl	800a1f4 <memmove>
 800acb0:	68a3      	ldr	r3, [r4, #8]
 800acb2:	6822      	ldr	r2, [r4, #0]
 800acb4:	1b9b      	subs	r3, r3, r6
 800acb6:	4432      	add	r2, r6
 800acb8:	60a3      	str	r3, [r4, #8]
 800acba:	6022      	str	r2, [r4, #0]
 800acbc:	2000      	movs	r0, #0
 800acbe:	e7db      	b.n	800ac78 <__ssputs_r+0x58>
 800acc0:	462a      	mov	r2, r5
 800acc2:	f7ff ff87 	bl	800abd4 <_realloc_r>
 800acc6:	4606      	mov	r6, r0
 800acc8:	2800      	cmp	r0, #0
 800acca:	d1e1      	bne.n	800ac90 <__ssputs_r+0x70>
 800accc:	6921      	ldr	r1, [r4, #16]
 800acce:	4650      	mov	r0, sl
 800acd0:	f7fb fdaa 	bl	8006828 <_free_r>
 800acd4:	e7c7      	b.n	800ac66 <__ssputs_r+0x46>
	...

0800acd8 <_svfiprintf_r>:
 800acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acdc:	4698      	mov	r8, r3
 800acde:	898b      	ldrh	r3, [r1, #12]
 800ace0:	061b      	lsls	r3, r3, #24
 800ace2:	b09d      	sub	sp, #116	; 0x74
 800ace4:	4607      	mov	r7, r0
 800ace6:	460d      	mov	r5, r1
 800ace8:	4614      	mov	r4, r2
 800acea:	d50e      	bpl.n	800ad0a <_svfiprintf_r+0x32>
 800acec:	690b      	ldr	r3, [r1, #16]
 800acee:	b963      	cbnz	r3, 800ad0a <_svfiprintf_r+0x32>
 800acf0:	2140      	movs	r1, #64	; 0x40
 800acf2:	f7fb fde9 	bl	80068c8 <_malloc_r>
 800acf6:	6028      	str	r0, [r5, #0]
 800acf8:	6128      	str	r0, [r5, #16]
 800acfa:	b920      	cbnz	r0, 800ad06 <_svfiprintf_r+0x2e>
 800acfc:	230c      	movs	r3, #12
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad04:	e0d1      	b.n	800aeaa <_svfiprintf_r+0x1d2>
 800ad06:	2340      	movs	r3, #64	; 0x40
 800ad08:	616b      	str	r3, [r5, #20]
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad0e:	2320      	movs	r3, #32
 800ad10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad14:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad18:	2330      	movs	r3, #48	; 0x30
 800ad1a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aec4 <_svfiprintf_r+0x1ec>
 800ad1e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad22:	f04f 0901 	mov.w	r9, #1
 800ad26:	4623      	mov	r3, r4
 800ad28:	469a      	mov	sl, r3
 800ad2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad2e:	b10a      	cbz	r2, 800ad34 <_svfiprintf_r+0x5c>
 800ad30:	2a25      	cmp	r2, #37	; 0x25
 800ad32:	d1f9      	bne.n	800ad28 <_svfiprintf_r+0x50>
 800ad34:	ebba 0b04 	subs.w	fp, sl, r4
 800ad38:	d00b      	beq.n	800ad52 <_svfiprintf_r+0x7a>
 800ad3a:	465b      	mov	r3, fp
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	4629      	mov	r1, r5
 800ad40:	4638      	mov	r0, r7
 800ad42:	f7ff ff6d 	bl	800ac20 <__ssputs_r>
 800ad46:	3001      	adds	r0, #1
 800ad48:	f000 80aa 	beq.w	800aea0 <_svfiprintf_r+0x1c8>
 800ad4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad4e:	445a      	add	r2, fp
 800ad50:	9209      	str	r2, [sp, #36]	; 0x24
 800ad52:	f89a 3000 	ldrb.w	r3, [sl]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	f000 80a2 	beq.w	800aea0 <_svfiprintf_r+0x1c8>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad66:	f10a 0a01 	add.w	sl, sl, #1
 800ad6a:	9304      	str	r3, [sp, #16]
 800ad6c:	9307      	str	r3, [sp, #28]
 800ad6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad72:	931a      	str	r3, [sp, #104]	; 0x68
 800ad74:	4654      	mov	r4, sl
 800ad76:	2205      	movs	r2, #5
 800ad78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad7c:	4851      	ldr	r0, [pc, #324]	; (800aec4 <_svfiprintf_r+0x1ec>)
 800ad7e:	f7f5 fa47 	bl	8000210 <memchr>
 800ad82:	9a04      	ldr	r2, [sp, #16]
 800ad84:	b9d8      	cbnz	r0, 800adbe <_svfiprintf_r+0xe6>
 800ad86:	06d0      	lsls	r0, r2, #27
 800ad88:	bf44      	itt	mi
 800ad8a:	2320      	movmi	r3, #32
 800ad8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad90:	0711      	lsls	r1, r2, #28
 800ad92:	bf44      	itt	mi
 800ad94:	232b      	movmi	r3, #43	; 0x2b
 800ad96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ad9e:	2b2a      	cmp	r3, #42	; 0x2a
 800ada0:	d015      	beq.n	800adce <_svfiprintf_r+0xf6>
 800ada2:	9a07      	ldr	r2, [sp, #28]
 800ada4:	4654      	mov	r4, sl
 800ada6:	2000      	movs	r0, #0
 800ada8:	f04f 0c0a 	mov.w	ip, #10
 800adac:	4621      	mov	r1, r4
 800adae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adb2:	3b30      	subs	r3, #48	; 0x30
 800adb4:	2b09      	cmp	r3, #9
 800adb6:	d94e      	bls.n	800ae56 <_svfiprintf_r+0x17e>
 800adb8:	b1b0      	cbz	r0, 800ade8 <_svfiprintf_r+0x110>
 800adba:	9207      	str	r2, [sp, #28]
 800adbc:	e014      	b.n	800ade8 <_svfiprintf_r+0x110>
 800adbe:	eba0 0308 	sub.w	r3, r0, r8
 800adc2:	fa09 f303 	lsl.w	r3, r9, r3
 800adc6:	4313      	orrs	r3, r2
 800adc8:	9304      	str	r3, [sp, #16]
 800adca:	46a2      	mov	sl, r4
 800adcc:	e7d2      	b.n	800ad74 <_svfiprintf_r+0x9c>
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	1d19      	adds	r1, r3, #4
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	9103      	str	r1, [sp, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	bfbb      	ittet	lt
 800adda:	425b      	neglt	r3, r3
 800addc:	f042 0202 	orrlt.w	r2, r2, #2
 800ade0:	9307      	strge	r3, [sp, #28]
 800ade2:	9307      	strlt	r3, [sp, #28]
 800ade4:	bfb8      	it	lt
 800ade6:	9204      	strlt	r2, [sp, #16]
 800ade8:	7823      	ldrb	r3, [r4, #0]
 800adea:	2b2e      	cmp	r3, #46	; 0x2e
 800adec:	d10c      	bne.n	800ae08 <_svfiprintf_r+0x130>
 800adee:	7863      	ldrb	r3, [r4, #1]
 800adf0:	2b2a      	cmp	r3, #42	; 0x2a
 800adf2:	d135      	bne.n	800ae60 <_svfiprintf_r+0x188>
 800adf4:	9b03      	ldr	r3, [sp, #12]
 800adf6:	1d1a      	adds	r2, r3, #4
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	9203      	str	r2, [sp, #12]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	bfb8      	it	lt
 800ae00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae04:	3402      	adds	r4, #2
 800ae06:	9305      	str	r3, [sp, #20]
 800ae08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aed4 <_svfiprintf_r+0x1fc>
 800ae0c:	7821      	ldrb	r1, [r4, #0]
 800ae0e:	2203      	movs	r2, #3
 800ae10:	4650      	mov	r0, sl
 800ae12:	f7f5 f9fd 	bl	8000210 <memchr>
 800ae16:	b140      	cbz	r0, 800ae2a <_svfiprintf_r+0x152>
 800ae18:	2340      	movs	r3, #64	; 0x40
 800ae1a:	eba0 000a 	sub.w	r0, r0, sl
 800ae1e:	fa03 f000 	lsl.w	r0, r3, r0
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	4303      	orrs	r3, r0
 800ae26:	3401      	adds	r4, #1
 800ae28:	9304      	str	r3, [sp, #16]
 800ae2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2e:	4826      	ldr	r0, [pc, #152]	; (800aec8 <_svfiprintf_r+0x1f0>)
 800ae30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae34:	2206      	movs	r2, #6
 800ae36:	f7f5 f9eb 	bl	8000210 <memchr>
 800ae3a:	2800      	cmp	r0, #0
 800ae3c:	d038      	beq.n	800aeb0 <_svfiprintf_r+0x1d8>
 800ae3e:	4b23      	ldr	r3, [pc, #140]	; (800aecc <_svfiprintf_r+0x1f4>)
 800ae40:	bb1b      	cbnz	r3, 800ae8a <_svfiprintf_r+0x1b2>
 800ae42:	9b03      	ldr	r3, [sp, #12]
 800ae44:	3307      	adds	r3, #7
 800ae46:	f023 0307 	bic.w	r3, r3, #7
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	9303      	str	r3, [sp, #12]
 800ae4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae50:	4433      	add	r3, r6
 800ae52:	9309      	str	r3, [sp, #36]	; 0x24
 800ae54:	e767      	b.n	800ad26 <_svfiprintf_r+0x4e>
 800ae56:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	2001      	movs	r0, #1
 800ae5e:	e7a5      	b.n	800adac <_svfiprintf_r+0xd4>
 800ae60:	2300      	movs	r3, #0
 800ae62:	3401      	adds	r4, #1
 800ae64:	9305      	str	r3, [sp, #20]
 800ae66:	4619      	mov	r1, r3
 800ae68:	f04f 0c0a 	mov.w	ip, #10
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae72:	3a30      	subs	r2, #48	; 0x30
 800ae74:	2a09      	cmp	r2, #9
 800ae76:	d903      	bls.n	800ae80 <_svfiprintf_r+0x1a8>
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0c5      	beq.n	800ae08 <_svfiprintf_r+0x130>
 800ae7c:	9105      	str	r1, [sp, #20]
 800ae7e:	e7c3      	b.n	800ae08 <_svfiprintf_r+0x130>
 800ae80:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae84:	4604      	mov	r4, r0
 800ae86:	2301      	movs	r3, #1
 800ae88:	e7f0      	b.n	800ae6c <_svfiprintf_r+0x194>
 800ae8a:	ab03      	add	r3, sp, #12
 800ae8c:	9300      	str	r3, [sp, #0]
 800ae8e:	462a      	mov	r2, r5
 800ae90:	4b0f      	ldr	r3, [pc, #60]	; (800aed0 <_svfiprintf_r+0x1f8>)
 800ae92:	a904      	add	r1, sp, #16
 800ae94:	4638      	mov	r0, r7
 800ae96:	f7fb ff6b 	bl	8006d70 <_printf_float>
 800ae9a:	1c42      	adds	r2, r0, #1
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	d1d6      	bne.n	800ae4e <_svfiprintf_r+0x176>
 800aea0:	89ab      	ldrh	r3, [r5, #12]
 800aea2:	065b      	lsls	r3, r3, #25
 800aea4:	f53f af2c 	bmi.w	800ad00 <_svfiprintf_r+0x28>
 800aea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeaa:	b01d      	add	sp, #116	; 0x74
 800aeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb0:	ab03      	add	r3, sp, #12
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <_svfiprintf_r+0x1f8>)
 800aeb8:	a904      	add	r1, sp, #16
 800aeba:	4638      	mov	r0, r7
 800aebc:	f7fc f9fc 	bl	80072b8 <_printf_i>
 800aec0:	e7eb      	b.n	800ae9a <_svfiprintf_r+0x1c2>
 800aec2:	bf00      	nop
 800aec4:	08035ad4 	.word	0x08035ad4
 800aec8:	08035ade 	.word	0x08035ade
 800aecc:	08006d71 	.word	0x08006d71
 800aed0:	0800ac21 	.word	0x0800ac21
 800aed4:	08035ada 	.word	0x08035ada

0800aed8 <nan>:
 800aed8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aee0 <nan+0x8>
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	00000000 	.word	0x00000000
 800aee4:	7ff80000 	.word	0x7ff80000

0800aee8 <_raise_r>:
 800aee8:	291f      	cmp	r1, #31
 800aeea:	b538      	push	{r3, r4, r5, lr}
 800aeec:	4604      	mov	r4, r0
 800aeee:	460d      	mov	r5, r1
 800aef0:	d904      	bls.n	800aefc <_raise_r+0x14>
 800aef2:	2316      	movs	r3, #22
 800aef4:	6003      	str	r3, [r0, #0]
 800aef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aefe:	b112      	cbz	r2, 800af06 <_raise_r+0x1e>
 800af00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af04:	b94b      	cbnz	r3, 800af1a <_raise_r+0x32>
 800af06:	4620      	mov	r0, r4
 800af08:	f000 f830 	bl	800af6c <_getpid_r>
 800af0c:	462a      	mov	r2, r5
 800af0e:	4601      	mov	r1, r0
 800af10:	4620      	mov	r0, r4
 800af12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af16:	f000 b817 	b.w	800af48 <_kill_r>
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d00a      	beq.n	800af34 <_raise_r+0x4c>
 800af1e:	1c59      	adds	r1, r3, #1
 800af20:	d103      	bne.n	800af2a <_raise_r+0x42>
 800af22:	2316      	movs	r3, #22
 800af24:	6003      	str	r3, [r0, #0]
 800af26:	2001      	movs	r0, #1
 800af28:	e7e7      	b.n	800aefa <_raise_r+0x12>
 800af2a:	2400      	movs	r4, #0
 800af2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af30:	4628      	mov	r0, r5
 800af32:	4798      	blx	r3
 800af34:	2000      	movs	r0, #0
 800af36:	e7e0      	b.n	800aefa <_raise_r+0x12>

0800af38 <raise>:
 800af38:	4b02      	ldr	r3, [pc, #8]	; (800af44 <raise+0xc>)
 800af3a:	4601      	mov	r1, r0
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	f7ff bfd3 	b.w	800aee8 <_raise_r>
 800af42:	bf00      	nop
 800af44:	2000000c 	.word	0x2000000c

0800af48 <_kill_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d07      	ldr	r5, [pc, #28]	; (800af68 <_kill_r+0x20>)
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	4611      	mov	r1, r2
 800af54:	602b      	str	r3, [r5, #0]
 800af56:	f7f7 fedd 	bl	8002d14 <_kill>
 800af5a:	1c43      	adds	r3, r0, #1
 800af5c:	d102      	bne.n	800af64 <_kill_r+0x1c>
 800af5e:	682b      	ldr	r3, [r5, #0]
 800af60:	b103      	cbz	r3, 800af64 <_kill_r+0x1c>
 800af62:	6023      	str	r3, [r4, #0]
 800af64:	bd38      	pop	{r3, r4, r5, pc}
 800af66:	bf00      	nop
 800af68:	200002f0 	.word	0x200002f0

0800af6c <_getpid_r>:
 800af6c:	f7f7 beca 	b.w	8002d04 <_getpid>

0800af70 <__sread>:
 800af70:	b510      	push	{r4, lr}
 800af72:	460c      	mov	r4, r1
 800af74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af78:	f000 f8ba 	bl	800b0f0 <_read_r>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	bfab      	itete	ge
 800af80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af82:	89a3      	ldrhlt	r3, [r4, #12]
 800af84:	181b      	addge	r3, r3, r0
 800af86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af8a:	bfac      	ite	ge
 800af8c:	6563      	strge	r3, [r4, #84]	; 0x54
 800af8e:	81a3      	strhlt	r3, [r4, #12]
 800af90:	bd10      	pop	{r4, pc}

0800af92 <__swrite>:
 800af92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af96:	461f      	mov	r7, r3
 800af98:	898b      	ldrh	r3, [r1, #12]
 800af9a:	05db      	lsls	r3, r3, #23
 800af9c:	4605      	mov	r5, r0
 800af9e:	460c      	mov	r4, r1
 800afa0:	4616      	mov	r6, r2
 800afa2:	d505      	bpl.n	800afb0 <__swrite+0x1e>
 800afa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa8:	2302      	movs	r3, #2
 800afaa:	2200      	movs	r2, #0
 800afac:	f000 f886 	bl	800b0bc <_lseek_r>
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afba:	81a3      	strh	r3, [r4, #12]
 800afbc:	4632      	mov	r2, r6
 800afbe:	463b      	mov	r3, r7
 800afc0:	4628      	mov	r0, r5
 800afc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afc6:	f000 b835 	b.w	800b034 <_write_r>

0800afca <__sseek>:
 800afca:	b510      	push	{r4, lr}
 800afcc:	460c      	mov	r4, r1
 800afce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd2:	f000 f873 	bl	800b0bc <_lseek_r>
 800afd6:	1c43      	adds	r3, r0, #1
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	bf15      	itete	ne
 800afdc:	6560      	strne	r0, [r4, #84]	; 0x54
 800afde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afe6:	81a3      	strheq	r3, [r4, #12]
 800afe8:	bf18      	it	ne
 800afea:	81a3      	strhne	r3, [r4, #12]
 800afec:	bd10      	pop	{r4, pc}

0800afee <__sclose>:
 800afee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aff2:	f000 b831 	b.w	800b058 <_close_r>

0800aff6 <strncmp>:
 800aff6:	b510      	push	{r4, lr}
 800aff8:	b16a      	cbz	r2, 800b016 <strncmp+0x20>
 800affa:	3901      	subs	r1, #1
 800affc:	1884      	adds	r4, r0, r2
 800affe:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b002:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b006:	4293      	cmp	r3, r2
 800b008:	d103      	bne.n	800b012 <strncmp+0x1c>
 800b00a:	42a0      	cmp	r0, r4
 800b00c:	d001      	beq.n	800b012 <strncmp+0x1c>
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1f5      	bne.n	800affe <strncmp+0x8>
 800b012:	1a98      	subs	r0, r3, r2
 800b014:	bd10      	pop	{r4, pc}
 800b016:	4610      	mov	r0, r2
 800b018:	e7fc      	b.n	800b014 <strncmp+0x1e>

0800b01a <__ascii_wctomb>:
 800b01a:	b149      	cbz	r1, 800b030 <__ascii_wctomb+0x16>
 800b01c:	2aff      	cmp	r2, #255	; 0xff
 800b01e:	bf85      	ittet	hi
 800b020:	238a      	movhi	r3, #138	; 0x8a
 800b022:	6003      	strhi	r3, [r0, #0]
 800b024:	700a      	strbls	r2, [r1, #0]
 800b026:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b02a:	bf98      	it	ls
 800b02c:	2001      	movls	r0, #1
 800b02e:	4770      	bx	lr
 800b030:	4608      	mov	r0, r1
 800b032:	4770      	bx	lr

0800b034 <_write_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d07      	ldr	r5, [pc, #28]	; (800b054 <_write_r+0x20>)
 800b038:	4604      	mov	r4, r0
 800b03a:	4608      	mov	r0, r1
 800b03c:	4611      	mov	r1, r2
 800b03e:	2200      	movs	r2, #0
 800b040:	602a      	str	r2, [r5, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	f7f7 fe9d 	bl	8002d82 <_write>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_write_r+0x1e>
 800b04c:	682b      	ldr	r3, [r5, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_write_r+0x1e>
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	200002f0 	.word	0x200002f0

0800b058 <_close_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d06      	ldr	r5, [pc, #24]	; (800b074 <_close_r+0x1c>)
 800b05c:	2300      	movs	r3, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	602b      	str	r3, [r5, #0]
 800b064:	f7f7 fea9 	bl	8002dba <_close>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_close_r+0x1a>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_close_r+0x1a>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	200002f0 	.word	0x200002f0

0800b078 <_fstat_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4d07      	ldr	r5, [pc, #28]	; (800b098 <_fstat_r+0x20>)
 800b07c:	2300      	movs	r3, #0
 800b07e:	4604      	mov	r4, r0
 800b080:	4608      	mov	r0, r1
 800b082:	4611      	mov	r1, r2
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	f7f7 fea4 	bl	8002dd2 <_fstat>
 800b08a:	1c43      	adds	r3, r0, #1
 800b08c:	d102      	bne.n	800b094 <_fstat_r+0x1c>
 800b08e:	682b      	ldr	r3, [r5, #0]
 800b090:	b103      	cbz	r3, 800b094 <_fstat_r+0x1c>
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	bd38      	pop	{r3, r4, r5, pc}
 800b096:	bf00      	nop
 800b098:	200002f0 	.word	0x200002f0

0800b09c <_isatty_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4d06      	ldr	r5, [pc, #24]	; (800b0b8 <_isatty_r+0x1c>)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	602b      	str	r3, [r5, #0]
 800b0a8:	f7f7 fea3 	bl	8002df2 <_isatty>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d102      	bne.n	800b0b6 <_isatty_r+0x1a>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	b103      	cbz	r3, 800b0b6 <_isatty_r+0x1a>
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	200002f0 	.word	0x200002f0

0800b0bc <_lseek_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d07      	ldr	r5, [pc, #28]	; (800b0dc <_lseek_r+0x20>)
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	602a      	str	r2, [r5, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	f7f7 fe9c 	bl	8002e08 <_lseek>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d102      	bne.n	800b0da <_lseek_r+0x1e>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b103      	cbz	r3, 800b0da <_lseek_r+0x1e>
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	200002f0 	.word	0x200002f0

0800b0e0 <_malloc_usable_size_r>:
 800b0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0e4:	1f18      	subs	r0, r3, #4
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	bfbc      	itt	lt
 800b0ea:	580b      	ldrlt	r3, [r1, r0]
 800b0ec:	18c0      	addlt	r0, r0, r3
 800b0ee:	4770      	bx	lr

0800b0f0 <_read_r>:
 800b0f0:	b538      	push	{r3, r4, r5, lr}
 800b0f2:	4d07      	ldr	r5, [pc, #28]	; (800b110 <_read_r+0x20>)
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	4611      	mov	r1, r2
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	602a      	str	r2, [r5, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	f7f7 fe22 	bl	8002d48 <_read>
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	d102      	bne.n	800b10e <_read_r+0x1e>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	b103      	cbz	r3, 800b10e <_read_r+0x1e>
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
 800b110:	200002f0 	.word	0x200002f0

0800b114 <_init>:
 800b114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b116:	bf00      	nop
 800b118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11a:	bc08      	pop	{r3}
 800b11c:	469e      	mov	lr, r3
 800b11e:	4770      	bx	lr

0800b120 <_fini>:
 800b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b122:	bf00      	nop
 800b124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b126:	bc08      	pop	{r3}
 800b128:	469e      	mov	lr, r3
 800b12a:	4770      	bx	lr
