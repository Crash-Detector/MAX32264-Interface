
Collision.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000876c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08008930  08008930  00018930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009000  08009000  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009000  08009000  00019000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009008  08009008  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009008  08009008  00019008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800900c  0800900c  0001900c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  200001dc  080091ec  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080091ec  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111c4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c5  00000000  00000000  000313d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00033798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c58  00000000  00000000  00034508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ac31  00000000  00000000  00035160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb48  00000000  00000000  0005fd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001015b3  00000000  00000000  0006f8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170e8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047c4  00000000  00000000  00170ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008914 	.word	0x08008914

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08008914 	.word	0x08008914

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b96e 	b.w	8000ecc <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468c      	mov	ip, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 8083 	bne.w	8000d1e <__udivmoddi4+0x116>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d947      	bls.n	8000cae <__udivmoddi4+0xa6>
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	b142      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	f1c2 0020 	rsb	r0, r2, #32
 8000c28:	fa24 f000 	lsr.w	r0, r4, r0
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	4097      	lsls	r7, r2
 8000c30:	ea40 0c01 	orr.w	ip, r0, r1
 8000c34:	4094      	lsls	r4, r2
 8000c36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c40:	fa1f fe87 	uxth.w	lr, r7
 8000c44:	fb08 c116 	mls	r1, r8, r6, ip
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x60>
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c5a:	f080 8119 	bcs.w	8000e90 <__udivmoddi4+0x288>
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	f240 8116 	bls.w	8000e90 <__udivmoddi4+0x288>
 8000c64:	3e02      	subs	r6, #2
 8000c66:	443b      	add	r3, r7
 8000c68:	1a5b      	subs	r3, r3, r1
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c70:	fb08 3310 	mls	r3, r8, r0, r3
 8000c74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d909      	bls.n	8000c94 <__udivmoddi4+0x8c>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c86:	f080 8105 	bcs.w	8000e94 <__udivmoddi4+0x28c>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f240 8102 	bls.w	8000e94 <__udivmoddi4+0x28c>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c98:	eba4 040e 	sub.w	r4, r4, lr
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	b11d      	cbz	r5, 8000ca8 <__udivmoddi4+0xa0>
 8000ca0:	40d4      	lsrs	r4, r2
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	b902      	cbnz	r2, 8000cb2 <__udivmoddi4+0xaa>
 8000cb0:	deff      	udf	#255	; 0xff
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d150      	bne.n	8000d5c <__udivmoddi4+0x154>
 8000cba:	1bcb      	subs	r3, r1, r7
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f f887 	uxth.w	r8, r7
 8000cc4:	2601      	movs	r6, #1
 8000cc6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cca:	0c21      	lsrs	r1, r4, #16
 8000ccc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d907      	bls.n	8000cec <__udivmoddi4+0xe4>
 8000cdc:	1879      	adds	r1, r7, r1
 8000cde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0xe2>
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	f200 80e9 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000cea:	4684      	mov	ip, r0
 8000cec:	1ac9      	subs	r1, r1, r3
 8000cee:	b2a3      	uxth	r3, r4
 8000cf0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cf4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cf8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cfc:	fb08 f800 	mul.w	r8, r8, r0
 8000d00:	45a0      	cmp	r8, r4
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x10c>
 8000d04:	193c      	adds	r4, r7, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x10a>
 8000d0c:	45a0      	cmp	r8, r4
 8000d0e:	f200 80d9 	bhi.w	8000ec4 <__udivmoddi4+0x2bc>
 8000d12:	4618      	mov	r0, r3
 8000d14:	eba4 0408 	sub.w	r4, r4, r8
 8000d18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d1c:	e7bf      	b.n	8000c9e <__udivmoddi4+0x96>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x12e>
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	f000 80b1 	beq.w	8000e8a <__udivmoddi4+0x282>
 8000d28:	2600      	movs	r6, #0
 8000d2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2e:	4630      	mov	r0, r6
 8000d30:	4631      	mov	r1, r6
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f683 	clz	r6, r3
 8000d3a:	2e00      	cmp	r6, #0
 8000d3c:	d14a      	bne.n	8000dd4 <__udivmoddi4+0x1cc>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0x140>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80b8 	bhi.w	8000eb8 <__udivmoddi4+0x2b0>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	468c      	mov	ip, r1
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	d0a8      	beq.n	8000ca8 <__udivmoddi4+0xa0>
 8000d56:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d5a:	e7a5      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f603 	lsr.w	r6, r0, r3
 8000d64:	4097      	lsls	r7, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6e:	40d9      	lsrs	r1, r3
 8000d70:	4330      	orrs	r0, r6
 8000d72:	0c03      	lsrs	r3, r0, #16
 8000d74:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d78:	fa1f f887 	uxth.w	r8, r7
 8000d7c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb06 f108 	mul.w	r1, r6, r8
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x19c>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d96:	f080 808d 	bcs.w	8000eb4 <__udivmoddi4+0x2ac>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 808a 	bls.w	8000eb4 <__udivmoddi4+0x2ac>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b281      	uxth	r1, r0
 8000da8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb00 f308 	mul.w	r3, r0, r8
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x1c4>
 8000dbc:	1879      	adds	r1, r7, r1
 8000dbe:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dc2:	d273      	bcs.n	8000eac <__udivmoddi4+0x2a4>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d971      	bls.n	8000eac <__udivmoddi4+0x2a4>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4439      	add	r1, r7
 8000dcc:	1acb      	subs	r3, r1, r3
 8000dce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dd2:	e778      	b.n	8000cc6 <__udivmoddi4+0xbe>
 8000dd4:	f1c6 0c20 	rsb	ip, r6, #32
 8000dd8:	fa03 f406 	lsl.w	r4, r3, r6
 8000ddc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de0:	431c      	orrs	r4, r3
 8000de2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000de6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dee:	fa21 f10c 	lsr.w	r1, r1, ip
 8000df2:	431f      	orrs	r7, r3
 8000df4:	0c3b      	lsrs	r3, r7, #16
 8000df6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfa:	fa1f f884 	uxth.w	r8, r4
 8000dfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e06:	fb09 fa08 	mul.w	sl, r9, r8
 8000e0a:	458a      	cmp	sl, r1
 8000e0c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e10:	fa00 f306 	lsl.w	r3, r0, r6
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x220>
 8000e16:	1861      	adds	r1, r4, r1
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e1c:	d248      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e1e:	458a      	cmp	sl, r1
 8000e20:	d946      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4421      	add	r1, r4
 8000e28:	eba1 010a 	sub.w	r1, r1, sl
 8000e2c:	b2bf      	uxth	r7, r7
 8000e2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e32:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e36:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e3a:	fb00 f808 	mul.w	r8, r0, r8
 8000e3e:	45b8      	cmp	r8, r7
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x24a>
 8000e42:	19e7      	adds	r7, r4, r7
 8000e44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e48:	d22e      	bcs.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4a:	45b8      	cmp	r8, r7
 8000e4c:	d92c      	bls.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4427      	add	r7, r4
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	eba7 0708 	sub.w	r7, r7, r8
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	454f      	cmp	r7, r9
 8000e60:	46c6      	mov	lr, r8
 8000e62:	4649      	mov	r1, r9
 8000e64:	d31a      	bcc.n	8000e9c <__udivmoddi4+0x294>
 8000e66:	d017      	beq.n	8000e98 <__udivmoddi4+0x290>
 8000e68:	b15d      	cbz	r5, 8000e82 <__udivmoddi4+0x27a>
 8000e6a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e6e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e72:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e76:	40f2      	lsrs	r2, r6
 8000e78:	ea4c 0202 	orr.w	r2, ip, r2
 8000e7c:	40f7      	lsrs	r7, r6
 8000e7e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e82:	2600      	movs	r6, #0
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e70b      	b.n	8000ca8 <__udivmoddi4+0xa0>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e9      	b.n	8000c68 <__udivmoddi4+0x60>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6fd      	b.n	8000c94 <__udivmoddi4+0x8c>
 8000e98:	4543      	cmp	r3, r8
 8000e9a:	d2e5      	bcs.n	8000e68 <__udivmoddi4+0x260>
 8000e9c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7df      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e7d2      	b.n	8000e52 <__udivmoddi4+0x24a>
 8000eac:	4660      	mov	r0, ip
 8000eae:	e78d      	b.n	8000dcc <__udivmoddi4+0x1c4>
 8000eb0:	4681      	mov	r9, r0
 8000eb2:	e7b9      	b.n	8000e28 <__udivmoddi4+0x220>
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	e775      	b.n	8000da4 <__udivmoddi4+0x19c>
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e74a      	b.n	8000d52 <__udivmoddi4+0x14a>
 8000ebc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec0:	4439      	add	r1, r7
 8000ec2:	e713      	b.n	8000cec <__udivmoddi4+0xe4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	443c      	add	r4, r7
 8000ec8:	e724      	b.n	8000d14 <__udivmoddi4+0x10c>
 8000eca:	bf00      	nop

08000ecc <__aeabi_idiv0>:
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <config_gpio>:

//enum IO { IN, OUT };

// direction 1 (input), direction 0, output
void config_gpio( const char port, const int pin_num, const enum IO direction )
    {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71bb      	strb	r3, [r7, #6]
    // Invariants
    assert( port >= 'A' && port <= 'F' ); 
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	2b40      	cmp	r3, #64	; 0x40
 8000ee4:	d902      	bls.n	8000eec <config_gpio+0x1c>
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b46      	cmp	r3, #70	; 0x46
 8000eea:	d905      	bls.n	8000ef8 <config_gpio+0x28>
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <config_gpio+0xb4>)
 8000eee:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <config_gpio+0xb8>)
 8000ef0:	2112      	movs	r1, #18
 8000ef2:	4826      	ldr	r0, [pc, #152]	; (8000f8c <config_gpio+0xbc>)
 8000ef4:	f004 ff7c 	bl	8005df0 <__assert_func>
    assert( pin_num >= 0 && pin_num <= 15 );
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db02      	blt.n	8000f04 <config_gpio+0x34>
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	dd05      	ble.n	8000f10 <config_gpio+0x40>
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <config_gpio+0xc0>)
 8000f06:	4a20      	ldr	r2, [pc, #128]	; (8000f88 <config_gpio+0xb8>)
 8000f08:	2113      	movs	r1, #19
 8000f0a:	4820      	ldr	r0, [pc, #128]	; (8000f8c <config_gpio+0xbc>)
 8000f0c:	f004 ff70 	bl	8005df0 <__assert_func>
    assert( direction == IN || direction == OUT );
 8000f10:	79bb      	ldrb	r3, [r7, #6]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d008      	beq.n	8000f28 <config_gpio+0x58>
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d005      	beq.n	8000f28 <config_gpio+0x58>
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <config_gpio+0xc4>)
 8000f1e:	4a1a      	ldr	r2, [pc, #104]	; (8000f88 <config_gpio+0xb8>)
 8000f20:	2114      	movs	r1, #20
 8000f22:	481a      	ldr	r0, [pc, #104]	; (8000f8c <config_gpio+0xbc>)
 8000f24:	f004 ff64 	bl	8005df0 <__assert_func>


    // Port address differ by 0x400 bytes
    const uint32_t port_offset = ( ( uint32_t ) ( port - 'A' ) ) * 0x400;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	3b41      	subs	r3, #65	; 0x41
 8000f2c:	029b      	lsls	r3, r3, #10
 8000f2e:	617b      	str	r3, [r7, #20]

    uint32_t io_mode = direction == IN ? 0b00 : 0b01;
 8000f30:	79bb      	ldrb	r3, [r7, #6]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	bf14      	ite	ne
 8000f36:	2301      	movne	r3, #1
 8000f38:	2300      	moveq	r3, #0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	613b      	str	r3, [r7, #16]
    uint32_t mask = 0b11;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	60fb      	str	r3, [r7, #12]

    // Shift to the pin_num's relevant bits9 (in moder register).
    io_mode <<= ( pin_num << 1 ); // Shift by 2*pin_num
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	613b      	str	r3, [r7, #16]
    mask    <<= ( pin_num << 1 );
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	60fb      	str	r3, [r7, #12]

    uint32_t * const gpio_moder = (uint32_t * )( GPIO_ADDR_BASE + port_offset + GPIO_MODER_OFFSET );
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f103 4390 	add.w	r3, r3, #1207959552	; 0x48000000
 8000f60:	60bb      	str	r3, [r7, #8]

    *gpio_moder &= ~mask; // Clear the mode bits
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	601a      	str	r2, [r3, #0]
    *gpio_moder |=  io_mode; // Write to it
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	601a      	str	r2, [r3, #0]
    } // end config_gpio( )
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08008930 	.word	0x08008930
 8000f88:	08008bb0 	.word	0x08008bb0
 8000f8c:	0800894c 	.word	0x0800894c
 8000f90:	08008964 	.word	0x08008964
 8000f94:	08008984 	.word	0x08008984

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	f5ad 2d9c 	sub.w	sp, sp, #319488	; 0x4e000
 8000f9e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8000fa2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa4:	f001 fc05 	bl	80027b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa8:	f001 f882 	bl	80020b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f001 f972 	bl	8002294 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb0:	f001 f8e6 	bl	8002180 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000fb4:	f001 f922 	bl	80021fc <MX_LPUART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_StatusTypeDef ret;
  uint8_t buf[65536];
  int samples = 0x0F;
 8000fb8:	230f      	movs	r3, #15
 8000fba:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8000fbe:	f502 7207 	add.w	r2, r2, #540	; 0x21c
 8000fc2:	6013      	str	r3, [r2, #0]
  //PD1 = MFIO
  //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,  0);
 // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  0);
  //HAL_Delay(50);

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	48ae      	ldr	r0, [pc, #696]	; (8001284 <main+0x2ec>)
 8000fca:	f001 ff03 	bl	8002dd4 <HAL_GPIO_WritePin>
  HAL_Delay(6);
 8000fce:	2006      	movs	r0, #6
 8000fd0:	f001 fc64 	bl	800289c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,  0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	48aa      	ldr	r0, [pc, #680]	; (8001284 <main+0x2ec>)
 8000fda:	f001 fefb 	bl	8002dd4 <HAL_GPIO_WritePin>
  HAL_Delay(4);
 8000fde:	2004      	movs	r0, #4
 8000fe0:	f001 fc5c 	bl	800289c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	48a6      	ldr	r0, [pc, #664]	; (8001284 <main+0x2ec>)
 8000fea:	f001 fef3 	bl	8002dd4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000fee:	2032      	movs	r0, #50	; 0x32
 8000ff0:	f001 fc54 	bl	800289c <HAL_Delay>


  //HAL_Delay(1000);
  buf[0] = 0x01;
 8000ff4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8000ff8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8000ffc:	3b50      	subs	r3, #80	; 0x50
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
  //buf[1] = 0x08;
  buf[1] = 0x00;
 8001002:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001006:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800100a:	3b50      	subs	r3, #80	; 0x50
 800100c:	2200      	movs	r2, #0
 800100e:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x08;
 8001010:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001014:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001018:	3b50      	subs	r3, #80	; 0x50
 800101a:	2208      	movs	r2, #8
 800101c:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 800101e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001022:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001026:	3a50      	subs	r2, #80	; 0x50
 8001028:	f241 3388 	movw	r3, #5000	; 0x1388
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2303      	movs	r3, #3
 8001030:	21aa      	movs	r1, #170	; 0xaa
 8001032:	4895      	ldr	r0, [pc, #596]	; (8001288 <main+0x2f0>)
 8001034:	f001 ff76 	bl	8002f24 <HAL_I2C_Master_Transmit>
 8001038:	4603      	mov	r3, r0
 800103a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800103e:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001042:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 8001044:	2002      	movs	r0, #2
 8001046:	f001 fc29 	bl	800289c <HAL_Delay>

  printf("%d HAL bool\n", ret == HAL_OK);
 800104a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800104e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	bf0c      	ite	eq
 8001058:	2301      	moveq	r3, #1
 800105a:	2300      	movne	r3, #0
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	488a      	ldr	r0, [pc, #552]	; (800128c <main+0x2f4>)
 8001062:	f005 fceb 	bl	8006a3c <iprintf>
  //if(ret == HAL_OK ){
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001066:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800106a:	f502 7212 	add.w	r2, r2, #584	; 0x248
 800106e:	3a50      	subs	r2, #80	; 0x50
 8001070:	f241 3388 	movw	r3, #5000	; 0x1388
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	21ab      	movs	r1, #171	; 0xab
 800107a:	4883      	ldr	r0, [pc, #524]	; (8001288 <main+0x2f0>)
 800107c:	f002 f846 	bl	800310c <HAL_I2C_Master_Receive>
 8001080:	4603      	mov	r3, r0
 8001082:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001086:	f202 221b 	addw	r2, r2, #539	; 0x21b
 800108a:	7013      	strb	r3, [r2, #0]
  //}
  if(buf[0] != 0x00 || ret != HAL_OK ){
 800108c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001090:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001094:	3b50      	subs	r3, #80	; 0x50
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d106      	bne.n	80010aa <main+0x112>
 800109c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80010a0:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d009      	beq.n	80010be <main+0x126>
    printf("Error setting bootloader: code %x\n", buf[0]);
 80010aa:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80010ae:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80010b2:	3b50      	subs	r3, #80	; 0x50
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4875      	ldr	r0, [pc, #468]	; (8001290 <main+0x2f8>)
 80010ba:	f005 fcbf 	bl	8006a3c <iprintf>
      }
  }*/


  /*read mode*/
  buf[0] = 0x02;
 80010be:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80010c2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80010c6:	3b50      	subs	r3, #80	; 0x50
 80010c8:	2202      	movs	r2, #2
 80010ca:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 80010cc:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80010d0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80010d4:	3b50      	subs	r3, #80	; 0x50
 80010d6:	2200      	movs	r2, #0
 80010d8:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 80010da:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80010de:	f502 7212 	add.w	r2, r2, #584	; 0x248
 80010e2:	3a50      	subs	r2, #80	; 0x50
 80010e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2302      	movs	r3, #2
 80010ec:	21aa      	movs	r1, #170	; 0xaa
 80010ee:	4866      	ldr	r0, [pc, #408]	; (8001288 <main+0x2f0>)
 80010f0:	f001 ff18 	bl	8002f24 <HAL_I2C_Master_Transmit>
 80010f4:	4603      	mov	r3, r0
 80010f6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80010fa:	f202 221b 	addw	r2, r2, #539	; 0x21b
 80010fe:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 8001100:	2002      	movs	r0, #2
 8001102:	f001 fbcb 	bl	800289c <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 8001106:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800110a:	f502 7212 	add.w	r2, r2, #584	; 0x248
 800110e:	3a50      	subs	r2, #80	; 0x50
 8001110:	f241 3388 	movw	r3, #5000	; 0x1388
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	21ab      	movs	r1, #171	; 0xab
 800111a:	485b      	ldr	r0, [pc, #364]	; (8001288 <main+0x2f0>)
 800111c:	f001 fff6 	bl	800310c <HAL_I2C_Master_Receive>
 8001120:	4603      	mov	r3, r0
 8001122:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001126:	f202 221b 	addw	r2, r2, #539	; 0x21b
 800112a:	7013      	strb	r3, [r2, #0]
  printf("error code: %x application mode: %x\n", buf[0],buf[1]);
 800112c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001130:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001134:	3b50      	subs	r3, #80	; 0x50
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800113e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001142:	3b50      	subs	r3, #80	; 0x50
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	461a      	mov	r2, r3
 8001148:	4852      	ldr	r0, [pc, #328]	; (8001294 <main+0x2fc>)
 800114a:	f005 fc77 	bl	8006a3c <iprintf>


  /*setting page number*/
  uint8_t page_count = byteF[0x44];
 800114e:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001152:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8001156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800115a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800115e:	f202 221a 	addw	r2, r2, #538	; 0x21a
 8001162:	7013      	strb	r3, [r2, #0]
  int page_size = 8192 + 16;
 8001164:	f242 0310 	movw	r3, #8208	; 0x2010
 8001168:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800116c:	f502 7205 	add.w	r2, r2, #532	; 0x214
 8001170:	6013      	str	r3, [r2, #0]
  buf[0] = 0x80;
 8001172:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001176:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800117a:	3b50      	subs	r3, #80	; 0x50
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x02;
 8001180:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001184:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001188:	3b50      	subs	r3, #80	; 0x50
 800118a:	2202      	movs	r2, #2
 800118c:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x00;
 800118e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001192:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001196:	3b50      	subs	r3, #80	; 0x50
 8001198:	2200      	movs	r2, #0
 800119a:	709a      	strb	r2, [r3, #2]
  buf[3] = byteF[0x44];
 800119c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80011a0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80011a4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80011a8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80011ac:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80011b0:	3b50      	subs	r3, #80	; 0x50
 80011b2:	70da      	strb	r2, [r3, #3]

  printf("%x pages\n", byteF[0x44]);
 80011b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80011b8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80011bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011c0:	4619      	mov	r1, r3
 80011c2:	4835      	ldr	r0, [pc, #212]	; (8001298 <main+0x300>)
 80011c4:	f005 fc3a 	bl	8006a3c <iprintf>
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 4, 5000);
 80011c8:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80011cc:	f502 7212 	add.w	r2, r2, #584	; 0x248
 80011d0:	3a50      	subs	r2, #80	; 0x50
 80011d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2304      	movs	r3, #4
 80011da:	21aa      	movs	r1, #170	; 0xaa
 80011dc:	482a      	ldr	r0, [pc, #168]	; (8001288 <main+0x2f0>)
 80011de:	f001 fea1 	bl	8002f24 <HAL_I2C_Master_Transmit>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80011e8:	f202 221b 	addw	r2, r2, #539	; 0x21b
 80011ec:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 80011ee:	2002      	movs	r0, #2
 80011f0:	f001 fb54 	bl	800289c <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80011f4:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80011f8:	f502 7212 	add.w	r2, r2, #584	; 0x248
 80011fc:	3a50      	subs	r2, #80	; 0x50
 80011fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	21ab      	movs	r1, #171	; 0xab
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <main+0x2f0>)
 800120a:	f001 ff7f 	bl	800310c <HAL_I2C_Master_Receive>
 800120e:	4603      	mov	r3, r0
 8001210:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001214:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001218:	7013      	strb	r3, [r2, #0]
  if(buf[0] != 0x00 || ret != HAL_OK ){
 800121a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800121e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001222:	3b50      	subs	r3, #80	; 0x50
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d106      	bne.n	8001238 <main+0x2a0>
 800122a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800122e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d009      	beq.n	800124c <main+0x2b4>
          printf("Error setting page num: code %x\n", buf[0]);
 8001238:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800123c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001240:	3b50      	subs	r3, #80	; 0x50
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	4815      	ldr	r0, [pc, #84]	; (800129c <main+0x304>)
 8001248:	f005 fbf8 	bl	8006a3c <iprintf>
   }

  /*initialization vector*/
  int byte_count = 0x32-0x28;
 800124c:	230a      	movs	r3, #10
 800124e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001252:	f502 7204 	add.w	r2, r2, #528	; 0x210
 8001256:	6013      	str	r3, [r2, #0]
  buf[0] = 0x80;
 8001258:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800125c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001260:	3b50      	subs	r3, #80	; 0x50
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 8001266:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800126a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800126e:	3b50      	subs	r3, #80	; 0x50
 8001270:	2200      	movs	r2, #0
 8001272:	705a      	strb	r2, [r3, #1]
  for(int i = 0; i < byte_count; ++i){
 8001274:	2300      	movs	r3, #0
 8001276:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800127a:	f502 7211 	add.w	r2, r2, #580	; 0x244
 800127e:	6013      	str	r3, [r2, #0]
 8001280:	e031      	b.n	80012e6 <main+0x34e>
 8001282:	bf00      	nop
 8001284:	48000c00 	.word	0x48000c00
 8001288:	20000204 	.word	0x20000204
 800128c:	080089a8 	.word	0x080089a8
 8001290:	080089b8 	.word	0x080089b8
 8001294:	080089dc 	.word	0x080089dc
 8001298:	08008a04 	.word	0x08008a04
 800129c:	08008a10 	.word	0x08008a10
      buf[2+i] = byteF[0x28+i];
 80012a0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80012a4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80012ae:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80012b2:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	1c9a      	adds	r2, r3, #2
 80012ba:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80012be:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80012c2:	5c59      	ldrb	r1, [r3, r1]
 80012c4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80012c8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80012cc:	3b50      	subs	r3, #80	; 0x50
 80012ce:	5499      	strb	r1, [r3, r2]
  for(int i = 0; i < byte_count; ++i){
 80012d0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80012d4:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	3301      	adds	r3, #1
 80012dc:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80012e0:	f502 7211 	add.w	r2, r2, #580	; 0x244
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80012ea:	f503 7311 	add.w	r3, r3, #580	; 0x244
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80012f4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbd0      	blt.n	80012a0 <main+0x308>
  }
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2 + byte_count, 5000);
 80012fe:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001302:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	3302      	adds	r3, #2
 800130c:	b29b      	uxth	r3, r3
 800130e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001312:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001316:	3a50      	subs	r2, #80	; 0x50
 8001318:	f241 3188 	movw	r1, #5000	; 0x1388
 800131c:	9100      	str	r1, [sp, #0]
 800131e:	21aa      	movs	r1, #170	; 0xaa
 8001320:	48a3      	ldr	r0, [pc, #652]	; (80015b0 <main+0x618>)
 8001322:	f001 fdff 	bl	8002f24 <HAL_I2C_Master_Transmit>
 8001326:	4603      	mov	r3, r0
 8001328:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800132c:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001330:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 8001332:	2002      	movs	r0, #2
 8001334:	f001 fab2 	bl	800289c <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001338:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800133c:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001340:	3a50      	subs	r2, #80	; 0x50
 8001342:	f241 3388 	movw	r3, #5000	; 0x1388
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	21ab      	movs	r1, #171	; 0xab
 800134c:	4898      	ldr	r0, [pc, #608]	; (80015b0 <main+0x618>)
 800134e:	f001 fedd 	bl	800310c <HAL_I2C_Master_Receive>
 8001352:	4603      	mov	r3, r0
 8001354:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001358:	f202 221b 	addw	r2, r2, #539	; 0x21b
 800135c:	7013      	strb	r3, [r2, #0]
  if(buf[0] != 0x00 || ret != HAL_OK ){
 800135e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001362:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001366:	3b50      	subs	r3, #80	; 0x50
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d106      	bne.n	800137c <main+0x3e4>
 800136e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001372:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d009      	beq.n	8001390 <main+0x3f8>
          printf("Error setting page num: code %x\n", buf[0]);
 800137c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001380:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001384:	3b50      	subs	r3, #80	; 0x50
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	488a      	ldr	r0, [pc, #552]	; (80015b4 <main+0x61c>)
 800138c:	f005 fb56 	bl	8006a3c <iprintf>
   }
/*authentication bytes*/
  byte_count = 0x43-0x34;
 8001390:	230f      	movs	r3, #15
 8001392:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001396:	f502 7204 	add.w	r2, r2, #528	; 0x210
 800139a:	6013      	str	r3, [r2, #0]
    buf[0] = 0x80;
 800139c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80013a0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80013a4:	3b50      	subs	r3, #80	; 0x50
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	701a      	strb	r2, [r3, #0]
    buf[1] = 0x01;
 80013aa:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80013ae:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80013b2:	3b50      	subs	r3, #80	; 0x50
 80013b4:	2201      	movs	r2, #1
 80013b6:	705a      	strb	r2, [r3, #1]
    for(int i = 0; i < byte_count; ++i){
 80013b8:	2300      	movs	r3, #0
 80013ba:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80013be:	f502 7210 	add.w	r2, r2, #576	; 0x240
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e022      	b.n	800140c <main+0x474>
      buf[2+i] = byteF[0x34+i];
 80013c6:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80013ca:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80013d4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80013d8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1c9a      	adds	r2, r3, #2
 80013e0:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80013e4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80013e8:	5c59      	ldrb	r1, [r3, r1]
 80013ea:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80013ee:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80013f2:	3b50      	subs	r3, #80	; 0x50
 80013f4:	5499      	strb	r1, [r3, r2]
    for(int i = 0; i < byte_count; ++i){
 80013f6:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80013fa:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	3301      	adds	r3, #1
 8001402:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001406:	f502 7210 	add.w	r2, r2, #576	; 0x240
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001410:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800141a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	429a      	cmp	r2, r3
 8001422:	dbd0      	blt.n	80013c6 <main+0x42e>
    }
    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2 + byte_count, 5000);
 8001424:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001428:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	b29b      	uxth	r3, r3
 8001430:	3302      	adds	r3, #2
 8001432:	b29b      	uxth	r3, r3
 8001434:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001438:	f502 7212 	add.w	r2, r2, #584	; 0x248
 800143c:	3a50      	subs	r2, #80	; 0x50
 800143e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001442:	9100      	str	r1, [sp, #0]
 8001444:	21aa      	movs	r1, #170	; 0xaa
 8001446:	485a      	ldr	r0, [pc, #360]	; (80015b0 <main+0x618>)
 8001448:	f001 fd6c 	bl	8002f24 <HAL_I2C_Master_Transmit>
 800144c:	4603      	mov	r3, r0
 800144e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001452:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001456:	7013      	strb	r3, [r2, #0]
    HAL_Delay(2);
 8001458:	2002      	movs	r0, #2
 800145a:	f001 fa1f 	bl	800289c <HAL_Delay>
    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 800145e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001462:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001466:	3a50      	subs	r2, #80	; 0x50
 8001468:	f241 3388 	movw	r3, #5000	; 0x1388
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2301      	movs	r3, #1
 8001470:	21ab      	movs	r1, #171	; 0xab
 8001472:	484f      	ldr	r0, [pc, #316]	; (80015b0 <main+0x618>)
 8001474:	f001 fe4a 	bl	800310c <HAL_I2C_Master_Receive>
 8001478:	4603      	mov	r3, r0
 800147a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800147e:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001482:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 8001484:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001488:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800148c:	3b50      	subs	r3, #80	; 0x50
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d106      	bne.n	80014a2 <main+0x50a>
 8001494:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001498:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <main+0x51e>
              printf("Error setting page num: code %x\n", buf[0]);
 80014a2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80014a6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80014aa:	3b50      	subs	r3, #80	; 0x50
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4840      	ldr	r0, [pc, #256]	; (80015b4 <main+0x61c>)
 80014b2:	f005 fac3 	bl	8006a3c <iprintf>
       }

    /*erase application*/

    buf[0] = 0x80;
 80014b6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80014ba:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80014be:	3b50      	subs	r3, #80	; 0x50
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	701a      	strb	r2, [r3, #0]
    buf[1] = 0x03;
 80014c4:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80014c8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80014cc:	3b50      	subs	r3, #80	; 0x50
 80014ce:	2203      	movs	r2, #3
 80014d0:	705a      	strb	r2, [r3, #1]
    ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 80014d2:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80014d6:	f502 7212 	add.w	r2, r2, #584	; 0x248
 80014da:	3a50      	subs	r2, #80	; 0x50
 80014dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2302      	movs	r3, #2
 80014e4:	21aa      	movs	r1, #170	; 0xaa
 80014e6:	4832      	ldr	r0, [pc, #200]	; (80015b0 <main+0x618>)
 80014e8:	f001 fd1c 	bl	8002f24 <HAL_I2C_Master_Transmit>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80014f2:	f202 221b 	addw	r2, r2, #539	; 0x21b
 80014f6:	7013      	strb	r3, [r2, #0]
    HAL_Delay(1400);
 80014f8:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80014fc:	f001 f9ce 	bl	800289c <HAL_Delay>
    ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001500:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001504:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001508:	3a50      	subs	r2, #80	; 0x50
 800150a:	f241 3388 	movw	r3, #5000	; 0x1388
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	21ab      	movs	r1, #171	; 0xab
 8001514:	4826      	ldr	r0, [pc, #152]	; (80015b0 <main+0x618>)
 8001516:	f001 fdf9 	bl	800310c <HAL_I2C_Master_Receive>
 800151a:	4603      	mov	r3, r0
 800151c:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001520:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001524:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 8001526:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800152a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800152e:	3b50      	subs	r3, #80	; 0x50
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <main+0x5ac>
 8001536:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800153a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d009      	beq.n	8001558 <main+0x5c0>
              printf("Error setting page num: code %x\n", buf[0]);
 8001544:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001548:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800154c:	3b50      	subs	r3, #80	; 0x50
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <main+0x61c>)
 8001554:	f005 fa72 	bl	8006a3c <iprintf>
       }
    int current = 0x4c;
 8001558:	234c      	movs	r3, #76	; 0x4c
 800155a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800155e:	f502 720f 	add.w	r2, r2, #572	; 0x23c
 8001562:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < page_count; ++i){
 8001564:	2300      	movs	r3, #0
 8001566:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800156a:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e0cc      	b.n	800170c <main+0x774>
        int count = 2;
 8001572:	2302      	movs	r3, #2
 8001574:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001578:	f502 720d 	add.w	r2, r2, #564	; 0x234
 800157c:	6013      	str	r3, [r2, #0]
        buf[0] = 0x8;
 800157e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001582:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001586:	3b50      	subs	r3, #80	; 0x50
 8001588:	2208      	movs	r2, #8
 800158a:	701a      	strb	r2, [r3, #0]
        buf[1] = 0x04;
 800158c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001590:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001594:	3b50      	subs	r3, #80	; 0x50
 8001596:	2204      	movs	r2, #4
 8001598:	705a      	strb	r2, [r3, #1]
        for(int j = current; j < (current + page_size); ++j){
 800159a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800159e:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80015a8:	f502 720c 	add.w	r2, r2, #560	; 0x230
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e031      	b.n	8001614 <main+0x67c>
 80015b0:	20000204 	.word	0x20000204
 80015b4:	08008a10 	.word	0x08008a10
            buf[count] = byteF[j];
 80015b8:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80015bc:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 80015c0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80015c4:	f502 720c 	add.w	r2, r2, #560	; 0x230
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	4413      	add	r3, r2
 80015cc:	7819      	ldrb	r1, [r3, #0]
 80015ce:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80015d2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80015d6:	3b50      	subs	r3, #80	; 0x50
 80015d8:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80015dc:	f502 720d 	add.w	r2, r2, #564	; 0x234
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	460a      	mov	r2, r1
 80015e6:	701a      	strb	r2, [r3, #0]
            ++count;
 80015e8:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80015ec:	f503 730d 	add.w	r3, r3, #564	; 0x234
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80015f8:	f502 720d 	add.w	r2, r2, #564	; 0x234
 80015fc:	6013      	str	r3, [r2, #0]
        for(int j = current; j < (current + page_size); ++j){
 80015fe:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001602:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800160e:	f502 720c 	add.w	r2, r2, #560	; 0x230
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001618:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001622:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4413      	add	r3, r2
 800162a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800162e:	f502 720c 	add.w	r2, r2, #560	; 0x230
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	dbbf      	blt.n	80015b8 <main+0x620>
        }
        current = current + page_size;
 8001638:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800163c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001646:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4413      	add	r3, r2
 800164e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001652:	f502 720f 	add.w	r2, r2, #572	; 0x23c
 8001656:	6013      	str	r3, [r2, #0]

        ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2 + page_size, 5000);
 8001658:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800165c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	3302      	adds	r3, #2
 8001666:	b29b      	uxth	r3, r3
 8001668:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800166c:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001670:	3a50      	subs	r2, #80	; 0x50
 8001672:	f241 3188 	movw	r1, #5000	; 0x1388
 8001676:	9100      	str	r1, [sp, #0]
 8001678:	21aa      	movs	r1, #170	; 0xaa
 800167a:	48df      	ldr	r0, [pc, #892]	; (80019f8 <main+0xa60>)
 800167c:	f001 fc52 	bl	8002f24 <HAL_I2C_Master_Transmit>
 8001680:	4603      	mov	r3, r0
 8001682:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001686:	f202 221b 	addw	r2, r2, #539	; 0x21b
 800168a:	7013      	strb	r3, [r2, #0]
        HAL_Delay(340);
 800168c:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8001690:	f001 f904 	bl	800289c <HAL_Delay>
        ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001694:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001698:	f502 7212 	add.w	r2, r2, #584	; 0x248
 800169c:	3a50      	subs	r2, #80	; 0x50
 800169e:	f241 3388 	movw	r3, #5000	; 0x1388
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	21ab      	movs	r1, #171	; 0xab
 80016a8:	48d3      	ldr	r0, [pc, #844]	; (80019f8 <main+0xa60>)
 80016aa:	f001 fd2f 	bl	800310c <HAL_I2C_Master_Receive>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80016b4:	f202 221b 	addw	r2, r2, #539	; 0x21b
 80016b8:	7013      	strb	r3, [r2, #0]
        if(buf[0] != 0x00 || ret != HAL_OK ){
 80016ba:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80016be:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80016c2:	3b50      	subs	r3, #80	; 0x50
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <main+0x740>
 80016ca:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80016ce:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00e      	beq.n	80016f6 <main+0x75e>
                      printf("Error setting page %d : code %x\n", i, buf[0]);
 80016d8:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80016dc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80016e0:	3b50      	subs	r3, #80	; 0x50
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80016ea:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80016ee:	6819      	ldr	r1, [r3, #0]
 80016f0:	48c2      	ldr	r0, [pc, #776]	; (80019fc <main+0xa64>)
 80016f2:	f005 f9a3 	bl	8006a3c <iprintf>
    for(int i = 0; i < page_count; ++i){
 80016f6:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 80016fa:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	3301      	adds	r3, #1
 8001702:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001706:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001710:	f203 231a 	addw	r3, r3, #538	; 0x21a
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800171a:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	f6ff af26 	blt.w	8001572 <main+0x5da>
  //printf("buffer %x\n", byteF[0]);
//
//
//
  /*Go into application Mode*/
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  0);
 8001726:	2200      	movs	r2, #0
 8001728:	2101      	movs	r1, #1
 800172a:	48b5      	ldr	r0, [pc, #724]	; (8001a00 <main+0xa68>)
 800172c:	f001 fb52 	bl	8002dd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1,  1);
 8001730:	2201      	movs	r2, #1
 8001732:	2102      	movs	r1, #2
 8001734:	48b2      	ldr	r0, [pc, #712]	; (8001a00 <main+0xa68>)
 8001736:	f001 fb4d 	bl	8002dd4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800173a:	200a      	movs	r0, #10
 800173c:	f001 f8ae 	bl	800289c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0,  1);
 8001740:	2201      	movs	r2, #1
 8001742:	2101      	movs	r1, #1
 8001744:	48ae      	ldr	r0, [pc, #696]	; (8001a00 <main+0xa68>)
 8001746:	f001 fb45 	bl	8002dd4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800174a:	2032      	movs	r0, #50	; 0x32
 800174c:	f001 f8a6 	bl	800289c <HAL_Delay>
  HAL_Delay(1000);
 8001750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001754:	f001 f8a2 	bl	800289c <HAL_Delay>


  config_gpio('D', 1, IN );
 8001758:	2200      	movs	r2, #0
 800175a:	2101      	movs	r1, #1
 800175c:	2044      	movs	r0, #68	; 0x44
 800175e:	f7ff fbb7 	bl	8000ed0 <config_gpio>
  /*set our mode to both raw and algorithm*/
  buf[0] = 0x02;
 8001762:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001766:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800176a:	3b50      	subs	r3, #80	; 0x50
 800176c:	2202      	movs	r2, #2
 800176e:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 8001770:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001774:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001778:	3b50      	subs	r3, #80	; 0x50
 800177a:	2200      	movs	r2, #0
 800177c:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 800177e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001782:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001786:	3a50      	subs	r2, #80	; 0x50
 8001788:	f241 3388 	movw	r3, #5000	; 0x1388
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2302      	movs	r3, #2
 8001790:	21aa      	movs	r1, #170	; 0xaa
 8001792:	4899      	ldr	r0, [pc, #612]	; (80019f8 <main+0xa60>)
 8001794:	f001 fbc6 	bl	8002f24 <HAL_I2C_Master_Transmit>
 8001798:	4603      	mov	r3, r0
 800179a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800179e:	f202 221b 	addw	r2, r2, #539	; 0x21b
 80017a2:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 80017a4:	2002      	movs	r0, #2
 80017a6:	f001 f879 	bl	800289c <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 80017aa:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80017ae:	f502 7212 	add.w	r2, r2, #584	; 0x248
 80017b2:	3a50      	subs	r2, #80	; 0x50
 80017b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2302      	movs	r3, #2
 80017bc:	21ab      	movs	r1, #171	; 0xab
 80017be:	488e      	ldr	r0, [pc, #568]	; (80019f8 <main+0xa60>)
 80017c0:	f001 fca4 	bl	800310c <HAL_I2C_Master_Receive>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80017ca:	f202 221b 	addw	r2, r2, #539	; 0x21b
 80017ce:	7013      	strb	r3, [r2, #0]
  printf("error code: %x mode: %x\n", buf[0],buf[1]);
 80017d0:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80017d4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80017d8:	3b50      	subs	r3, #80	; 0x50
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80017e2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80017e6:	3b50      	subs	r3, #80	; 0x50
 80017e8:	785b      	ldrb	r3, [r3, #1]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4885      	ldr	r0, [pc, #532]	; (8001a04 <main+0xa6c>)
 80017ee:	f005 f925 	bl	8006a3c <iprintf>

  buf[0] = 0xFF;
 80017f2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80017f6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80017fa:	3b50      	subs	r3, #80	; 0x50
 80017fc:	22ff      	movs	r2, #255	; 0xff
 80017fe:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x03;
 8001800:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001804:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001808:	3b50      	subs	r3, #80	; 0x50
 800180a:	2203      	movs	r2, #3
 800180c:	705a      	strb	r2, [r3, #1]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 800180e:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001812:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001816:	3a50      	subs	r2, #80	; 0x50
 8001818:	f241 3388 	movw	r3, #5000	; 0x1388
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2302      	movs	r3, #2
 8001820:	21aa      	movs	r1, #170	; 0xaa
 8001822:	4875      	ldr	r0, [pc, #468]	; (80019f8 <main+0xa60>)
 8001824:	f001 fb7e 	bl	8002f24 <HAL_I2C_Master_Transmit>
 8001828:	4603      	mov	r3, r0
 800182a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800182e:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001832:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 8001834:	2002      	movs	r0, #2
 8001836:	f001 f831 	bl	800289c <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 5, 5000);
 800183a:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800183e:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001842:	3a50      	subs	r2, #80	; 0x50
 8001844:	f241 3388 	movw	r3, #5000	; 0x1388
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2305      	movs	r3, #5
 800184c:	21ab      	movs	r1, #171	; 0xab
 800184e:	486a      	ldr	r0, [pc, #424]	; (80019f8 <main+0xa60>)
 8001850:	f001 fc5c 	bl	800310c <HAL_I2C_Master_Receive>
 8001854:	4603      	mov	r3, r0
 8001856:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 800185a:	f202 221b 	addw	r2, r2, #539	; 0x21b
 800185e:	7013      	strb	r3, [r2, #0]
  printf("error code: %x mode: %x %x %x %x\n", buf[0],buf[1], buf[2], buf[3],buf[4]);
 8001860:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001864:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001868:	3b50      	subs	r3, #80	; 0x50
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001872:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001876:	3b50      	subs	r3, #80	; 0x50
 8001878:	785b      	ldrb	r3, [r3, #1]
 800187a:	4618      	mov	r0, r3
 800187c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001880:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001884:	3b50      	subs	r3, #80	; 0x50
 8001886:	789b      	ldrb	r3, [r3, #2]
 8001888:	461c      	mov	r4, r3
 800188a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800188e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001892:	3b50      	subs	r3, #80	; 0x50
 8001894:	78db      	ldrb	r3, [r3, #3]
 8001896:	461a      	mov	r2, r3
 8001898:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800189c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80018a0:	3b50      	subs	r3, #80	; 0x50
 80018a2:	791b      	ldrb	r3, [r3, #4]
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	9200      	str	r2, [sp, #0]
 80018a8:	4623      	mov	r3, r4
 80018aa:	4602      	mov	r2, r0
 80018ac:	4856      	ldr	r0, [pc, #344]	; (8001a08 <main+0xa70>)
 80018ae:	f005 f8c5 	bl	8006a3c <iprintf>


  buf[0] = 0x10;
 80018b2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80018b6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80018ba:	3b50      	subs	r3, #80	; 0x50
 80018bc:	2210      	movs	r2, #16
 80018be:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x00;
 80018c0:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80018c4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80018c8:	3b50      	subs	r3, #80	; 0x50
 80018ca:	2200      	movs	r2, #0
 80018cc:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x03;
 80018ce:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80018d2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80018d6:	3b50      	subs	r3, #80	; 0x50
 80018d8:	2203      	movs	r2, #3
 80018da:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 80018dc:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80018e0:	f502 7212 	add.w	r2, r2, #584	; 0x248
 80018e4:	3a50      	subs	r2, #80	; 0x50
 80018e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2303      	movs	r3, #3
 80018ee:	21aa      	movs	r1, #170	; 0xaa
 80018f0:	4841      	ldr	r0, [pc, #260]	; (80019f8 <main+0xa60>)
 80018f2:	f001 fb17 	bl	8002f24 <HAL_I2C_Master_Transmit>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80018fc:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001900:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 8001902:	2002      	movs	r0, #2
 8001904:	f000 ffca 	bl	800289c <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001908:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 800190c:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001910:	3a50      	subs	r2, #80	; 0x50
 8001912:	f241 3388 	movw	r3, #5000	; 0x1388
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2301      	movs	r3, #1
 800191a:	21ab      	movs	r1, #171	; 0xab
 800191c:	4836      	ldr	r0, [pc, #216]	; (80019f8 <main+0xa60>)
 800191e:	f001 fbf5 	bl	800310c <HAL_I2C_Master_Receive>
 8001922:	4603      	mov	r3, r0
 8001924:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001928:	f202 221b 	addw	r2, r2, #539	; 0x21b
 800192c:	7013      	strb	r3, [r2, #0]
  if(buf[0] != 0x00 || ret != HAL_OK ){
 800192e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001932:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001936:	3b50      	subs	r3, #80	; 0x50
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d106      	bne.n	800194c <main+0x9b4>
 800193e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001942:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d009      	beq.n	8001960 <main+0x9c8>
      printf("Error setting mode: code %x\n", buf[0]);
 800194c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001950:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001954:	3b50      	subs	r3, #80	; 0x50
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	482c      	ldr	r0, [pc, #176]	; (8001a0c <main+0xa74>)
 800195c:	f005 f86e 	bl	8006a3c <iprintf>
  }

  /*Set FIFO threshold as almost full at 0x0F*/
  buf[0] = 0x10;
 8001960:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001964:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001968:	3b50      	subs	r3, #80	; 0x50
 800196a:	2210      	movs	r2, #16
 800196c:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x01;
 800196e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001972:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001976:	3b50      	subs	r3, #80	; 0x50
 8001978:	2201      	movs	r2, #1
 800197a:	705a      	strb	r2, [r3, #1]
  buf[2] = samples;
 800197c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001980:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 800198c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001990:	3b50      	subs	r3, #80	; 0x50
 8001992:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8001994:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001998:	f502 7212 	add.w	r2, r2, #584	; 0x248
 800199c:	3a50      	subs	r2, #80	; 0x50
 800199e:	f241 3388 	movw	r3, #5000	; 0x1388
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2303      	movs	r3, #3
 80019a6:	21aa      	movs	r1, #170	; 0xaa
 80019a8:	4813      	ldr	r0, [pc, #76]	; (80019f8 <main+0xa60>)
 80019aa:	f001 fabb 	bl	8002f24 <HAL_I2C_Master_Transmit>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80019b4:	f202 221b 	addw	r2, r2, #539	; 0x21b
 80019b8:	7013      	strb	r3, [r2, #0]
  HAL_Delay(2);
 80019ba:	2002      	movs	r0, #2
 80019bc:	f000 ff6e 	bl	800289c <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 80019c0:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 80019c4:	f502 7212 	add.w	r2, r2, #584	; 0x248
 80019c8:	3a50      	subs	r2, #80	; 0x50
 80019ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2301      	movs	r3, #1
 80019d2:	21ab      	movs	r1, #171	; 0xab
 80019d4:	4808      	ldr	r0, [pc, #32]	; (80019f8 <main+0xa60>)
 80019d6:	f001 fb99 	bl	800310c <HAL_I2C_Master_Receive>
 80019da:	4603      	mov	r3, r0
 80019dc:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 80019e0:	f202 221b 	addw	r2, r2, #539	; 0x21b
 80019e4:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 80019e6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 80019ea:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80019ee:	3b50      	subs	r3, #80	; 0x50
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d113      	bne.n	8001a1e <main+0xa86>
 80019f6:	e00b      	b.n	8001a10 <main+0xa78>
 80019f8:	20000204 	.word	0x20000204
 80019fc:	08008a34 	.word	0x08008a34
 8001a00:	48000c00 	.word	0x48000c00
 8001a04:	08008a58 	.word	0x08008a58
 8001a08:	08008a74 	.word	0x08008a74
 8001a0c:	08008a98 	.word	0x08008a98
 8001a10:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001a14:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <main+0xa9a>
      printf("Error setting FIFO threshold code: %x\n", buf[0]);
 8001a1e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001a22:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001a26:	3b50      	subs	r3, #80	; 0x50
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	48cb      	ldr	r0, [pc, #812]	; (8001d5c <main+0xdc4>)
 8001a2e:	f005 f805 	bl	8006a3c <iprintf>
    }


  /*Enable the sensor*/
  buf[0] = 0x44;
 8001a32:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001a36:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001a3a:	3b50      	subs	r3, #80	; 0x50
 8001a3c:	2244      	movs	r2, #68	; 0x44
 8001a3e:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x03;
 8001a40:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001a44:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001a48:	3b50      	subs	r3, #80	; 0x50
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x01;
 8001a4e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001a52:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001a56:	3b50      	subs	r3, #80	; 0x50
 8001a58:	2201      	movs	r2, #1
 8001a5a:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8001a5c:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001a60:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001a64:	3a50      	subs	r2, #80	; 0x50
 8001a66:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	21aa      	movs	r1, #170	; 0xaa
 8001a70:	48bb      	ldr	r0, [pc, #748]	; (8001d60 <main+0xdc8>)
 8001a72:	f001 fa57 	bl	8002f24 <HAL_I2C_Master_Transmit>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001a7c:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001a80:	7013      	strb	r3, [r2, #0]
  HAL_Delay(40);
 8001a82:	2028      	movs	r0, #40	; 0x28
 8001a84:	f000 ff0a 	bl	800289c <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001a88:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001a8c:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001a90:	3a50      	subs	r2, #80	; 0x50
 8001a92:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	2301      	movs	r3, #1
 8001a9a:	21ab      	movs	r1, #171	; 0xab
 8001a9c:	48b0      	ldr	r0, [pc, #704]	; (8001d60 <main+0xdc8>)
 8001a9e:	f001 fb35 	bl	800310c <HAL_I2C_Master_Receive>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001aa8:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001aac:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 8001aae:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ab2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001ab6:	3b50      	subs	r3, #80	; 0x50
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <main+0xb34>
 8001abe:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001ac2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d009      	beq.n	8001ae0 <main+0xb48>
      printf("Error enabling sensor code: %x\n", buf[0]);
 8001acc:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ad0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001ad4:	3b50      	subs	r3, #80	; 0x50
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	48a2      	ldr	r0, [pc, #648]	; (8001d64 <main+0xdcc>)
 8001adc:	f004 ffae 	bl	8006a3c <iprintf>
    }
  /*Enable the algorithm*/
  buf[0] = 0x52;
 8001ae0:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ae4:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001ae8:	3b50      	subs	r3, #80	; 0x50
 8001aea:	2252      	movs	r2, #82	; 0x52
 8001aec:	701a      	strb	r2, [r3, #0]
  buf[1] = 0x02;
 8001aee:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001af2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001af6:	3b50      	subs	r3, #80	; 0x50
 8001af8:	2202      	movs	r2, #2
 8001afa:	705a      	strb	r2, [r3, #1]
  buf[2] = 0x01;
 8001afc:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001b00:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001b04:	3b50      	subs	r3, #80	; 0x50
 8001b06:	2201      	movs	r2, #1
 8001b08:	709a      	strb	r2, [r3, #2]
  ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 3, 5000);
 8001b0a:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001b0e:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001b12:	3a50      	subs	r2, #80	; 0x50
 8001b14:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	21aa      	movs	r1, #170	; 0xaa
 8001b1e:	4890      	ldr	r0, [pc, #576]	; (8001d60 <main+0xdc8>)
 8001b20:	f001 fa00 	bl	8002f24 <HAL_I2C_Master_Transmit>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001b2a:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001b2e:	7013      	strb	r3, [r2, #0]
  HAL_Delay(40);
 8001b30:	2028      	movs	r0, #40	; 0x28
 8001b32:	f000 feb3 	bl	800289c <HAL_Delay>
  ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 1, 5000);
 8001b36:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001b3a:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001b3e:	3a50      	subs	r2, #80	; 0x50
 8001b40:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2301      	movs	r3, #1
 8001b48:	21ab      	movs	r1, #171	; 0xab
 8001b4a:	4885      	ldr	r0, [pc, #532]	; (8001d60 <main+0xdc8>)
 8001b4c:	f001 fade 	bl	800310c <HAL_I2C_Master_Receive>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001b56:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001b5a:	7013      	strb	r3, [r2, #0]
    if(buf[0] != 0x00 || ret != HAL_OK ){
 8001b5c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001b60:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001b64:	3b50      	subs	r3, #80	; 0x50
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d106      	bne.n	8001b7a <main+0xbe2>
 8001b6c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001b70:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <main+0xbf6>
      printf("Error Enabling Algorithm code: %x\n", buf[0]);
 8001b7a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001b7e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001b82:	3b50      	subs	r3, #80	; 0x50
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4877      	ldr	r0, [pc, #476]	; (8001d68 <main+0xdd0>)
 8001b8a:	f004 ff57 	bl	8006a3c <iprintf>
    }


  float heart_rate = 0;
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001b96:	f502 720b 	add.w	r2, r2, #556	; 0x22c
 8001b9a:	6013      	str	r3, [r2, #0]
  float SpO2 = 0;
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001ba4:	f502 720a 	add.w	r2, r2, #552	; 0x228
 8001ba8:	6013      	str	r3, [r2, #0]

  while (1)
      {
        HAL_Delay(1000);
 8001baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bae:	f000 fe75 	bl	800289c <HAL_Delay>
        int error = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001bb8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001bbc:	6013      	str	r3, [r2, #0]
        /*read sensor hub status*/
        buf[0] = 0x00;
 8001bbe:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001bc2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001bc6:	3b50      	subs	r3, #80	; 0x50
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
        buf[1] = 0x00;
 8001bcc:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001bd0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001bd4:	3b50      	subs	r3, #80	; 0x50
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	705a      	strb	r2, [r3, #1]
        ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001bda:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001bde:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001be2:	3a50      	subs	r2, #80	; 0x50
 8001be4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2302      	movs	r3, #2
 8001bec:	21aa      	movs	r1, #170	; 0xaa
 8001bee:	485c      	ldr	r0, [pc, #368]	; (8001d60 <main+0xdc8>)
 8001bf0:	f001 f998 	bl	8002f24 <HAL_I2C_Master_Transmit>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001bfa:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001bfe:	7013      	strb	r3, [r2, #0]
        if ( ret != HAL_OK ) 
 8001c00:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001c04:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <main+0xc8a>
            {
            printf("Error sensor write\r\n");
 8001c0e:	4857      	ldr	r0, [pc, #348]	; (8001d6c <main+0xdd4>)
 8001c10:	f004 ff9a 	bl	8006b48 <puts>
            error = 1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001c1a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001c1e:	6013      	str	r3, [r2, #0]
            continue;
 8001c20:	e23c      	b.n	800209c <main+0x1104>
            } 
        ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 8001c22:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001c26:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001c2a:	3a50      	subs	r2, #80	; 0x50
 8001c2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2302      	movs	r3, #2
 8001c34:	21ab      	movs	r1, #171	; 0xab
 8001c36:	484a      	ldr	r0, [pc, #296]	; (8001d60 <main+0xdc8>)
 8001c38:	f001 fa68 	bl	800310c <HAL_I2C_Master_Receive>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001c42:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001c46:	7013      	strb	r3, [r2, #0]
        if(buf[1] != 0x08)
 8001c48:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001c4c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001c50:	3b50      	subs	r3, #80	; 0x50
 8001c52:	785b      	ldrb	r3, [r3, #1]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d00a      	beq.n	8001c6e <main+0xcd6>
            {
            printf("Data bit not ready %x \n", buf[2]);
 8001c58:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001c5c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001c60:	3b50      	subs	r3, #80	; 0x50
 8001c62:	789b      	ldrb	r3, [r3, #2]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4842      	ldr	r0, [pc, #264]	; (8001d70 <main+0xdd8>)
 8001c68:	f004 fee8 	bl	8006a3c <iprintf>
            continue;
 8001c6c:	e216      	b.n	800209c <main+0x1104>
            } // end if
        else if(buf[0] != 0x0)
 8001c6e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001c72:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001c76:	3b50      	subs	r3, #80	; 0x50
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00a      	beq.n	8001c94 <main+0xcfc>
            {
            printf(" %x error \n", buf[1]);
 8001c7e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001c82:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001c86:	3b50      	subs	r3, #80	; 0x50
 8001c88:	785b      	ldrb	r3, [r3, #1]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4839      	ldr	r0, [pc, #228]	; (8001d74 <main+0xddc>)
 8001c8e:	f004 fed5 	bl	8006a3c <iprintf>
            continue;
 8001c92:	e203      	b.n	800209c <main+0x1104>
            } // end if
        /*read FIFO hub status*/
        buf[0] = 0x12;
 8001c94:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001c98:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001c9c:	3b50      	subs	r3, #80	; 0x50
 8001c9e:	2212      	movs	r2, #18
 8001ca0:	701a      	strb	r2, [r3, #0]
        buf[1] = 0x00;
 8001ca2:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ca6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001caa:	3b50      	subs	r3, #80	; 0x50
 8001cac:	2200      	movs	r2, #0
 8001cae:	705a      	strb	r2, [r3, #1]
        ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001cb0:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001cb4:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001cb8:	3a50      	subs	r2, #80	; 0x50
 8001cba:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	21aa      	movs	r1, #170	; 0xaa
 8001cc4:	4826      	ldr	r0, [pc, #152]	; (8001d60 <main+0xdc8>)
 8001cc6:	f001 f92d 	bl	8002f24 <HAL_I2C_Master_Transmit>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001cd0:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001cd4:	7013      	strb	r3, [r2, #0]
        if ( ret != HAL_OK ) 
 8001cd6:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001cda:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <main+0xd60>
            {
            printf("Error algorithm write\r\n");
 8001ce4:	4824      	ldr	r0, [pc, #144]	; (8001d78 <main+0xde0>)
 8001ce6:	f004 ff2f 	bl	8006b48 <puts>
            error = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001cf0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001cf4:	6013      	str	r3, [r2, #0]
            continue;
 8001cf6:	e1d1      	b.n	800209c <main+0x1104>
            } 
        ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0], 2, 5000);
 8001cf8:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001cfc:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001d00:	3a50      	subs	r2, #80	; 0x50
 8001d02:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	21ab      	movs	r1, #171	; 0xab
 8001d0c:	4814      	ldr	r0, [pc, #80]	; (8001d60 <main+0xdc8>)
 8001d0e:	f001 f9fd 	bl	800310c <HAL_I2C_Master_Receive>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d18:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001d1c:	7013      	strb	r3, [r2, #0]
        int sample_size = buf[1];
 8001d1e:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001d22:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001d26:	3b50      	subs	r3, #80	; 0x50
 8001d28:	785b      	ldrb	r3, [r3, #1]
 8001d2a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001d2e:	f502 7202 	add.w	r2, r2, #520	; 0x208
 8001d32:	6013      	str	r3, [r2, #0]
        if(buf[0] != 0x0)
 8001d34:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001d38:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001d3c:	3b50      	subs	r3, #80	; 0x50
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <main+0xde4>
            {
            printf(" %x error \n", buf[1]);
 8001d44:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001d48:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001d4c:	3b50      	subs	r3, #80	; 0x50
 8001d4e:	785b      	ldrb	r3, [r3, #1]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4808      	ldr	r0, [pc, #32]	; (8001d74 <main+0xddc>)
 8001d54:	f004 fe72 	bl	8006a3c <iprintf>
            continue;
 8001d58:	e1a0      	b.n	800209c <main+0x1104>
 8001d5a:	bf00      	nop
 8001d5c:	08008ab8 	.word	0x08008ab8
 8001d60:	20000204 	.word	0x20000204
 8001d64:	08008ae0 	.word	0x08008ae0
 8001d68:	08008b00 	.word	0x08008b00
 8001d6c:	08008b24 	.word	0x08008b24
 8001d70:	08008b38 	.word	0x08008b38
 8001d74:	08008b50 	.word	0x08008b50
 8001d78:	08008b5c 	.word	0x08008b5c
            } // end if
        /* read the data */
        buf[0] = 0x12;
 8001d7c:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001d80:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001d84:	3b50      	subs	r3, #80	; 0x50
 8001d86:	2212      	movs	r2, #18
 8001d88:	701a      	strb	r2, [r3, #0]
        buf[1] = 0x01;
 8001d8a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001d8e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001d92:	3b50      	subs	r3, #80	; 0x50
 8001d94:	2201      	movs	r2, #1
 8001d96:	705a      	strb	r2, [r3, #1]
        ret = HAL_I2C_Master_Transmit(&hi2c1, Write_HM, &buf[0], 2, 5000);
 8001d98:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001d9c:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001da0:	3a50      	subs	r2, #80	; 0x50
 8001da2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	2302      	movs	r3, #2
 8001daa:	21aa      	movs	r1, #170	; 0xaa
 8001dac:	48bc      	ldr	r0, [pc, #752]	; (80020a0 <main+0x1108>)
 8001dae:	f001 f8b9 	bl	8002f24 <HAL_I2C_Master_Transmit>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001db8:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001dbc:	7013      	strb	r3, [r2, #0]
        ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0],2, 5000);
 8001dbe:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001dc2:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001dc6:	3a50      	subs	r2, #80	; 0x50
 8001dc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2302      	movs	r3, #2
 8001dd0:	21ab      	movs	r1, #171	; 0xab
 8001dd2:	48b3      	ldr	r0, [pc, #716]	; (80020a0 <main+0x1108>)
 8001dd4:	f001 f99a 	bl	800310c <HAL_I2C_Master_Receive>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001dde:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001de2:	7013      	strb	r3, [r2, #0]
        if ( ret != HAL_OK ) 
 8001de4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001de8:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <main+0xe6e>
            {
            printf("Error algorithm read\r\n");
 8001df2:	48ac      	ldr	r0, [pc, #688]	; (80020a4 <main+0x110c>)
 8001df4:	f004 fea8 	bl	8006b48 <puts>
            error = 1;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001dfe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001e02:	6013      	str	r3, [r2, #0]
            continue;
 8001e04:	e14a      	b.n	800209c <main+0x1104>
            } // end if
        int length_of_data = 1 + 18*sample_size;
 8001e06:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001e0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f107 1204 	add.w	r2, r7, #262148	; 0x40004
 8001e1e:	f502 4262 	add.w	r2, r2, #57856	; 0xe200
 8001e22:	6013      	str	r3, [r2, #0]
        ret = HAL_I2C_Master_Receive(&hi2c1, Read_HM, &buf[0],length_of_data, 5000);
 8001e24:	f107 1304 	add.w	r3, r7, #262148	; 0x40004
 8001e28:	f503 4362 	add.w	r3, r3, #57856	; 0xe200
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	f507 3278 	add.w	r2, r7, #253952	; 0x3e000
 8001e34:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8001e38:	3a50      	subs	r2, #80	; 0x50
 8001e3a:	f241 3188 	movw	r1, #5000	; 0x1388
 8001e3e:	9100      	str	r1, [sp, #0]
 8001e40:	21ab      	movs	r1, #171	; 0xab
 8001e42:	4897      	ldr	r0, [pc, #604]	; (80020a0 <main+0x1108>)
 8001e44:	f001 f962 	bl	800310c <HAL_I2C_Master_Receive>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001e4e:	f202 221b 	addw	r2, r2, #539	; 0x21b
 8001e52:	7013      	strb	r3, [r2, #0]
        //ret = HAL_I2C_Master_Recieve(&hi2c1, Read_HM, &buf[0],2, 5000); //checks status
        if(buf[0] != 0x0)
 8001e54:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001e58:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001e5c:	3b50      	subs	r3, #80	; 0x50
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <main+0xee2>
            {
            printf(" %x error \n", buf[1]);
 8001e64:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001e68:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001e6c:	3b50      	subs	r3, #80	; 0x50
 8001e6e:	785b      	ldrb	r3, [r3, #1]
 8001e70:	4619      	mov	r1, r3
 8001e72:	488d      	ldr	r0, [pc, #564]	; (80020a8 <main+0x1110>)
 8001e74:	f004 fde2 	bl	8006a3c <iprintf>
            continue;
 8001e78:	e110      	b.n	800209c <main+0x1104>
            } // end if
        /*this gets us our data for heart_rate and SpO2*/
        float viable = 0.0; //counts how many viable samples we have
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001e82:	f502 7209 	add.w	r2, r2, #548	; 0x224
 8001e86:	6013      	str	r3, [r2, #0]
        for(int i = 13; i < length_of_data; i = i + 18)
 8001e88:	230d      	movs	r3, #13
 8001e8a:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001e8e:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e0b4      	b.n	8002000 <main+0x1068>
            {
            int temp_heart = (buf[i]<<8) + buf[i+1];
 8001e96:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001e9a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001e9e:	3b50      	subs	r3, #80	; 0x50
 8001ea0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001ea4:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	021a      	lsls	r2, r3, #8
 8001eb0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001eb4:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	1c59      	adds	r1, r3, #1
 8001ebc:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001ec0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001ec4:	3b50      	subs	r3, #80	; 0x50
 8001ec6:	5c5b      	ldrb	r3, [r3, r1]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001ece:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001ed2:	6013      	str	r3, [r2, #0]
            temp_heart = temp_heart >> 1; //need to change to account for the 0.1
 8001ed4:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001ed8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	105b      	asrs	r3, r3, #1
 8001ee0:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001ee4:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001ee8:	6013      	str	r3, [r2, #0]
            int temp_SpO2 = (buf[i+3]<<8) + buf[i+4];
 8001eea:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001eee:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	1cda      	adds	r2, r3, #3
 8001ef6:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001efa:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001efe:	3b50      	subs	r3, #80	; 0x50
 8001f00:	5c9b      	ldrb	r3, [r3, r2]
 8001f02:	021a      	lsls	r2, r3, #8
 8001f04:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001f08:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	1d19      	adds	r1, r3, #4
 8001f10:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001f14:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001f18:	3b50      	subs	r3, #80	; 0x50
 8001f1a:	5c5b      	ldrb	r3, [r3, r1]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001f22:	f502 72fe 	add.w	r2, r2, #508	; 0x1fc
 8001f26:	6013      	str	r3, [r2, #0]
            temp_heart = temp_heart >> 1; //need to change to account for the 0.1
 8001f28:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001f2c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	105b      	asrs	r3, r3, #1
 8001f34:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001f38:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8001f3c:	6013      	str	r3, [r2, #0]
            int finger_status = buf[i+5];
 8001f3e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001f42:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1d5a      	adds	r2, r3, #5
 8001f4a:	f507 3378 	add.w	r3, r7, #253952	; 0x3e000
 8001f4e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001f52:	3b50      	subs	r3, #80	; 0x50
 8001f54:	5c9b      	ldrb	r3, [r3, r2]
 8001f56:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001f5a:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 8001f5e:	6013      	str	r3, [r2, #0]
            if(finger_status == 3)
 8001f60:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001f64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d13d      	bne.n	8001fea <main+0x1052>
                {
                ++viable;
 8001f6e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001f72:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f82:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001f86:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001f8a:	edc3 7a00 	vstr	s15, [r3]
                heart_rate += temp_heart;
 8001f8e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001f92:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001fa4:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8001fa8:	ed93 7a00 	vldr	s14, [r3]
 8001fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb0:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001fb4:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8001fb8:	edc3 7a00 	vstr	s15, [r3]
                SpO2 += temp_SpO2;
 8001fbc:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001fc0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fce:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001fd2:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001fd6:	ed93 7a00 	vldr	s14, [r3]
 8001fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fde:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001fe2:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001fe6:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 13; i < length_of_data; i = i + 18)
 8001fea:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8001fee:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3312      	adds	r3, #18
 8001ff6:	f507 229c 	add.w	r2, r7, #319488	; 0x4e000
 8001ffa:	f502 7208 	add.w	r2, r2, #544	; 0x220
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002004:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	f107 1304 	add.w	r3, r7, #262148	; 0x40004
 800200e:	f503 4362 	add.w	r3, r3, #57856	; 0xe200
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	f6ff af3e 	blt.w	8001e96 <main+0xefe>
                } // end if
            } // end for
        heart_rate = heart_rate / viable;
 800201a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800201e:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8002022:	edd3 6a00 	vldr	s13, [r3]
 8002026:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800202a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800202e:	ed93 7a00 	vldr	s14, [r3]
 8002032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002036:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800203a:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 800203e:	edc3 7a00 	vstr	s15, [r3]
        SpO2 = SpO2 / viable; //average out our sample value
 8002042:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002046:	f503 730a 	add.w	r3, r3, #552	; 0x228
 800204a:	edd3 6a00 	vldr	s13, [r3]
 800204e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002052:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8002056:	ed93 7a00 	vldr	s14, [r3]
 800205a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800205e:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002062:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002066:	edc3 7a00 	vstr	s15, [r3]
        printf("heart: %f, SpO2: %f", heart_rate, SpO2);
 800206a:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 800206e:	f503 730b 	add.w	r3, r3, #556	; 0x22c
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	f7fe fa80 	bl	8000578 <__aeabi_f2d>
 8002078:	4604      	mov	r4, r0
 800207a:	460d      	mov	r5, r1
 800207c:	f507 239c 	add.w	r3, r7, #319488	; 0x4e000
 8002080:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	f7fe fa77 	bl	8000578 <__aeabi_f2d>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	e9cd 2300 	strd	r2, r3, [sp]
 8002092:	4622      	mov	r2, r4
 8002094:	462b      	mov	r3, r5
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <main+0x1114>)
 8002098:	f004 fcd0 	bl	8006a3c <iprintf>
      {
 800209c:	e585      	b.n	8001baa <main+0xc12>
 800209e:	bf00      	nop
 80020a0:	20000204 	.word	0x20000204
 80020a4:	08008b74 	.word	0x08008b74
 80020a8:	08008b50 	.word	0x08008b50
 80020ac:	08008b8c 	.word	0x08008b8c

080020b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b0bc      	sub	sp, #240	; 0xf0
 80020b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020ba:	2244      	movs	r2, #68	; 0x44
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 fef0 	bl	8005ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2294      	movs	r2, #148	; 0x94
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f003 fee2 	bl	8005ea4 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020e4:	f001 fba0 	bl	8003828 <HAL_PWREx_ControlVoltageScaling>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80020ee:	f000 f95d 	bl	80023ac <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80020f2:	2310      	movs	r3, #16
 80020f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80020f8:	2301      	movs	r3, #1
 80020fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002104:	2360      	movs	r3, #96	; 0x60
 8002106:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002110:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002114:	4618      	mov	r0, r3
 8002116:	f001 fc3b 	bl	8003990 <HAL_RCC_OscConfig>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002120:	f000 f944 	bl	80023ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002124:	230f      	movs	r3, #15
 8002126:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002142:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f002 f847 	bl	80041dc <HAL_RCC_ClockConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002154:	f000 f92a 	bl	80023ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8002158:	2360      	movs	r3, #96	; 0x60
 800215a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800215c:	2300      	movs	r3, #0
 800215e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002160:	2300      	movs	r3, #0
 8002162:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4618      	mov	r0, r3
 8002168:	f002 faea 	bl	8004740 <HAL_RCCEx_PeriphCLKConfig>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002172:	f000 f91b 	bl	80023ac <Error_Handler>
  }
}
 8002176:	bf00      	nop
 8002178:	37f0      	adds	r7, #240	; 0xf0
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <MX_I2C1_Init+0x74>)
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <MX_I2C1_Init+0x78>)
 8002188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_I2C1_Init+0x74>)
 800218c:	f640 6214 	movw	r2, #3604	; 0xe14
 8002190:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002192:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <MX_I2C1_Init+0x74>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <MX_I2C1_Init+0x74>)
 800219a:	2201      	movs	r2, #1
 800219c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021b0:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021bc:	480d      	ldr	r0, [pc, #52]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021be:	f000 fe21 	bl	8002e04 <HAL_I2C_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021c8:	f000 f8f0 	bl	80023ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021cc:	2100      	movs	r1, #0
 80021ce:	4809      	ldr	r0, [pc, #36]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021d0:	f001 fa72 	bl	80036b8 <HAL_I2CEx_ConfigAnalogFilter>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80021da:	f000 f8e7 	bl	80023ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021de:	2100      	movs	r1, #0
 80021e0:	4804      	ldr	r0, [pc, #16]	; (80021f4 <MX_I2C1_Init+0x74>)
 80021e2:	f001 fab4 	bl	800374e <HAL_I2CEx_ConfigDigitalFilter>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80021ec:	f000 f8de 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000204 	.word	0x20000204
 80021f8:	40005400 	.word	0x40005400

080021fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 8002202:	4a23      	ldr	r2, [pc, #140]	; (8002290 <MX_LPUART1_UART_Init+0x94>)
 8002204:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 8002208:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800220c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002214:	4b1d      	ldr	r3, [pc, #116]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002220:	4b1a      	ldr	r3, [pc, #104]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 8002222:	220c      	movs	r2, #12
 8002224:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222c:	4b17      	ldr	r3, [pc, #92]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 800222e:	2200      	movs	r2, #0
 8002230:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 8002234:	2200      	movs	r2, #0
 8002236:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 800223a:	2200      	movs	r2, #0
 800223c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800223e:	4b13      	ldr	r3, [pc, #76]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 8002240:	2200      	movs	r2, #0
 8002242:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002244:	4811      	ldr	r0, [pc, #68]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 8002246:	f002 ff93 	bl	8005170 <HAL_UART_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8002250:	f000 f8ac 	bl	80023ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002254:	2100      	movs	r1, #0
 8002256:	480d      	ldr	r0, [pc, #52]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 8002258:	f003 fce5 	bl	8005c26 <HAL_UARTEx_SetTxFifoThreshold>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002262:	f000 f8a3 	bl	80023ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002266:	2100      	movs	r1, #0
 8002268:	4808      	ldr	r0, [pc, #32]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 800226a:	f003 fd1a 	bl	8005ca2 <HAL_UARTEx_SetRxFifoThreshold>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002274:	f000 f89a 	bl	80023ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <MX_LPUART1_UART_Init+0x90>)
 800227a:	f003 fc9b 	bl	8005bb4 <HAL_UARTEx_DisableFifoMode>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002284:	f000 f892 	bl	80023ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000250 	.word	0x20000250
 8002290:	40008000 	.word	0x40008000

08002294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <MX_GPIO_Init+0xe8>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	4a33      	ldr	r2, [pc, #204]	; (800237c <MX_GPIO_Init+0xe8>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b6:	4b31      	ldr	r3, [pc, #196]	; (800237c <MX_GPIO_Init+0xe8>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80022c2:	4b2e      	ldr	r3, [pc, #184]	; (800237c <MX_GPIO_Init+0xe8>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4a2d      	ldr	r2, [pc, #180]	; (800237c <MX_GPIO_Init+0xe8>)
 80022c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <MX_GPIO_Init+0xe8>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 80022da:	f001 fb49 	bl	8003970 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022de:	4b27      	ldr	r3, [pc, #156]	; (800237c <MX_GPIO_Init+0xe8>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	4a26      	ldr	r2, [pc, #152]	; (800237c <MX_GPIO_Init+0xe8>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ea:	4b24      	ldr	r3, [pc, #144]	; (800237c <MX_GPIO_Init+0xe8>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <MX_GPIO_Init+0xe8>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4a20      	ldr	r2, [pc, #128]	; (800237c <MX_GPIO_Init+0xe8>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002302:	4b1e      	ldr	r3, [pc, #120]	; (800237c <MX_GPIO_Init+0xe8>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	2103      	movs	r1, #3
 8002312:	481b      	ldr	r0, [pc, #108]	; (8002380 <MX_GPIO_Init+0xec>)
 8002314:	f000 fd5e 	bl	8002dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002318:	2303      	movs	r3, #3
 800231a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231c:	2312      	movs	r3, #18
 800231e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002320:	2301      	movs	r3, #1
 8002322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002324:	2303      	movs	r3, #3
 8002326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002328:	2304      	movs	r3, #4
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	4619      	mov	r1, r3
 8002332:	4814      	ldr	r0, [pc, #80]	; (8002384 <MX_GPIO_Init+0xf0>)
 8002334:	f000 fbbc 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002338:	2303      	movs	r3, #3
 800233a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233c:	2301      	movs	r3, #1
 800233e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	480c      	ldr	r0, [pc, #48]	; (8002380 <MX_GPIO_Init+0xec>)
 8002350:	f000 fbae 	bl	8002ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002354:	2360      	movs	r3, #96	; 0x60
 8002356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002364:	2307      	movs	r3, #7
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	4804      	ldr	r0, [pc, #16]	; (8002380 <MX_GPIO_Init+0xec>)
 8002370:	f000 fb9e 	bl	8002ab0 <HAL_GPIO_Init>

}
 8002374:	bf00      	nop
 8002376:	3728      	adds	r7, #40	; 0x28
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	48000c00 	.word	0x48000c00
 8002384:	48000800 	.word	0x48000800

08002388 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002390:	1d39      	adds	r1, r7, #4
 8002392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002396:	2201      	movs	r2, #1
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <__io_putchar+0x20>)
 800239a:	f002 ff39 	bl	8005210 <HAL_UART_Transmit>
  return ch;
 800239e:	687b      	ldr	r3, [r7, #4]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000250 	.word	0x20000250

080023ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023b0:	b672      	cpsid	i
}
 80023b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <Error_Handler+0x8>
	...

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_MspInit+0x44>)
 80023c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c2:	4a0e      	ldr	r2, [pc, #56]	; (80023fc <HAL_MspInit+0x44>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6613      	str	r3, [r2, #96]	; 0x60
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <HAL_MspInit+0x44>)
 80023cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_MspInit+0x44>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	4a08      	ldr	r2, [pc, #32]	; (80023fc <HAL_MspInit+0x44>)
 80023dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e0:	6593      	str	r3, [r2, #88]	; 0x58
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_MspInit+0x44>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000

08002400 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a17      	ldr	r2, [pc, #92]	; (800247c <HAL_I2C_MspInit+0x7c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d128      	bne.n	8002474 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <HAL_I2C_MspInit+0x80>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	4a16      	ldr	r2, [pc, #88]	; (8002480 <HAL_I2C_MspInit+0x80>)
 8002428:	f043 0302 	orr.w	r3, r3, #2
 800242c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_I2C_MspInit+0x80>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800243a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800243e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002440:	2312      	movs	r3, #18
 8002442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002444:	2301      	movs	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800244c:	2304      	movs	r3, #4
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	480b      	ldr	r0, [pc, #44]	; (8002484 <HAL_I2C_MspInit+0x84>)
 8002458:	f000 fb2a 	bl	8002ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_I2C_MspInit+0x80>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_I2C_MspInit+0x80>)
 8002462:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002466:	6593      	str	r3, [r2, #88]	; 0x58
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <HAL_I2C_MspInit+0x80>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002474:	bf00      	nop
 8002476:	3728      	adds	r7, #40	; 0x28
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40005400 	.word	0x40005400
 8002480:	40021000 	.word	0x40021000
 8002484:	48000400 	.word	0x48000400

08002488 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	609a      	str	r2, [r3, #8]
 800249c:	60da      	str	r2, [r3, #12]
 800249e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_UART_MspInit+0x80>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d12a      	bne.n	8002500 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_UART_MspInit+0x84>)
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_UART_MspInit+0x84>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_UART_MspInit+0x84>)
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_UART_MspInit+0x84>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	4a11      	ldr	r2, [pc, #68]	; (800250c <HAL_UART_MspInit+0x84>)
 80024c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <HAL_UART_MspInit+0x84>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80024da:	f001 fa49 	bl	8003970 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80024de:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80024f0:	2308      	movs	r3, #8
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	4619      	mov	r1, r3
 80024fa:	4805      	ldr	r0, [pc, #20]	; (8002510 <HAL_UART_MspInit+0x88>)
 80024fc:	f000 fad8 	bl	8002ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40008000 	.word	0x40008000
 800250c:	40021000 	.word	0x40021000
 8002510:	48001800 	.word	0x48001800

08002514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002518:	e7fe      	b.n	8002518 <NMI_Handler+0x4>

0800251a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800251e:	e7fe      	b.n	800251e <HardFault_Handler+0x4>

08002520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <MemManage_Handler+0x4>

08002526 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <BusFault_Handler+0x4>

0800252c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <UsageFault_Handler+0x4>

08002532 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002560:	f000 f97c 	bl	800285c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}

08002568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
	return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_kill>:

int _kill(int pid, int sig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002582:	f003 fc53 	bl	8005e2c <__errno>
 8002586:	4603      	mov	r3, r0
 8002588:	2216      	movs	r2, #22
 800258a:	601a      	str	r2, [r3, #0]
	return -1;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_exit>:

void _exit (int status)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ffe7 	bl	8002578 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025aa:	e7fe      	b.n	80025aa <_exit+0x12>

080025ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e00a      	b.n	80025d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025be:	f3af 8000 	nop.w
 80025c2:	4601      	mov	r1, r0
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	60ba      	str	r2, [r7, #8]
 80025ca:	b2ca      	uxtb	r2, r1
 80025cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dbf0      	blt.n	80025be <_read+0x12>
	}

return len;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e009      	b.n	800260c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	60ba      	str	r2, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fec1 	bl	8002388 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	429a      	cmp	r2, r3
 8002612:	dbf1      	blt.n	80025f8 <_write+0x12>
	}
	return len;
 8002614:	687b      	ldr	r3, [r7, #4]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <_close>:

int _close(int file)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
	return -1;
 8002626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002646:	605a      	str	r2, [r3, #4]
	return 0;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <_isatty>:

int _isatty(int file)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
	return 1;
 800265e:	2301      	movs	r3, #1
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
	return 0;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3714      	adds	r7, #20
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f003 fbb8 	bl	8005e2c <__errno>
 80026bc:	4603      	mov	r3, r0
 80026be:	220c      	movs	r2, #12
 80026c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	200a0000 	.word	0x200a0000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	200001f8 	.word	0x200001f8
 80026f0:	200002f0 	.word	0x200002f0

080026f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f8:	4b17      	ldr	r3, [pc, #92]	; (8002758 <SystemInit+0x64>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	4a16      	ldr	r2, [pc, #88]	; (8002758 <SystemInit+0x64>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <SystemInit+0x68>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a13      	ldr	r2, [pc, #76]	; (800275c <SystemInit+0x68>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <SystemInit+0x68>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <SystemInit+0x68>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a0f      	ldr	r2, [pc, #60]	; (800275c <SystemInit+0x68>)
 8002720:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002724:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002728:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <SystemInit+0x68>)
 800272c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002730:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <SystemInit+0x68>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a09      	ldr	r2, [pc, #36]	; (800275c <SystemInit+0x68>)
 8002738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800273c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <SystemInit+0x68>)
 8002740:	2200      	movs	r2, #0
 8002742:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <SystemInit+0x64>)
 8002746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800274a:	609a      	str	r2, [r3, #8]
#endif
}
 800274c:	bf00      	nop
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000ed00 	.word	0xe000ed00
 800275c:	40021000 	.word	0x40021000

08002760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002798 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002764:	f7ff ffc6 	bl	80026f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002768:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800276a:	e003      	b.n	8002774 <LoopCopyDataInit>

0800276c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800276e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002770:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002772:	3104      	adds	r1, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002774:	480a      	ldr	r0, [pc, #40]	; (80027a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002778:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800277a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800277c:	d3f6      	bcc.n	800276c <CopyDataInit>
	ldr	r2, =_sbss
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002780:	e002      	b.n	8002788 <LoopFillZerobss>

08002782 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002782:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002784:	f842 3b04 	str.w	r3, [r2], #4

08002788 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <LoopForever+0x16>)
	cmp	r2, r3
 800278a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800278c:	d3f9      	bcc.n	8002782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278e:	f003 fb65 	bl	8005e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002792:	f7fe fc01 	bl	8000f98 <main>

08002796 <LoopForever>:

LoopForever:
    b LoopForever
 8002796:	e7fe      	b.n	8002796 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002798:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 800279c:	08009010 	.word	0x08009010
	ldr	r0, =_sdata
 80027a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027a4:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80027a8:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80027ac:	200002f0 	.word	0x200002f0

080027b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027b0:	e7fe      	b.n	80027b0 <ADC1_IRQHandler>

080027b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027bc:	2003      	movs	r0, #3
 80027be:	f000 f943 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027c2:	2000      	movs	r0, #0
 80027c4:	f000 f80e 	bl	80027e4 <HAL_InitTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	71fb      	strb	r3, [r7, #7]
 80027d2:	e001      	b.n	80027d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027d4:	f7ff fdf0 	bl	80023b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027d8:	79fb      	ldrb	r3, [r7, #7]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027f0:	4b17      	ldr	r3, [pc, #92]	; (8002850 <HAL_InitTick+0x6c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d023      	beq.n	8002840 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027f8:	4b16      	ldr	r3, [pc, #88]	; (8002854 <HAL_InitTick+0x70>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b14      	ldr	r3, [pc, #80]	; (8002850 <HAL_InitTick+0x6c>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f941 	bl	8002a96 <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b0f      	cmp	r3, #15
 800281e:	d809      	bhi.n	8002834 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002820:	2200      	movs	r2, #0
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002828:	f000 f919 	bl	8002a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800282c:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_InitTick+0x74>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e007      	b.n	8002844 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	e004      	b.n	8002844 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e001      	b.n	8002844 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000008 	.word	0x20000008
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002860:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_IncTick+0x20>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b06      	ldr	r3, [pc, #24]	; (8002880 <HAL_IncTick+0x24>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_IncTick+0x24>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000008 	.word	0x20000008
 8002880:	200002dc 	.word	0x200002dc

08002884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return uwTick;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_GetTick+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	200002dc 	.word	0x200002dc

0800289c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a4:	f7ff ffee 	bl	8002884 <HAL_GetTick>
 80028a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b4:	d005      	beq.n	80028c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <HAL_Delay+0x44>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028c2:	bf00      	nop
 80028c4:	f7ff ffde 	bl	8002884 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d8f7      	bhi.n	80028c4 <HAL_Delay+0x28>
  {
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000008 	.word	0x20000008

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	; (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	; (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a14:	d301      	bcc.n	8002a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <SysTick_Config+0x40>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a22:	210f      	movs	r1, #15
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a28:	f7ff ff8e 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <SysTick_Config+0x40>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a32:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <SysTick_Config+0x40>)
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	e000e010 	.word	0xe000e010

08002a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff47 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a70:	f7ff ff5c 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff ff8e 	bl	800299c <NVIC_EncodePriority>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff5d 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff ffb0 	bl	8002a04 <SysTick_Config>
 8002aa4:	4603      	mov	r3, r0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002abe:	e166      	b.n	8002d8e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 8158 	beq.w	8002d88 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d00b      	beq.n	8002af8 <HAL_GPIO_Init+0x48>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d007      	beq.n	8002af8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aec:	2b11      	cmp	r3, #17
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2b12      	cmp	r3, #18
 8002af6:	d130      	bne.n	8002b5a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b2e:	2201      	movs	r2, #1
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 0201 	and.w	r2, r3, #1
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	2203      	movs	r2, #3
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0xea>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b12      	cmp	r3, #18
 8002b98:	d123      	bne.n	8002be2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	08da      	lsrs	r2, r3, #3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3208      	adds	r2, #8
 8002ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	08da      	lsrs	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3208      	adds	r2, #8
 8002bdc:	6939      	ldr	r1, [r7, #16]
 8002bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	2203      	movs	r2, #3
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0203 	and.w	r2, r3, #3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 80b2 	beq.w	8002d88 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c24:	4b61      	ldr	r3, [pc, #388]	; (8002dac <HAL_GPIO_Init+0x2fc>)
 8002c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c28:	4a60      	ldr	r2, [pc, #384]	; (8002dac <HAL_GPIO_Init+0x2fc>)
 8002c2a:	f043 0301 	orr.w	r3, r3, #1
 8002c2e:	6613      	str	r3, [r2, #96]	; 0x60
 8002c30:	4b5e      	ldr	r3, [pc, #376]	; (8002dac <HAL_GPIO_Init+0x2fc>)
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c3c:	4a5c      	ldr	r2, [pc, #368]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	3302      	adds	r3, #2
 8002c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	220f      	movs	r2, #15
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c66:	d02b      	beq.n	8002cc0 <HAL_GPIO_Init+0x210>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a52      	ldr	r2, [pc, #328]	; (8002db4 <HAL_GPIO_Init+0x304>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d025      	beq.n	8002cbc <HAL_GPIO_Init+0x20c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <HAL_GPIO_Init+0x308>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d01f      	beq.n	8002cb8 <HAL_GPIO_Init+0x208>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a50      	ldr	r2, [pc, #320]	; (8002dbc <HAL_GPIO_Init+0x30c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d019      	beq.n	8002cb4 <HAL_GPIO_Init+0x204>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a4f      	ldr	r2, [pc, #316]	; (8002dc0 <HAL_GPIO_Init+0x310>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d013      	beq.n	8002cb0 <HAL_GPIO_Init+0x200>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a4e      	ldr	r2, [pc, #312]	; (8002dc4 <HAL_GPIO_Init+0x314>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00d      	beq.n	8002cac <HAL_GPIO_Init+0x1fc>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a4d      	ldr	r2, [pc, #308]	; (8002dc8 <HAL_GPIO_Init+0x318>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <HAL_GPIO_Init+0x1f8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a4c      	ldr	r2, [pc, #304]	; (8002dcc <HAL_GPIO_Init+0x31c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d101      	bne.n	8002ca4 <HAL_GPIO_Init+0x1f4>
 8002ca0:	2307      	movs	r3, #7
 8002ca2:	e00e      	b.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	e00c      	b.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002ca8:	2306      	movs	r3, #6
 8002caa:	e00a      	b.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002cac:	2305      	movs	r3, #5
 8002cae:	e008      	b.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	e006      	b.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e004      	b.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e002      	b.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <HAL_GPIO_Init+0x212>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	f002 0203 	and.w	r2, r2, #3
 8002cc8:	0092      	lsls	r2, r2, #2
 8002cca:	4093      	lsls	r3, r2
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cd2:	4937      	ldr	r1, [pc, #220]	; (8002db0 <HAL_GPIO_Init+0x300>)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	089b      	lsrs	r3, r3, #2
 8002cd8:	3302      	adds	r3, #2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ce0:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d04:	4a32      	ldr	r2, [pc, #200]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d2e:	4a28      	ldr	r2, [pc, #160]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d34:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d58:	4a1d      	ldr	r2, [pc, #116]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d5e:	4b1c      	ldr	r3, [pc, #112]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <HAL_GPIO_Init+0x320>)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f47f ae91 	bne.w	8002ac0 <HAL_GPIO_Init+0x10>
  }
}
 8002d9e:	bf00      	nop
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40010000 	.word	0x40010000
 8002db4:	48000400 	.word	0x48000400
 8002db8:	48000800 	.word	0x48000800
 8002dbc:	48000c00 	.word	0x48000c00
 8002dc0:	48001000 	.word	0x48001000
 8002dc4:	48001400 	.word	0x48001400
 8002dc8:	48001800 	.word	0x48001800
 8002dcc:	48001c00 	.word	0x48001c00
 8002dd0:	40010400 	.word	0x40010400

08002dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
 8002de0:	4613      	mov	r3, r2
 8002de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de4:	787b      	ldrb	r3, [r7, #1]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dea:	887a      	ldrh	r2, [r7, #2]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002df0:	e002      	b.n	8002df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002df2:	887a      	ldrh	r2, [r7, #2]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e081      	b.n	8002f1a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fae8 	bl	8002400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	; 0x24
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e54:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e64:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	e006      	b.n	8002e8c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e8a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d104      	bne.n	8002e9e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	ea42 0103 	orr.w	r1, r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69d9      	ldr	r1, [r3, #28]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1a      	ldr	r2, [r3, #32]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	460b      	mov	r3, r1
 8002f32:	817b      	strh	r3, [r7, #10]
 8002f34:	4613      	mov	r3, r2
 8002f36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b20      	cmp	r3, #32
 8002f42:	f040 80da 	bne.w	80030fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_I2C_Master_Transmit+0x30>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e0d3      	b.n	80030fc <HAL_I2C_Master_Transmit+0x1d8>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f5c:	f7ff fc92 	bl	8002884 <HAL_GetTick>
 8002f60:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2319      	movs	r3, #25
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f9e6 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e0be      	b.n	80030fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2221      	movs	r2, #33	; 0x21
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2210      	movs	r2, #16
 8002f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	893a      	ldrh	r2, [r7, #8]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2bff      	cmp	r3, #255	; 0xff
 8002fae:	d90e      	bls.n	8002fce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	22ff      	movs	r2, #255	; 0xff
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	4b51      	ldr	r3, [pc, #324]	; (8003104 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fb48 	bl	800365c <I2C_TransferConfig>
 8002fcc:	e06c      	b.n	80030a8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	8979      	ldrh	r1, [r7, #10]
 8002fe0:	4b48      	ldr	r3, [pc, #288]	; (8003104 <HAL_I2C_Master_Transmit+0x1e0>)
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fb37 	bl	800365c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002fee:	e05b      	b.n	80030a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	6a39      	ldr	r1, [r7, #32]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f9e3 	bl	80033c0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e07b      	b.n	80030fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d034      	beq.n	80030a8 <HAL_I2C_Master_Transmit+0x184>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	2b00      	cmp	r3, #0
 8003044:	d130      	bne.n	80030a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	2200      	movs	r2, #0
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f975 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e04d      	b.n	80030fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2bff      	cmp	r3, #255	; 0xff
 8003068:	d90e      	bls.n	8003088 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	22ff      	movs	r2, #255	; 0xff
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	b2da      	uxtb	r2, r3
 8003076:	8979      	ldrh	r1, [r7, #10]
 8003078:	2300      	movs	r3, #0
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 faeb 	bl	800365c <I2C_TransferConfig>
 8003086:	e00f      	b.n	80030a8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003096:	b2da      	uxtb	r2, r3
 8003098:	8979      	ldrh	r1, [r7, #10]
 800309a:	2300      	movs	r3, #0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fada 	bl	800365c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d19e      	bne.n	8002ff0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	6a39      	ldr	r1, [r7, #32]
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f9c2 	bl	8003440 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e01a      	b.n	80030fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2220      	movs	r2, #32
 80030cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_I2C_Master_Transmit+0x1e4>)
 80030da:	400b      	ands	r3, r1
 80030dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	80002000 	.word	0x80002000
 8003108:	fe00e800 	.word	0xfe00e800

0800310c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	460b      	mov	r3, r1
 800311a:	817b      	strh	r3, [r7, #10]
 800311c:	4613      	mov	r3, r2
 800311e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b20      	cmp	r3, #32
 800312a:	f040 80db 	bne.w	80032e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_I2C_Master_Receive+0x30>
 8003138:	2302      	movs	r3, #2
 800313a:	e0d4      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003144:	f7ff fb9e 	bl	8002884 <HAL_GetTick>
 8003148:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	2319      	movs	r3, #25
 8003150:	2201      	movs	r2, #1
 8003152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f8f2 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0bf      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2222      	movs	r2, #34	; 0x22
 800316a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2210      	movs	r2, #16
 8003172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	893a      	ldrh	r2, [r7, #8]
 8003186:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003192:	b29b      	uxth	r3, r3
 8003194:	2bff      	cmp	r3, #255	; 0xff
 8003196:	d90e      	bls.n	80031b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	22ff      	movs	r2, #255	; 0xff
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	8979      	ldrh	r1, [r7, #10]
 80031a6:	4b52      	ldr	r3, [pc, #328]	; (80032f0 <HAL_I2C_Master_Receive+0x1e4>)
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fa54 	bl	800365c <I2C_TransferConfig>
 80031b4:	e06d      	b.n	8003292 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	8979      	ldrh	r1, [r7, #10]
 80031c8:	4b49      	ldr	r3, [pc, #292]	; (80032f0 <HAL_I2C_Master_Receive+0x1e4>)
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fa43 	bl	800365c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80031d6:	e05c      	b.n	8003292 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	6a39      	ldr	r1, [r7, #32]
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f96b 	bl	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e07c      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d034      	beq.n	8003292 <HAL_I2C_Master_Receive+0x186>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d130      	bne.n	8003292 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	2200      	movs	r2, #0
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f880 	bl	8003340 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e04d      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2bff      	cmp	r3, #255	; 0xff
 8003252:	d90e      	bls.n	8003272 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	22ff      	movs	r2, #255	; 0xff
 8003258:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325e:	b2da      	uxtb	r2, r3
 8003260:	8979      	ldrh	r1, [r7, #10]
 8003262:	2300      	movs	r3, #0
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f9f6 	bl	800365c <I2C_TransferConfig>
 8003270:	e00f      	b.n	8003292 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	b2da      	uxtb	r2, r3
 8003282:	8979      	ldrh	r1, [r7, #10]
 8003284:	2300      	movs	r3, #0
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f9e5 	bl	800365c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d19d      	bne.n	80031d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	6a39      	ldr	r1, [r7, #32]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f8cd 	bl	8003440 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e01a      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2220      	movs	r2, #32
 80032b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_I2C_Master_Receive+0x1e8>)
 80032c4:	400b      	ands	r3, r1
 80032c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e000      	b.n	80032e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80032e4:	2302      	movs	r3, #2
  }
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	80002400 	.word	0x80002400
 80032f4:	fe00e800 	.word	0xfe00e800

080032f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b02      	cmp	r3, #2
 800330c:	d103      	bne.n	8003316 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2200      	movs	r2, #0
 8003314:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b01      	cmp	r3, #1
 8003322:	d007      	beq.n	8003334 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	619a      	str	r2, [r3, #24]
  }
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	4613      	mov	r3, r2
 800334e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003350:	e022      	b.n	8003398 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003358:	d01e      	beq.n	8003398 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335a:	f7ff fa93 	bl	8002884 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d302      	bcc.n	8003370 <I2C_WaitOnFlagUntilTimeout+0x30>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d113      	bne.n	8003398 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e00f      	b.n	80033b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699a      	ldr	r2, [r3, #24]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	bf0c      	ite	eq
 80033a8:	2301      	moveq	r3, #1
 80033aa:	2300      	movne	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d0cd      	beq.n	8003352 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033cc:	e02c      	b.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f8dc 	bl	8003590 <I2C_IsAcknowledgeFailed>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e02a      	b.n	8003438 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033e8:	d01e      	beq.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7ff fa4b 	bl	8002884 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d113      	bne.n	8003428 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e007      	b.n	8003438 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b02      	cmp	r3, #2
 8003434:	d1cb      	bne.n	80033ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800344c:	e028      	b.n	80034a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68b9      	ldr	r1, [r7, #8]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f89c 	bl	8003590 <I2C_IsAcknowledgeFailed>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e026      	b.n	80034b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7ff fa0f 	bl	8002884 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d113      	bne.n	80034a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f043 0220 	orr.w	r2, r3, #32
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e007      	b.n	80034b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d1cf      	bne.n	800344e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034c4:	e055      	b.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f860 	bl	8003590 <I2C_IsAcknowledgeFailed>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e053      	b.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d129      	bne.n	800353c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d105      	bne.n	8003502 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	e03f      	b.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2220      	movs	r2, #32
 8003508:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003516:	400b      	ands	r3, r1
 8003518:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e022      	b.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353c:	f7ff f9a2 	bl	8002884 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d302      	bcc.n	8003552 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e007      	b.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b04      	cmp	r3, #4
 800357e:	d1a2      	bne.n	80034c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	fe00e800 	.word	0xfe00e800

08003590 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d151      	bne.n	800364e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035aa:	e022      	b.n	80035f2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035b2:	d01e      	beq.n	80035f2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b4:	f7ff f966 	bl	8002884 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d302      	bcc.n	80035ca <I2C_IsAcknowledgeFailed+0x3a>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d113      	bne.n	80035f2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	f043 0220 	orr.w	r2, r3, #32
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e02e      	b.n	8003650 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d1d5      	bne.n	80035ac <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2210      	movs	r2, #16
 8003606:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2220      	movs	r2, #32
 800360e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff fe71 	bl	80032f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6859      	ldr	r1, [r3, #4]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b0d      	ldr	r3, [pc, #52]	; (8003658 <I2C_IsAcknowledgeFailed+0xc8>)
 8003622:	400b      	ands	r3, r1
 8003624:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f043 0204 	orr.w	r2, r3, #4
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	fe00e800 	.word	0xfe00e800

0800365c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	817b      	strh	r3, [r7, #10]
 800366a:	4613      	mov	r3, r2
 800366c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	0d5b      	lsrs	r3, r3, #21
 8003678:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800367c:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <I2C_TransferConfig+0x58>)
 800367e:	430b      	orrs	r3, r1
 8003680:	43db      	mvns	r3, r3
 8003682:	ea02 0103 	and.w	r1, r2, r3
 8003686:	897b      	ldrh	r3, [r7, #10]
 8003688:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800368c:	7a7b      	ldrb	r3, [r7, #9]
 800368e:	041b      	lsls	r3, r3, #16
 8003690:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	431a      	orrs	r2, r3
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	431a      	orrs	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80036a6:	bf00      	nop
 80036a8:	3714      	adds	r7, #20
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	03ff63ff 	.word	0x03ff63ff

080036b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d138      	bne.n	8003740 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036d8:	2302      	movs	r3, #2
 80036da:	e032      	b.n	8003742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2224      	movs	r2, #36	; 0x24
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800370a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6819      	ldr	r1, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	e000      	b.n	8003742 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003740:	2302      	movs	r3, #2
  }
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
 8003756:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b20      	cmp	r3, #32
 8003762:	d139      	bne.n	80037d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800376e:	2302      	movs	r3, #2
 8003770:	e033      	b.n	80037da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2224      	movs	r2, #36	; 0x24
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037ec:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <HAL_PWREx_GetVoltageRange+0x3c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f8:	d102      	bne.n	8003800 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80037fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037fe:	e00b      	b.n	8003818 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380e:	d102      	bne.n	8003816 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003814:	e000      	b.n	8003818 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003816:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40007000 	.word	0x40007000

08003828 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d141      	bne.n	80038ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003836:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800383e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003842:	d131      	bne.n	80038a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003844:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384a:	4a46      	ldr	r2, [pc, #280]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003850:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003854:	4b43      	ldr	r3, [pc, #268]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800385c:	4a41      	ldr	r2, [pc, #260]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800385e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003862:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003864:	4b40      	ldr	r3, [pc, #256]	; (8003968 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2232      	movs	r2, #50	; 0x32
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	4a3f      	ldr	r2, [pc, #252]	; (800396c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003870:	fba2 2303 	umull	r2, r3, r2, r3
 8003874:	0c9b      	lsrs	r3, r3, #18
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800387a:	e002      	b.n	8003882 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3b01      	subs	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003882:	4b38      	ldr	r3, [pc, #224]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388e:	d102      	bne.n	8003896 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f2      	bne.n	800387c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003896:	4b33      	ldr	r3, [pc, #204]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a2:	d158      	bne.n	8003956 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e057      	b.n	8003958 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038a8:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ae:	4a2d      	ldr	r2, [pc, #180]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038b8:	e04d      	b.n	8003956 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c0:	d141      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038c2:	4b28      	ldr	r3, [pc, #160]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ce:	d131      	bne.n	8003934 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038d0:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d6:	4a23      	ldr	r2, [pc, #140]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038e0:	4b20      	ldr	r3, [pc, #128]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038e8:	4a1e      	ldr	r2, [pc, #120]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2232      	movs	r2, #50	; 0x32
 80038f6:	fb02 f303 	mul.w	r3, r2, r3
 80038fa:	4a1c      	ldr	r2, [pc, #112]	; (800396c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	0c9b      	lsrs	r3, r3, #18
 8003902:	3301      	adds	r3, #1
 8003904:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003906:	e002      	b.n	800390e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3b01      	subs	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800390e:	4b15      	ldr	r3, [pc, #84]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391a:	d102      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f2      	bne.n	8003908 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392e:	d112      	bne.n	8003956 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e011      	b.n	8003958 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800393a:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800393c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003940:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003944:	e007      	b.n	8003956 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800394e:	4a05      	ldr	r2, [pc, #20]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003954:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	40007000 	.word	0x40007000
 8003968:	20000000 	.word	0x20000000
 800396c:	431bde83 	.word	0x431bde83

08003970 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003974:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_PWREx_EnableVddIO2+0x1c>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4a04      	ldr	r2, [pc, #16]	; (800398c <HAL_PWREx_EnableVddIO2+0x1c>)
 800397a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397e:	6053      	str	r3, [r2, #4]
}
 8003980:	bf00      	nop
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40007000 	.word	0x40007000

08003990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f000 bc16 	b.w	80041d0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a4:	4ba0      	ldr	r3, [pc, #640]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ae:	4b9e      	ldr	r3, [pc, #632]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80e4 	beq.w	8003b8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <HAL_RCC_OscConfig+0x4c>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	f040 808b 	bne.w	8003aea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	f040 8087 	bne.w	8003aea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039dc:	4b92      	ldr	r3, [pc, #584]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_RCC_OscConfig+0x64>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e3ed      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1a      	ldr	r2, [r3, #32]
 80039f8:	4b8b      	ldr	r3, [pc, #556]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_RCC_OscConfig+0x7e>
 8003a04:	4b88      	ldr	r3, [pc, #544]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a0c:	e005      	b.n	8003a1a <HAL_RCC_OscConfig+0x8a>
 8003a0e:	4b86      	ldr	r3, [pc, #536]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d223      	bcs.n	8003a66 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fdca 	bl	80045bc <RCC_SetFlashLatencyFromMSIRange>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e3ce      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a32:	4b7d      	ldr	r3, [pc, #500]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7c      	ldr	r2, [pc, #496]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a38:	f043 0308 	orr.w	r3, r3, #8
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b7a      	ldr	r3, [pc, #488]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4977      	ldr	r1, [pc, #476]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a50:	4b75      	ldr	r3, [pc, #468]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	4972      	ldr	r1, [pc, #456]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	604b      	str	r3, [r1, #4]
 8003a64:	e025      	b.n	8003ab2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a66:	4b70      	ldr	r3, [pc, #448]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6f      	ldr	r2, [pc, #444]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a6c:	f043 0308 	orr.w	r3, r3, #8
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b6d      	ldr	r3, [pc, #436]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	496a      	ldr	r1, [pc, #424]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	021b      	lsls	r3, r3, #8
 8003a92:	4965      	ldr	r1, [pc, #404]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fd8a 	bl	80045bc <RCC_SetFlashLatencyFromMSIRange>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e38e      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab2:	f000 fcbf 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	495a      	ldr	r1, [pc, #360]	; (8003c2c <HAL_RCC_OscConfig+0x29c>)
 8003ac4:	5ccb      	ldrb	r3, [r1, r3]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	4a58      	ldr	r2, [pc, #352]	; (8003c30 <HAL_RCC_OscConfig+0x2a0>)
 8003ad0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ad2:	4b58      	ldr	r3, [pc, #352]	; (8003c34 <HAL_RCC_OscConfig+0x2a4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fe84 	bl	80027e4 <HAL_InitTick>
 8003adc:	4603      	mov	r3, r0
 8003ade:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d052      	beq.n	8003b8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	e372      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d032      	beq.n	8003b58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003af2:	4b4d      	ldr	r3, [pc, #308]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a4c      	ldr	r2, [pc, #304]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003afe:	f7fe fec1 	bl	8002884 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b06:	f7fe febd 	bl	8002884 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e35b      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b18:	4b43      	ldr	r3, [pc, #268]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b24:	4b40      	ldr	r3, [pc, #256]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a3f      	ldr	r2, [pc, #252]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003b2a:	f043 0308 	orr.w	r3, r3, #8
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b3d      	ldr	r3, [pc, #244]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	493a      	ldr	r1, [pc, #232]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b42:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	4935      	ldr	r1, [pc, #212]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
 8003b56:	e01a      	b.n	8003b8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b58:	4b33      	ldr	r3, [pc, #204]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a32      	ldr	r2, [pc, #200]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b64:	f7fe fe8e 	bl	8002884 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b6c:	f7fe fe8a 	bl	8002884 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e328      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b7e:	4b2a      	ldr	r3, [pc, #168]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x1dc>
 8003b8a:	e000      	b.n	8003b8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d073      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_OscConfig+0x21c>
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b0c      	cmp	r3, #12
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d10b      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d063      	beq.n	8003c80 <HAL_RCC_OscConfig+0x2f0>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d15f      	bne.n	8003c80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e305      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d106      	bne.n	8003bdc <HAL_RCC_OscConfig+0x24c>
 8003bce:	4b16      	ldr	r3, [pc, #88]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e01d      	b.n	8003c18 <HAL_RCC_OscConfig+0x288>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x270>
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a0f      	ldr	r2, [pc, #60]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a0c      	ldr	r2, [pc, #48]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0x288>
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a08      	ldr	r2, [pc, #32]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	4b06      	ldr	r3, [pc, #24]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a05      	ldr	r2, [pc, #20]	; (8003c28 <HAL_RCC_OscConfig+0x298>)
 8003c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01b      	beq.n	8003c58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fe fe30 	bl	8002884 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c26:	e010      	b.n	8003c4a <HAL_RCC_OscConfig+0x2ba>
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	08008bbc 	.word	0x08008bbc
 8003c30:	20000000 	.word	0x20000000
 8003c34:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fe fe24 	bl	8002884 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e2c2      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4a:	4baf      	ldr	r3, [pc, #700]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x2a8>
 8003c56:	e014      	b.n	8003c82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe fe14 	bl	8002884 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c60:	f7fe fe10 	bl	8002884 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b64      	cmp	r3, #100	; 0x64
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e2ae      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c72:	4ba5      	ldr	r3, [pc, #660]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f0      	bne.n	8003c60 <HAL_RCC_OscConfig+0x2d0>
 8003c7e:	e000      	b.n	8003c82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d060      	beq.n	8003d50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x310>
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2b0c      	cmp	r3, #12
 8003c98:	d119      	bne.n	8003cce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d116      	bne.n	8003cce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca0:	4b99      	ldr	r3, [pc, #612]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x328>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d101      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e28b      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b93      	ldr	r3, [pc, #588]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	4990      	ldr	r1, [pc, #576]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ccc:	e040      	b.n	8003d50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d023      	beq.n	8003d1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd6:	4b8c      	ldr	r3, [pc, #560]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a8b      	ldr	r2, [pc, #556]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fe fdcf 	bl	8002884 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fe fdcb 	bl	8002884 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e269      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cfc:	4b82      	ldr	r3, [pc, #520]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d08:	4b7f      	ldr	r3, [pc, #508]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	497c      	ldr	r1, [pc, #496]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	604b      	str	r3, [r1, #4]
 8003d1c:	e018      	b.n	8003d50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1e:	4b7a      	ldr	r3, [pc, #488]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a79      	ldr	r2, [pc, #484]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fe fdab 	bl	8002884 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fe fda7 	bl	8002884 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e245      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d44:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f0      	bne.n	8003d32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d03c      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d01c      	beq.n	8003d9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d64:	4b68      	ldr	r3, [pc, #416]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6a:	4a67      	ldr	r2, [pc, #412]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fe fd86 	bl	8002884 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7fe fd82 	bl	8002884 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e220      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d8e:	4b5e      	ldr	r3, [pc, #376]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d0ef      	beq.n	8003d7c <HAL_RCC_OscConfig+0x3ec>
 8003d9c:	e01b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9e:	4b5a      	ldr	r3, [pc, #360]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da4:	4a58      	ldr	r2, [pc, #352]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dae:	f7fe fd69 	bl	8002884 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db6:	f7fe fd65 	bl	8002884 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e203      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc8:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1ef      	bne.n	8003db6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80a6 	beq.w	8003f30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de4:	2300      	movs	r3, #0
 8003de6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003de8:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10d      	bne.n	8003e10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df4:	4b44      	ldr	r3, [pc, #272]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	4a43      	ldr	r2, [pc, #268]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8003e00:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e10:	4b3e      	ldr	r3, [pc, #248]	; (8003f0c <HAL_RCC_OscConfig+0x57c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d118      	bne.n	8003e4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e1c:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <HAL_RCC_OscConfig+0x57c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3a      	ldr	r2, [pc, #232]	; (8003f0c <HAL_RCC_OscConfig+0x57c>)
 8003e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e28:	f7fe fd2c 	bl	8002884 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e30:	f7fe fd28 	bl	8002884 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e1c6      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e42:	4b32      	ldr	r3, [pc, #200]	; (8003f0c <HAL_RCC_OscConfig+0x57c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d108      	bne.n	8003e68 <HAL_RCC_OscConfig+0x4d8>
 8003e56:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	4a2a      	ldr	r2, [pc, #168]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e66:	e024      	b.n	8003eb2 <HAL_RCC_OscConfig+0x522>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	d110      	bne.n	8003e92 <HAL_RCC_OscConfig+0x502>
 8003e70:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003e78:	f043 0304 	orr.w	r3, r3, #4
 8003e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	4a20      	ldr	r2, [pc, #128]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e90:	e00f      	b.n	8003eb2 <HAL_RCC_OscConfig+0x522>
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	4a1b      	ldr	r2, [pc, #108]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003eaa:	f023 0304 	bic.w	r3, r3, #4
 8003eae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fe fce3 	bl	8002884 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fe fcdf 	bl	8002884 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e17b      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_OscConfig+0x578>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ed      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x532>
 8003ee6:	e01a      	b.n	8003f1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fe fccc 	bl	8002884 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eee:	e00f      	b.n	8003f10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fcc8 	bl	8002884 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d906      	bls.n	8003f10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e164      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
 8003f06:	bf00      	nop
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f10:	4ba8      	ldr	r3, [pc, #672]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e8      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1e:	7ffb      	ldrb	r3, [r7, #31]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d105      	bne.n	8003f30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f24:	4ba3      	ldr	r3, [pc, #652]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f28:	4aa2      	ldr	r2, [pc, #648]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8003f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d03c      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01c      	beq.n	8003f7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f44:	4b9b      	ldr	r3, [pc, #620]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8003f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f4a:	4a9a      	ldr	r2, [pc, #616]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f54:	f7fe fc96 	bl	8002884 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f5c:	f7fe fc92 	bl	8002884 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e130      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f6e:	4b91      	ldr	r3, [pc, #580]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8003f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0ef      	beq.n	8003f5c <HAL_RCC_OscConfig+0x5cc>
 8003f7c:	e01b      	b.n	8003fb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f7e:	4b8d      	ldr	r3, [pc, #564]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8003f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f84:	4a8b      	ldr	r2, [pc, #556]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8e:	f7fe fc79 	bl	8002884 <HAL_GetTick>
 8003f92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f94:	e008      	b.n	8003fa8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f96:	f7fe fc75 	bl	8002884 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e113      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fa8:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8003faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ef      	bne.n	8003f96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 8107 	beq.w	80041ce <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	f040 80cb 	bne.w	8004160 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fca:	4b7a      	ldr	r3, [pc, #488]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 0203 	and.w	r2, r3, #3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d12c      	bne.n	8004038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d123      	bne.n	8004038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d11b      	bne.n	8004038 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d113      	bne.n	8004038 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	3b01      	subs	r3, #1
 800401e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d109      	bne.n	8004038 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	3b01      	subs	r3, #1
 8004032:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d06d      	beq.n	8004114 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d068      	beq.n	8004110 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800403e:	4b5d      	ldr	r3, [pc, #372]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d105      	bne.n	8004056 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800404a:	4b5a      	ldr	r3, [pc, #360]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e0ba      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800405a:	4b56      	ldr	r3, [pc, #344]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a55      	ldr	r2, [pc, #340]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004064:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004066:	f7fe fc0d 	bl	8002884 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7fe fc09 	bl	8002884 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e0a7      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004080:	4b4c      	ldr	r3, [pc, #304]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800408c:	4b49      	ldr	r3, [pc, #292]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 800408e:	68da      	ldr	r2, [r3, #12]
 8004090:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <HAL_RCC_OscConfig+0x828>)
 8004092:	4013      	ands	r3, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800409c:	3a01      	subs	r2, #1
 800409e:	0112      	lsls	r2, r2, #4
 80040a0:	4311      	orrs	r1, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040a6:	0212      	lsls	r2, r2, #8
 80040a8:	4311      	orrs	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040ae:	0852      	lsrs	r2, r2, #1
 80040b0:	3a01      	subs	r2, #1
 80040b2:	0552      	lsls	r2, r2, #21
 80040b4:	4311      	orrs	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040ba:	0852      	lsrs	r2, r2, #1
 80040bc:	3a01      	subs	r2, #1
 80040be:	0652      	lsls	r2, r2, #25
 80040c0:	4311      	orrs	r1, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040c6:	06d2      	lsls	r2, r2, #27
 80040c8:	430a      	orrs	r2, r1
 80040ca:	493a      	ldr	r1, [pc, #232]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040d0:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a37      	ldr	r2, [pc, #220]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 80040d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040dc:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a34      	ldr	r2, [pc, #208]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 80040e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040e8:	f7fe fbcc 	bl	8002884 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fe fbc8 	bl	8002884 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e066      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004102:	4b2c      	ldr	r3, [pc, #176]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800410e:	e05e      	b.n	80041ce <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e05d      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004114:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d156      	bne.n	80041ce <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004120:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a23      	ldr	r2, [pc, #140]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800412c:	4b21      	ldr	r3, [pc, #132]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a20      	ldr	r2, [pc, #128]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004136:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004138:	f7fe fba4 	bl	8002884 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe fba0 	bl	8002884 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e03e      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004152:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x7b0>
 800415e:	e036      	b.n	80041ce <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d031      	beq.n	80041ca <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 800416c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004170:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d105      	bne.n	800418a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800417e:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	4a0c      	ldr	r2, [pc, #48]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004184:	f023 0303 	bic.w	r3, r3, #3
 8004188:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <HAL_RCC_OscConfig+0x824>)
 8004190:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004198:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fe fb73 	bl	8002884 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a0:	e00c      	b.n	80041bc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a2:	f7fe fb6f 	bl	8002884 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d905      	bls.n	80041bc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e00d      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <HAL_RCC_OscConfig+0x848>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ec      	bne.n	80041a2 <HAL_RCC_OscConfig+0x812>
 80041c8:	e001      	b.n	80041ce <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40021000 	.word	0x40021000

080041dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041e6:	2300      	movs	r3, #0
 80041e8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e10f      	b.n	8004414 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f4:	4b89      	ldr	r3, [pc, #548]	; (800441c <HAL_RCC_ClockConfig+0x240>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d910      	bls.n	8004224 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004202:	4b86      	ldr	r3, [pc, #536]	; (800441c <HAL_RCC_ClockConfig+0x240>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 020f 	bic.w	r2, r3, #15
 800420a:	4984      	ldr	r1, [pc, #528]	; (800441c <HAL_RCC_ClockConfig+0x240>)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004212:	4b82      	ldr	r3, [pc, #520]	; (800441c <HAL_RCC_ClockConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	429a      	cmp	r2, r3
 800421e:	d001      	beq.n	8004224 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0f7      	b.n	8004414 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8089 	beq.w	8004344 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d133      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423a:	4b79      	ldr	r3, [pc, #484]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0e4      	b.n	8004414 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800424a:	f000 fa11 	bl	8004670 <RCC_GetSysClockFreqFromPLLSource>
 800424e:	4603      	mov	r3, r0
 8004250:	4a74      	ldr	r2, [pc, #464]	; (8004424 <HAL_RCC_ClockConfig+0x248>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d955      	bls.n	8004302 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004256:	4b72      	ldr	r3, [pc, #456]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004262:	4b6f      	ldr	r3, [pc, #444]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800426a:	4a6d      	ldr	r2, [pc, #436]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 800426c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004270:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e044      	b.n	8004302 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d03e      	beq.n	8004302 <HAL_RCC_ClockConfig+0x126>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d13a      	bne.n	8004302 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800428c:	4b64      	ldr	r3, [pc, #400]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004294:	4a62      	ldr	r2, [pc, #392]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 8004296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	e02f      	b.n	8004302 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042aa:	4b5d      	ldr	r3, [pc, #372]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d115      	bne.n	80042e2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e0ac      	b.n	8004414 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042c2:	4b57      	ldr	r3, [pc, #348]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e0a0      	b.n	8004414 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042d2:	4b53      	ldr	r3, [pc, #332]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e098      	b.n	8004414 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80042e2:	f000 f8a7 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4a4e      	ldr	r2, [pc, #312]	; (8004424 <HAL_RCC_ClockConfig+0x248>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d909      	bls.n	8004302 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ee:	4b4c      	ldr	r3, [pc, #304]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042f6:	4a4a      	ldr	r2, [pc, #296]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 80042f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004302:	4b47      	ldr	r3, [pc, #284]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f023 0203 	bic.w	r2, r3, #3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4944      	ldr	r1, [pc, #272]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 8004310:	4313      	orrs	r3, r2
 8004312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004314:	f7fe fab6 	bl	8002884 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	e00a      	b.n	8004332 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800431c:	f7fe fab2 	bl	8002884 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	; 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e070      	b.n	8004414 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 020c 	and.w	r2, r3, #12
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	429a      	cmp	r2, r3
 8004342:	d1eb      	bne.n	800431c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004350:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4930      	ldr	r1, [pc, #192]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
 8004362:	e008      	b.n	8004376 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	2b80      	cmp	r3, #128	; 0x80
 8004368:	d105      	bne.n	8004376 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800436a:	4b2d      	ldr	r3, [pc, #180]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 8004370:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004374:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004376:	4b29      	ldr	r3, [pc, #164]	; (800441c <HAL_RCC_ClockConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d210      	bcs.n	80043a6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004384:	4b25      	ldr	r3, [pc, #148]	; (800441c <HAL_RCC_ClockConfig+0x240>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f023 020f 	bic.w	r2, r3, #15
 800438c:	4923      	ldr	r1, [pc, #140]	; (800441c <HAL_RCC_ClockConfig+0x240>)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	4313      	orrs	r3, r2
 8004392:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <HAL_RCC_ClockConfig+0x240>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d001      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e036      	b.n	8004414 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b2:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4918      	ldr	r1, [pc, #96]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4910      	ldr	r1, [pc, #64]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043e4:	f000 f826 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_RCC_ClockConfig+0x244>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	490c      	ldr	r1, [pc, #48]	; (8004428 <HAL_RCC_ClockConfig+0x24c>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	4a0a      	ldr	r2, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x250>)
 8004402:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004404:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_RCC_ClockConfig+0x254>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe f9eb 	bl	80027e4 <HAL_InitTick>
 800440e:	4603      	mov	r3, r0
 8004410:	73fb      	strb	r3, [r7, #15]

  return status;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40022000 	.word	0x40022000
 8004420:	40021000 	.word	0x40021000
 8004424:	04c4b400 	.word	0x04c4b400
 8004428:	08008bbc 	.word	0x08008bbc
 800442c:	20000000 	.word	0x20000000
 8004430:	20000004 	.word	0x20000004

08004434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	; 0x24
 8004438:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	2300      	movs	r3, #0
 8004440:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004442:	4b3e      	ldr	r3, [pc, #248]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800444c:	4b3b      	ldr	r3, [pc, #236]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_GetSysClockFreq+0x34>
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	2b0c      	cmp	r3, #12
 8004460:	d121      	bne.n	80044a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d11e      	bne.n	80044a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004468:	4b34      	ldr	r3, [pc, #208]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d107      	bne.n	8004484 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004474:	4b31      	ldr	r3, [pc, #196]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004476:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447a:	0a1b      	lsrs	r3, r3, #8
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	61fb      	str	r3, [r7, #28]
 8004482:	e005      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004484:	4b2d      	ldr	r3, [pc, #180]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004490:	4a2b      	ldr	r2, [pc, #172]	; (8004540 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004498:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10d      	bne.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044a4:	e00a      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d102      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044ac:	4b25      	ldr	r3, [pc, #148]	; (8004544 <HAL_RCC_GetSysClockFreq+0x110>)
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	e004      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044b8:	4b23      	ldr	r3, [pc, #140]	; (8004548 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d134      	bne.n	800452c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044c2:	4b1e      	ldr	r3, [pc, #120]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d003      	beq.n	80044da <HAL_RCC_GetSysClockFreq+0xa6>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d003      	beq.n	80044e0 <HAL_RCC_GetSysClockFreq+0xac>
 80044d8:	e005      	b.n	80044e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044da:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_RCC_GetSysClockFreq+0x110>)
 80044dc:	617b      	str	r3, [r7, #20]
      break;
 80044de:	e005      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <HAL_RCC_GetSysClockFreq+0x114>)
 80044e2:	617b      	str	r3, [r7, #20]
      break;
 80044e4:	e002      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	617b      	str	r3, [r7, #20]
      break;
 80044ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044ec:	4b13      	ldr	r3, [pc, #76]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	3301      	adds	r3, #1
 80044f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	fb02 f203 	mul.w	r2, r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <HAL_RCC_GetSysClockFreq+0x108>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	0e5b      	lsrs	r3, r3, #25
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	3301      	adds	r3, #1
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800452c:	69bb      	ldr	r3, [r7, #24]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3724      	adds	r7, #36	; 0x24
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	08008bd4 	.word	0x08008bd4
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200

0800454c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004550:	4b03      	ldr	r3, [pc, #12]	; (8004560 <HAL_RCC_GetHCLKFreq+0x14>)
 8004552:	681b      	ldr	r3, [r3, #0]
}
 8004554:	4618      	mov	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000000 	.word	0x20000000

08004564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004568:	f7ff fff0 	bl	800454c <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4904      	ldr	r1, [pc, #16]	; (800458c <HAL_RCC_GetPCLK1Freq+0x28>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004584:	4618      	mov	r0, r3
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40021000 	.word	0x40021000
 800458c:	08008bcc 	.word	0x08008bcc

08004590 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004594:	f7ff ffda 	bl	800454c <HAL_RCC_GetHCLKFreq>
 8004598:	4602      	mov	r2, r0
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	0adb      	lsrs	r3, r3, #11
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	4904      	ldr	r1, [pc, #16]	; (80045b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045a6:	5ccb      	ldrb	r3, [r1, r3]
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40021000 	.word	0x40021000
 80045b8:	08008bcc 	.word	0x08008bcc

080045bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045c8:	4b27      	ldr	r3, [pc, #156]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045d4:	f7ff f908 	bl	80037e8 <HAL_PWREx_GetVoltageRange>
 80045d8:	6178      	str	r0, [r7, #20]
 80045da:	e014      	b.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045dc:	4b22      	ldr	r3, [pc, #136]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e0:	4a21      	ldr	r2, [pc, #132]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e6:	6593      	str	r3, [r2, #88]	; 0x58
 80045e8:	4b1f      	ldr	r3, [pc, #124]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045f4:	f7ff f8f8 	bl	80037e8 <HAL_PWREx_GetVoltageRange>
 80045f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045fa:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fe:	4a1a      	ldr	r2, [pc, #104]	; (8004668 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004604:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460c:	d10b      	bne.n	8004626 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b80      	cmp	r3, #128	; 0x80
 8004612:	d913      	bls.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2ba0      	cmp	r3, #160	; 0xa0
 8004618:	d902      	bls.n	8004620 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800461a:	2302      	movs	r3, #2
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	e00d      	b.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004620:	2301      	movs	r3, #1
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	e00a      	b.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b7f      	cmp	r3, #127	; 0x7f
 800462a:	d902      	bls.n	8004632 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800462c:	2302      	movs	r3, #2
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	e004      	b.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b70      	cmp	r3, #112	; 0x70
 8004636:	d101      	bne.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004638:	2301      	movs	r3, #1
 800463a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 020f 	bic.w	r2, r3, #15
 8004644:	4909      	ldr	r1, [pc, #36]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800464c:	4b07      	ldr	r3, [pc, #28]	; (800466c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 030f 	and.w	r3, r3, #15
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	429a      	cmp	r2, r3
 8004658:	d001      	beq.n	800465e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000
 800466c:	40022000 	.word	0x40022000

08004670 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800467a:	4b2d      	ldr	r3, [pc, #180]	; (8004730 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d118      	bne.n	80046b8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004686:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d107      	bne.n	80046a2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004692:	4b27      	ldr	r3, [pc, #156]	; (8004730 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004698:	0a1b      	lsrs	r3, r3, #8
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e005      	b.n	80046ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046a2:	4b23      	ldr	r3, [pc, #140]	; (8004730 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	091b      	lsrs	r3, r3, #4
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046ae:	4a21      	ldr	r2, [pc, #132]	; (8004734 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046b8:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d003      	beq.n	80046d0 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d003      	beq.n	80046d6 <RCC_GetSysClockFreqFromPLLSource+0x66>
 80046ce:	e005      	b.n	80046dc <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80046d0:	4b19      	ldr	r3, [pc, #100]	; (8004738 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80046d2:	613b      	str	r3, [r7, #16]
    break;
 80046d4:	e005      	b.n	80046e2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80046d6:	4b19      	ldr	r3, [pc, #100]	; (800473c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80046d8:	613b      	str	r3, [r7, #16]
    break;
 80046da:	e002      	b.n	80046e2 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	613b      	str	r3, [r7, #16]
    break;
 80046e0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e2:	4b13      	ldr	r3, [pc, #76]	; (8004730 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	091b      	lsrs	r3, r3, #4
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	3301      	adds	r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	0a1b      	lsrs	r3, r3, #8
 80046f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	fb02 f203 	mul.w	r2, r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	fbb2 f3f3 	udiv	r3, r2, r3
 8004706:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	0e5b      	lsrs	r3, r3, #25
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	3301      	adds	r3, #1
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004722:	683b      	ldr	r3, [r7, #0]
}
 8004724:	4618      	mov	r0, r3
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40021000 	.word	0x40021000
 8004734:	08008bd4 	.word	0x08008bd4
 8004738:	00f42400 	.word	0x00f42400
 800473c:	007a1200 	.word	0x007a1200

08004740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004748:	2300      	movs	r3, #0
 800474a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800474c:	2300      	movs	r3, #0
 800474e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004758:	2b00      	cmp	r3, #0
 800475a:	d040      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004760:	2b80      	cmp	r3, #128	; 0x80
 8004762:	d02a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004764:	2b80      	cmp	r3, #128	; 0x80
 8004766:	d825      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004768:	2b60      	cmp	r3, #96	; 0x60
 800476a:	d026      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800476c:	2b60      	cmp	r3, #96	; 0x60
 800476e:	d821      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004770:	2b40      	cmp	r3, #64	; 0x40
 8004772:	d006      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d81d      	bhi.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800477c:	2b20      	cmp	r3, #32
 800477e:	d010      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004780:	e018      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004782:	4b89      	ldr	r3, [pc, #548]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	4a88      	ldr	r2, [pc, #544]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800478e:	e015      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fb02 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047a0:	e00c      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3320      	adds	r3, #32
 80047a6:	2100      	movs	r1, #0
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fbed 	bl	8004f88 <RCCEx_PLLSAI2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047b2:	e003      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	74fb      	strb	r3, [r7, #19]
      break;
 80047b8:	e000      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80047ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10b      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047c2:	4b79      	ldr	r3, [pc, #484]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047d0:	4975      	ldr	r1, [pc, #468]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80047d8:	e001      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d047      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f2:	d030      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f8:	d82a      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047fe:	d02a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004804:	d824      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800480a:	d008      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800480c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004810:	d81e      	bhi.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481a:	d010      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800481c:	e018      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800481e:	4b62      	ldr	r3, [pc, #392]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	4a61      	ldr	r2, [pc, #388]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004828:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800482a:	e015      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	2100      	movs	r1, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fab4 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800483c:	e00c      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3320      	adds	r3, #32
 8004842:	2100      	movs	r1, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fb9f 	bl	8004f88 <RCCEx_PLLSAI2_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800484e:	e003      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	74fb      	strb	r3, [r7, #19]
      break;
 8004854:	e000      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004858:	7cfb      	ldrb	r3, [r7, #19]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10b      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800485e:	4b52      	ldr	r3, [pc, #328]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004860:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	494e      	ldr	r1, [pc, #312]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004874:	e001      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004876:	7cfb      	ldrb	r3, [r7, #19]
 8004878:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 809f 	beq.w	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004888:	2300      	movs	r3, #0
 800488a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800488c:	4b46      	ldr	r3, [pc, #280]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800488e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00d      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048a2:	4b41      	ldr	r3, [pc, #260]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	4a40      	ldr	r2, [pc, #256]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ac:	6593      	str	r3, [r2, #88]	; 0x58
 80048ae:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	60bb      	str	r3, [r7, #8]
 80048b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ba:	2301      	movs	r3, #1
 80048bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048be:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a3a      	ldr	r2, [pc, #232]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048ca:	f7fd ffdb 	bl	8002884 <HAL_GetTick>
 80048ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048d0:	e009      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d2:	f7fd ffd7 	bl	8002884 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d902      	bls.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	74fb      	strb	r3, [r7, #19]
        break;
 80048e4:	e005      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048e6:	4b31      	ldr	r3, [pc, #196]	; (80049ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0ef      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d15b      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048f8:	4b2b      	ldr	r3, [pc, #172]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01f      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	429a      	cmp	r2, r3
 8004914:	d019      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004920:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004922:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004928:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800492a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004938:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800493a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004942:	4a19      	ldr	r2, [pc, #100]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	d016      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fd ff96 	bl	8002884 <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495a:	e00b      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495c:	f7fd ff92 	bl	8002884 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	f241 3288 	movw	r2, #5000	; 0x1388
 800496a:	4293      	cmp	r3, r2
 800496c:	d902      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	74fb      	strb	r3, [r7, #19]
            break;
 8004972:	e006      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ec      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004982:	7cfb      	ldrb	r3, [r7, #19]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10c      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004988:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	4903      	ldr	r1, [pc, #12]	; (80049a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049a0:	e008      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049a2:	7cfb      	ldrb	r3, [r7, #19]
 80049a4:	74bb      	strb	r3, [r7, #18]
 80049a6:	e005      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b4:	7c7b      	ldrb	r3, [r7, #17]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d105      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ba:	4ba0      	ldr	r3, [pc, #640]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	4a9f      	ldr	r2, [pc, #636]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049d2:	4b9a      	ldr	r3, [pc, #616]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d8:	f023 0203 	bic.w	r2, r3, #3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e0:	4996      	ldr	r1, [pc, #600]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049f4:	4b91      	ldr	r3, [pc, #580]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fa:	f023 020c 	bic.w	r2, r3, #12
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	498e      	ldr	r1, [pc, #568]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a16:	4b89      	ldr	r3, [pc, #548]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	4985      	ldr	r1, [pc, #532]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a38:	4b80      	ldr	r3, [pc, #512]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a46:	497d      	ldr	r1, [pc, #500]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a5a:	4b78      	ldr	r3, [pc, #480]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a68:	4974      	ldr	r1, [pc, #464]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0320 	and.w	r3, r3, #32
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00a      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a7c:	4b6f      	ldr	r3, [pc, #444]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8a:	496c      	ldr	r1, [pc, #432]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a9e:	4b67      	ldr	r3, [pc, #412]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aac:	4963      	ldr	r1, [pc, #396]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ac0:	4b5e      	ldr	r3, [pc, #376]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ace:	495b      	ldr	r1, [pc, #364]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ae2:	4b56      	ldr	r3, [pc, #344]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	4952      	ldr	r1, [pc, #328]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b04:	4b4d      	ldr	r3, [pc, #308]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b12:	494a      	ldr	r1, [pc, #296]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b26:	4b45      	ldr	r3, [pc, #276]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b34:	4941      	ldr	r1, [pc, #260]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b48:	4b3c      	ldr	r3, [pc, #240]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b4e:	f023 0203 	bic.w	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b56:	4939      	ldr	r1, [pc, #228]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d028      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b6a:	4b34      	ldr	r3, [pc, #208]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b78:	4930      	ldr	r1, [pc, #192]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b88:	d106      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b8a:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	4a2b      	ldr	r2, [pc, #172]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b94:	60d3      	str	r3, [r2, #12]
 8004b96:	e011      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 f8f9 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bb2:	7cfb      	ldrb	r3, [r7, #19]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d04d      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bd0:	d108      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004bd2:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bd8:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bde:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004be2:	e012      	b.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004be4:	4b15      	ldr	r3, [pc, #84]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bea:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bf0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004bf4:	4b11      	ldr	r3, [pc, #68]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c02:	490e      	ldr	r1, [pc, #56]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c12:	d106      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c1e:	60d3      	str	r3, [r2, #12]
 8004c20:	e020      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c2a:	d109      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a02      	ldr	r2, [pc, #8]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c36:	60d3      	str	r3, [r2, #12]
 8004c38:	e014      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2101      	movs	r1, #1
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 f8a5 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d028      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c70:	4b4a      	ldr	r3, [pc, #296]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7e:	4947      	ldr	r1, [pc, #284]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c8e:	d106      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c90:	4b42      	ldr	r3, [pc, #264]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	4a41      	ldr	r2, [pc, #260]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c9a:	60d3      	str	r3, [r2, #12]
 8004c9c:	e011      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ca2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ca6:	d10c      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	3304      	adds	r3, #4
 8004cac:	2101      	movs	r1, #1
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 f876 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004cbe:	7cfb      	ldrb	r3, [r7, #19]
 8004cc0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01e      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cce:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cde:	492f      	ldr	r1, [pc, #188]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f851 	bl	8004da0 <RCCEx_PLLSAI1_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d02:	7cfb      	ldrb	r3, [r7, #19]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004d08:	7cfb      	ldrb	r3, [r7, #19]
 8004d0a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00b      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d18:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d1e:	f023 0204 	bic.w	r2, r3, #4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d28:	491c      	ldr	r1, [pc, #112]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00b      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d3c:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d42:	f023 0218 	bic.w	r2, r3, #24
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	4913      	ldr	r1, [pc, #76]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d017      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d60:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d70:	490a      	ldr	r1, [pc, #40]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d82:	d105      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d84:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d90:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000

08004da0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dae:	4b72      	ldr	r3, [pc, #456]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0303 	and.w	r3, r3, #3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00e      	beq.n	8004dd8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dba:	4b6f      	ldr	r3, [pc, #444]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0203 	and.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d103      	bne.n	8004dd2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
       ||
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d142      	bne.n	8004e58 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
 8004dd6:	e03f      	b.n	8004e58 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d018      	beq.n	8004e12 <RCCEx_PLLSAI1_Config+0x72>
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d825      	bhi.n	8004e30 <RCCEx_PLLSAI1_Config+0x90>
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d002      	beq.n	8004dee <RCCEx_PLLSAI1_Config+0x4e>
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d009      	beq.n	8004e00 <RCCEx_PLLSAI1_Config+0x60>
 8004dec:	e020      	b.n	8004e30 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dee:	4b62      	ldr	r3, [pc, #392]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d11d      	bne.n	8004e36 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dfe:	e01a      	b.n	8004e36 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e00:	4b5d      	ldr	r3, [pc, #372]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d116      	bne.n	8004e3a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e10:	e013      	b.n	8004e3a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e12:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10f      	bne.n	8004e3e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e1e:	4b56      	ldr	r3, [pc, #344]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d109      	bne.n	8004e3e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e2e:	e006      	b.n	8004e3e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
      break;
 8004e34:	e004      	b.n	8004e40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e36:	bf00      	nop
 8004e38:	e002      	b.n	8004e40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e000      	b.n	8004e40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d108      	bne.n	8004e58 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004e46:	4b4c      	ldr	r3, [pc, #304]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f023 0203 	bic.w	r2, r3, #3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4949      	ldr	r1, [pc, #292]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 8086 	bne.w	8004f6c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e60:	4b45      	ldr	r3, [pc, #276]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a44      	ldr	r2, [pc, #272]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e6c:	f7fd fd0a 	bl	8002884 <HAL_GetTick>
 8004e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e72:	e009      	b.n	8004e88 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e74:	f7fd fd06 	bl	8002884 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d902      	bls.n	8004e88 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	73fb      	strb	r3, [r7, #15]
        break;
 8004e86:	e005      	b.n	8004e94 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e88:	4b3b      	ldr	r3, [pc, #236]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1ef      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d168      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d113      	bne.n	8004ec8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ea0:	4b35      	ldr	r3, [pc, #212]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	4b35      	ldr	r3, [pc, #212]	; (8004f7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6892      	ldr	r2, [r2, #8]
 8004eac:	0211      	lsls	r1, r2, #8
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68d2      	ldr	r2, [r2, #12]
 8004eb2:	06d2      	lsls	r2, r2, #27
 8004eb4:	4311      	orrs	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6852      	ldr	r2, [r2, #4]
 8004eba:	3a01      	subs	r2, #1
 8004ebc:	0112      	lsls	r2, r2, #4
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	492d      	ldr	r1, [pc, #180]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	610b      	str	r3, [r1, #16]
 8004ec6:	e02d      	b.n	8004f24 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d115      	bne.n	8004efa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ece:	4b2a      	ldr	r3, [pc, #168]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6892      	ldr	r2, [r2, #8]
 8004eda:	0211      	lsls	r1, r2, #8
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6912      	ldr	r2, [r2, #16]
 8004ee0:	0852      	lsrs	r2, r2, #1
 8004ee2:	3a01      	subs	r2, #1
 8004ee4:	0552      	lsls	r2, r2, #21
 8004ee6:	4311      	orrs	r1, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6852      	ldr	r2, [r2, #4]
 8004eec:	3a01      	subs	r2, #1
 8004eee:	0112      	lsls	r2, r2, #4
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	4921      	ldr	r1, [pc, #132]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	610b      	str	r3, [r1, #16]
 8004ef8:	e014      	b.n	8004f24 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004efa:	4b1f      	ldr	r3, [pc, #124]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6892      	ldr	r2, [r2, #8]
 8004f06:	0211      	lsls	r1, r2, #8
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6952      	ldr	r2, [r2, #20]
 8004f0c:	0852      	lsrs	r2, r2, #1
 8004f0e:	3a01      	subs	r2, #1
 8004f10:	0652      	lsls	r2, r2, #25
 8004f12:	4311      	orrs	r1, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6852      	ldr	r2, [r2, #4]
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	0112      	lsls	r2, r2, #4
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	4916      	ldr	r1, [pc, #88]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f24:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a13      	ldr	r2, [pc, #76]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fd fca8 	bl	8002884 <HAL_GetTick>
 8004f34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f36:	e009      	b.n	8004f4c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f38:	f7fd fca4 	bl	8002884 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d902      	bls.n	8004f4c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	73fb      	strb	r3, [r7, #15]
          break;
 8004f4a:	e005      	b.n	8004f58 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0ef      	beq.n	8004f38 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	4904      	ldr	r1, [pc, #16]	; (8004f78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	07ff800f 	.word	0x07ff800f
 8004f80:	ff9f800f 	.word	0xff9f800f
 8004f84:	f9ff800f 	.word	0xf9ff800f

08004f88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f96:	4b72      	ldr	r3, [pc, #456]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00e      	beq.n	8004fc0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fa2:	4b6f      	ldr	r3, [pc, #444]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f003 0203 	and.w	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d103      	bne.n	8004fba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d142      	bne.n	8005040 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e03f      	b.n	8005040 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d018      	beq.n	8004ffa <RCCEx_PLLSAI2_Config+0x72>
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d825      	bhi.n	8005018 <RCCEx_PLLSAI2_Config+0x90>
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d002      	beq.n	8004fd6 <RCCEx_PLLSAI2_Config+0x4e>
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d009      	beq.n	8004fe8 <RCCEx_PLLSAI2_Config+0x60>
 8004fd4:	e020      	b.n	8005018 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fd6:	4b62      	ldr	r3, [pc, #392]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d11d      	bne.n	800501e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe6:	e01a      	b.n	800501e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fe8:	4b5d      	ldr	r3, [pc, #372]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d116      	bne.n	8005022 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff8:	e013      	b.n	8005022 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ffa:	4b59      	ldr	r3, [pc, #356]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10f      	bne.n	8005026 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005006:	4b56      	ldr	r3, [pc, #344]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005016:	e006      	b.n	8005026 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	73fb      	strb	r3, [r7, #15]
      break;
 800501c:	e004      	b.n	8005028 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800501e:	bf00      	nop
 8005020:	e002      	b.n	8005028 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005022:	bf00      	nop
 8005024:	e000      	b.n	8005028 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005026:	bf00      	nop
    }

    if(status == HAL_OK)
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d108      	bne.n	8005040 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800502e:	4b4c      	ldr	r3, [pc, #304]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f023 0203 	bic.w	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4949      	ldr	r1, [pc, #292]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800503c:	4313      	orrs	r3, r2
 800503e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f040 8086 	bne.w	8005154 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005048:	4b45      	ldr	r3, [pc, #276]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a44      	ldr	r2, [pc, #272]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800504e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005054:	f7fd fc16 	bl	8002884 <HAL_GetTick>
 8005058:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800505a:	e009      	b.n	8005070 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800505c:	f7fd fc12 	bl	8002884 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d902      	bls.n	8005070 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	73fb      	strb	r3, [r7, #15]
        break;
 800506e:	e005      	b.n	800507c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005070:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1ef      	bne.n	800505c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d168      	bne.n	8005154 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d113      	bne.n	80050b0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005088:	4b35      	ldr	r3, [pc, #212]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	4b35      	ldr	r3, [pc, #212]	; (8005164 <RCCEx_PLLSAI2_Config+0x1dc>)
 800508e:	4013      	ands	r3, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6892      	ldr	r2, [r2, #8]
 8005094:	0211      	lsls	r1, r2, #8
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68d2      	ldr	r2, [r2, #12]
 800509a:	06d2      	lsls	r2, r2, #27
 800509c:	4311      	orrs	r1, r2
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6852      	ldr	r2, [r2, #4]
 80050a2:	3a01      	subs	r2, #1
 80050a4:	0112      	lsls	r2, r2, #4
 80050a6:	430a      	orrs	r2, r1
 80050a8:	492d      	ldr	r1, [pc, #180]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	614b      	str	r3, [r1, #20]
 80050ae:	e02d      	b.n	800510c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d115      	bne.n	80050e2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050b6:	4b2a      	ldr	r3, [pc, #168]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050b8:	695a      	ldr	r2, [r3, #20]
 80050ba:	4b2b      	ldr	r3, [pc, #172]	; (8005168 <RCCEx_PLLSAI2_Config+0x1e0>)
 80050bc:	4013      	ands	r3, r2
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	6892      	ldr	r2, [r2, #8]
 80050c2:	0211      	lsls	r1, r2, #8
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	6912      	ldr	r2, [r2, #16]
 80050c8:	0852      	lsrs	r2, r2, #1
 80050ca:	3a01      	subs	r2, #1
 80050cc:	0552      	lsls	r2, r2, #21
 80050ce:	4311      	orrs	r1, r2
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6852      	ldr	r2, [r2, #4]
 80050d4:	3a01      	subs	r2, #1
 80050d6:	0112      	lsls	r2, r2, #4
 80050d8:	430a      	orrs	r2, r1
 80050da:	4921      	ldr	r1, [pc, #132]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	614b      	str	r3, [r1, #20]
 80050e0:	e014      	b.n	800510c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050e2:	4b1f      	ldr	r3, [pc, #124]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	4b21      	ldr	r3, [pc, #132]	; (800516c <RCCEx_PLLSAI2_Config+0x1e4>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6892      	ldr	r2, [r2, #8]
 80050ee:	0211      	lsls	r1, r2, #8
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6952      	ldr	r2, [r2, #20]
 80050f4:	0852      	lsrs	r2, r2, #1
 80050f6:	3a01      	subs	r2, #1
 80050f8:	0652      	lsls	r2, r2, #25
 80050fa:	4311      	orrs	r1, r2
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6852      	ldr	r2, [r2, #4]
 8005100:	3a01      	subs	r2, #1
 8005102:	0112      	lsls	r2, r2, #4
 8005104:	430a      	orrs	r2, r1
 8005106:	4916      	ldr	r1, [pc, #88]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005108:	4313      	orrs	r3, r2
 800510a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800510c:	4b14      	ldr	r3, [pc, #80]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a13      	ldr	r2, [pc, #76]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005116:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fd fbb4 	bl	8002884 <HAL_GetTick>
 800511c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800511e:	e009      	b.n	8005134 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005120:	f7fd fbb0 	bl	8002884 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d902      	bls.n	8005134 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	73fb      	strb	r3, [r7, #15]
          break;
 8005132:	e005      	b.n	8005140 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ef      	beq.n	8005120 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	4904      	ldr	r1, [pc, #16]	; (8005160 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005150:	4313      	orrs	r3, r2
 8005152:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005154:	7bfb      	ldrb	r3, [r7, #15]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40021000 	.word	0x40021000
 8005164:	07ff800f 	.word	0x07ff800f
 8005168:	ff9f800f 	.word	0xff9f800f
 800516c:	f9ff800f 	.word	0xf9ff800f

08005170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e042      	b.n	8005208 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7fd f977 	bl	8002488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2224      	movs	r2, #36	; 0x24
 800519e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f8c4 	bl	8005340 <UART_SetConfig>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d101      	bne.n	80051c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e022      	b.n	8005208 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb88 	bl	80058e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fc0f 	bl	8005a24 <UART_CheckIdleState>
 8005206:	4603      	mov	r3, r0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08a      	sub	sp, #40	; 0x28
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	4613      	mov	r3, r2
 800521e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005226:	2b20      	cmp	r3, #32
 8005228:	f040 8084 	bne.w	8005334 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_UART_Transmit+0x28>
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e07c      	b.n	8005336 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005242:	2b01      	cmp	r3, #1
 8005244:	d101      	bne.n	800524a <HAL_UART_Transmit+0x3a>
 8005246:	2302      	movs	r3, #2
 8005248:	e075      	b.n	8005336 <HAL_UART_Transmit+0x126>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2221      	movs	r2, #33	; 0x21
 800525e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005262:	f7fd fb0f 	bl	8002884 <HAL_GetTick>
 8005266:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	88fa      	ldrh	r2, [r7, #6]
 8005274:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005280:	d108      	bne.n	8005294 <HAL_UART_Transmit+0x84>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d104      	bne.n	8005294 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	61bb      	str	r3, [r7, #24]
 8005292:	e003      	b.n	800529c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005298:	2300      	movs	r3, #0
 800529a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80052a4:	e02d      	b.n	8005302 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	2200      	movs	r2, #0
 80052ae:	2180      	movs	r1, #128	; 0x80
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 fbff 	bl	8005ab4 <UART_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d001      	beq.n	80052c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e03a      	b.n	8005336 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	881a      	ldrh	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052d2:	b292      	uxth	r2, r2
 80052d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	3302      	adds	r3, #2
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	e008      	b.n	80052f0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	781a      	ldrb	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	b292      	uxth	r2, r2
 80052e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3301      	adds	r3, #1
 80052ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1cb      	bne.n	80052a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	2140      	movs	r1, #64	; 0x40
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 fbcb 	bl	8005ab4 <UART_WaitOnFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e006      	b.n	8005336 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	e000      	b.n	8005336 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005334:	2302      	movs	r3, #2
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005340:	b5b0      	push	{r4, r5, r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
 8005360:	4313      	orrs	r3, r2
 8005362:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	4313      	orrs	r3, r2
 800536c:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	4bb1      	ldr	r3, [pc, #708]	; (800563c <UART_SetConfig+0x2fc>)
 8005376:	4013      	ands	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	69f9      	ldr	r1, [r7, #28]
 800537e:	430b      	orrs	r3, r1
 8005380:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4aa7      	ldr	r2, [pc, #668]	; (8005640 <UART_SetConfig+0x300>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d004      	beq.n	80053b2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80053bc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6812      	ldr	r2, [r2, #0]
 80053c4:	69f9      	ldr	r1, [r7, #28]
 80053c6:	430b      	orrs	r3, r1
 80053c8:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	f023 010f 	bic.w	r1, r3, #15
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a97      	ldr	r2, [pc, #604]	; (8005644 <UART_SetConfig+0x304>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d121      	bne.n	800542e <UART_SetConfig+0xee>
 80053ea:	4b97      	ldr	r3, [pc, #604]	; (8005648 <UART_SetConfig+0x308>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d817      	bhi.n	8005428 <UART_SetConfig+0xe8>
 80053f8:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <UART_SetConfig+0xc0>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005411 	.word	0x08005411
 8005404:	0800541d 	.word	0x0800541d
 8005408:	08005417 	.word	0x08005417
 800540c:	08005423 	.word	0x08005423
 8005410:	2301      	movs	r3, #1
 8005412:	76fb      	strb	r3, [r7, #27]
 8005414:	e0e7      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005416:	2302      	movs	r3, #2
 8005418:	76fb      	strb	r3, [r7, #27]
 800541a:	e0e4      	b.n	80055e6 <UART_SetConfig+0x2a6>
 800541c:	2304      	movs	r3, #4
 800541e:	76fb      	strb	r3, [r7, #27]
 8005420:	e0e1      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005422:	2308      	movs	r3, #8
 8005424:	76fb      	strb	r3, [r7, #27]
 8005426:	e0de      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005428:	2310      	movs	r3, #16
 800542a:	76fb      	strb	r3, [r7, #27]
 800542c:	e0db      	b.n	80055e6 <UART_SetConfig+0x2a6>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a86      	ldr	r2, [pc, #536]	; (800564c <UART_SetConfig+0x30c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d132      	bne.n	800549e <UART_SetConfig+0x15e>
 8005438:	4b83      	ldr	r3, [pc, #524]	; (8005648 <UART_SetConfig+0x308>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	2b0c      	cmp	r3, #12
 8005444:	d828      	bhi.n	8005498 <UART_SetConfig+0x158>
 8005446:	a201      	add	r2, pc, #4	; (adr r2, 800544c <UART_SetConfig+0x10c>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	08005481 	.word	0x08005481
 8005450:	08005499 	.word	0x08005499
 8005454:	08005499 	.word	0x08005499
 8005458:	08005499 	.word	0x08005499
 800545c:	0800548d 	.word	0x0800548d
 8005460:	08005499 	.word	0x08005499
 8005464:	08005499 	.word	0x08005499
 8005468:	08005499 	.word	0x08005499
 800546c:	08005487 	.word	0x08005487
 8005470:	08005499 	.word	0x08005499
 8005474:	08005499 	.word	0x08005499
 8005478:	08005499 	.word	0x08005499
 800547c:	08005493 	.word	0x08005493
 8005480:	2300      	movs	r3, #0
 8005482:	76fb      	strb	r3, [r7, #27]
 8005484:	e0af      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005486:	2302      	movs	r3, #2
 8005488:	76fb      	strb	r3, [r7, #27]
 800548a:	e0ac      	b.n	80055e6 <UART_SetConfig+0x2a6>
 800548c:	2304      	movs	r3, #4
 800548e:	76fb      	strb	r3, [r7, #27]
 8005490:	e0a9      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005492:	2308      	movs	r3, #8
 8005494:	76fb      	strb	r3, [r7, #27]
 8005496:	e0a6      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005498:	2310      	movs	r3, #16
 800549a:	76fb      	strb	r3, [r7, #27]
 800549c:	e0a3      	b.n	80055e6 <UART_SetConfig+0x2a6>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a6b      	ldr	r2, [pc, #428]	; (8005650 <UART_SetConfig+0x310>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d120      	bne.n	80054ea <UART_SetConfig+0x1aa>
 80054a8:	4b67      	ldr	r3, [pc, #412]	; (8005648 <UART_SetConfig+0x308>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054b2:	2b30      	cmp	r3, #48	; 0x30
 80054b4:	d013      	beq.n	80054de <UART_SetConfig+0x19e>
 80054b6:	2b30      	cmp	r3, #48	; 0x30
 80054b8:	d814      	bhi.n	80054e4 <UART_SetConfig+0x1a4>
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d009      	beq.n	80054d2 <UART_SetConfig+0x192>
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d810      	bhi.n	80054e4 <UART_SetConfig+0x1a4>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <UART_SetConfig+0x18c>
 80054c6:	2b10      	cmp	r3, #16
 80054c8:	d006      	beq.n	80054d8 <UART_SetConfig+0x198>
 80054ca:	e00b      	b.n	80054e4 <UART_SetConfig+0x1a4>
 80054cc:	2300      	movs	r3, #0
 80054ce:	76fb      	strb	r3, [r7, #27]
 80054d0:	e089      	b.n	80055e6 <UART_SetConfig+0x2a6>
 80054d2:	2302      	movs	r3, #2
 80054d4:	76fb      	strb	r3, [r7, #27]
 80054d6:	e086      	b.n	80055e6 <UART_SetConfig+0x2a6>
 80054d8:	2304      	movs	r3, #4
 80054da:	76fb      	strb	r3, [r7, #27]
 80054dc:	e083      	b.n	80055e6 <UART_SetConfig+0x2a6>
 80054de:	2308      	movs	r3, #8
 80054e0:	76fb      	strb	r3, [r7, #27]
 80054e2:	e080      	b.n	80055e6 <UART_SetConfig+0x2a6>
 80054e4:	2310      	movs	r3, #16
 80054e6:	76fb      	strb	r3, [r7, #27]
 80054e8:	e07d      	b.n	80055e6 <UART_SetConfig+0x2a6>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a59      	ldr	r2, [pc, #356]	; (8005654 <UART_SetConfig+0x314>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d120      	bne.n	8005536 <UART_SetConfig+0x1f6>
 80054f4:	4b54      	ldr	r3, [pc, #336]	; (8005648 <UART_SetConfig+0x308>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80054fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005500:	d013      	beq.n	800552a <UART_SetConfig+0x1ea>
 8005502:	2bc0      	cmp	r3, #192	; 0xc0
 8005504:	d814      	bhi.n	8005530 <UART_SetConfig+0x1f0>
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d009      	beq.n	800551e <UART_SetConfig+0x1de>
 800550a:	2b80      	cmp	r3, #128	; 0x80
 800550c:	d810      	bhi.n	8005530 <UART_SetConfig+0x1f0>
 800550e:	2b00      	cmp	r3, #0
 8005510:	d002      	beq.n	8005518 <UART_SetConfig+0x1d8>
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d006      	beq.n	8005524 <UART_SetConfig+0x1e4>
 8005516:	e00b      	b.n	8005530 <UART_SetConfig+0x1f0>
 8005518:	2300      	movs	r3, #0
 800551a:	76fb      	strb	r3, [r7, #27]
 800551c:	e063      	b.n	80055e6 <UART_SetConfig+0x2a6>
 800551e:	2302      	movs	r3, #2
 8005520:	76fb      	strb	r3, [r7, #27]
 8005522:	e060      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005524:	2304      	movs	r3, #4
 8005526:	76fb      	strb	r3, [r7, #27]
 8005528:	e05d      	b.n	80055e6 <UART_SetConfig+0x2a6>
 800552a:	2308      	movs	r3, #8
 800552c:	76fb      	strb	r3, [r7, #27]
 800552e:	e05a      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005530:	2310      	movs	r3, #16
 8005532:	76fb      	strb	r3, [r7, #27]
 8005534:	e057      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a47      	ldr	r2, [pc, #284]	; (8005658 <UART_SetConfig+0x318>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d125      	bne.n	800558c <UART_SetConfig+0x24c>
 8005540:	4b41      	ldr	r3, [pc, #260]	; (8005648 <UART_SetConfig+0x308>)
 8005542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800554e:	d017      	beq.n	8005580 <UART_SetConfig+0x240>
 8005550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005554:	d817      	bhi.n	8005586 <UART_SetConfig+0x246>
 8005556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800555a:	d00b      	beq.n	8005574 <UART_SetConfig+0x234>
 800555c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005560:	d811      	bhi.n	8005586 <UART_SetConfig+0x246>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <UART_SetConfig+0x22e>
 8005566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556a:	d006      	beq.n	800557a <UART_SetConfig+0x23a>
 800556c:	e00b      	b.n	8005586 <UART_SetConfig+0x246>
 800556e:	2300      	movs	r3, #0
 8005570:	76fb      	strb	r3, [r7, #27]
 8005572:	e038      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005574:	2302      	movs	r3, #2
 8005576:	76fb      	strb	r3, [r7, #27]
 8005578:	e035      	b.n	80055e6 <UART_SetConfig+0x2a6>
 800557a:	2304      	movs	r3, #4
 800557c:	76fb      	strb	r3, [r7, #27]
 800557e:	e032      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005580:	2308      	movs	r3, #8
 8005582:	76fb      	strb	r3, [r7, #27]
 8005584:	e02f      	b.n	80055e6 <UART_SetConfig+0x2a6>
 8005586:	2310      	movs	r3, #16
 8005588:	76fb      	strb	r3, [r7, #27]
 800558a:	e02c      	b.n	80055e6 <UART_SetConfig+0x2a6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a2b      	ldr	r2, [pc, #172]	; (8005640 <UART_SetConfig+0x300>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d125      	bne.n	80055e2 <UART_SetConfig+0x2a2>
 8005596:	4b2c      	ldr	r3, [pc, #176]	; (8005648 <UART_SetConfig+0x308>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055a4:	d017      	beq.n	80055d6 <UART_SetConfig+0x296>
 80055a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055aa:	d817      	bhi.n	80055dc <UART_SetConfig+0x29c>
 80055ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b0:	d00b      	beq.n	80055ca <UART_SetConfig+0x28a>
 80055b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b6:	d811      	bhi.n	80055dc <UART_SetConfig+0x29c>
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <UART_SetConfig+0x284>
 80055bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c0:	d006      	beq.n	80055d0 <UART_SetConfig+0x290>
 80055c2:	e00b      	b.n	80055dc <UART_SetConfig+0x29c>
 80055c4:	2300      	movs	r3, #0
 80055c6:	76fb      	strb	r3, [r7, #27]
 80055c8:	e00d      	b.n	80055e6 <UART_SetConfig+0x2a6>
 80055ca:	2302      	movs	r3, #2
 80055cc:	76fb      	strb	r3, [r7, #27]
 80055ce:	e00a      	b.n	80055e6 <UART_SetConfig+0x2a6>
 80055d0:	2304      	movs	r3, #4
 80055d2:	76fb      	strb	r3, [r7, #27]
 80055d4:	e007      	b.n	80055e6 <UART_SetConfig+0x2a6>
 80055d6:	2308      	movs	r3, #8
 80055d8:	76fb      	strb	r3, [r7, #27]
 80055da:	e004      	b.n	80055e6 <UART_SetConfig+0x2a6>
 80055dc:	2310      	movs	r3, #16
 80055de:	76fb      	strb	r3, [r7, #27]
 80055e0:	e001      	b.n	80055e6 <UART_SetConfig+0x2a6>
 80055e2:	2310      	movs	r3, #16
 80055e4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a15      	ldr	r2, [pc, #84]	; (8005640 <UART_SetConfig+0x300>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	f040 809f 	bne.w	8005730 <UART_SetConfig+0x3f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055f2:	7efb      	ldrb	r3, [r7, #27]
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d837      	bhi.n	8005668 <UART_SetConfig+0x328>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0x2c0>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005625 	.word	0x08005625
 8005604:	08005669 	.word	0x08005669
 8005608:	0800562d 	.word	0x0800562d
 800560c:	08005669 	.word	0x08005669
 8005610:	08005633 	.word	0x08005633
 8005614:	08005669 	.word	0x08005669
 8005618:	08005669 	.word	0x08005669
 800561c:	08005669 	.word	0x08005669
 8005620:	08005661 	.word	0x08005661
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005624:	f7fe ff9e 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 8005628:	6178      	str	r0, [r7, #20]
        break;
 800562a:	e022      	b.n	8005672 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <UART_SetConfig+0x31c>)
 800562e:	617b      	str	r3, [r7, #20]
        break;
 8005630:	e01f      	b.n	8005672 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005632:	f7fe feff 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 8005636:	6178      	str	r0, [r7, #20]
        break;
 8005638:	e01b      	b.n	8005672 <UART_SetConfig+0x332>
 800563a:	bf00      	nop
 800563c:	cfff69f3 	.word	0xcfff69f3
 8005640:	40008000 	.word	0x40008000
 8005644:	40013800 	.word	0x40013800
 8005648:	40021000 	.word	0x40021000
 800564c:	40004400 	.word	0x40004400
 8005650:	40004800 	.word	0x40004800
 8005654:	40004c00 	.word	0x40004c00
 8005658:	40005000 	.word	0x40005000
 800565c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005664:	617b      	str	r3, [r7, #20]
        break;
 8005666:	e004      	b.n	8005672 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	76bb      	strb	r3, [r7, #26]
        break;
 8005670:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 811b 	beq.w	80058b0 <UART_SetConfig+0x570>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567e:	4a96      	ldr	r2, [pc, #600]	; (80058d8 <UART_SetConfig+0x598>)
 8005680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005684:	461a      	mov	r2, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	fbb3 f3f2 	udiv	r3, r3, r2
 800568c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	4413      	add	r3, r2
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	429a      	cmp	r2, r3
 800569c:	d305      	bcc.n	80056aa <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d902      	bls.n	80056b0 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	76bb      	strb	r3, [r7, #26]
 80056ae:	e0ff      	b.n	80058b0 <UART_SetConfig+0x570>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f04f 0100 	mov.w	r1, #0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	4a86      	ldr	r2, [pc, #536]	; (80058d8 <UART_SetConfig+0x598>)
 80056be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	f7fb fa86 	bl	8000bd8 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4610      	mov	r0, r2
 80056d2:	4619      	mov	r1, r3
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	020b      	lsls	r3, r1, #8
 80056de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056e2:	0202      	lsls	r2, r0, #8
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	6849      	ldr	r1, [r1, #4]
 80056e8:	0849      	lsrs	r1, r1, #1
 80056ea:	4608      	mov	r0, r1
 80056ec:	f04f 0100 	mov.w	r1, #0
 80056f0:	1814      	adds	r4, r2, r0
 80056f2:	eb43 0501 	adc.w	r5, r3, r1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	461a      	mov	r2, r3
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	4620      	mov	r0, r4
 8005702:	4629      	mov	r1, r5
 8005704:	f7fb fa68 	bl	8000bd8 <__aeabi_uldivmod>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4613      	mov	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005716:	d308      	bcc.n	800572a <UART_SetConfig+0x3ea>
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800571e:	d204      	bcs.n	800572a <UART_SetConfig+0x3ea>
        {
          huart->Instance->BRR = usartdiv;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	e0c2      	b.n	80058b0 <UART_SetConfig+0x570>
        }
        else
        {
          ret = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	76bb      	strb	r3, [r7, #26]
 800572e:	e0bf      	b.n	80058b0 <UART_SetConfig+0x570>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005738:	d165      	bne.n	8005806 <UART_SetConfig+0x4c6>
  {
    switch (clocksource)
 800573a:	7efb      	ldrb	r3, [r7, #27]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d828      	bhi.n	8005792 <UART_SetConfig+0x452>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <UART_SetConfig+0x408>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800576d 	.word	0x0800576d
 800574c:	08005775 	.word	0x08005775
 8005750:	0800577d 	.word	0x0800577d
 8005754:	08005793 	.word	0x08005793
 8005758:	08005783 	.word	0x08005783
 800575c:	08005793 	.word	0x08005793
 8005760:	08005793 	.word	0x08005793
 8005764:	08005793 	.word	0x08005793
 8005768:	0800578b 	.word	0x0800578b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800576c:	f7fe fefa 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 8005770:	6178      	str	r0, [r7, #20]
        break;
 8005772:	e013      	b.n	800579c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7fe ff0c 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 8005778:	6178      	str	r0, [r7, #20]
        break;
 800577a:	e00f      	b.n	800579c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800577c:	4b57      	ldr	r3, [pc, #348]	; (80058dc <UART_SetConfig+0x59c>)
 800577e:	617b      	str	r3, [r7, #20]
        break;
 8005780:	e00c      	b.n	800579c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005782:	f7fe fe57 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 8005786:	6178      	str	r0, [r7, #20]
        break;
 8005788:	e008      	b.n	800579c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578e:	617b      	str	r3, [r7, #20]
        break;
 8005790:	e004      	b.n	800579c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	76bb      	strb	r3, [r7, #26]
        break;
 800579a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 8086 	beq.w	80058b0 <UART_SetConfig+0x570>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	4a4b      	ldr	r2, [pc, #300]	; (80058d8 <UART_SetConfig+0x598>)
 80057aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ae:	461a      	mov	r2, r3
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80057b6:	005a      	lsls	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	085b      	lsrs	r3, r3, #1
 80057be:	441a      	add	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	d916      	bls.n	8005800 <UART_SetConfig+0x4c0>
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d8:	d212      	bcs.n	8005800 <UART_SetConfig+0x4c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f023 030f 	bic.w	r3, r3, #15
 80057e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	89fb      	ldrh	r3, [r7, #14]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	89fa      	ldrh	r2, [r7, #14]
 80057fc:	60da      	str	r2, [r3, #12]
 80057fe:	e057      	b.n	80058b0 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	76bb      	strb	r3, [r7, #26]
 8005804:	e054      	b.n	80058b0 <UART_SetConfig+0x570>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005806:	7efb      	ldrb	r3, [r7, #27]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d828      	bhi.n	800585e <UART_SetConfig+0x51e>
 800580c:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <UART_SetConfig+0x4d4>)
 800580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005812:	bf00      	nop
 8005814:	08005839 	.word	0x08005839
 8005818:	08005841 	.word	0x08005841
 800581c:	08005849 	.word	0x08005849
 8005820:	0800585f 	.word	0x0800585f
 8005824:	0800584f 	.word	0x0800584f
 8005828:	0800585f 	.word	0x0800585f
 800582c:	0800585f 	.word	0x0800585f
 8005830:	0800585f 	.word	0x0800585f
 8005834:	08005857 	.word	0x08005857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005838:	f7fe fe94 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 800583c:	6178      	str	r0, [r7, #20]
        break;
 800583e:	e013      	b.n	8005868 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005840:	f7fe fea6 	bl	8004590 <HAL_RCC_GetPCLK2Freq>
 8005844:	6178      	str	r0, [r7, #20]
        break;
 8005846:	e00f      	b.n	8005868 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005848:	4b24      	ldr	r3, [pc, #144]	; (80058dc <UART_SetConfig+0x59c>)
 800584a:	617b      	str	r3, [r7, #20]
        break;
 800584c:	e00c      	b.n	8005868 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800584e:	f7fe fdf1 	bl	8004434 <HAL_RCC_GetSysClockFreq>
 8005852:	6178      	str	r0, [r7, #20]
        break;
 8005854:	e008      	b.n	8005868 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800585a:	617b      	str	r3, [r7, #20]
        break;
 800585c:	e004      	b.n	8005868 <UART_SetConfig+0x528>
      default:
        pclk = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	76bb      	strb	r3, [r7, #26]
        break;
 8005866:	bf00      	nop
    }

    if (pclk != 0U)
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d020      	beq.n	80058b0 <UART_SetConfig+0x570>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	4a19      	ldr	r2, [pc, #100]	; (80058d8 <UART_SetConfig+0x598>)
 8005874:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005878:	461a      	mov	r2, r3
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	085b      	lsrs	r3, r3, #1
 8005886:	441a      	add	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005890:	b29b      	uxth	r3, r3
 8005892:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b0f      	cmp	r3, #15
 8005898:	d908      	bls.n	80058ac <UART_SetConfig+0x56c>
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a0:	d204      	bcs.n	80058ac <UART_SetConfig+0x56c>
      {
        huart->Instance->BRR = usartdiv;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	60da      	str	r2, [r3, #12]
 80058aa:	e001      	b.n	80058b0 <UART_SetConfig+0x570>
      }
      else
      {
        ret = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80058cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bdb0      	pop	{r4, r5, r7, pc}
 80058d6:	bf00      	nop
 80058d8:	08008c04 	.word	0x08008c04
 80058dc:	00f42400 	.word	0x00f42400

080058e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00a      	beq.n	800590a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00a      	beq.n	8005970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	f003 0310 	and.w	r3, r3, #16
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01a      	beq.n	80059f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059de:	d10a      	bne.n	80059f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005a34:	f7fc ff26 	bl	8002884 <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0308 	and.w	r3, r3, #8
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d10e      	bne.n	8005a66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f82c 	bl	8005ab4 <UART_WaitOnFlagUntilTimeout>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e022      	b.n	8005aac <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d10e      	bne.n	8005a92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f816 	bl	8005ab4 <UART_WaitOnFlagUntilTimeout>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e00c      	b.n	8005aac <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2220      	movs	r2, #32
 8005a96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac4:	e062      	b.n	8005b8c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005acc:	d05e      	beq.n	8005b8c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ace:	f7fc fed9 	bl	8002884 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d11d      	bne.n	8005b20 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005af2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e045      	b.n	8005bac <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0304 	and.w	r3, r3, #4
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d02e      	beq.n	8005b8c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3c:	d126      	bne.n	8005b8c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b46:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b56:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689a      	ldr	r2, [r3, #8]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f022 0201 	bic.w	r2, r2, #1
 8005b66:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e00f      	b.n	8005bac <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69da      	ldr	r2, [r3, #28]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	4013      	ands	r3, r2
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	bf0c      	ite	eq
 8005b9c:	2301      	moveq	r3, #1
 8005b9e:	2300      	movne	r3, #0
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d08d      	beq.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_UARTEx_DisableFifoMode+0x16>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e027      	b.n	8005c1a <HAL_UARTEx_DisableFifoMode+0x66>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2224      	movs	r2, #36	; 0x24
 8005bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005bf8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e02d      	b.n	8005c9a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2224      	movs	r2, #36	; 0x24
 8005c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0201 	bic.w	r2, r2, #1
 8005c64:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f850 	bl	8005d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d101      	bne.n	8005cba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	e02d      	b.n	8005d16 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2224      	movs	r2, #36	; 0x24
 8005cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f812 	bl	8005d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b089      	sub	sp, #36	; 0x24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005d28:	4a2f      	ldr	r2, [pc, #188]	; (8005de8 <UARTEx_SetNbDataToProcess+0xc8>)
 8005d2a:	f107 0314 	add.w	r3, r7, #20
 8005d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d32:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005d36:	4a2d      	ldr	r2, [pc, #180]	; (8005dec <UARTEx_SetNbDataToProcess+0xcc>)
 8005d38:	f107 030c 	add.w	r3, r7, #12
 8005d3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d40:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d108      	bne.n	8005d5e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d5c:	e03d      	b.n	8005dda <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d5e:	2308      	movs	r3, #8
 8005d60:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d62:	2308      	movs	r3, #8
 8005d64:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	0e5b      	lsrs	r3, r3, #25
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	0f5b      	lsrs	r3, r3, #29
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005d86:	7fbb      	ldrb	r3, [r7, #30]
 8005d88:	7f3a      	ldrb	r2, [r7, #28]
 8005d8a:	f107 0120 	add.w	r1, r7, #32
 8005d8e:	440a      	add	r2, r1
 8005d90:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005d94:	fb02 f303 	mul.w	r3, r2, r3
 8005d98:	7f3a      	ldrb	r2, [r7, #28]
 8005d9a:	f107 0120 	add.w	r1, r7, #32
 8005d9e:	440a      	add	r2, r1
 8005da0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005da4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005db0:	7ffb      	ldrb	r3, [r7, #31]
 8005db2:	7f7a      	ldrb	r2, [r7, #29]
 8005db4:	f107 0120 	add.w	r1, r7, #32
 8005db8:	440a      	add	r2, r1
 8005dba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005dbe:	fb02 f303 	mul.w	r3, r2, r3
 8005dc2:	7f7a      	ldrb	r2, [r7, #29]
 8005dc4:	f107 0120 	add.w	r1, r7, #32
 8005dc8:	440a      	add	r2, r1
 8005dca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005dce:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005dda:	bf00      	nop
 8005ddc:	3724      	adds	r7, #36	; 0x24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	08008ba0 	.word	0x08008ba0
 8005dec:	08008ba8 	.word	0x08008ba8

08005df0 <__assert_func>:
 8005df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005df2:	4614      	mov	r4, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <__assert_func+0x2c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4605      	mov	r5, r0
 8005dfc:	68d8      	ldr	r0, [r3, #12]
 8005dfe:	b14c      	cbz	r4, 8005e14 <__assert_func+0x24>
 8005e00:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <__assert_func+0x30>)
 8005e02:	9100      	str	r1, [sp, #0]
 8005e04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e08:	4906      	ldr	r1, [pc, #24]	; (8005e24 <__assert_func+0x34>)
 8005e0a:	462b      	mov	r3, r5
 8005e0c:	f000 f814 	bl	8005e38 <fiprintf>
 8005e10:	f000 ff62 	bl	8006cd8 <abort>
 8005e14:	4b04      	ldr	r3, [pc, #16]	; (8005e28 <__assert_func+0x38>)
 8005e16:	461c      	mov	r4, r3
 8005e18:	e7f3      	b.n	8005e02 <__assert_func+0x12>
 8005e1a:	bf00      	nop
 8005e1c:	2000000c 	.word	0x2000000c
 8005e20:	08008c1c 	.word	0x08008c1c
 8005e24:	08008c29 	.word	0x08008c29
 8005e28:	08008c57 	.word	0x08008c57

08005e2c <__errno>:
 8005e2c:	4b01      	ldr	r3, [pc, #4]	; (8005e34 <__errno+0x8>)
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	2000000c 	.word	0x2000000c

08005e38 <fiprintf>:
 8005e38:	b40e      	push	{r1, r2, r3}
 8005e3a:	b503      	push	{r0, r1, lr}
 8005e3c:	4601      	mov	r1, r0
 8005e3e:	ab03      	add	r3, sp, #12
 8005e40:	4805      	ldr	r0, [pc, #20]	; (8005e58 <fiprintf+0x20>)
 8005e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e46:	6800      	ldr	r0, [r0, #0]
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	f000 f85d 	bl	8005f08 <_vfiprintf_r>
 8005e4e:	b002      	add	sp, #8
 8005e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e54:	b003      	add	sp, #12
 8005e56:	4770      	bx	lr
 8005e58:	2000000c 	.word	0x2000000c

08005e5c <__libc_init_array>:
 8005e5c:	b570      	push	{r4, r5, r6, lr}
 8005e5e:	4d0d      	ldr	r5, [pc, #52]	; (8005e94 <__libc_init_array+0x38>)
 8005e60:	4c0d      	ldr	r4, [pc, #52]	; (8005e98 <__libc_init_array+0x3c>)
 8005e62:	1b64      	subs	r4, r4, r5
 8005e64:	10a4      	asrs	r4, r4, #2
 8005e66:	2600      	movs	r6, #0
 8005e68:	42a6      	cmp	r6, r4
 8005e6a:	d109      	bne.n	8005e80 <__libc_init_array+0x24>
 8005e6c:	4d0b      	ldr	r5, [pc, #44]	; (8005e9c <__libc_init_array+0x40>)
 8005e6e:	4c0c      	ldr	r4, [pc, #48]	; (8005ea0 <__libc_init_array+0x44>)
 8005e70:	f002 fd50 	bl	8008914 <_init>
 8005e74:	1b64      	subs	r4, r4, r5
 8005e76:	10a4      	asrs	r4, r4, #2
 8005e78:	2600      	movs	r6, #0
 8005e7a:	42a6      	cmp	r6, r4
 8005e7c:	d105      	bne.n	8005e8a <__libc_init_array+0x2e>
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e84:	4798      	blx	r3
 8005e86:	3601      	adds	r6, #1
 8005e88:	e7ee      	b.n	8005e68 <__libc_init_array+0xc>
 8005e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e8e:	4798      	blx	r3
 8005e90:	3601      	adds	r6, #1
 8005e92:	e7f2      	b.n	8005e7a <__libc_init_array+0x1e>
 8005e94:	08009008 	.word	0x08009008
 8005e98:	08009008 	.word	0x08009008
 8005e9c:	08009008 	.word	0x08009008
 8005ea0:	0800900c 	.word	0x0800900c

08005ea4 <memset>:
 8005ea4:	4402      	add	r2, r0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d100      	bne.n	8005eae <memset+0xa>
 8005eac:	4770      	bx	lr
 8005eae:	f803 1b01 	strb.w	r1, [r3], #1
 8005eb2:	e7f9      	b.n	8005ea8 <memset+0x4>

08005eb4 <__sfputc_r>:
 8005eb4:	6893      	ldr	r3, [r2, #8]
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	b410      	push	{r4}
 8005ebc:	6093      	str	r3, [r2, #8]
 8005ebe:	da08      	bge.n	8005ed2 <__sfputc_r+0x1e>
 8005ec0:	6994      	ldr	r4, [r2, #24]
 8005ec2:	42a3      	cmp	r3, r4
 8005ec4:	db01      	blt.n	8005eca <__sfputc_r+0x16>
 8005ec6:	290a      	cmp	r1, #10
 8005ec8:	d103      	bne.n	8005ed2 <__sfputc_r+0x1e>
 8005eca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ece:	f000 be43 	b.w	8006b58 <__swbuf_r>
 8005ed2:	6813      	ldr	r3, [r2, #0]
 8005ed4:	1c58      	adds	r0, r3, #1
 8005ed6:	6010      	str	r0, [r2, #0]
 8005ed8:	7019      	strb	r1, [r3, #0]
 8005eda:	4608      	mov	r0, r1
 8005edc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <__sfputs_r>:
 8005ee2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	460f      	mov	r7, r1
 8005ee8:	4614      	mov	r4, r2
 8005eea:	18d5      	adds	r5, r2, r3
 8005eec:	42ac      	cmp	r4, r5
 8005eee:	d101      	bne.n	8005ef4 <__sfputs_r+0x12>
 8005ef0:	2000      	movs	r0, #0
 8005ef2:	e007      	b.n	8005f04 <__sfputs_r+0x22>
 8005ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ef8:	463a      	mov	r2, r7
 8005efa:	4630      	mov	r0, r6
 8005efc:	f7ff ffda 	bl	8005eb4 <__sfputc_r>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d1f3      	bne.n	8005eec <__sfputs_r+0xa>
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005f08 <_vfiprintf_r>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	460d      	mov	r5, r1
 8005f0e:	b09d      	sub	sp, #116	; 0x74
 8005f10:	4614      	mov	r4, r2
 8005f12:	4698      	mov	r8, r3
 8005f14:	4606      	mov	r6, r0
 8005f16:	b118      	cbz	r0, 8005f20 <_vfiprintf_r+0x18>
 8005f18:	6983      	ldr	r3, [r0, #24]
 8005f1a:	b90b      	cbnz	r3, 8005f20 <_vfiprintf_r+0x18>
 8005f1c:	f001 fe76 	bl	8007c0c <__sinit>
 8005f20:	4b89      	ldr	r3, [pc, #548]	; (8006148 <_vfiprintf_r+0x240>)
 8005f22:	429d      	cmp	r5, r3
 8005f24:	d11b      	bne.n	8005f5e <_vfiprintf_r+0x56>
 8005f26:	6875      	ldr	r5, [r6, #4]
 8005f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f2a:	07d9      	lsls	r1, r3, #31
 8005f2c:	d405      	bmi.n	8005f3a <_vfiprintf_r+0x32>
 8005f2e:	89ab      	ldrh	r3, [r5, #12]
 8005f30:	059a      	lsls	r2, r3, #22
 8005f32:	d402      	bmi.n	8005f3a <_vfiprintf_r+0x32>
 8005f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f36:	f001 ff0c 	bl	8007d52 <__retarget_lock_acquire_recursive>
 8005f3a:	89ab      	ldrh	r3, [r5, #12]
 8005f3c:	071b      	lsls	r3, r3, #28
 8005f3e:	d501      	bpl.n	8005f44 <_vfiprintf_r+0x3c>
 8005f40:	692b      	ldr	r3, [r5, #16]
 8005f42:	b9eb      	cbnz	r3, 8005f80 <_vfiprintf_r+0x78>
 8005f44:	4629      	mov	r1, r5
 8005f46:	4630      	mov	r0, r6
 8005f48:	f000 fe58 	bl	8006bfc <__swsetup_r>
 8005f4c:	b1c0      	cbz	r0, 8005f80 <_vfiprintf_r+0x78>
 8005f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f50:	07dc      	lsls	r4, r3, #31
 8005f52:	d50e      	bpl.n	8005f72 <_vfiprintf_r+0x6a>
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f58:	b01d      	add	sp, #116	; 0x74
 8005f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5e:	4b7b      	ldr	r3, [pc, #492]	; (800614c <_vfiprintf_r+0x244>)
 8005f60:	429d      	cmp	r5, r3
 8005f62:	d101      	bne.n	8005f68 <_vfiprintf_r+0x60>
 8005f64:	68b5      	ldr	r5, [r6, #8]
 8005f66:	e7df      	b.n	8005f28 <_vfiprintf_r+0x20>
 8005f68:	4b79      	ldr	r3, [pc, #484]	; (8006150 <_vfiprintf_r+0x248>)
 8005f6a:	429d      	cmp	r5, r3
 8005f6c:	bf08      	it	eq
 8005f6e:	68f5      	ldreq	r5, [r6, #12]
 8005f70:	e7da      	b.n	8005f28 <_vfiprintf_r+0x20>
 8005f72:	89ab      	ldrh	r3, [r5, #12]
 8005f74:	0598      	lsls	r0, r3, #22
 8005f76:	d4ed      	bmi.n	8005f54 <_vfiprintf_r+0x4c>
 8005f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f7a:	f001 feeb 	bl	8007d54 <__retarget_lock_release_recursive>
 8005f7e:	e7e9      	b.n	8005f54 <_vfiprintf_r+0x4c>
 8005f80:	2300      	movs	r3, #0
 8005f82:	9309      	str	r3, [sp, #36]	; 0x24
 8005f84:	2320      	movs	r3, #32
 8005f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f8e:	2330      	movs	r3, #48	; 0x30
 8005f90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006154 <_vfiprintf_r+0x24c>
 8005f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f98:	f04f 0901 	mov.w	r9, #1
 8005f9c:	4623      	mov	r3, r4
 8005f9e:	469a      	mov	sl, r3
 8005fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fa4:	b10a      	cbz	r2, 8005faa <_vfiprintf_r+0xa2>
 8005fa6:	2a25      	cmp	r2, #37	; 0x25
 8005fa8:	d1f9      	bne.n	8005f9e <_vfiprintf_r+0x96>
 8005faa:	ebba 0b04 	subs.w	fp, sl, r4
 8005fae:	d00b      	beq.n	8005fc8 <_vfiprintf_r+0xc0>
 8005fb0:	465b      	mov	r3, fp
 8005fb2:	4622      	mov	r2, r4
 8005fb4:	4629      	mov	r1, r5
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	f7ff ff93 	bl	8005ee2 <__sfputs_r>
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	f000 80aa 	beq.w	8006116 <_vfiprintf_r+0x20e>
 8005fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fc4:	445a      	add	r2, fp
 8005fc6:	9209      	str	r2, [sp, #36]	; 0x24
 8005fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 80a2 	beq.w	8006116 <_vfiprintf_r+0x20e>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fdc:	f10a 0a01 	add.w	sl, sl, #1
 8005fe0:	9304      	str	r3, [sp, #16]
 8005fe2:	9307      	str	r3, [sp, #28]
 8005fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fe8:	931a      	str	r3, [sp, #104]	; 0x68
 8005fea:	4654      	mov	r4, sl
 8005fec:	2205      	movs	r2, #5
 8005fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ff2:	4858      	ldr	r0, [pc, #352]	; (8006154 <_vfiprintf_r+0x24c>)
 8005ff4:	f7fa f90c 	bl	8000210 <memchr>
 8005ff8:	9a04      	ldr	r2, [sp, #16]
 8005ffa:	b9d8      	cbnz	r0, 8006034 <_vfiprintf_r+0x12c>
 8005ffc:	06d1      	lsls	r1, r2, #27
 8005ffe:	bf44      	itt	mi
 8006000:	2320      	movmi	r3, #32
 8006002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006006:	0713      	lsls	r3, r2, #28
 8006008:	bf44      	itt	mi
 800600a:	232b      	movmi	r3, #43	; 0x2b
 800600c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006010:	f89a 3000 	ldrb.w	r3, [sl]
 8006014:	2b2a      	cmp	r3, #42	; 0x2a
 8006016:	d015      	beq.n	8006044 <_vfiprintf_r+0x13c>
 8006018:	9a07      	ldr	r2, [sp, #28]
 800601a:	4654      	mov	r4, sl
 800601c:	2000      	movs	r0, #0
 800601e:	f04f 0c0a 	mov.w	ip, #10
 8006022:	4621      	mov	r1, r4
 8006024:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006028:	3b30      	subs	r3, #48	; 0x30
 800602a:	2b09      	cmp	r3, #9
 800602c:	d94e      	bls.n	80060cc <_vfiprintf_r+0x1c4>
 800602e:	b1b0      	cbz	r0, 800605e <_vfiprintf_r+0x156>
 8006030:	9207      	str	r2, [sp, #28]
 8006032:	e014      	b.n	800605e <_vfiprintf_r+0x156>
 8006034:	eba0 0308 	sub.w	r3, r0, r8
 8006038:	fa09 f303 	lsl.w	r3, r9, r3
 800603c:	4313      	orrs	r3, r2
 800603e:	9304      	str	r3, [sp, #16]
 8006040:	46a2      	mov	sl, r4
 8006042:	e7d2      	b.n	8005fea <_vfiprintf_r+0xe2>
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	1d19      	adds	r1, r3, #4
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	9103      	str	r1, [sp, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	bfbb      	ittet	lt
 8006050:	425b      	neglt	r3, r3
 8006052:	f042 0202 	orrlt.w	r2, r2, #2
 8006056:	9307      	strge	r3, [sp, #28]
 8006058:	9307      	strlt	r3, [sp, #28]
 800605a:	bfb8      	it	lt
 800605c:	9204      	strlt	r2, [sp, #16]
 800605e:	7823      	ldrb	r3, [r4, #0]
 8006060:	2b2e      	cmp	r3, #46	; 0x2e
 8006062:	d10c      	bne.n	800607e <_vfiprintf_r+0x176>
 8006064:	7863      	ldrb	r3, [r4, #1]
 8006066:	2b2a      	cmp	r3, #42	; 0x2a
 8006068:	d135      	bne.n	80060d6 <_vfiprintf_r+0x1ce>
 800606a:	9b03      	ldr	r3, [sp, #12]
 800606c:	1d1a      	adds	r2, r3, #4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	9203      	str	r2, [sp, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	bfb8      	it	lt
 8006076:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800607a:	3402      	adds	r4, #2
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006164 <_vfiprintf_r+0x25c>
 8006082:	7821      	ldrb	r1, [r4, #0]
 8006084:	2203      	movs	r2, #3
 8006086:	4650      	mov	r0, sl
 8006088:	f7fa f8c2 	bl	8000210 <memchr>
 800608c:	b140      	cbz	r0, 80060a0 <_vfiprintf_r+0x198>
 800608e:	2340      	movs	r3, #64	; 0x40
 8006090:	eba0 000a 	sub.w	r0, r0, sl
 8006094:	fa03 f000 	lsl.w	r0, r3, r0
 8006098:	9b04      	ldr	r3, [sp, #16]
 800609a:	4303      	orrs	r3, r0
 800609c:	3401      	adds	r4, #1
 800609e:	9304      	str	r3, [sp, #16]
 80060a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a4:	482c      	ldr	r0, [pc, #176]	; (8006158 <_vfiprintf_r+0x250>)
 80060a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060aa:	2206      	movs	r2, #6
 80060ac:	f7fa f8b0 	bl	8000210 <memchr>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d03f      	beq.n	8006134 <_vfiprintf_r+0x22c>
 80060b4:	4b29      	ldr	r3, [pc, #164]	; (800615c <_vfiprintf_r+0x254>)
 80060b6:	bb1b      	cbnz	r3, 8006100 <_vfiprintf_r+0x1f8>
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	3307      	adds	r3, #7
 80060bc:	f023 0307 	bic.w	r3, r3, #7
 80060c0:	3308      	adds	r3, #8
 80060c2:	9303      	str	r3, [sp, #12]
 80060c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c6:	443b      	add	r3, r7
 80060c8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ca:	e767      	b.n	8005f9c <_vfiprintf_r+0x94>
 80060cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80060d0:	460c      	mov	r4, r1
 80060d2:	2001      	movs	r0, #1
 80060d4:	e7a5      	b.n	8006022 <_vfiprintf_r+0x11a>
 80060d6:	2300      	movs	r3, #0
 80060d8:	3401      	adds	r4, #1
 80060da:	9305      	str	r3, [sp, #20]
 80060dc:	4619      	mov	r1, r3
 80060de:	f04f 0c0a 	mov.w	ip, #10
 80060e2:	4620      	mov	r0, r4
 80060e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060e8:	3a30      	subs	r2, #48	; 0x30
 80060ea:	2a09      	cmp	r2, #9
 80060ec:	d903      	bls.n	80060f6 <_vfiprintf_r+0x1ee>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0c5      	beq.n	800607e <_vfiprintf_r+0x176>
 80060f2:	9105      	str	r1, [sp, #20]
 80060f4:	e7c3      	b.n	800607e <_vfiprintf_r+0x176>
 80060f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80060fa:	4604      	mov	r4, r0
 80060fc:	2301      	movs	r3, #1
 80060fe:	e7f0      	b.n	80060e2 <_vfiprintf_r+0x1da>
 8006100:	ab03      	add	r3, sp, #12
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	462a      	mov	r2, r5
 8006106:	4b16      	ldr	r3, [pc, #88]	; (8006160 <_vfiprintf_r+0x258>)
 8006108:	a904      	add	r1, sp, #16
 800610a:	4630      	mov	r0, r6
 800610c:	f000 f8cc 	bl	80062a8 <_printf_float>
 8006110:	4607      	mov	r7, r0
 8006112:	1c78      	adds	r0, r7, #1
 8006114:	d1d6      	bne.n	80060c4 <_vfiprintf_r+0x1bc>
 8006116:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006118:	07d9      	lsls	r1, r3, #31
 800611a:	d405      	bmi.n	8006128 <_vfiprintf_r+0x220>
 800611c:	89ab      	ldrh	r3, [r5, #12]
 800611e:	059a      	lsls	r2, r3, #22
 8006120:	d402      	bmi.n	8006128 <_vfiprintf_r+0x220>
 8006122:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006124:	f001 fe16 	bl	8007d54 <__retarget_lock_release_recursive>
 8006128:	89ab      	ldrh	r3, [r5, #12]
 800612a:	065b      	lsls	r3, r3, #25
 800612c:	f53f af12 	bmi.w	8005f54 <_vfiprintf_r+0x4c>
 8006130:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006132:	e711      	b.n	8005f58 <_vfiprintf_r+0x50>
 8006134:	ab03      	add	r3, sp, #12
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	462a      	mov	r2, r5
 800613a:	4b09      	ldr	r3, [pc, #36]	; (8006160 <_vfiprintf_r+0x258>)
 800613c:	a904      	add	r1, sp, #16
 800613e:	4630      	mov	r0, r6
 8006140:	f000 fb56 	bl	80067f0 <_printf_i>
 8006144:	e7e4      	b.n	8006110 <_vfiprintf_r+0x208>
 8006146:	bf00      	nop
 8006148:	08008d58 	.word	0x08008d58
 800614c:	08008d78 	.word	0x08008d78
 8006150:	08008d38 	.word	0x08008d38
 8006154:	08008c5c 	.word	0x08008c5c
 8006158:	08008c66 	.word	0x08008c66
 800615c:	080062a9 	.word	0x080062a9
 8006160:	08005ee3 	.word	0x08005ee3
 8006164:	08008c62 	.word	0x08008c62

08006168 <__cvt>:
 8006168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800616c:	ec55 4b10 	vmov	r4, r5, d0
 8006170:	2d00      	cmp	r5, #0
 8006172:	460e      	mov	r6, r1
 8006174:	4619      	mov	r1, r3
 8006176:	462b      	mov	r3, r5
 8006178:	bfbb      	ittet	lt
 800617a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800617e:	461d      	movlt	r5, r3
 8006180:	2300      	movge	r3, #0
 8006182:	232d      	movlt	r3, #45	; 0x2d
 8006184:	700b      	strb	r3, [r1, #0]
 8006186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006188:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800618c:	4691      	mov	r9, r2
 800618e:	f023 0820 	bic.w	r8, r3, #32
 8006192:	bfbc      	itt	lt
 8006194:	4622      	movlt	r2, r4
 8006196:	4614      	movlt	r4, r2
 8006198:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800619c:	d005      	beq.n	80061aa <__cvt+0x42>
 800619e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061a2:	d100      	bne.n	80061a6 <__cvt+0x3e>
 80061a4:	3601      	adds	r6, #1
 80061a6:	2102      	movs	r1, #2
 80061a8:	e000      	b.n	80061ac <__cvt+0x44>
 80061aa:	2103      	movs	r1, #3
 80061ac:	ab03      	add	r3, sp, #12
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	ab02      	add	r3, sp, #8
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	ec45 4b10 	vmov	d0, r4, r5
 80061b8:	4653      	mov	r3, sl
 80061ba:	4632      	mov	r2, r6
 80061bc:	f000 fe20 	bl	8006e00 <_dtoa_r>
 80061c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061c4:	4607      	mov	r7, r0
 80061c6:	d102      	bne.n	80061ce <__cvt+0x66>
 80061c8:	f019 0f01 	tst.w	r9, #1
 80061cc:	d022      	beq.n	8006214 <__cvt+0xac>
 80061ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061d2:	eb07 0906 	add.w	r9, r7, r6
 80061d6:	d110      	bne.n	80061fa <__cvt+0x92>
 80061d8:	783b      	ldrb	r3, [r7, #0]
 80061da:	2b30      	cmp	r3, #48	; 0x30
 80061dc:	d10a      	bne.n	80061f4 <__cvt+0x8c>
 80061de:	2200      	movs	r2, #0
 80061e0:	2300      	movs	r3, #0
 80061e2:	4620      	mov	r0, r4
 80061e4:	4629      	mov	r1, r5
 80061e6:	f7fa fc87 	bl	8000af8 <__aeabi_dcmpeq>
 80061ea:	b918      	cbnz	r0, 80061f4 <__cvt+0x8c>
 80061ec:	f1c6 0601 	rsb	r6, r6, #1
 80061f0:	f8ca 6000 	str.w	r6, [sl]
 80061f4:	f8da 3000 	ldr.w	r3, [sl]
 80061f8:	4499      	add	r9, r3
 80061fa:	2200      	movs	r2, #0
 80061fc:	2300      	movs	r3, #0
 80061fe:	4620      	mov	r0, r4
 8006200:	4629      	mov	r1, r5
 8006202:	f7fa fc79 	bl	8000af8 <__aeabi_dcmpeq>
 8006206:	b108      	cbz	r0, 800620c <__cvt+0xa4>
 8006208:	f8cd 900c 	str.w	r9, [sp, #12]
 800620c:	2230      	movs	r2, #48	; 0x30
 800620e:	9b03      	ldr	r3, [sp, #12]
 8006210:	454b      	cmp	r3, r9
 8006212:	d307      	bcc.n	8006224 <__cvt+0xbc>
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006218:	1bdb      	subs	r3, r3, r7
 800621a:	4638      	mov	r0, r7
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	b004      	add	sp, #16
 8006220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006224:	1c59      	adds	r1, r3, #1
 8006226:	9103      	str	r1, [sp, #12]
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	e7f0      	b.n	800620e <__cvt+0xa6>

0800622c <__exponent>:
 800622c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800622e:	4603      	mov	r3, r0
 8006230:	2900      	cmp	r1, #0
 8006232:	bfb8      	it	lt
 8006234:	4249      	neglt	r1, r1
 8006236:	f803 2b02 	strb.w	r2, [r3], #2
 800623a:	bfb4      	ite	lt
 800623c:	222d      	movlt	r2, #45	; 0x2d
 800623e:	222b      	movge	r2, #43	; 0x2b
 8006240:	2909      	cmp	r1, #9
 8006242:	7042      	strb	r2, [r0, #1]
 8006244:	dd2a      	ble.n	800629c <__exponent+0x70>
 8006246:	f10d 0407 	add.w	r4, sp, #7
 800624a:	46a4      	mov	ip, r4
 800624c:	270a      	movs	r7, #10
 800624e:	46a6      	mov	lr, r4
 8006250:	460a      	mov	r2, r1
 8006252:	fb91 f6f7 	sdiv	r6, r1, r7
 8006256:	fb07 1516 	mls	r5, r7, r6, r1
 800625a:	3530      	adds	r5, #48	; 0x30
 800625c:	2a63      	cmp	r2, #99	; 0x63
 800625e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006262:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006266:	4631      	mov	r1, r6
 8006268:	dcf1      	bgt.n	800624e <__exponent+0x22>
 800626a:	3130      	adds	r1, #48	; 0x30
 800626c:	f1ae 0502 	sub.w	r5, lr, #2
 8006270:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006274:	1c44      	adds	r4, r0, #1
 8006276:	4629      	mov	r1, r5
 8006278:	4561      	cmp	r1, ip
 800627a:	d30a      	bcc.n	8006292 <__exponent+0x66>
 800627c:	f10d 0209 	add.w	r2, sp, #9
 8006280:	eba2 020e 	sub.w	r2, r2, lr
 8006284:	4565      	cmp	r5, ip
 8006286:	bf88      	it	hi
 8006288:	2200      	movhi	r2, #0
 800628a:	4413      	add	r3, r2
 800628c:	1a18      	subs	r0, r3, r0
 800628e:	b003      	add	sp, #12
 8006290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006292:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006296:	f804 2f01 	strb.w	r2, [r4, #1]!
 800629a:	e7ed      	b.n	8006278 <__exponent+0x4c>
 800629c:	2330      	movs	r3, #48	; 0x30
 800629e:	3130      	adds	r1, #48	; 0x30
 80062a0:	7083      	strb	r3, [r0, #2]
 80062a2:	70c1      	strb	r1, [r0, #3]
 80062a4:	1d03      	adds	r3, r0, #4
 80062a6:	e7f1      	b.n	800628c <__exponent+0x60>

080062a8 <_printf_float>:
 80062a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ac:	ed2d 8b02 	vpush	{d8}
 80062b0:	b08d      	sub	sp, #52	; 0x34
 80062b2:	460c      	mov	r4, r1
 80062b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062b8:	4616      	mov	r6, r2
 80062ba:	461f      	mov	r7, r3
 80062bc:	4605      	mov	r5, r0
 80062be:	f001 fd43 	bl	8007d48 <_localeconv_r>
 80062c2:	f8d0 a000 	ldr.w	sl, [r0]
 80062c6:	4650      	mov	r0, sl
 80062c8:	f7f9 ff9a 	bl	8000200 <strlen>
 80062cc:	2300      	movs	r3, #0
 80062ce:	930a      	str	r3, [sp, #40]	; 0x28
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	9305      	str	r3, [sp, #20]
 80062d4:	f8d8 3000 	ldr.w	r3, [r8]
 80062d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062dc:	3307      	adds	r3, #7
 80062de:	f023 0307 	bic.w	r3, r3, #7
 80062e2:	f103 0208 	add.w	r2, r3, #8
 80062e6:	f8c8 2000 	str.w	r2, [r8]
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80062f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062fa:	9307      	str	r3, [sp, #28]
 80062fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8006300:	ee08 0a10 	vmov	s16, r0
 8006304:	4b9f      	ldr	r3, [pc, #636]	; (8006584 <_printf_float+0x2dc>)
 8006306:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800630a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800630e:	f7fa fc25 	bl	8000b5c <__aeabi_dcmpun>
 8006312:	bb88      	cbnz	r0, 8006378 <_printf_float+0xd0>
 8006314:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006318:	4b9a      	ldr	r3, [pc, #616]	; (8006584 <_printf_float+0x2dc>)
 800631a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800631e:	f7fa fbff 	bl	8000b20 <__aeabi_dcmple>
 8006322:	bb48      	cbnz	r0, 8006378 <_printf_float+0xd0>
 8006324:	2200      	movs	r2, #0
 8006326:	2300      	movs	r3, #0
 8006328:	4640      	mov	r0, r8
 800632a:	4649      	mov	r1, r9
 800632c:	f7fa fbee 	bl	8000b0c <__aeabi_dcmplt>
 8006330:	b110      	cbz	r0, 8006338 <_printf_float+0x90>
 8006332:	232d      	movs	r3, #45	; 0x2d
 8006334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006338:	4b93      	ldr	r3, [pc, #588]	; (8006588 <_printf_float+0x2e0>)
 800633a:	4894      	ldr	r0, [pc, #592]	; (800658c <_printf_float+0x2e4>)
 800633c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006340:	bf94      	ite	ls
 8006342:	4698      	movls	r8, r3
 8006344:	4680      	movhi	r8, r0
 8006346:	2303      	movs	r3, #3
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	9b05      	ldr	r3, [sp, #20]
 800634c:	f023 0204 	bic.w	r2, r3, #4
 8006350:	6022      	str	r2, [r4, #0]
 8006352:	f04f 0900 	mov.w	r9, #0
 8006356:	9700      	str	r7, [sp, #0]
 8006358:	4633      	mov	r3, r6
 800635a:	aa0b      	add	r2, sp, #44	; 0x2c
 800635c:	4621      	mov	r1, r4
 800635e:	4628      	mov	r0, r5
 8006360:	f000 f9d8 	bl	8006714 <_printf_common>
 8006364:	3001      	adds	r0, #1
 8006366:	f040 8090 	bne.w	800648a <_printf_float+0x1e2>
 800636a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800636e:	b00d      	add	sp, #52	; 0x34
 8006370:	ecbd 8b02 	vpop	{d8}
 8006374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	4640      	mov	r0, r8
 800637e:	4649      	mov	r1, r9
 8006380:	f7fa fbec 	bl	8000b5c <__aeabi_dcmpun>
 8006384:	b140      	cbz	r0, 8006398 <_printf_float+0xf0>
 8006386:	464b      	mov	r3, r9
 8006388:	2b00      	cmp	r3, #0
 800638a:	bfbc      	itt	lt
 800638c:	232d      	movlt	r3, #45	; 0x2d
 800638e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006392:	487f      	ldr	r0, [pc, #508]	; (8006590 <_printf_float+0x2e8>)
 8006394:	4b7f      	ldr	r3, [pc, #508]	; (8006594 <_printf_float+0x2ec>)
 8006396:	e7d1      	b.n	800633c <_printf_float+0x94>
 8006398:	6863      	ldr	r3, [r4, #4]
 800639a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800639e:	9206      	str	r2, [sp, #24]
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	d13f      	bne.n	8006424 <_printf_float+0x17c>
 80063a4:	2306      	movs	r3, #6
 80063a6:	6063      	str	r3, [r4, #4]
 80063a8:	9b05      	ldr	r3, [sp, #20]
 80063aa:	6861      	ldr	r1, [r4, #4]
 80063ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063b0:	2300      	movs	r3, #0
 80063b2:	9303      	str	r3, [sp, #12]
 80063b4:	ab0a      	add	r3, sp, #40	; 0x28
 80063b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063ba:	ab09      	add	r3, sp, #36	; 0x24
 80063bc:	ec49 8b10 	vmov	d0, r8, r9
 80063c0:	9300      	str	r3, [sp, #0]
 80063c2:	6022      	str	r2, [r4, #0]
 80063c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063c8:	4628      	mov	r0, r5
 80063ca:	f7ff fecd 	bl	8006168 <__cvt>
 80063ce:	9b06      	ldr	r3, [sp, #24]
 80063d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063d2:	2b47      	cmp	r3, #71	; 0x47
 80063d4:	4680      	mov	r8, r0
 80063d6:	d108      	bne.n	80063ea <_printf_float+0x142>
 80063d8:	1cc8      	adds	r0, r1, #3
 80063da:	db02      	blt.n	80063e2 <_printf_float+0x13a>
 80063dc:	6863      	ldr	r3, [r4, #4]
 80063de:	4299      	cmp	r1, r3
 80063e0:	dd41      	ble.n	8006466 <_printf_float+0x1be>
 80063e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80063e6:	fa5f fb8b 	uxtb.w	fp, fp
 80063ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063ee:	d820      	bhi.n	8006432 <_printf_float+0x18a>
 80063f0:	3901      	subs	r1, #1
 80063f2:	465a      	mov	r2, fp
 80063f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063f8:	9109      	str	r1, [sp, #36]	; 0x24
 80063fa:	f7ff ff17 	bl	800622c <__exponent>
 80063fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006400:	1813      	adds	r3, r2, r0
 8006402:	2a01      	cmp	r2, #1
 8006404:	4681      	mov	r9, r0
 8006406:	6123      	str	r3, [r4, #16]
 8006408:	dc02      	bgt.n	8006410 <_printf_float+0x168>
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	07d2      	lsls	r2, r2, #31
 800640e:	d501      	bpl.n	8006414 <_printf_float+0x16c>
 8006410:	3301      	adds	r3, #1
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006418:	2b00      	cmp	r3, #0
 800641a:	d09c      	beq.n	8006356 <_printf_float+0xae>
 800641c:	232d      	movs	r3, #45	; 0x2d
 800641e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006422:	e798      	b.n	8006356 <_printf_float+0xae>
 8006424:	9a06      	ldr	r2, [sp, #24]
 8006426:	2a47      	cmp	r2, #71	; 0x47
 8006428:	d1be      	bne.n	80063a8 <_printf_float+0x100>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1bc      	bne.n	80063a8 <_printf_float+0x100>
 800642e:	2301      	movs	r3, #1
 8006430:	e7b9      	b.n	80063a6 <_printf_float+0xfe>
 8006432:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006436:	d118      	bne.n	800646a <_printf_float+0x1c2>
 8006438:	2900      	cmp	r1, #0
 800643a:	6863      	ldr	r3, [r4, #4]
 800643c:	dd0b      	ble.n	8006456 <_printf_float+0x1ae>
 800643e:	6121      	str	r1, [r4, #16]
 8006440:	b913      	cbnz	r3, 8006448 <_printf_float+0x1a0>
 8006442:	6822      	ldr	r2, [r4, #0]
 8006444:	07d0      	lsls	r0, r2, #31
 8006446:	d502      	bpl.n	800644e <_printf_float+0x1a6>
 8006448:	3301      	adds	r3, #1
 800644a:	440b      	add	r3, r1
 800644c:	6123      	str	r3, [r4, #16]
 800644e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006450:	f04f 0900 	mov.w	r9, #0
 8006454:	e7de      	b.n	8006414 <_printf_float+0x16c>
 8006456:	b913      	cbnz	r3, 800645e <_printf_float+0x1b6>
 8006458:	6822      	ldr	r2, [r4, #0]
 800645a:	07d2      	lsls	r2, r2, #31
 800645c:	d501      	bpl.n	8006462 <_printf_float+0x1ba>
 800645e:	3302      	adds	r3, #2
 8006460:	e7f4      	b.n	800644c <_printf_float+0x1a4>
 8006462:	2301      	movs	r3, #1
 8006464:	e7f2      	b.n	800644c <_printf_float+0x1a4>
 8006466:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800646a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800646c:	4299      	cmp	r1, r3
 800646e:	db05      	blt.n	800647c <_printf_float+0x1d4>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	6121      	str	r1, [r4, #16]
 8006474:	07d8      	lsls	r0, r3, #31
 8006476:	d5ea      	bpl.n	800644e <_printf_float+0x1a6>
 8006478:	1c4b      	adds	r3, r1, #1
 800647a:	e7e7      	b.n	800644c <_printf_float+0x1a4>
 800647c:	2900      	cmp	r1, #0
 800647e:	bfd4      	ite	le
 8006480:	f1c1 0202 	rsble	r2, r1, #2
 8006484:	2201      	movgt	r2, #1
 8006486:	4413      	add	r3, r2
 8006488:	e7e0      	b.n	800644c <_printf_float+0x1a4>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	055a      	lsls	r2, r3, #21
 800648e:	d407      	bmi.n	80064a0 <_printf_float+0x1f8>
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	4642      	mov	r2, r8
 8006494:	4631      	mov	r1, r6
 8006496:	4628      	mov	r0, r5
 8006498:	47b8      	blx	r7
 800649a:	3001      	adds	r0, #1
 800649c:	d12c      	bne.n	80064f8 <_printf_float+0x250>
 800649e:	e764      	b.n	800636a <_printf_float+0xc2>
 80064a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064a4:	f240 80e0 	bls.w	8006668 <_printf_float+0x3c0>
 80064a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064ac:	2200      	movs	r2, #0
 80064ae:	2300      	movs	r3, #0
 80064b0:	f7fa fb22 	bl	8000af8 <__aeabi_dcmpeq>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	d034      	beq.n	8006522 <_printf_float+0x27a>
 80064b8:	4a37      	ldr	r2, [pc, #220]	; (8006598 <_printf_float+0x2f0>)
 80064ba:	2301      	movs	r3, #1
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	f43f af51 	beq.w	800636a <_printf_float+0xc2>
 80064c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064cc:	429a      	cmp	r2, r3
 80064ce:	db02      	blt.n	80064d6 <_printf_float+0x22e>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	07d8      	lsls	r0, r3, #31
 80064d4:	d510      	bpl.n	80064f8 <_printf_float+0x250>
 80064d6:	ee18 3a10 	vmov	r3, s16
 80064da:	4652      	mov	r2, sl
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f af41 	beq.w	800636a <_printf_float+0xc2>
 80064e8:	f04f 0800 	mov.w	r8, #0
 80064ec:	f104 091a 	add.w	r9, r4, #26
 80064f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f2:	3b01      	subs	r3, #1
 80064f4:	4543      	cmp	r3, r8
 80064f6:	dc09      	bgt.n	800650c <_printf_float+0x264>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	079b      	lsls	r3, r3, #30
 80064fc:	f100 8105 	bmi.w	800670a <_printf_float+0x462>
 8006500:	68e0      	ldr	r0, [r4, #12]
 8006502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006504:	4298      	cmp	r0, r3
 8006506:	bfb8      	it	lt
 8006508:	4618      	movlt	r0, r3
 800650a:	e730      	b.n	800636e <_printf_float+0xc6>
 800650c:	2301      	movs	r3, #1
 800650e:	464a      	mov	r2, r9
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f af27 	beq.w	800636a <_printf_float+0xc2>
 800651c:	f108 0801 	add.w	r8, r8, #1
 8006520:	e7e6      	b.n	80064f0 <_printf_float+0x248>
 8006522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006524:	2b00      	cmp	r3, #0
 8006526:	dc39      	bgt.n	800659c <_printf_float+0x2f4>
 8006528:	4a1b      	ldr	r2, [pc, #108]	; (8006598 <_printf_float+0x2f0>)
 800652a:	2301      	movs	r3, #1
 800652c:	4631      	mov	r1, r6
 800652e:	4628      	mov	r0, r5
 8006530:	47b8      	blx	r7
 8006532:	3001      	adds	r0, #1
 8006534:	f43f af19 	beq.w	800636a <_printf_float+0xc2>
 8006538:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800653c:	4313      	orrs	r3, r2
 800653e:	d102      	bne.n	8006546 <_printf_float+0x29e>
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	07d9      	lsls	r1, r3, #31
 8006544:	d5d8      	bpl.n	80064f8 <_printf_float+0x250>
 8006546:	ee18 3a10 	vmov	r3, s16
 800654a:	4652      	mov	r2, sl
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f af09 	beq.w	800636a <_printf_float+0xc2>
 8006558:	f04f 0900 	mov.w	r9, #0
 800655c:	f104 0a1a 	add.w	sl, r4, #26
 8006560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006562:	425b      	negs	r3, r3
 8006564:	454b      	cmp	r3, r9
 8006566:	dc01      	bgt.n	800656c <_printf_float+0x2c4>
 8006568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800656a:	e792      	b.n	8006492 <_printf_float+0x1ea>
 800656c:	2301      	movs	r3, #1
 800656e:	4652      	mov	r2, sl
 8006570:	4631      	mov	r1, r6
 8006572:	4628      	mov	r0, r5
 8006574:	47b8      	blx	r7
 8006576:	3001      	adds	r0, #1
 8006578:	f43f aef7 	beq.w	800636a <_printf_float+0xc2>
 800657c:	f109 0901 	add.w	r9, r9, #1
 8006580:	e7ee      	b.n	8006560 <_printf_float+0x2b8>
 8006582:	bf00      	nop
 8006584:	7fefffff 	.word	0x7fefffff
 8006588:	08008c6d 	.word	0x08008c6d
 800658c:	08008c71 	.word	0x08008c71
 8006590:	08008c79 	.word	0x08008c79
 8006594:	08008c75 	.word	0x08008c75
 8006598:	08008c7d 	.word	0x08008c7d
 800659c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800659e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065a0:	429a      	cmp	r2, r3
 80065a2:	bfa8      	it	ge
 80065a4:	461a      	movge	r2, r3
 80065a6:	2a00      	cmp	r2, #0
 80065a8:	4691      	mov	r9, r2
 80065aa:	dc37      	bgt.n	800661c <_printf_float+0x374>
 80065ac:	f04f 0b00 	mov.w	fp, #0
 80065b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b4:	f104 021a 	add.w	r2, r4, #26
 80065b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065ba:	9305      	str	r3, [sp, #20]
 80065bc:	eba3 0309 	sub.w	r3, r3, r9
 80065c0:	455b      	cmp	r3, fp
 80065c2:	dc33      	bgt.n	800662c <_printf_float+0x384>
 80065c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065c8:	429a      	cmp	r2, r3
 80065ca:	db3b      	blt.n	8006644 <_printf_float+0x39c>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	07da      	lsls	r2, r3, #31
 80065d0:	d438      	bmi.n	8006644 <_printf_float+0x39c>
 80065d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065d4:	9b05      	ldr	r3, [sp, #20]
 80065d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	eba2 0901 	sub.w	r9, r2, r1
 80065de:	4599      	cmp	r9, r3
 80065e0:	bfa8      	it	ge
 80065e2:	4699      	movge	r9, r3
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	dc35      	bgt.n	8006656 <_printf_float+0x3ae>
 80065ea:	f04f 0800 	mov.w	r8, #0
 80065ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065f2:	f104 0a1a 	add.w	sl, r4, #26
 80065f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	eba3 0309 	sub.w	r3, r3, r9
 8006600:	4543      	cmp	r3, r8
 8006602:	f77f af79 	ble.w	80064f8 <_printf_float+0x250>
 8006606:	2301      	movs	r3, #1
 8006608:	4652      	mov	r2, sl
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	f43f aeaa 	beq.w	800636a <_printf_float+0xc2>
 8006616:	f108 0801 	add.w	r8, r8, #1
 800661a:	e7ec      	b.n	80065f6 <_printf_float+0x34e>
 800661c:	4613      	mov	r3, r2
 800661e:	4631      	mov	r1, r6
 8006620:	4642      	mov	r2, r8
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	d1c0      	bne.n	80065ac <_printf_float+0x304>
 800662a:	e69e      	b.n	800636a <_printf_float+0xc2>
 800662c:	2301      	movs	r3, #1
 800662e:	4631      	mov	r1, r6
 8006630:	4628      	mov	r0, r5
 8006632:	9205      	str	r2, [sp, #20]
 8006634:	47b8      	blx	r7
 8006636:	3001      	adds	r0, #1
 8006638:	f43f ae97 	beq.w	800636a <_printf_float+0xc2>
 800663c:	9a05      	ldr	r2, [sp, #20]
 800663e:	f10b 0b01 	add.w	fp, fp, #1
 8006642:	e7b9      	b.n	80065b8 <_printf_float+0x310>
 8006644:	ee18 3a10 	vmov	r3, s16
 8006648:	4652      	mov	r2, sl
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	d1be      	bne.n	80065d2 <_printf_float+0x32a>
 8006654:	e689      	b.n	800636a <_printf_float+0xc2>
 8006656:	9a05      	ldr	r2, [sp, #20]
 8006658:	464b      	mov	r3, r9
 800665a:	4442      	add	r2, r8
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	d1c1      	bne.n	80065ea <_printf_float+0x342>
 8006666:	e680      	b.n	800636a <_printf_float+0xc2>
 8006668:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800666a:	2a01      	cmp	r2, #1
 800666c:	dc01      	bgt.n	8006672 <_printf_float+0x3ca>
 800666e:	07db      	lsls	r3, r3, #31
 8006670:	d538      	bpl.n	80066e4 <_printf_float+0x43c>
 8006672:	2301      	movs	r3, #1
 8006674:	4642      	mov	r2, r8
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	47b8      	blx	r7
 800667c:	3001      	adds	r0, #1
 800667e:	f43f ae74 	beq.w	800636a <_printf_float+0xc2>
 8006682:	ee18 3a10 	vmov	r3, s16
 8006686:	4652      	mov	r2, sl
 8006688:	4631      	mov	r1, r6
 800668a:	4628      	mov	r0, r5
 800668c:	47b8      	blx	r7
 800668e:	3001      	adds	r0, #1
 8006690:	f43f ae6b 	beq.w	800636a <_printf_float+0xc2>
 8006694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006698:	2200      	movs	r2, #0
 800669a:	2300      	movs	r3, #0
 800669c:	f7fa fa2c 	bl	8000af8 <__aeabi_dcmpeq>
 80066a0:	b9d8      	cbnz	r0, 80066da <_printf_float+0x432>
 80066a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a4:	f108 0201 	add.w	r2, r8, #1
 80066a8:	3b01      	subs	r3, #1
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	d10e      	bne.n	80066d2 <_printf_float+0x42a>
 80066b4:	e659      	b.n	800636a <_printf_float+0xc2>
 80066b6:	2301      	movs	r3, #1
 80066b8:	4652      	mov	r2, sl
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	f43f ae52 	beq.w	800636a <_printf_float+0xc2>
 80066c6:	f108 0801 	add.w	r8, r8, #1
 80066ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066cc:	3b01      	subs	r3, #1
 80066ce:	4543      	cmp	r3, r8
 80066d0:	dcf1      	bgt.n	80066b6 <_printf_float+0x40e>
 80066d2:	464b      	mov	r3, r9
 80066d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066d8:	e6dc      	b.n	8006494 <_printf_float+0x1ec>
 80066da:	f04f 0800 	mov.w	r8, #0
 80066de:	f104 0a1a 	add.w	sl, r4, #26
 80066e2:	e7f2      	b.n	80066ca <_printf_float+0x422>
 80066e4:	2301      	movs	r3, #1
 80066e6:	4642      	mov	r2, r8
 80066e8:	e7df      	b.n	80066aa <_printf_float+0x402>
 80066ea:	2301      	movs	r3, #1
 80066ec:	464a      	mov	r2, r9
 80066ee:	4631      	mov	r1, r6
 80066f0:	4628      	mov	r0, r5
 80066f2:	47b8      	blx	r7
 80066f4:	3001      	adds	r0, #1
 80066f6:	f43f ae38 	beq.w	800636a <_printf_float+0xc2>
 80066fa:	f108 0801 	add.w	r8, r8, #1
 80066fe:	68e3      	ldr	r3, [r4, #12]
 8006700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006702:	1a5b      	subs	r3, r3, r1
 8006704:	4543      	cmp	r3, r8
 8006706:	dcf0      	bgt.n	80066ea <_printf_float+0x442>
 8006708:	e6fa      	b.n	8006500 <_printf_float+0x258>
 800670a:	f04f 0800 	mov.w	r8, #0
 800670e:	f104 0919 	add.w	r9, r4, #25
 8006712:	e7f4      	b.n	80066fe <_printf_float+0x456>

08006714 <_printf_common>:
 8006714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006718:	4616      	mov	r6, r2
 800671a:	4699      	mov	r9, r3
 800671c:	688a      	ldr	r2, [r1, #8]
 800671e:	690b      	ldr	r3, [r1, #16]
 8006720:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006724:	4293      	cmp	r3, r2
 8006726:	bfb8      	it	lt
 8006728:	4613      	movlt	r3, r2
 800672a:	6033      	str	r3, [r6, #0]
 800672c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006730:	4607      	mov	r7, r0
 8006732:	460c      	mov	r4, r1
 8006734:	b10a      	cbz	r2, 800673a <_printf_common+0x26>
 8006736:	3301      	adds	r3, #1
 8006738:	6033      	str	r3, [r6, #0]
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	0699      	lsls	r1, r3, #26
 800673e:	bf42      	ittt	mi
 8006740:	6833      	ldrmi	r3, [r6, #0]
 8006742:	3302      	addmi	r3, #2
 8006744:	6033      	strmi	r3, [r6, #0]
 8006746:	6825      	ldr	r5, [r4, #0]
 8006748:	f015 0506 	ands.w	r5, r5, #6
 800674c:	d106      	bne.n	800675c <_printf_common+0x48>
 800674e:	f104 0a19 	add.w	sl, r4, #25
 8006752:	68e3      	ldr	r3, [r4, #12]
 8006754:	6832      	ldr	r2, [r6, #0]
 8006756:	1a9b      	subs	r3, r3, r2
 8006758:	42ab      	cmp	r3, r5
 800675a:	dc26      	bgt.n	80067aa <_printf_common+0x96>
 800675c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006760:	1e13      	subs	r3, r2, #0
 8006762:	6822      	ldr	r2, [r4, #0]
 8006764:	bf18      	it	ne
 8006766:	2301      	movne	r3, #1
 8006768:	0692      	lsls	r2, r2, #26
 800676a:	d42b      	bmi.n	80067c4 <_printf_common+0xb0>
 800676c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006770:	4649      	mov	r1, r9
 8006772:	4638      	mov	r0, r7
 8006774:	47c0      	blx	r8
 8006776:	3001      	adds	r0, #1
 8006778:	d01e      	beq.n	80067b8 <_printf_common+0xa4>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	68e5      	ldr	r5, [r4, #12]
 800677e:	6832      	ldr	r2, [r6, #0]
 8006780:	f003 0306 	and.w	r3, r3, #6
 8006784:	2b04      	cmp	r3, #4
 8006786:	bf08      	it	eq
 8006788:	1aad      	subeq	r5, r5, r2
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	6922      	ldr	r2, [r4, #16]
 800678e:	bf0c      	ite	eq
 8006790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006794:	2500      	movne	r5, #0
 8006796:	4293      	cmp	r3, r2
 8006798:	bfc4      	itt	gt
 800679a:	1a9b      	subgt	r3, r3, r2
 800679c:	18ed      	addgt	r5, r5, r3
 800679e:	2600      	movs	r6, #0
 80067a0:	341a      	adds	r4, #26
 80067a2:	42b5      	cmp	r5, r6
 80067a4:	d11a      	bne.n	80067dc <_printf_common+0xc8>
 80067a6:	2000      	movs	r0, #0
 80067a8:	e008      	b.n	80067bc <_printf_common+0xa8>
 80067aa:	2301      	movs	r3, #1
 80067ac:	4652      	mov	r2, sl
 80067ae:	4649      	mov	r1, r9
 80067b0:	4638      	mov	r0, r7
 80067b2:	47c0      	blx	r8
 80067b4:	3001      	adds	r0, #1
 80067b6:	d103      	bne.n	80067c0 <_printf_common+0xac>
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	3501      	adds	r5, #1
 80067c2:	e7c6      	b.n	8006752 <_printf_common+0x3e>
 80067c4:	18e1      	adds	r1, r4, r3
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	2030      	movs	r0, #48	; 0x30
 80067ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ce:	4422      	add	r2, r4
 80067d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067d8:	3302      	adds	r3, #2
 80067da:	e7c7      	b.n	800676c <_printf_common+0x58>
 80067dc:	2301      	movs	r3, #1
 80067de:	4622      	mov	r2, r4
 80067e0:	4649      	mov	r1, r9
 80067e2:	4638      	mov	r0, r7
 80067e4:	47c0      	blx	r8
 80067e6:	3001      	adds	r0, #1
 80067e8:	d0e6      	beq.n	80067b8 <_printf_common+0xa4>
 80067ea:	3601      	adds	r6, #1
 80067ec:	e7d9      	b.n	80067a2 <_printf_common+0x8e>
	...

080067f0 <_printf_i>:
 80067f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	460c      	mov	r4, r1
 80067f6:	4691      	mov	r9, r2
 80067f8:	7e27      	ldrb	r7, [r4, #24]
 80067fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067fc:	2f78      	cmp	r7, #120	; 0x78
 80067fe:	4680      	mov	r8, r0
 8006800:	469a      	mov	sl, r3
 8006802:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006806:	d807      	bhi.n	8006818 <_printf_i+0x28>
 8006808:	2f62      	cmp	r7, #98	; 0x62
 800680a:	d80a      	bhi.n	8006822 <_printf_i+0x32>
 800680c:	2f00      	cmp	r7, #0
 800680e:	f000 80d8 	beq.w	80069c2 <_printf_i+0x1d2>
 8006812:	2f58      	cmp	r7, #88	; 0x58
 8006814:	f000 80a3 	beq.w	800695e <_printf_i+0x16e>
 8006818:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800681c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006820:	e03a      	b.n	8006898 <_printf_i+0xa8>
 8006822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006826:	2b15      	cmp	r3, #21
 8006828:	d8f6      	bhi.n	8006818 <_printf_i+0x28>
 800682a:	a001      	add	r0, pc, #4	; (adr r0, 8006830 <_printf_i+0x40>)
 800682c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006830:	08006889 	.word	0x08006889
 8006834:	0800689d 	.word	0x0800689d
 8006838:	08006819 	.word	0x08006819
 800683c:	08006819 	.word	0x08006819
 8006840:	08006819 	.word	0x08006819
 8006844:	08006819 	.word	0x08006819
 8006848:	0800689d 	.word	0x0800689d
 800684c:	08006819 	.word	0x08006819
 8006850:	08006819 	.word	0x08006819
 8006854:	08006819 	.word	0x08006819
 8006858:	08006819 	.word	0x08006819
 800685c:	080069a9 	.word	0x080069a9
 8006860:	080068cd 	.word	0x080068cd
 8006864:	0800698b 	.word	0x0800698b
 8006868:	08006819 	.word	0x08006819
 800686c:	08006819 	.word	0x08006819
 8006870:	080069cb 	.word	0x080069cb
 8006874:	08006819 	.word	0x08006819
 8006878:	080068cd 	.word	0x080068cd
 800687c:	08006819 	.word	0x08006819
 8006880:	08006819 	.word	0x08006819
 8006884:	08006993 	.word	0x08006993
 8006888:	680b      	ldr	r3, [r1, #0]
 800688a:	1d1a      	adds	r2, r3, #4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	600a      	str	r2, [r1, #0]
 8006890:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006898:	2301      	movs	r3, #1
 800689a:	e0a3      	b.n	80069e4 <_printf_i+0x1f4>
 800689c:	6825      	ldr	r5, [r4, #0]
 800689e:	6808      	ldr	r0, [r1, #0]
 80068a0:	062e      	lsls	r6, r5, #24
 80068a2:	f100 0304 	add.w	r3, r0, #4
 80068a6:	d50a      	bpl.n	80068be <_printf_i+0xce>
 80068a8:	6805      	ldr	r5, [r0, #0]
 80068aa:	600b      	str	r3, [r1, #0]
 80068ac:	2d00      	cmp	r5, #0
 80068ae:	da03      	bge.n	80068b8 <_printf_i+0xc8>
 80068b0:	232d      	movs	r3, #45	; 0x2d
 80068b2:	426d      	negs	r5, r5
 80068b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b8:	485e      	ldr	r0, [pc, #376]	; (8006a34 <_printf_i+0x244>)
 80068ba:	230a      	movs	r3, #10
 80068bc:	e019      	b.n	80068f2 <_printf_i+0x102>
 80068be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068c2:	6805      	ldr	r5, [r0, #0]
 80068c4:	600b      	str	r3, [r1, #0]
 80068c6:	bf18      	it	ne
 80068c8:	b22d      	sxthne	r5, r5
 80068ca:	e7ef      	b.n	80068ac <_printf_i+0xbc>
 80068cc:	680b      	ldr	r3, [r1, #0]
 80068ce:	6825      	ldr	r5, [r4, #0]
 80068d0:	1d18      	adds	r0, r3, #4
 80068d2:	6008      	str	r0, [r1, #0]
 80068d4:	0628      	lsls	r0, r5, #24
 80068d6:	d501      	bpl.n	80068dc <_printf_i+0xec>
 80068d8:	681d      	ldr	r5, [r3, #0]
 80068da:	e002      	b.n	80068e2 <_printf_i+0xf2>
 80068dc:	0669      	lsls	r1, r5, #25
 80068de:	d5fb      	bpl.n	80068d8 <_printf_i+0xe8>
 80068e0:	881d      	ldrh	r5, [r3, #0]
 80068e2:	4854      	ldr	r0, [pc, #336]	; (8006a34 <_printf_i+0x244>)
 80068e4:	2f6f      	cmp	r7, #111	; 0x6f
 80068e6:	bf0c      	ite	eq
 80068e8:	2308      	moveq	r3, #8
 80068ea:	230a      	movne	r3, #10
 80068ec:	2100      	movs	r1, #0
 80068ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068f2:	6866      	ldr	r6, [r4, #4]
 80068f4:	60a6      	str	r6, [r4, #8]
 80068f6:	2e00      	cmp	r6, #0
 80068f8:	bfa2      	ittt	ge
 80068fa:	6821      	ldrge	r1, [r4, #0]
 80068fc:	f021 0104 	bicge.w	r1, r1, #4
 8006900:	6021      	strge	r1, [r4, #0]
 8006902:	b90d      	cbnz	r5, 8006908 <_printf_i+0x118>
 8006904:	2e00      	cmp	r6, #0
 8006906:	d04d      	beq.n	80069a4 <_printf_i+0x1b4>
 8006908:	4616      	mov	r6, r2
 800690a:	fbb5 f1f3 	udiv	r1, r5, r3
 800690e:	fb03 5711 	mls	r7, r3, r1, r5
 8006912:	5dc7      	ldrb	r7, [r0, r7]
 8006914:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006918:	462f      	mov	r7, r5
 800691a:	42bb      	cmp	r3, r7
 800691c:	460d      	mov	r5, r1
 800691e:	d9f4      	bls.n	800690a <_printf_i+0x11a>
 8006920:	2b08      	cmp	r3, #8
 8006922:	d10b      	bne.n	800693c <_printf_i+0x14c>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	07df      	lsls	r7, r3, #31
 8006928:	d508      	bpl.n	800693c <_printf_i+0x14c>
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	6861      	ldr	r1, [r4, #4]
 800692e:	4299      	cmp	r1, r3
 8006930:	bfde      	ittt	le
 8006932:	2330      	movle	r3, #48	; 0x30
 8006934:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006938:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800693c:	1b92      	subs	r2, r2, r6
 800693e:	6122      	str	r2, [r4, #16]
 8006940:	f8cd a000 	str.w	sl, [sp]
 8006944:	464b      	mov	r3, r9
 8006946:	aa03      	add	r2, sp, #12
 8006948:	4621      	mov	r1, r4
 800694a:	4640      	mov	r0, r8
 800694c:	f7ff fee2 	bl	8006714 <_printf_common>
 8006950:	3001      	adds	r0, #1
 8006952:	d14c      	bne.n	80069ee <_printf_i+0x1fe>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006958:	b004      	add	sp, #16
 800695a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695e:	4835      	ldr	r0, [pc, #212]	; (8006a34 <_printf_i+0x244>)
 8006960:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	680e      	ldr	r6, [r1, #0]
 8006968:	061f      	lsls	r7, r3, #24
 800696a:	f856 5b04 	ldr.w	r5, [r6], #4
 800696e:	600e      	str	r6, [r1, #0]
 8006970:	d514      	bpl.n	800699c <_printf_i+0x1ac>
 8006972:	07d9      	lsls	r1, r3, #31
 8006974:	bf44      	itt	mi
 8006976:	f043 0320 	orrmi.w	r3, r3, #32
 800697a:	6023      	strmi	r3, [r4, #0]
 800697c:	b91d      	cbnz	r5, 8006986 <_printf_i+0x196>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	f023 0320 	bic.w	r3, r3, #32
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	2310      	movs	r3, #16
 8006988:	e7b0      	b.n	80068ec <_printf_i+0xfc>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	f043 0320 	orr.w	r3, r3, #32
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	2378      	movs	r3, #120	; 0x78
 8006994:	4828      	ldr	r0, [pc, #160]	; (8006a38 <_printf_i+0x248>)
 8006996:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800699a:	e7e3      	b.n	8006964 <_printf_i+0x174>
 800699c:	065e      	lsls	r6, r3, #25
 800699e:	bf48      	it	mi
 80069a0:	b2ad      	uxthmi	r5, r5
 80069a2:	e7e6      	b.n	8006972 <_printf_i+0x182>
 80069a4:	4616      	mov	r6, r2
 80069a6:	e7bb      	b.n	8006920 <_printf_i+0x130>
 80069a8:	680b      	ldr	r3, [r1, #0]
 80069aa:	6826      	ldr	r6, [r4, #0]
 80069ac:	6960      	ldr	r0, [r4, #20]
 80069ae:	1d1d      	adds	r5, r3, #4
 80069b0:	600d      	str	r5, [r1, #0]
 80069b2:	0635      	lsls	r5, r6, #24
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	d501      	bpl.n	80069bc <_printf_i+0x1cc>
 80069b8:	6018      	str	r0, [r3, #0]
 80069ba:	e002      	b.n	80069c2 <_printf_i+0x1d2>
 80069bc:	0671      	lsls	r1, r6, #25
 80069be:	d5fb      	bpl.n	80069b8 <_printf_i+0x1c8>
 80069c0:	8018      	strh	r0, [r3, #0]
 80069c2:	2300      	movs	r3, #0
 80069c4:	6123      	str	r3, [r4, #16]
 80069c6:	4616      	mov	r6, r2
 80069c8:	e7ba      	b.n	8006940 <_printf_i+0x150>
 80069ca:	680b      	ldr	r3, [r1, #0]
 80069cc:	1d1a      	adds	r2, r3, #4
 80069ce:	600a      	str	r2, [r1, #0]
 80069d0:	681e      	ldr	r6, [r3, #0]
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	2100      	movs	r1, #0
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7f9 fc1a 	bl	8000210 <memchr>
 80069dc:	b108      	cbz	r0, 80069e2 <_printf_i+0x1f2>
 80069de:	1b80      	subs	r0, r0, r6
 80069e0:	6060      	str	r0, [r4, #4]
 80069e2:	6863      	ldr	r3, [r4, #4]
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	2300      	movs	r3, #0
 80069e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ec:	e7a8      	b.n	8006940 <_printf_i+0x150>
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	4632      	mov	r2, r6
 80069f2:	4649      	mov	r1, r9
 80069f4:	4640      	mov	r0, r8
 80069f6:	47d0      	blx	sl
 80069f8:	3001      	adds	r0, #1
 80069fa:	d0ab      	beq.n	8006954 <_printf_i+0x164>
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	079b      	lsls	r3, r3, #30
 8006a00:	d413      	bmi.n	8006a2a <_printf_i+0x23a>
 8006a02:	68e0      	ldr	r0, [r4, #12]
 8006a04:	9b03      	ldr	r3, [sp, #12]
 8006a06:	4298      	cmp	r0, r3
 8006a08:	bfb8      	it	lt
 8006a0a:	4618      	movlt	r0, r3
 8006a0c:	e7a4      	b.n	8006958 <_printf_i+0x168>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4632      	mov	r2, r6
 8006a12:	4649      	mov	r1, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	47d0      	blx	sl
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d09b      	beq.n	8006954 <_printf_i+0x164>
 8006a1c:	3501      	adds	r5, #1
 8006a1e:	68e3      	ldr	r3, [r4, #12]
 8006a20:	9903      	ldr	r1, [sp, #12]
 8006a22:	1a5b      	subs	r3, r3, r1
 8006a24:	42ab      	cmp	r3, r5
 8006a26:	dcf2      	bgt.n	8006a0e <_printf_i+0x21e>
 8006a28:	e7eb      	b.n	8006a02 <_printf_i+0x212>
 8006a2a:	2500      	movs	r5, #0
 8006a2c:	f104 0619 	add.w	r6, r4, #25
 8006a30:	e7f5      	b.n	8006a1e <_printf_i+0x22e>
 8006a32:	bf00      	nop
 8006a34:	08008c7f 	.word	0x08008c7f
 8006a38:	08008c90 	.word	0x08008c90

08006a3c <iprintf>:
 8006a3c:	b40f      	push	{r0, r1, r2, r3}
 8006a3e:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <iprintf+0x2c>)
 8006a40:	b513      	push	{r0, r1, r4, lr}
 8006a42:	681c      	ldr	r4, [r3, #0]
 8006a44:	b124      	cbz	r4, 8006a50 <iprintf+0x14>
 8006a46:	69a3      	ldr	r3, [r4, #24]
 8006a48:	b913      	cbnz	r3, 8006a50 <iprintf+0x14>
 8006a4a:	4620      	mov	r0, r4
 8006a4c:	f001 f8de 	bl	8007c0c <__sinit>
 8006a50:	ab05      	add	r3, sp, #20
 8006a52:	9a04      	ldr	r2, [sp, #16]
 8006a54:	68a1      	ldr	r1, [r4, #8]
 8006a56:	9301      	str	r3, [sp, #4]
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f7ff fa55 	bl	8005f08 <_vfiprintf_r>
 8006a5e:	b002      	add	sp, #8
 8006a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a64:	b004      	add	sp, #16
 8006a66:	4770      	bx	lr
 8006a68:	2000000c 	.word	0x2000000c

08006a6c <_puts_r>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	460e      	mov	r6, r1
 8006a70:	4605      	mov	r5, r0
 8006a72:	b118      	cbz	r0, 8006a7c <_puts_r+0x10>
 8006a74:	6983      	ldr	r3, [r0, #24]
 8006a76:	b90b      	cbnz	r3, 8006a7c <_puts_r+0x10>
 8006a78:	f001 f8c8 	bl	8007c0c <__sinit>
 8006a7c:	69ab      	ldr	r3, [r5, #24]
 8006a7e:	68ac      	ldr	r4, [r5, #8]
 8006a80:	b913      	cbnz	r3, 8006a88 <_puts_r+0x1c>
 8006a82:	4628      	mov	r0, r5
 8006a84:	f001 f8c2 	bl	8007c0c <__sinit>
 8006a88:	4b2c      	ldr	r3, [pc, #176]	; (8006b3c <_puts_r+0xd0>)
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	d120      	bne.n	8006ad0 <_puts_r+0x64>
 8006a8e:	686c      	ldr	r4, [r5, #4]
 8006a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a92:	07db      	lsls	r3, r3, #31
 8006a94:	d405      	bmi.n	8006aa2 <_puts_r+0x36>
 8006a96:	89a3      	ldrh	r3, [r4, #12]
 8006a98:	0598      	lsls	r0, r3, #22
 8006a9a:	d402      	bmi.n	8006aa2 <_puts_r+0x36>
 8006a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a9e:	f001 f958 	bl	8007d52 <__retarget_lock_acquire_recursive>
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	0719      	lsls	r1, r3, #28
 8006aa6:	d51d      	bpl.n	8006ae4 <_puts_r+0x78>
 8006aa8:	6923      	ldr	r3, [r4, #16]
 8006aaa:	b1db      	cbz	r3, 8006ae4 <_puts_r+0x78>
 8006aac:	3e01      	subs	r6, #1
 8006aae:	68a3      	ldr	r3, [r4, #8]
 8006ab0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	60a3      	str	r3, [r4, #8]
 8006ab8:	bb39      	cbnz	r1, 8006b0a <_puts_r+0x9e>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da38      	bge.n	8006b30 <_puts_r+0xc4>
 8006abe:	4622      	mov	r2, r4
 8006ac0:	210a      	movs	r1, #10
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f000 f848 	bl	8006b58 <__swbuf_r>
 8006ac8:	3001      	adds	r0, #1
 8006aca:	d011      	beq.n	8006af0 <_puts_r+0x84>
 8006acc:	250a      	movs	r5, #10
 8006ace:	e011      	b.n	8006af4 <_puts_r+0x88>
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <_puts_r+0xd4>)
 8006ad2:	429c      	cmp	r4, r3
 8006ad4:	d101      	bne.n	8006ada <_puts_r+0x6e>
 8006ad6:	68ac      	ldr	r4, [r5, #8]
 8006ad8:	e7da      	b.n	8006a90 <_puts_r+0x24>
 8006ada:	4b1a      	ldr	r3, [pc, #104]	; (8006b44 <_puts_r+0xd8>)
 8006adc:	429c      	cmp	r4, r3
 8006ade:	bf08      	it	eq
 8006ae0:	68ec      	ldreq	r4, [r5, #12]
 8006ae2:	e7d5      	b.n	8006a90 <_puts_r+0x24>
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f000 f888 	bl	8006bfc <__swsetup_r>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d0dd      	beq.n	8006aac <_puts_r+0x40>
 8006af0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006af4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af6:	07da      	lsls	r2, r3, #31
 8006af8:	d405      	bmi.n	8006b06 <_puts_r+0x9a>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	059b      	lsls	r3, r3, #22
 8006afe:	d402      	bmi.n	8006b06 <_puts_r+0x9a>
 8006b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b02:	f001 f927 	bl	8007d54 <__retarget_lock_release_recursive>
 8006b06:	4628      	mov	r0, r5
 8006b08:	bd70      	pop	{r4, r5, r6, pc}
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	da04      	bge.n	8006b18 <_puts_r+0xac>
 8006b0e:	69a2      	ldr	r2, [r4, #24]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	dc06      	bgt.n	8006b22 <_puts_r+0xb6>
 8006b14:	290a      	cmp	r1, #10
 8006b16:	d004      	beq.n	8006b22 <_puts_r+0xb6>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	6022      	str	r2, [r4, #0]
 8006b1e:	7019      	strb	r1, [r3, #0]
 8006b20:	e7c5      	b.n	8006aae <_puts_r+0x42>
 8006b22:	4622      	mov	r2, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	f000 f817 	bl	8006b58 <__swbuf_r>
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d1bf      	bne.n	8006aae <_puts_r+0x42>
 8006b2e:	e7df      	b.n	8006af0 <_puts_r+0x84>
 8006b30:	6823      	ldr	r3, [r4, #0]
 8006b32:	250a      	movs	r5, #10
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	6022      	str	r2, [r4, #0]
 8006b38:	701d      	strb	r5, [r3, #0]
 8006b3a:	e7db      	b.n	8006af4 <_puts_r+0x88>
 8006b3c:	08008d58 	.word	0x08008d58
 8006b40:	08008d78 	.word	0x08008d78
 8006b44:	08008d38 	.word	0x08008d38

08006b48 <puts>:
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <puts+0xc>)
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	f7ff bf8d 	b.w	8006a6c <_puts_r>
 8006b52:	bf00      	nop
 8006b54:	2000000c 	.word	0x2000000c

08006b58 <__swbuf_r>:
 8006b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5a:	460e      	mov	r6, r1
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	4605      	mov	r5, r0
 8006b60:	b118      	cbz	r0, 8006b6a <__swbuf_r+0x12>
 8006b62:	6983      	ldr	r3, [r0, #24]
 8006b64:	b90b      	cbnz	r3, 8006b6a <__swbuf_r+0x12>
 8006b66:	f001 f851 	bl	8007c0c <__sinit>
 8006b6a:	4b21      	ldr	r3, [pc, #132]	; (8006bf0 <__swbuf_r+0x98>)
 8006b6c:	429c      	cmp	r4, r3
 8006b6e:	d12b      	bne.n	8006bc8 <__swbuf_r+0x70>
 8006b70:	686c      	ldr	r4, [r5, #4]
 8006b72:	69a3      	ldr	r3, [r4, #24]
 8006b74:	60a3      	str	r3, [r4, #8]
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	071a      	lsls	r2, r3, #28
 8006b7a:	d52f      	bpl.n	8006bdc <__swbuf_r+0x84>
 8006b7c:	6923      	ldr	r3, [r4, #16]
 8006b7e:	b36b      	cbz	r3, 8006bdc <__swbuf_r+0x84>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	6820      	ldr	r0, [r4, #0]
 8006b84:	1ac0      	subs	r0, r0, r3
 8006b86:	6963      	ldr	r3, [r4, #20]
 8006b88:	b2f6      	uxtb	r6, r6
 8006b8a:	4283      	cmp	r3, r0
 8006b8c:	4637      	mov	r7, r6
 8006b8e:	dc04      	bgt.n	8006b9a <__swbuf_r+0x42>
 8006b90:	4621      	mov	r1, r4
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 ffa6 	bl	8007ae4 <_fflush_r>
 8006b98:	bb30      	cbnz	r0, 8006be8 <__swbuf_r+0x90>
 8006b9a:	68a3      	ldr	r3, [r4, #8]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	60a3      	str	r3, [r4, #8]
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	701e      	strb	r6, [r3, #0]
 8006ba8:	6963      	ldr	r3, [r4, #20]
 8006baa:	3001      	adds	r0, #1
 8006bac:	4283      	cmp	r3, r0
 8006bae:	d004      	beq.n	8006bba <__swbuf_r+0x62>
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	07db      	lsls	r3, r3, #31
 8006bb4:	d506      	bpl.n	8006bc4 <__swbuf_r+0x6c>
 8006bb6:	2e0a      	cmp	r6, #10
 8006bb8:	d104      	bne.n	8006bc4 <__swbuf_r+0x6c>
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	f000 ff91 	bl	8007ae4 <_fflush_r>
 8006bc2:	b988      	cbnz	r0, 8006be8 <__swbuf_r+0x90>
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <__swbuf_r+0x9c>)
 8006bca:	429c      	cmp	r4, r3
 8006bcc:	d101      	bne.n	8006bd2 <__swbuf_r+0x7a>
 8006bce:	68ac      	ldr	r4, [r5, #8]
 8006bd0:	e7cf      	b.n	8006b72 <__swbuf_r+0x1a>
 8006bd2:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <__swbuf_r+0xa0>)
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	bf08      	it	eq
 8006bd8:	68ec      	ldreq	r4, [r5, #12]
 8006bda:	e7ca      	b.n	8006b72 <__swbuf_r+0x1a>
 8006bdc:	4621      	mov	r1, r4
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 f80c 	bl	8006bfc <__swsetup_r>
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d0cb      	beq.n	8006b80 <__swbuf_r+0x28>
 8006be8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006bec:	e7ea      	b.n	8006bc4 <__swbuf_r+0x6c>
 8006bee:	bf00      	nop
 8006bf0:	08008d58 	.word	0x08008d58
 8006bf4:	08008d78 	.word	0x08008d78
 8006bf8:	08008d38 	.word	0x08008d38

08006bfc <__swsetup_r>:
 8006bfc:	4b32      	ldr	r3, [pc, #200]	; (8006cc8 <__swsetup_r+0xcc>)
 8006bfe:	b570      	push	{r4, r5, r6, lr}
 8006c00:	681d      	ldr	r5, [r3, #0]
 8006c02:	4606      	mov	r6, r0
 8006c04:	460c      	mov	r4, r1
 8006c06:	b125      	cbz	r5, 8006c12 <__swsetup_r+0x16>
 8006c08:	69ab      	ldr	r3, [r5, #24]
 8006c0a:	b913      	cbnz	r3, 8006c12 <__swsetup_r+0x16>
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f000 fffd 	bl	8007c0c <__sinit>
 8006c12:	4b2e      	ldr	r3, [pc, #184]	; (8006ccc <__swsetup_r+0xd0>)
 8006c14:	429c      	cmp	r4, r3
 8006c16:	d10f      	bne.n	8006c38 <__swsetup_r+0x3c>
 8006c18:	686c      	ldr	r4, [r5, #4]
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c20:	0719      	lsls	r1, r3, #28
 8006c22:	d42c      	bmi.n	8006c7e <__swsetup_r+0x82>
 8006c24:	06dd      	lsls	r5, r3, #27
 8006c26:	d411      	bmi.n	8006c4c <__swsetup_r+0x50>
 8006c28:	2309      	movs	r3, #9
 8006c2a:	6033      	str	r3, [r6, #0]
 8006c2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c30:	81a3      	strh	r3, [r4, #12]
 8006c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c36:	e03e      	b.n	8006cb6 <__swsetup_r+0xba>
 8006c38:	4b25      	ldr	r3, [pc, #148]	; (8006cd0 <__swsetup_r+0xd4>)
 8006c3a:	429c      	cmp	r4, r3
 8006c3c:	d101      	bne.n	8006c42 <__swsetup_r+0x46>
 8006c3e:	68ac      	ldr	r4, [r5, #8]
 8006c40:	e7eb      	b.n	8006c1a <__swsetup_r+0x1e>
 8006c42:	4b24      	ldr	r3, [pc, #144]	; (8006cd4 <__swsetup_r+0xd8>)
 8006c44:	429c      	cmp	r4, r3
 8006c46:	bf08      	it	eq
 8006c48:	68ec      	ldreq	r4, [r5, #12]
 8006c4a:	e7e6      	b.n	8006c1a <__swsetup_r+0x1e>
 8006c4c:	0758      	lsls	r0, r3, #29
 8006c4e:	d512      	bpl.n	8006c76 <__swsetup_r+0x7a>
 8006c50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c52:	b141      	cbz	r1, 8006c66 <__swsetup_r+0x6a>
 8006c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c58:	4299      	cmp	r1, r3
 8006c5a:	d002      	beq.n	8006c62 <__swsetup_r+0x66>
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f001 fc83 	bl	8008568 <_free_r>
 8006c62:	2300      	movs	r3, #0
 8006c64:	6363      	str	r3, [r4, #52]	; 0x34
 8006c66:	89a3      	ldrh	r3, [r4, #12]
 8006c68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c6c:	81a3      	strh	r3, [r4, #12]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6063      	str	r3, [r4, #4]
 8006c72:	6923      	ldr	r3, [r4, #16]
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	f043 0308 	orr.w	r3, r3, #8
 8006c7c:	81a3      	strh	r3, [r4, #12]
 8006c7e:	6923      	ldr	r3, [r4, #16]
 8006c80:	b94b      	cbnz	r3, 8006c96 <__swsetup_r+0x9a>
 8006c82:	89a3      	ldrh	r3, [r4, #12]
 8006c84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c8c:	d003      	beq.n	8006c96 <__swsetup_r+0x9a>
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4630      	mov	r0, r6
 8006c92:	f001 f885 	bl	8007da0 <__smakebuf_r>
 8006c96:	89a0      	ldrh	r0, [r4, #12]
 8006c98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c9c:	f010 0301 	ands.w	r3, r0, #1
 8006ca0:	d00a      	beq.n	8006cb8 <__swsetup_r+0xbc>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60a3      	str	r3, [r4, #8]
 8006ca6:	6963      	ldr	r3, [r4, #20]
 8006ca8:	425b      	negs	r3, r3
 8006caa:	61a3      	str	r3, [r4, #24]
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	b943      	cbnz	r3, 8006cc2 <__swsetup_r+0xc6>
 8006cb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cb4:	d1ba      	bne.n	8006c2c <__swsetup_r+0x30>
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
 8006cb8:	0781      	lsls	r1, r0, #30
 8006cba:	bf58      	it	pl
 8006cbc:	6963      	ldrpl	r3, [r4, #20]
 8006cbe:	60a3      	str	r3, [r4, #8]
 8006cc0:	e7f4      	b.n	8006cac <__swsetup_r+0xb0>
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e7f7      	b.n	8006cb6 <__swsetup_r+0xba>
 8006cc6:	bf00      	nop
 8006cc8:	2000000c 	.word	0x2000000c
 8006ccc:	08008d58 	.word	0x08008d58
 8006cd0:	08008d78 	.word	0x08008d78
 8006cd4:	08008d38 	.word	0x08008d38

08006cd8 <abort>:
 8006cd8:	b508      	push	{r3, lr}
 8006cda:	2006      	movs	r0, #6
 8006cdc:	f001 fd26 	bl	800872c <raise>
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	f7fb fc59 	bl	8002598 <_exit>

08006ce6 <quorem>:
 8006ce6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	6903      	ldr	r3, [r0, #16]
 8006cec:	690c      	ldr	r4, [r1, #16]
 8006cee:	42a3      	cmp	r3, r4
 8006cf0:	4607      	mov	r7, r0
 8006cf2:	f2c0 8081 	blt.w	8006df8 <quorem+0x112>
 8006cf6:	3c01      	subs	r4, #1
 8006cf8:	f101 0814 	add.w	r8, r1, #20
 8006cfc:	f100 0514 	add.w	r5, r0, #20
 8006d00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d04:	9301      	str	r3, [sp, #4]
 8006d06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	429a      	cmp	r2, r3
 8006d12:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006d16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d1a:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d1e:	d331      	bcc.n	8006d84 <quorem+0x9e>
 8006d20:	f04f 0e00 	mov.w	lr, #0
 8006d24:	4640      	mov	r0, r8
 8006d26:	46ac      	mov	ip, r5
 8006d28:	46f2      	mov	sl, lr
 8006d2a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006d2e:	b293      	uxth	r3, r2
 8006d30:	fb06 e303 	mla	r3, r6, r3, lr
 8006d34:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	ebaa 0303 	sub.w	r3, sl, r3
 8006d3e:	0c12      	lsrs	r2, r2, #16
 8006d40:	f8dc a000 	ldr.w	sl, [ip]
 8006d44:	fb06 e202 	mla	r2, r6, r2, lr
 8006d48:	fa13 f38a 	uxtah	r3, r3, sl
 8006d4c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d50:	fa1f fa82 	uxth.w	sl, r2
 8006d54:	f8dc 2000 	ldr.w	r2, [ip]
 8006d58:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006d5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d66:	4581      	cmp	r9, r0
 8006d68:	f84c 3b04 	str.w	r3, [ip], #4
 8006d6c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d70:	d2db      	bcs.n	8006d2a <quorem+0x44>
 8006d72:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d76:	b92b      	cbnz	r3, 8006d84 <quorem+0x9e>
 8006d78:	9b01      	ldr	r3, [sp, #4]
 8006d7a:	3b04      	subs	r3, #4
 8006d7c:	429d      	cmp	r5, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	d32e      	bcc.n	8006de0 <quorem+0xfa>
 8006d82:	613c      	str	r4, [r7, #16]
 8006d84:	4638      	mov	r0, r7
 8006d86:	f001 fadf 	bl	8008348 <__mcmp>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	db24      	blt.n	8006dd8 <quorem+0xf2>
 8006d8e:	3601      	adds	r6, #1
 8006d90:	4628      	mov	r0, r5
 8006d92:	f04f 0c00 	mov.w	ip, #0
 8006d96:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d9a:	f8d0 e000 	ldr.w	lr, [r0]
 8006d9e:	b293      	uxth	r3, r2
 8006da0:	ebac 0303 	sub.w	r3, ip, r3
 8006da4:	0c12      	lsrs	r2, r2, #16
 8006da6:	fa13 f38e 	uxtah	r3, r3, lr
 8006daa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006dae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006db8:	45c1      	cmp	r9, r8
 8006dba:	f840 3b04 	str.w	r3, [r0], #4
 8006dbe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006dc2:	d2e8      	bcs.n	8006d96 <quorem+0xb0>
 8006dc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dcc:	b922      	cbnz	r2, 8006dd8 <quorem+0xf2>
 8006dce:	3b04      	subs	r3, #4
 8006dd0:	429d      	cmp	r5, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	d30a      	bcc.n	8006dec <quorem+0x106>
 8006dd6:	613c      	str	r4, [r7, #16]
 8006dd8:	4630      	mov	r0, r6
 8006dda:	b003      	add	sp, #12
 8006ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de0:	6812      	ldr	r2, [r2, #0]
 8006de2:	3b04      	subs	r3, #4
 8006de4:	2a00      	cmp	r2, #0
 8006de6:	d1cc      	bne.n	8006d82 <quorem+0x9c>
 8006de8:	3c01      	subs	r4, #1
 8006dea:	e7c7      	b.n	8006d7c <quorem+0x96>
 8006dec:	6812      	ldr	r2, [r2, #0]
 8006dee:	3b04      	subs	r3, #4
 8006df0:	2a00      	cmp	r2, #0
 8006df2:	d1f0      	bne.n	8006dd6 <quorem+0xf0>
 8006df4:	3c01      	subs	r4, #1
 8006df6:	e7eb      	b.n	8006dd0 <quorem+0xea>
 8006df8:	2000      	movs	r0, #0
 8006dfa:	e7ee      	b.n	8006dda <quorem+0xf4>
 8006dfc:	0000      	movs	r0, r0
	...

08006e00 <_dtoa_r>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	ed2d 8b02 	vpush	{d8}
 8006e08:	ec57 6b10 	vmov	r6, r7, d0
 8006e0c:	b095      	sub	sp, #84	; 0x54
 8006e0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006e10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006e14:	9105      	str	r1, [sp, #20]
 8006e16:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006e1a:	4604      	mov	r4, r0
 8006e1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e20:	b975      	cbnz	r5, 8006e40 <_dtoa_r+0x40>
 8006e22:	2010      	movs	r0, #16
 8006e24:	f000 fffc 	bl	8007e20 <malloc>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6260      	str	r0, [r4, #36]	; 0x24
 8006e2c:	b920      	cbnz	r0, 8006e38 <_dtoa_r+0x38>
 8006e2e:	4bb2      	ldr	r3, [pc, #712]	; (80070f8 <_dtoa_r+0x2f8>)
 8006e30:	21ea      	movs	r1, #234	; 0xea
 8006e32:	48b2      	ldr	r0, [pc, #712]	; (80070fc <_dtoa_r+0x2fc>)
 8006e34:	f7fe ffdc 	bl	8005df0 <__assert_func>
 8006e38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e3c:	6005      	str	r5, [r0, #0]
 8006e3e:	60c5      	str	r5, [r0, #12]
 8006e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	b151      	cbz	r1, 8006e5c <_dtoa_r+0x5c>
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	604a      	str	r2, [r1, #4]
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4093      	lsls	r3, r2
 8006e4e:	608b      	str	r3, [r1, #8]
 8006e50:	4620      	mov	r0, r4
 8006e52:	f001 f83b 	bl	8007ecc <_Bfree>
 8006e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	1e3b      	subs	r3, r7, #0
 8006e5e:	bfb9      	ittee	lt
 8006e60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e64:	9303      	strlt	r3, [sp, #12]
 8006e66:	2300      	movge	r3, #0
 8006e68:	f8c8 3000 	strge.w	r3, [r8]
 8006e6c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006e70:	4ba3      	ldr	r3, [pc, #652]	; (8007100 <_dtoa_r+0x300>)
 8006e72:	bfbc      	itt	lt
 8006e74:	2201      	movlt	r2, #1
 8006e76:	f8c8 2000 	strlt.w	r2, [r8]
 8006e7a:	ea33 0309 	bics.w	r3, r3, r9
 8006e7e:	d11b      	bne.n	8006eb8 <_dtoa_r+0xb8>
 8006e80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e82:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e8c:	4333      	orrs	r3, r6
 8006e8e:	f000 857a 	beq.w	8007986 <_dtoa_r+0xb86>
 8006e92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e94:	b963      	cbnz	r3, 8006eb0 <_dtoa_r+0xb0>
 8006e96:	4b9b      	ldr	r3, [pc, #620]	; (8007104 <_dtoa_r+0x304>)
 8006e98:	e024      	b.n	8006ee4 <_dtoa_r+0xe4>
 8006e9a:	4b9b      	ldr	r3, [pc, #620]	; (8007108 <_dtoa_r+0x308>)
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	9800      	ldr	r0, [sp, #0]
 8006ea6:	b015      	add	sp, #84	; 0x54
 8006ea8:	ecbd 8b02 	vpop	{d8}
 8006eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb0:	4b94      	ldr	r3, [pc, #592]	; (8007104 <_dtoa_r+0x304>)
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	3303      	adds	r3, #3
 8006eb6:	e7f3      	b.n	8006ea0 <_dtoa_r+0xa0>
 8006eb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	ec51 0b17 	vmov	r0, r1, d7
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006ec8:	f7f9 fe16 	bl	8000af8 <__aeabi_dcmpeq>
 8006ecc:	4680      	mov	r8, r0
 8006ece:	b158      	cbz	r0, 8006ee8 <_dtoa_r+0xe8>
 8006ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 8551 	beq.w	8007980 <_dtoa_r+0xb80>
 8006ede:	488b      	ldr	r0, [pc, #556]	; (800710c <_dtoa_r+0x30c>)
 8006ee0:	6018      	str	r0, [r3, #0]
 8006ee2:	1e43      	subs	r3, r0, #1
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	e7dd      	b.n	8006ea4 <_dtoa_r+0xa4>
 8006ee8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006eec:	aa12      	add	r2, sp, #72	; 0x48
 8006eee:	a913      	add	r1, sp, #76	; 0x4c
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f001 facd 	bl	8008490 <__d2b>
 8006ef6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006efa:	4683      	mov	fp, r0
 8006efc:	2d00      	cmp	r5, #0
 8006efe:	d07c      	beq.n	8006ffa <_dtoa_r+0x1fa>
 8006f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f02:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006f06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f0a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006f0e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006f12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006f1a:	4b7d      	ldr	r3, [pc, #500]	; (8007110 <_dtoa_r+0x310>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4630      	mov	r0, r6
 8006f20:	4639      	mov	r1, r7
 8006f22:	f7f9 f9c9 	bl	80002b8 <__aeabi_dsub>
 8006f26:	a36e      	add	r3, pc, #440	; (adr r3, 80070e0 <_dtoa_r+0x2e0>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f7f9 fb7c 	bl	8000628 <__aeabi_dmul>
 8006f30:	a36d      	add	r3, pc, #436	; (adr r3, 80070e8 <_dtoa_r+0x2e8>)
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f7f9 f9c1 	bl	80002bc <__adddf3>
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	460f      	mov	r7, r1
 8006f40:	f7f9 fb08 	bl	8000554 <__aeabi_i2d>
 8006f44:	a36a      	add	r3, pc, #424	; (adr r3, 80070f0 <_dtoa_r+0x2f0>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 fb6d 	bl	8000628 <__aeabi_dmul>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	4630      	mov	r0, r6
 8006f54:	4639      	mov	r1, r7
 8006f56:	f7f9 f9b1 	bl	80002bc <__adddf3>
 8006f5a:	4606      	mov	r6, r0
 8006f5c:	460f      	mov	r7, r1
 8006f5e:	f7f9 fe13 	bl	8000b88 <__aeabi_d2iz>
 8006f62:	2200      	movs	r2, #0
 8006f64:	4682      	mov	sl, r0
 8006f66:	2300      	movs	r3, #0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	4639      	mov	r1, r7
 8006f6c:	f7f9 fdce 	bl	8000b0c <__aeabi_dcmplt>
 8006f70:	b148      	cbz	r0, 8006f86 <_dtoa_r+0x186>
 8006f72:	4650      	mov	r0, sl
 8006f74:	f7f9 faee 	bl	8000554 <__aeabi_i2d>
 8006f78:	4632      	mov	r2, r6
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	f7f9 fdbc 	bl	8000af8 <__aeabi_dcmpeq>
 8006f80:	b908      	cbnz	r0, 8006f86 <_dtoa_r+0x186>
 8006f82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f86:	f1ba 0f16 	cmp.w	sl, #22
 8006f8a:	d854      	bhi.n	8007036 <_dtoa_r+0x236>
 8006f8c:	4b61      	ldr	r3, [pc, #388]	; (8007114 <_dtoa_r+0x314>)
 8006f8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f9a:	f7f9 fdb7 	bl	8000b0c <__aeabi_dcmplt>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d04b      	beq.n	800703a <_dtoa_r+0x23a>
 8006fa2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	930e      	str	r3, [sp, #56]	; 0x38
 8006faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006fac:	1b5d      	subs	r5, r3, r5
 8006fae:	1e6b      	subs	r3, r5, #1
 8006fb0:	9304      	str	r3, [sp, #16]
 8006fb2:	bf43      	ittte	mi
 8006fb4:	2300      	movmi	r3, #0
 8006fb6:	f1c5 0801 	rsbmi	r8, r5, #1
 8006fba:	9304      	strmi	r3, [sp, #16]
 8006fbc:	f04f 0800 	movpl.w	r8, #0
 8006fc0:	f1ba 0f00 	cmp.w	sl, #0
 8006fc4:	db3b      	blt.n	800703e <_dtoa_r+0x23e>
 8006fc6:	9b04      	ldr	r3, [sp, #16]
 8006fc8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006fcc:	4453      	add	r3, sl
 8006fce:	9304      	str	r3, [sp, #16]
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9306      	str	r3, [sp, #24]
 8006fd4:	9b05      	ldr	r3, [sp, #20]
 8006fd6:	2b09      	cmp	r3, #9
 8006fd8:	d869      	bhi.n	80070ae <_dtoa_r+0x2ae>
 8006fda:	2b05      	cmp	r3, #5
 8006fdc:	bfc4      	itt	gt
 8006fde:	3b04      	subgt	r3, #4
 8006fe0:	9305      	strgt	r3, [sp, #20]
 8006fe2:	9b05      	ldr	r3, [sp, #20]
 8006fe4:	f1a3 0302 	sub.w	r3, r3, #2
 8006fe8:	bfcc      	ite	gt
 8006fea:	2500      	movgt	r5, #0
 8006fec:	2501      	movle	r5, #1
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d869      	bhi.n	80070c6 <_dtoa_r+0x2c6>
 8006ff2:	e8df f003 	tbb	[pc, r3]
 8006ff6:	4e2c      	.short	0x4e2c
 8006ff8:	5a4c      	.short	0x5a4c
 8006ffa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006ffe:	441d      	add	r5, r3
 8007000:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007004:	2b20      	cmp	r3, #32
 8007006:	bfc1      	itttt	gt
 8007008:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800700c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007010:	fa09 f303 	lslgt.w	r3, r9, r3
 8007014:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007018:	bfda      	itte	le
 800701a:	f1c3 0320 	rsble	r3, r3, #32
 800701e:	fa06 f003 	lslle.w	r0, r6, r3
 8007022:	4318      	orrgt	r0, r3
 8007024:	f7f9 fa86 	bl	8000534 <__aeabi_ui2d>
 8007028:	2301      	movs	r3, #1
 800702a:	4606      	mov	r6, r0
 800702c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007030:	3d01      	subs	r5, #1
 8007032:	9310      	str	r3, [sp, #64]	; 0x40
 8007034:	e771      	b.n	8006f1a <_dtoa_r+0x11a>
 8007036:	2301      	movs	r3, #1
 8007038:	e7b6      	b.n	8006fa8 <_dtoa_r+0x1a8>
 800703a:	900e      	str	r0, [sp, #56]	; 0x38
 800703c:	e7b5      	b.n	8006faa <_dtoa_r+0x1aa>
 800703e:	f1ca 0300 	rsb	r3, sl, #0
 8007042:	9306      	str	r3, [sp, #24]
 8007044:	2300      	movs	r3, #0
 8007046:	eba8 080a 	sub.w	r8, r8, sl
 800704a:	930d      	str	r3, [sp, #52]	; 0x34
 800704c:	e7c2      	b.n	8006fd4 <_dtoa_r+0x1d4>
 800704e:	2300      	movs	r3, #0
 8007050:	9308      	str	r3, [sp, #32]
 8007052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	dc39      	bgt.n	80070cc <_dtoa_r+0x2cc>
 8007058:	f04f 0901 	mov.w	r9, #1
 800705c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007060:	464b      	mov	r3, r9
 8007062:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007066:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007068:	2200      	movs	r2, #0
 800706a:	6042      	str	r2, [r0, #4]
 800706c:	2204      	movs	r2, #4
 800706e:	f102 0614 	add.w	r6, r2, #20
 8007072:	429e      	cmp	r6, r3
 8007074:	6841      	ldr	r1, [r0, #4]
 8007076:	d92f      	bls.n	80070d8 <_dtoa_r+0x2d8>
 8007078:	4620      	mov	r0, r4
 800707a:	f000 fee7 	bl	8007e4c <_Balloc>
 800707e:	9000      	str	r0, [sp, #0]
 8007080:	2800      	cmp	r0, #0
 8007082:	d14b      	bne.n	800711c <_dtoa_r+0x31c>
 8007084:	4b24      	ldr	r3, [pc, #144]	; (8007118 <_dtoa_r+0x318>)
 8007086:	4602      	mov	r2, r0
 8007088:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800708c:	e6d1      	b.n	8006e32 <_dtoa_r+0x32>
 800708e:	2301      	movs	r3, #1
 8007090:	e7de      	b.n	8007050 <_dtoa_r+0x250>
 8007092:	2300      	movs	r3, #0
 8007094:	9308      	str	r3, [sp, #32]
 8007096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007098:	eb0a 0903 	add.w	r9, sl, r3
 800709c:	f109 0301 	add.w	r3, r9, #1
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	9301      	str	r3, [sp, #4]
 80070a4:	bfb8      	it	lt
 80070a6:	2301      	movlt	r3, #1
 80070a8:	e7dd      	b.n	8007066 <_dtoa_r+0x266>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e7f2      	b.n	8007094 <_dtoa_r+0x294>
 80070ae:	2501      	movs	r5, #1
 80070b0:	2300      	movs	r3, #0
 80070b2:	9305      	str	r3, [sp, #20]
 80070b4:	9508      	str	r5, [sp, #32]
 80070b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80070ba:	2200      	movs	r2, #0
 80070bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80070c0:	2312      	movs	r3, #18
 80070c2:	9209      	str	r2, [sp, #36]	; 0x24
 80070c4:	e7cf      	b.n	8007066 <_dtoa_r+0x266>
 80070c6:	2301      	movs	r3, #1
 80070c8:	9308      	str	r3, [sp, #32]
 80070ca:	e7f4      	b.n	80070b6 <_dtoa_r+0x2b6>
 80070cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80070d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80070d4:	464b      	mov	r3, r9
 80070d6:	e7c6      	b.n	8007066 <_dtoa_r+0x266>
 80070d8:	3101      	adds	r1, #1
 80070da:	6041      	str	r1, [r0, #4]
 80070dc:	0052      	lsls	r2, r2, #1
 80070de:	e7c6      	b.n	800706e <_dtoa_r+0x26e>
 80070e0:	636f4361 	.word	0x636f4361
 80070e4:	3fd287a7 	.word	0x3fd287a7
 80070e8:	8b60c8b3 	.word	0x8b60c8b3
 80070ec:	3fc68a28 	.word	0x3fc68a28
 80070f0:	509f79fb 	.word	0x509f79fb
 80070f4:	3fd34413 	.word	0x3fd34413
 80070f8:	08008cae 	.word	0x08008cae
 80070fc:	08008cc5 	.word	0x08008cc5
 8007100:	7ff00000 	.word	0x7ff00000
 8007104:	08008caa 	.word	0x08008caa
 8007108:	08008ca1 	.word	0x08008ca1
 800710c:	08008c7e 	.word	0x08008c7e
 8007110:	3ff80000 	.word	0x3ff80000
 8007114:	08008e20 	.word	0x08008e20
 8007118:	08008d24 	.word	0x08008d24
 800711c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800711e:	9a00      	ldr	r2, [sp, #0]
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	9b01      	ldr	r3, [sp, #4]
 8007124:	2b0e      	cmp	r3, #14
 8007126:	f200 80ad 	bhi.w	8007284 <_dtoa_r+0x484>
 800712a:	2d00      	cmp	r5, #0
 800712c:	f000 80aa 	beq.w	8007284 <_dtoa_r+0x484>
 8007130:	f1ba 0f00 	cmp.w	sl, #0
 8007134:	dd36      	ble.n	80071a4 <_dtoa_r+0x3a4>
 8007136:	4ac3      	ldr	r2, [pc, #780]	; (8007444 <_dtoa_r+0x644>)
 8007138:	f00a 030f 	and.w	r3, sl, #15
 800713c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007140:	ed93 7b00 	vldr	d7, [r3]
 8007144:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007148:	ea4f 172a 	mov.w	r7, sl, asr #4
 800714c:	eeb0 8a47 	vmov.f32	s16, s14
 8007150:	eef0 8a67 	vmov.f32	s17, s15
 8007154:	d016      	beq.n	8007184 <_dtoa_r+0x384>
 8007156:	4bbc      	ldr	r3, [pc, #752]	; (8007448 <_dtoa_r+0x648>)
 8007158:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800715c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007160:	f7f9 fb8c 	bl	800087c <__aeabi_ddiv>
 8007164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007168:	f007 070f 	and.w	r7, r7, #15
 800716c:	2503      	movs	r5, #3
 800716e:	4eb6      	ldr	r6, [pc, #728]	; (8007448 <_dtoa_r+0x648>)
 8007170:	b957      	cbnz	r7, 8007188 <_dtoa_r+0x388>
 8007172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007176:	ec53 2b18 	vmov	r2, r3, d8
 800717a:	f7f9 fb7f 	bl	800087c <__aeabi_ddiv>
 800717e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007182:	e029      	b.n	80071d8 <_dtoa_r+0x3d8>
 8007184:	2502      	movs	r5, #2
 8007186:	e7f2      	b.n	800716e <_dtoa_r+0x36e>
 8007188:	07f9      	lsls	r1, r7, #31
 800718a:	d508      	bpl.n	800719e <_dtoa_r+0x39e>
 800718c:	ec51 0b18 	vmov	r0, r1, d8
 8007190:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007194:	f7f9 fa48 	bl	8000628 <__aeabi_dmul>
 8007198:	ec41 0b18 	vmov	d8, r0, r1
 800719c:	3501      	adds	r5, #1
 800719e:	107f      	asrs	r7, r7, #1
 80071a0:	3608      	adds	r6, #8
 80071a2:	e7e5      	b.n	8007170 <_dtoa_r+0x370>
 80071a4:	f000 80a6 	beq.w	80072f4 <_dtoa_r+0x4f4>
 80071a8:	f1ca 0600 	rsb	r6, sl, #0
 80071ac:	4ba5      	ldr	r3, [pc, #660]	; (8007444 <_dtoa_r+0x644>)
 80071ae:	4fa6      	ldr	r7, [pc, #664]	; (8007448 <_dtoa_r+0x648>)
 80071b0:	f006 020f 	and.w	r2, r6, #15
 80071b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80071c0:	f7f9 fa32 	bl	8000628 <__aeabi_dmul>
 80071c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071c8:	1136      	asrs	r6, r6, #4
 80071ca:	2300      	movs	r3, #0
 80071cc:	2502      	movs	r5, #2
 80071ce:	2e00      	cmp	r6, #0
 80071d0:	f040 8085 	bne.w	80072de <_dtoa_r+0x4de>
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1d2      	bne.n	800717e <_dtoa_r+0x37e>
 80071d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 808c 	beq.w	80072f8 <_dtoa_r+0x4f8>
 80071e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80071e4:	4b99      	ldr	r3, [pc, #612]	; (800744c <_dtoa_r+0x64c>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	4630      	mov	r0, r6
 80071ea:	4639      	mov	r1, r7
 80071ec:	f7f9 fc8e 	bl	8000b0c <__aeabi_dcmplt>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	f000 8081 	beq.w	80072f8 <_dtoa_r+0x4f8>
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d07d      	beq.n	80072f8 <_dtoa_r+0x4f8>
 80071fc:	f1b9 0f00 	cmp.w	r9, #0
 8007200:	dd3c      	ble.n	800727c <_dtoa_r+0x47c>
 8007202:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007206:	9307      	str	r3, [sp, #28]
 8007208:	2200      	movs	r2, #0
 800720a:	4b91      	ldr	r3, [pc, #580]	; (8007450 <_dtoa_r+0x650>)
 800720c:	4630      	mov	r0, r6
 800720e:	4639      	mov	r1, r7
 8007210:	f7f9 fa0a 	bl	8000628 <__aeabi_dmul>
 8007214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007218:	3501      	adds	r5, #1
 800721a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800721e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007222:	4628      	mov	r0, r5
 8007224:	f7f9 f996 	bl	8000554 <__aeabi_i2d>
 8007228:	4632      	mov	r2, r6
 800722a:	463b      	mov	r3, r7
 800722c:	f7f9 f9fc 	bl	8000628 <__aeabi_dmul>
 8007230:	4b88      	ldr	r3, [pc, #544]	; (8007454 <_dtoa_r+0x654>)
 8007232:	2200      	movs	r2, #0
 8007234:	f7f9 f842 	bl	80002bc <__adddf3>
 8007238:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800723c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007244:	2b00      	cmp	r3, #0
 8007246:	d15c      	bne.n	8007302 <_dtoa_r+0x502>
 8007248:	4b83      	ldr	r3, [pc, #524]	; (8007458 <_dtoa_r+0x658>)
 800724a:	2200      	movs	r2, #0
 800724c:	4630      	mov	r0, r6
 800724e:	4639      	mov	r1, r7
 8007250:	f7f9 f832 	bl	80002b8 <__aeabi_dsub>
 8007254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007258:	4606      	mov	r6, r0
 800725a:	460f      	mov	r7, r1
 800725c:	f7f9 fc74 	bl	8000b48 <__aeabi_dcmpgt>
 8007260:	2800      	cmp	r0, #0
 8007262:	f040 8296 	bne.w	8007792 <_dtoa_r+0x992>
 8007266:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800726a:	4630      	mov	r0, r6
 800726c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007270:	4639      	mov	r1, r7
 8007272:	f7f9 fc4b 	bl	8000b0c <__aeabi_dcmplt>
 8007276:	2800      	cmp	r0, #0
 8007278:	f040 8288 	bne.w	800778c <_dtoa_r+0x98c>
 800727c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007280:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007284:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007286:	2b00      	cmp	r3, #0
 8007288:	f2c0 8158 	blt.w	800753c <_dtoa_r+0x73c>
 800728c:	f1ba 0f0e 	cmp.w	sl, #14
 8007290:	f300 8154 	bgt.w	800753c <_dtoa_r+0x73c>
 8007294:	4b6b      	ldr	r3, [pc, #428]	; (8007444 <_dtoa_r+0x644>)
 8007296:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800729a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f280 80e3 	bge.w	800746c <_dtoa_r+0x66c>
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f300 80df 	bgt.w	800746c <_dtoa_r+0x66c>
 80072ae:	f040 826d 	bne.w	800778c <_dtoa_r+0x98c>
 80072b2:	4b69      	ldr	r3, [pc, #420]	; (8007458 <_dtoa_r+0x658>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	4640      	mov	r0, r8
 80072b8:	4649      	mov	r1, r9
 80072ba:	f7f9 f9b5 	bl	8000628 <__aeabi_dmul>
 80072be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c2:	f7f9 fc37 	bl	8000b34 <__aeabi_dcmpge>
 80072c6:	9e01      	ldr	r6, [sp, #4]
 80072c8:	4637      	mov	r7, r6
 80072ca:	2800      	cmp	r0, #0
 80072cc:	f040 8243 	bne.w	8007756 <_dtoa_r+0x956>
 80072d0:	9d00      	ldr	r5, [sp, #0]
 80072d2:	2331      	movs	r3, #49	; 0x31
 80072d4:	f805 3b01 	strb.w	r3, [r5], #1
 80072d8:	f10a 0a01 	add.w	sl, sl, #1
 80072dc:	e23f      	b.n	800775e <_dtoa_r+0x95e>
 80072de:	07f2      	lsls	r2, r6, #31
 80072e0:	d505      	bpl.n	80072ee <_dtoa_r+0x4ee>
 80072e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e6:	f7f9 f99f 	bl	8000628 <__aeabi_dmul>
 80072ea:	3501      	adds	r5, #1
 80072ec:	2301      	movs	r3, #1
 80072ee:	1076      	asrs	r6, r6, #1
 80072f0:	3708      	adds	r7, #8
 80072f2:	e76c      	b.n	80071ce <_dtoa_r+0x3ce>
 80072f4:	2502      	movs	r5, #2
 80072f6:	e76f      	b.n	80071d8 <_dtoa_r+0x3d8>
 80072f8:	9b01      	ldr	r3, [sp, #4]
 80072fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80072fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007300:	e78d      	b.n	800721e <_dtoa_r+0x41e>
 8007302:	9900      	ldr	r1, [sp, #0]
 8007304:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007308:	4b4e      	ldr	r3, [pc, #312]	; (8007444 <_dtoa_r+0x644>)
 800730a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800730e:	4401      	add	r1, r0
 8007310:	9102      	str	r1, [sp, #8]
 8007312:	9908      	ldr	r1, [sp, #32]
 8007314:	eeb0 8a47 	vmov.f32	s16, s14
 8007318:	eef0 8a67 	vmov.f32	s17, s15
 800731c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007320:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007324:	2900      	cmp	r1, #0
 8007326:	d045      	beq.n	80073b4 <_dtoa_r+0x5b4>
 8007328:	494c      	ldr	r1, [pc, #304]	; (800745c <_dtoa_r+0x65c>)
 800732a:	2000      	movs	r0, #0
 800732c:	f7f9 faa6 	bl	800087c <__aeabi_ddiv>
 8007330:	ec53 2b18 	vmov	r2, r3, d8
 8007334:	f7f8 ffc0 	bl	80002b8 <__aeabi_dsub>
 8007338:	9d00      	ldr	r5, [sp, #0]
 800733a:	ec41 0b18 	vmov	d8, r0, r1
 800733e:	4639      	mov	r1, r7
 8007340:	4630      	mov	r0, r6
 8007342:	f7f9 fc21 	bl	8000b88 <__aeabi_d2iz>
 8007346:	900c      	str	r0, [sp, #48]	; 0x30
 8007348:	f7f9 f904 	bl	8000554 <__aeabi_i2d>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4630      	mov	r0, r6
 8007352:	4639      	mov	r1, r7
 8007354:	f7f8 ffb0 	bl	80002b8 <__aeabi_dsub>
 8007358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800735a:	3330      	adds	r3, #48	; 0x30
 800735c:	f805 3b01 	strb.w	r3, [r5], #1
 8007360:	ec53 2b18 	vmov	r2, r3, d8
 8007364:	4606      	mov	r6, r0
 8007366:	460f      	mov	r7, r1
 8007368:	f7f9 fbd0 	bl	8000b0c <__aeabi_dcmplt>
 800736c:	2800      	cmp	r0, #0
 800736e:	d165      	bne.n	800743c <_dtoa_r+0x63c>
 8007370:	4632      	mov	r2, r6
 8007372:	463b      	mov	r3, r7
 8007374:	4935      	ldr	r1, [pc, #212]	; (800744c <_dtoa_r+0x64c>)
 8007376:	2000      	movs	r0, #0
 8007378:	f7f8 ff9e 	bl	80002b8 <__aeabi_dsub>
 800737c:	ec53 2b18 	vmov	r2, r3, d8
 8007380:	f7f9 fbc4 	bl	8000b0c <__aeabi_dcmplt>
 8007384:	2800      	cmp	r0, #0
 8007386:	f040 80b9 	bne.w	80074fc <_dtoa_r+0x6fc>
 800738a:	9b02      	ldr	r3, [sp, #8]
 800738c:	429d      	cmp	r5, r3
 800738e:	f43f af75 	beq.w	800727c <_dtoa_r+0x47c>
 8007392:	4b2f      	ldr	r3, [pc, #188]	; (8007450 <_dtoa_r+0x650>)
 8007394:	ec51 0b18 	vmov	r0, r1, d8
 8007398:	2200      	movs	r2, #0
 800739a:	f7f9 f945 	bl	8000628 <__aeabi_dmul>
 800739e:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <_dtoa_r+0x650>)
 80073a0:	ec41 0b18 	vmov	d8, r0, r1
 80073a4:	2200      	movs	r2, #0
 80073a6:	4630      	mov	r0, r6
 80073a8:	4639      	mov	r1, r7
 80073aa:	f7f9 f93d 	bl	8000628 <__aeabi_dmul>
 80073ae:	4606      	mov	r6, r0
 80073b0:	460f      	mov	r7, r1
 80073b2:	e7c4      	b.n	800733e <_dtoa_r+0x53e>
 80073b4:	ec51 0b17 	vmov	r0, r1, d7
 80073b8:	f7f9 f936 	bl	8000628 <__aeabi_dmul>
 80073bc:	9b02      	ldr	r3, [sp, #8]
 80073be:	9d00      	ldr	r5, [sp, #0]
 80073c0:	930c      	str	r3, [sp, #48]	; 0x30
 80073c2:	ec41 0b18 	vmov	d8, r0, r1
 80073c6:	4639      	mov	r1, r7
 80073c8:	4630      	mov	r0, r6
 80073ca:	f7f9 fbdd 	bl	8000b88 <__aeabi_d2iz>
 80073ce:	9011      	str	r0, [sp, #68]	; 0x44
 80073d0:	f7f9 f8c0 	bl	8000554 <__aeabi_i2d>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4630      	mov	r0, r6
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f8 ff6c 	bl	80002b8 <__aeabi_dsub>
 80073e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073e2:	3330      	adds	r3, #48	; 0x30
 80073e4:	f805 3b01 	strb.w	r3, [r5], #1
 80073e8:	9b02      	ldr	r3, [sp, #8]
 80073ea:	429d      	cmp	r5, r3
 80073ec:	4606      	mov	r6, r0
 80073ee:	460f      	mov	r7, r1
 80073f0:	f04f 0200 	mov.w	r2, #0
 80073f4:	d134      	bne.n	8007460 <_dtoa_r+0x660>
 80073f6:	4b19      	ldr	r3, [pc, #100]	; (800745c <_dtoa_r+0x65c>)
 80073f8:	ec51 0b18 	vmov	r0, r1, d8
 80073fc:	f7f8 ff5e 	bl	80002bc <__adddf3>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	f7f9 fb9e 	bl	8000b48 <__aeabi_dcmpgt>
 800740c:	2800      	cmp	r0, #0
 800740e:	d175      	bne.n	80074fc <_dtoa_r+0x6fc>
 8007410:	ec53 2b18 	vmov	r2, r3, d8
 8007414:	4911      	ldr	r1, [pc, #68]	; (800745c <_dtoa_r+0x65c>)
 8007416:	2000      	movs	r0, #0
 8007418:	f7f8 ff4e 	bl	80002b8 <__aeabi_dsub>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4630      	mov	r0, r6
 8007422:	4639      	mov	r1, r7
 8007424:	f7f9 fb72 	bl	8000b0c <__aeabi_dcmplt>
 8007428:	2800      	cmp	r0, #0
 800742a:	f43f af27 	beq.w	800727c <_dtoa_r+0x47c>
 800742e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007430:	1e6b      	subs	r3, r5, #1
 8007432:	930c      	str	r3, [sp, #48]	; 0x30
 8007434:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007438:	2b30      	cmp	r3, #48	; 0x30
 800743a:	d0f8      	beq.n	800742e <_dtoa_r+0x62e>
 800743c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007440:	e04a      	b.n	80074d8 <_dtoa_r+0x6d8>
 8007442:	bf00      	nop
 8007444:	08008e20 	.word	0x08008e20
 8007448:	08008df8 	.word	0x08008df8
 800744c:	3ff00000 	.word	0x3ff00000
 8007450:	40240000 	.word	0x40240000
 8007454:	401c0000 	.word	0x401c0000
 8007458:	40140000 	.word	0x40140000
 800745c:	3fe00000 	.word	0x3fe00000
 8007460:	4baf      	ldr	r3, [pc, #700]	; (8007720 <_dtoa_r+0x920>)
 8007462:	f7f9 f8e1 	bl	8000628 <__aeabi_dmul>
 8007466:	4606      	mov	r6, r0
 8007468:	460f      	mov	r7, r1
 800746a:	e7ac      	b.n	80073c6 <_dtoa_r+0x5c6>
 800746c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007470:	9d00      	ldr	r5, [sp, #0]
 8007472:	4642      	mov	r2, r8
 8007474:	464b      	mov	r3, r9
 8007476:	4630      	mov	r0, r6
 8007478:	4639      	mov	r1, r7
 800747a:	f7f9 f9ff 	bl	800087c <__aeabi_ddiv>
 800747e:	f7f9 fb83 	bl	8000b88 <__aeabi_d2iz>
 8007482:	9002      	str	r0, [sp, #8]
 8007484:	f7f9 f866 	bl	8000554 <__aeabi_i2d>
 8007488:	4642      	mov	r2, r8
 800748a:	464b      	mov	r3, r9
 800748c:	f7f9 f8cc 	bl	8000628 <__aeabi_dmul>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7f8 ff0e 	bl	80002b8 <__aeabi_dsub>
 800749c:	9e02      	ldr	r6, [sp, #8]
 800749e:	9f01      	ldr	r7, [sp, #4]
 80074a0:	3630      	adds	r6, #48	; 0x30
 80074a2:	f805 6b01 	strb.w	r6, [r5], #1
 80074a6:	9e00      	ldr	r6, [sp, #0]
 80074a8:	1bae      	subs	r6, r5, r6
 80074aa:	42b7      	cmp	r7, r6
 80074ac:	4602      	mov	r2, r0
 80074ae:	460b      	mov	r3, r1
 80074b0:	d137      	bne.n	8007522 <_dtoa_r+0x722>
 80074b2:	f7f8 ff03 	bl	80002bc <__adddf3>
 80074b6:	4642      	mov	r2, r8
 80074b8:	464b      	mov	r3, r9
 80074ba:	4606      	mov	r6, r0
 80074bc:	460f      	mov	r7, r1
 80074be:	f7f9 fb43 	bl	8000b48 <__aeabi_dcmpgt>
 80074c2:	b9c8      	cbnz	r0, 80074f8 <_dtoa_r+0x6f8>
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f9 fb14 	bl	8000af8 <__aeabi_dcmpeq>
 80074d0:	b110      	cbz	r0, 80074d8 <_dtoa_r+0x6d8>
 80074d2:	9b02      	ldr	r3, [sp, #8]
 80074d4:	07d9      	lsls	r1, r3, #31
 80074d6:	d40f      	bmi.n	80074f8 <_dtoa_r+0x6f8>
 80074d8:	4620      	mov	r0, r4
 80074da:	4659      	mov	r1, fp
 80074dc:	f000 fcf6 	bl	8007ecc <_Bfree>
 80074e0:	2300      	movs	r3, #0
 80074e2:	702b      	strb	r3, [r5, #0]
 80074e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074e6:	f10a 0001 	add.w	r0, sl, #1
 80074ea:	6018      	str	r0, [r3, #0]
 80074ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f43f acd8 	beq.w	8006ea4 <_dtoa_r+0xa4>
 80074f4:	601d      	str	r5, [r3, #0]
 80074f6:	e4d5      	b.n	8006ea4 <_dtoa_r+0xa4>
 80074f8:	f8cd a01c 	str.w	sl, [sp, #28]
 80074fc:	462b      	mov	r3, r5
 80074fe:	461d      	mov	r5, r3
 8007500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007504:	2a39      	cmp	r2, #57	; 0x39
 8007506:	d108      	bne.n	800751a <_dtoa_r+0x71a>
 8007508:	9a00      	ldr	r2, [sp, #0]
 800750a:	429a      	cmp	r2, r3
 800750c:	d1f7      	bne.n	80074fe <_dtoa_r+0x6fe>
 800750e:	9a07      	ldr	r2, [sp, #28]
 8007510:	9900      	ldr	r1, [sp, #0]
 8007512:	3201      	adds	r2, #1
 8007514:	9207      	str	r2, [sp, #28]
 8007516:	2230      	movs	r2, #48	; 0x30
 8007518:	700a      	strb	r2, [r1, #0]
 800751a:	781a      	ldrb	r2, [r3, #0]
 800751c:	3201      	adds	r2, #1
 800751e:	701a      	strb	r2, [r3, #0]
 8007520:	e78c      	b.n	800743c <_dtoa_r+0x63c>
 8007522:	4b7f      	ldr	r3, [pc, #508]	; (8007720 <_dtoa_r+0x920>)
 8007524:	2200      	movs	r2, #0
 8007526:	f7f9 f87f 	bl	8000628 <__aeabi_dmul>
 800752a:	2200      	movs	r2, #0
 800752c:	2300      	movs	r3, #0
 800752e:	4606      	mov	r6, r0
 8007530:	460f      	mov	r7, r1
 8007532:	f7f9 fae1 	bl	8000af8 <__aeabi_dcmpeq>
 8007536:	2800      	cmp	r0, #0
 8007538:	d09b      	beq.n	8007472 <_dtoa_r+0x672>
 800753a:	e7cd      	b.n	80074d8 <_dtoa_r+0x6d8>
 800753c:	9a08      	ldr	r2, [sp, #32]
 800753e:	2a00      	cmp	r2, #0
 8007540:	f000 80c4 	beq.w	80076cc <_dtoa_r+0x8cc>
 8007544:	9a05      	ldr	r2, [sp, #20]
 8007546:	2a01      	cmp	r2, #1
 8007548:	f300 80a8 	bgt.w	800769c <_dtoa_r+0x89c>
 800754c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800754e:	2a00      	cmp	r2, #0
 8007550:	f000 80a0 	beq.w	8007694 <_dtoa_r+0x894>
 8007554:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007558:	9e06      	ldr	r6, [sp, #24]
 800755a:	4645      	mov	r5, r8
 800755c:	9a04      	ldr	r2, [sp, #16]
 800755e:	2101      	movs	r1, #1
 8007560:	441a      	add	r2, r3
 8007562:	4620      	mov	r0, r4
 8007564:	4498      	add	r8, r3
 8007566:	9204      	str	r2, [sp, #16]
 8007568:	f000 fd6c 	bl	8008044 <__i2b>
 800756c:	4607      	mov	r7, r0
 800756e:	2d00      	cmp	r5, #0
 8007570:	dd0b      	ble.n	800758a <_dtoa_r+0x78a>
 8007572:	9b04      	ldr	r3, [sp, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	dd08      	ble.n	800758a <_dtoa_r+0x78a>
 8007578:	42ab      	cmp	r3, r5
 800757a:	9a04      	ldr	r2, [sp, #16]
 800757c:	bfa8      	it	ge
 800757e:	462b      	movge	r3, r5
 8007580:	eba8 0803 	sub.w	r8, r8, r3
 8007584:	1aed      	subs	r5, r5, r3
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	9b06      	ldr	r3, [sp, #24]
 800758c:	b1fb      	cbz	r3, 80075ce <_dtoa_r+0x7ce>
 800758e:	9b08      	ldr	r3, [sp, #32]
 8007590:	2b00      	cmp	r3, #0
 8007592:	f000 809f 	beq.w	80076d4 <_dtoa_r+0x8d4>
 8007596:	2e00      	cmp	r6, #0
 8007598:	dd11      	ble.n	80075be <_dtoa_r+0x7be>
 800759a:	4639      	mov	r1, r7
 800759c:	4632      	mov	r2, r6
 800759e:	4620      	mov	r0, r4
 80075a0:	f000 fe0c 	bl	80081bc <__pow5mult>
 80075a4:	465a      	mov	r2, fp
 80075a6:	4601      	mov	r1, r0
 80075a8:	4607      	mov	r7, r0
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 fd60 	bl	8008070 <__multiply>
 80075b0:	4659      	mov	r1, fp
 80075b2:	9007      	str	r0, [sp, #28]
 80075b4:	4620      	mov	r0, r4
 80075b6:	f000 fc89 	bl	8007ecc <_Bfree>
 80075ba:	9b07      	ldr	r3, [sp, #28]
 80075bc:	469b      	mov	fp, r3
 80075be:	9b06      	ldr	r3, [sp, #24]
 80075c0:	1b9a      	subs	r2, r3, r6
 80075c2:	d004      	beq.n	80075ce <_dtoa_r+0x7ce>
 80075c4:	4659      	mov	r1, fp
 80075c6:	4620      	mov	r0, r4
 80075c8:	f000 fdf8 	bl	80081bc <__pow5mult>
 80075cc:	4683      	mov	fp, r0
 80075ce:	2101      	movs	r1, #1
 80075d0:	4620      	mov	r0, r4
 80075d2:	f000 fd37 	bl	8008044 <__i2b>
 80075d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075d8:	2b00      	cmp	r3, #0
 80075da:	4606      	mov	r6, r0
 80075dc:	dd7c      	ble.n	80076d8 <_dtoa_r+0x8d8>
 80075de:	461a      	mov	r2, r3
 80075e0:	4601      	mov	r1, r0
 80075e2:	4620      	mov	r0, r4
 80075e4:	f000 fdea 	bl	80081bc <__pow5mult>
 80075e8:	9b05      	ldr	r3, [sp, #20]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	4606      	mov	r6, r0
 80075ee:	dd76      	ble.n	80076de <_dtoa_r+0x8de>
 80075f0:	2300      	movs	r3, #0
 80075f2:	9306      	str	r3, [sp, #24]
 80075f4:	6933      	ldr	r3, [r6, #16]
 80075f6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80075fa:	6918      	ldr	r0, [r3, #16]
 80075fc:	f000 fcd2 	bl	8007fa4 <__hi0bits>
 8007600:	f1c0 0020 	rsb	r0, r0, #32
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	4418      	add	r0, r3
 8007608:	f010 001f 	ands.w	r0, r0, #31
 800760c:	f000 8086 	beq.w	800771c <_dtoa_r+0x91c>
 8007610:	f1c0 0320 	rsb	r3, r0, #32
 8007614:	2b04      	cmp	r3, #4
 8007616:	dd7f      	ble.n	8007718 <_dtoa_r+0x918>
 8007618:	f1c0 001c 	rsb	r0, r0, #28
 800761c:	9b04      	ldr	r3, [sp, #16]
 800761e:	4403      	add	r3, r0
 8007620:	4480      	add	r8, r0
 8007622:	4405      	add	r5, r0
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	f1b8 0f00 	cmp.w	r8, #0
 800762a:	dd05      	ble.n	8007638 <_dtoa_r+0x838>
 800762c:	4659      	mov	r1, fp
 800762e:	4642      	mov	r2, r8
 8007630:	4620      	mov	r0, r4
 8007632:	f000 fe1d 	bl	8008270 <__lshift>
 8007636:	4683      	mov	fp, r0
 8007638:	9b04      	ldr	r3, [sp, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	dd05      	ble.n	800764a <_dtoa_r+0x84a>
 800763e:	4631      	mov	r1, r6
 8007640:	461a      	mov	r2, r3
 8007642:	4620      	mov	r0, r4
 8007644:	f000 fe14 	bl	8008270 <__lshift>
 8007648:	4606      	mov	r6, r0
 800764a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	d069      	beq.n	8007724 <_dtoa_r+0x924>
 8007650:	4631      	mov	r1, r6
 8007652:	4658      	mov	r0, fp
 8007654:	f000 fe78 	bl	8008348 <__mcmp>
 8007658:	2800      	cmp	r0, #0
 800765a:	da63      	bge.n	8007724 <_dtoa_r+0x924>
 800765c:	2300      	movs	r3, #0
 800765e:	4659      	mov	r1, fp
 8007660:	220a      	movs	r2, #10
 8007662:	4620      	mov	r0, r4
 8007664:	f000 fc54 	bl	8007f10 <__multadd>
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800766e:	4683      	mov	fp, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 818f 	beq.w	8007994 <_dtoa_r+0xb94>
 8007676:	4639      	mov	r1, r7
 8007678:	2300      	movs	r3, #0
 800767a:	220a      	movs	r2, #10
 800767c:	4620      	mov	r0, r4
 800767e:	f000 fc47 	bl	8007f10 <__multadd>
 8007682:	f1b9 0f00 	cmp.w	r9, #0
 8007686:	4607      	mov	r7, r0
 8007688:	f300 808e 	bgt.w	80077a8 <_dtoa_r+0x9a8>
 800768c:	9b05      	ldr	r3, [sp, #20]
 800768e:	2b02      	cmp	r3, #2
 8007690:	dc50      	bgt.n	8007734 <_dtoa_r+0x934>
 8007692:	e089      	b.n	80077a8 <_dtoa_r+0x9a8>
 8007694:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007696:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800769a:	e75d      	b.n	8007558 <_dtoa_r+0x758>
 800769c:	9b01      	ldr	r3, [sp, #4]
 800769e:	1e5e      	subs	r6, r3, #1
 80076a0:	9b06      	ldr	r3, [sp, #24]
 80076a2:	42b3      	cmp	r3, r6
 80076a4:	bfbf      	itttt	lt
 80076a6:	9b06      	ldrlt	r3, [sp, #24]
 80076a8:	9606      	strlt	r6, [sp, #24]
 80076aa:	1af2      	sublt	r2, r6, r3
 80076ac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80076ae:	bfb6      	itet	lt
 80076b0:	189b      	addlt	r3, r3, r2
 80076b2:	1b9e      	subge	r6, r3, r6
 80076b4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80076b6:	9b01      	ldr	r3, [sp, #4]
 80076b8:	bfb8      	it	lt
 80076ba:	2600      	movlt	r6, #0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bfb5      	itete	lt
 80076c0:	eba8 0503 	sublt.w	r5, r8, r3
 80076c4:	9b01      	ldrge	r3, [sp, #4]
 80076c6:	2300      	movlt	r3, #0
 80076c8:	4645      	movge	r5, r8
 80076ca:	e747      	b.n	800755c <_dtoa_r+0x75c>
 80076cc:	9e06      	ldr	r6, [sp, #24]
 80076ce:	9f08      	ldr	r7, [sp, #32]
 80076d0:	4645      	mov	r5, r8
 80076d2:	e74c      	b.n	800756e <_dtoa_r+0x76e>
 80076d4:	9a06      	ldr	r2, [sp, #24]
 80076d6:	e775      	b.n	80075c4 <_dtoa_r+0x7c4>
 80076d8:	9b05      	ldr	r3, [sp, #20]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	dc18      	bgt.n	8007710 <_dtoa_r+0x910>
 80076de:	9b02      	ldr	r3, [sp, #8]
 80076e0:	b9b3      	cbnz	r3, 8007710 <_dtoa_r+0x910>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076e8:	b9a3      	cbnz	r3, 8007714 <_dtoa_r+0x914>
 80076ea:	9b03      	ldr	r3, [sp, #12]
 80076ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076f0:	0d1b      	lsrs	r3, r3, #20
 80076f2:	051b      	lsls	r3, r3, #20
 80076f4:	b12b      	cbz	r3, 8007702 <_dtoa_r+0x902>
 80076f6:	9b04      	ldr	r3, [sp, #16]
 80076f8:	3301      	adds	r3, #1
 80076fa:	9304      	str	r3, [sp, #16]
 80076fc:	f108 0801 	add.w	r8, r8, #1
 8007700:	2301      	movs	r3, #1
 8007702:	9306      	str	r3, [sp, #24]
 8007704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007706:	2b00      	cmp	r3, #0
 8007708:	f47f af74 	bne.w	80075f4 <_dtoa_r+0x7f4>
 800770c:	2001      	movs	r0, #1
 800770e:	e779      	b.n	8007604 <_dtoa_r+0x804>
 8007710:	2300      	movs	r3, #0
 8007712:	e7f6      	b.n	8007702 <_dtoa_r+0x902>
 8007714:	9b02      	ldr	r3, [sp, #8]
 8007716:	e7f4      	b.n	8007702 <_dtoa_r+0x902>
 8007718:	d085      	beq.n	8007626 <_dtoa_r+0x826>
 800771a:	4618      	mov	r0, r3
 800771c:	301c      	adds	r0, #28
 800771e:	e77d      	b.n	800761c <_dtoa_r+0x81c>
 8007720:	40240000 	.word	0x40240000
 8007724:	9b01      	ldr	r3, [sp, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	dc38      	bgt.n	800779c <_dtoa_r+0x99c>
 800772a:	9b05      	ldr	r3, [sp, #20]
 800772c:	2b02      	cmp	r3, #2
 800772e:	dd35      	ble.n	800779c <_dtoa_r+0x99c>
 8007730:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007734:	f1b9 0f00 	cmp.w	r9, #0
 8007738:	d10d      	bne.n	8007756 <_dtoa_r+0x956>
 800773a:	4631      	mov	r1, r6
 800773c:	464b      	mov	r3, r9
 800773e:	2205      	movs	r2, #5
 8007740:	4620      	mov	r0, r4
 8007742:	f000 fbe5 	bl	8007f10 <__multadd>
 8007746:	4601      	mov	r1, r0
 8007748:	4606      	mov	r6, r0
 800774a:	4658      	mov	r0, fp
 800774c:	f000 fdfc 	bl	8008348 <__mcmp>
 8007750:	2800      	cmp	r0, #0
 8007752:	f73f adbd 	bgt.w	80072d0 <_dtoa_r+0x4d0>
 8007756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007758:	9d00      	ldr	r5, [sp, #0]
 800775a:	ea6f 0a03 	mvn.w	sl, r3
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	4631      	mov	r1, r6
 8007764:	4620      	mov	r0, r4
 8007766:	f000 fbb1 	bl	8007ecc <_Bfree>
 800776a:	2f00      	cmp	r7, #0
 800776c:	f43f aeb4 	beq.w	80074d8 <_dtoa_r+0x6d8>
 8007770:	f1b8 0f00 	cmp.w	r8, #0
 8007774:	d005      	beq.n	8007782 <_dtoa_r+0x982>
 8007776:	45b8      	cmp	r8, r7
 8007778:	d003      	beq.n	8007782 <_dtoa_r+0x982>
 800777a:	4641      	mov	r1, r8
 800777c:	4620      	mov	r0, r4
 800777e:	f000 fba5 	bl	8007ecc <_Bfree>
 8007782:	4639      	mov	r1, r7
 8007784:	4620      	mov	r0, r4
 8007786:	f000 fba1 	bl	8007ecc <_Bfree>
 800778a:	e6a5      	b.n	80074d8 <_dtoa_r+0x6d8>
 800778c:	2600      	movs	r6, #0
 800778e:	4637      	mov	r7, r6
 8007790:	e7e1      	b.n	8007756 <_dtoa_r+0x956>
 8007792:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007794:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007798:	4637      	mov	r7, r6
 800779a:	e599      	b.n	80072d0 <_dtoa_r+0x4d0>
 800779c:	9b08      	ldr	r3, [sp, #32]
 800779e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 80fd 	beq.w	80079a2 <_dtoa_r+0xba2>
 80077a8:	2d00      	cmp	r5, #0
 80077aa:	dd05      	ble.n	80077b8 <_dtoa_r+0x9b8>
 80077ac:	4639      	mov	r1, r7
 80077ae:	462a      	mov	r2, r5
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fd5d 	bl	8008270 <__lshift>
 80077b6:	4607      	mov	r7, r0
 80077b8:	9b06      	ldr	r3, [sp, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d05c      	beq.n	8007878 <_dtoa_r+0xa78>
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 fb43 	bl	8007e4c <_Balloc>
 80077c6:	4605      	mov	r5, r0
 80077c8:	b928      	cbnz	r0, 80077d6 <_dtoa_r+0x9d6>
 80077ca:	4b80      	ldr	r3, [pc, #512]	; (80079cc <_dtoa_r+0xbcc>)
 80077cc:	4602      	mov	r2, r0
 80077ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80077d2:	f7ff bb2e 	b.w	8006e32 <_dtoa_r+0x32>
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	3202      	adds	r2, #2
 80077da:	0092      	lsls	r2, r2, #2
 80077dc:	f107 010c 	add.w	r1, r7, #12
 80077e0:	300c      	adds	r0, #12
 80077e2:	f000 fb25 	bl	8007e30 <memcpy>
 80077e6:	2201      	movs	r2, #1
 80077e8:	4629      	mov	r1, r5
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 fd40 	bl	8008270 <__lshift>
 80077f0:	9b00      	ldr	r3, [sp, #0]
 80077f2:	3301      	adds	r3, #1
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	9b00      	ldr	r3, [sp, #0]
 80077f8:	444b      	add	r3, r9
 80077fa:	9307      	str	r3, [sp, #28]
 80077fc:	9b02      	ldr	r3, [sp, #8]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	46b8      	mov	r8, r7
 8007804:	9306      	str	r3, [sp, #24]
 8007806:	4607      	mov	r7, r0
 8007808:	9b01      	ldr	r3, [sp, #4]
 800780a:	4631      	mov	r1, r6
 800780c:	3b01      	subs	r3, #1
 800780e:	4658      	mov	r0, fp
 8007810:	9302      	str	r3, [sp, #8]
 8007812:	f7ff fa68 	bl	8006ce6 <quorem>
 8007816:	4603      	mov	r3, r0
 8007818:	3330      	adds	r3, #48	; 0x30
 800781a:	9004      	str	r0, [sp, #16]
 800781c:	4641      	mov	r1, r8
 800781e:	4658      	mov	r0, fp
 8007820:	9308      	str	r3, [sp, #32]
 8007822:	f000 fd91 	bl	8008348 <__mcmp>
 8007826:	463a      	mov	r2, r7
 8007828:	4681      	mov	r9, r0
 800782a:	4631      	mov	r1, r6
 800782c:	4620      	mov	r0, r4
 800782e:	f000 fda7 	bl	8008380 <__mdiff>
 8007832:	68c2      	ldr	r2, [r0, #12]
 8007834:	9b08      	ldr	r3, [sp, #32]
 8007836:	4605      	mov	r5, r0
 8007838:	bb02      	cbnz	r2, 800787c <_dtoa_r+0xa7c>
 800783a:	4601      	mov	r1, r0
 800783c:	4658      	mov	r0, fp
 800783e:	f000 fd83 	bl	8008348 <__mcmp>
 8007842:	9b08      	ldr	r3, [sp, #32]
 8007844:	4602      	mov	r2, r0
 8007846:	4629      	mov	r1, r5
 8007848:	4620      	mov	r0, r4
 800784a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800784e:	f000 fb3d 	bl	8007ecc <_Bfree>
 8007852:	9b05      	ldr	r3, [sp, #20]
 8007854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007856:	9d01      	ldr	r5, [sp, #4]
 8007858:	ea43 0102 	orr.w	r1, r3, r2
 800785c:	9b06      	ldr	r3, [sp, #24]
 800785e:	430b      	orrs	r3, r1
 8007860:	9b08      	ldr	r3, [sp, #32]
 8007862:	d10d      	bne.n	8007880 <_dtoa_r+0xa80>
 8007864:	2b39      	cmp	r3, #57	; 0x39
 8007866:	d029      	beq.n	80078bc <_dtoa_r+0xabc>
 8007868:	f1b9 0f00 	cmp.w	r9, #0
 800786c:	dd01      	ble.n	8007872 <_dtoa_r+0xa72>
 800786e:	9b04      	ldr	r3, [sp, #16]
 8007870:	3331      	adds	r3, #49	; 0x31
 8007872:	9a02      	ldr	r2, [sp, #8]
 8007874:	7013      	strb	r3, [r2, #0]
 8007876:	e774      	b.n	8007762 <_dtoa_r+0x962>
 8007878:	4638      	mov	r0, r7
 800787a:	e7b9      	b.n	80077f0 <_dtoa_r+0x9f0>
 800787c:	2201      	movs	r2, #1
 800787e:	e7e2      	b.n	8007846 <_dtoa_r+0xa46>
 8007880:	f1b9 0f00 	cmp.w	r9, #0
 8007884:	db06      	blt.n	8007894 <_dtoa_r+0xa94>
 8007886:	9905      	ldr	r1, [sp, #20]
 8007888:	ea41 0909 	orr.w	r9, r1, r9
 800788c:	9906      	ldr	r1, [sp, #24]
 800788e:	ea59 0101 	orrs.w	r1, r9, r1
 8007892:	d120      	bne.n	80078d6 <_dtoa_r+0xad6>
 8007894:	2a00      	cmp	r2, #0
 8007896:	ddec      	ble.n	8007872 <_dtoa_r+0xa72>
 8007898:	4659      	mov	r1, fp
 800789a:	2201      	movs	r2, #1
 800789c:	4620      	mov	r0, r4
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	f000 fce6 	bl	8008270 <__lshift>
 80078a4:	4631      	mov	r1, r6
 80078a6:	4683      	mov	fp, r0
 80078a8:	f000 fd4e 	bl	8008348 <__mcmp>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	9b01      	ldr	r3, [sp, #4]
 80078b0:	dc02      	bgt.n	80078b8 <_dtoa_r+0xab8>
 80078b2:	d1de      	bne.n	8007872 <_dtoa_r+0xa72>
 80078b4:	07da      	lsls	r2, r3, #31
 80078b6:	d5dc      	bpl.n	8007872 <_dtoa_r+0xa72>
 80078b8:	2b39      	cmp	r3, #57	; 0x39
 80078ba:	d1d8      	bne.n	800786e <_dtoa_r+0xa6e>
 80078bc:	9a02      	ldr	r2, [sp, #8]
 80078be:	2339      	movs	r3, #57	; 0x39
 80078c0:	7013      	strb	r3, [r2, #0]
 80078c2:	462b      	mov	r3, r5
 80078c4:	461d      	mov	r5, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80078cc:	2a39      	cmp	r2, #57	; 0x39
 80078ce:	d050      	beq.n	8007972 <_dtoa_r+0xb72>
 80078d0:	3201      	adds	r2, #1
 80078d2:	701a      	strb	r2, [r3, #0]
 80078d4:	e745      	b.n	8007762 <_dtoa_r+0x962>
 80078d6:	2a00      	cmp	r2, #0
 80078d8:	dd03      	ble.n	80078e2 <_dtoa_r+0xae2>
 80078da:	2b39      	cmp	r3, #57	; 0x39
 80078dc:	d0ee      	beq.n	80078bc <_dtoa_r+0xabc>
 80078de:	3301      	adds	r3, #1
 80078e0:	e7c7      	b.n	8007872 <_dtoa_r+0xa72>
 80078e2:	9a01      	ldr	r2, [sp, #4]
 80078e4:	9907      	ldr	r1, [sp, #28]
 80078e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80078ea:	428a      	cmp	r2, r1
 80078ec:	d02a      	beq.n	8007944 <_dtoa_r+0xb44>
 80078ee:	4659      	mov	r1, fp
 80078f0:	2300      	movs	r3, #0
 80078f2:	220a      	movs	r2, #10
 80078f4:	4620      	mov	r0, r4
 80078f6:	f000 fb0b 	bl	8007f10 <__multadd>
 80078fa:	45b8      	cmp	r8, r7
 80078fc:	4683      	mov	fp, r0
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	f04f 020a 	mov.w	r2, #10
 8007906:	4641      	mov	r1, r8
 8007908:	4620      	mov	r0, r4
 800790a:	d107      	bne.n	800791c <_dtoa_r+0xb1c>
 800790c:	f000 fb00 	bl	8007f10 <__multadd>
 8007910:	4680      	mov	r8, r0
 8007912:	4607      	mov	r7, r0
 8007914:	9b01      	ldr	r3, [sp, #4]
 8007916:	3301      	adds	r3, #1
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	e775      	b.n	8007808 <_dtoa_r+0xa08>
 800791c:	f000 faf8 	bl	8007f10 <__multadd>
 8007920:	4639      	mov	r1, r7
 8007922:	4680      	mov	r8, r0
 8007924:	2300      	movs	r3, #0
 8007926:	220a      	movs	r2, #10
 8007928:	4620      	mov	r0, r4
 800792a:	f000 faf1 	bl	8007f10 <__multadd>
 800792e:	4607      	mov	r7, r0
 8007930:	e7f0      	b.n	8007914 <_dtoa_r+0xb14>
 8007932:	f1b9 0f00 	cmp.w	r9, #0
 8007936:	9a00      	ldr	r2, [sp, #0]
 8007938:	bfcc      	ite	gt
 800793a:	464d      	movgt	r5, r9
 800793c:	2501      	movle	r5, #1
 800793e:	4415      	add	r5, r2
 8007940:	f04f 0800 	mov.w	r8, #0
 8007944:	4659      	mov	r1, fp
 8007946:	2201      	movs	r2, #1
 8007948:	4620      	mov	r0, r4
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	f000 fc90 	bl	8008270 <__lshift>
 8007950:	4631      	mov	r1, r6
 8007952:	4683      	mov	fp, r0
 8007954:	f000 fcf8 	bl	8008348 <__mcmp>
 8007958:	2800      	cmp	r0, #0
 800795a:	dcb2      	bgt.n	80078c2 <_dtoa_r+0xac2>
 800795c:	d102      	bne.n	8007964 <_dtoa_r+0xb64>
 800795e:	9b01      	ldr	r3, [sp, #4]
 8007960:	07db      	lsls	r3, r3, #31
 8007962:	d4ae      	bmi.n	80078c2 <_dtoa_r+0xac2>
 8007964:	462b      	mov	r3, r5
 8007966:	461d      	mov	r5, r3
 8007968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800796c:	2a30      	cmp	r2, #48	; 0x30
 800796e:	d0fa      	beq.n	8007966 <_dtoa_r+0xb66>
 8007970:	e6f7      	b.n	8007762 <_dtoa_r+0x962>
 8007972:	9a00      	ldr	r2, [sp, #0]
 8007974:	429a      	cmp	r2, r3
 8007976:	d1a5      	bne.n	80078c4 <_dtoa_r+0xac4>
 8007978:	f10a 0a01 	add.w	sl, sl, #1
 800797c:	2331      	movs	r3, #49	; 0x31
 800797e:	e779      	b.n	8007874 <_dtoa_r+0xa74>
 8007980:	4b13      	ldr	r3, [pc, #76]	; (80079d0 <_dtoa_r+0xbd0>)
 8007982:	f7ff baaf 	b.w	8006ee4 <_dtoa_r+0xe4>
 8007986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007988:	2b00      	cmp	r3, #0
 800798a:	f47f aa86 	bne.w	8006e9a <_dtoa_r+0x9a>
 800798e:	4b11      	ldr	r3, [pc, #68]	; (80079d4 <_dtoa_r+0xbd4>)
 8007990:	f7ff baa8 	b.w	8006ee4 <_dtoa_r+0xe4>
 8007994:	f1b9 0f00 	cmp.w	r9, #0
 8007998:	dc03      	bgt.n	80079a2 <_dtoa_r+0xba2>
 800799a:	9b05      	ldr	r3, [sp, #20]
 800799c:	2b02      	cmp	r3, #2
 800799e:	f73f aec9 	bgt.w	8007734 <_dtoa_r+0x934>
 80079a2:	9d00      	ldr	r5, [sp, #0]
 80079a4:	4631      	mov	r1, r6
 80079a6:	4658      	mov	r0, fp
 80079a8:	f7ff f99d 	bl	8006ce6 <quorem>
 80079ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80079b0:	f805 3b01 	strb.w	r3, [r5], #1
 80079b4:	9a00      	ldr	r2, [sp, #0]
 80079b6:	1aaa      	subs	r2, r5, r2
 80079b8:	4591      	cmp	r9, r2
 80079ba:	ddba      	ble.n	8007932 <_dtoa_r+0xb32>
 80079bc:	4659      	mov	r1, fp
 80079be:	2300      	movs	r3, #0
 80079c0:	220a      	movs	r2, #10
 80079c2:	4620      	mov	r0, r4
 80079c4:	f000 faa4 	bl	8007f10 <__multadd>
 80079c8:	4683      	mov	fp, r0
 80079ca:	e7eb      	b.n	80079a4 <_dtoa_r+0xba4>
 80079cc:	08008d24 	.word	0x08008d24
 80079d0:	08008c7d 	.word	0x08008c7d
 80079d4:	08008ca1 	.word	0x08008ca1

080079d8 <__sflush_r>:
 80079d8:	898a      	ldrh	r2, [r1, #12]
 80079da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079de:	4605      	mov	r5, r0
 80079e0:	0710      	lsls	r0, r2, #28
 80079e2:	460c      	mov	r4, r1
 80079e4:	d458      	bmi.n	8007a98 <__sflush_r+0xc0>
 80079e6:	684b      	ldr	r3, [r1, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dc05      	bgt.n	80079f8 <__sflush_r+0x20>
 80079ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dc02      	bgt.n	80079f8 <__sflush_r+0x20>
 80079f2:	2000      	movs	r0, #0
 80079f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079fa:	2e00      	cmp	r6, #0
 80079fc:	d0f9      	beq.n	80079f2 <__sflush_r+0x1a>
 80079fe:	2300      	movs	r3, #0
 8007a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a04:	682f      	ldr	r7, [r5, #0]
 8007a06:	602b      	str	r3, [r5, #0]
 8007a08:	d032      	beq.n	8007a70 <__sflush_r+0x98>
 8007a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	075a      	lsls	r2, r3, #29
 8007a10:	d505      	bpl.n	8007a1e <__sflush_r+0x46>
 8007a12:	6863      	ldr	r3, [r4, #4]
 8007a14:	1ac0      	subs	r0, r0, r3
 8007a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a18:	b10b      	cbz	r3, 8007a1e <__sflush_r+0x46>
 8007a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a1c:	1ac0      	subs	r0, r0, r3
 8007a1e:	2300      	movs	r3, #0
 8007a20:	4602      	mov	r2, r0
 8007a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a24:	6a21      	ldr	r1, [r4, #32]
 8007a26:	4628      	mov	r0, r5
 8007a28:	47b0      	blx	r6
 8007a2a:	1c43      	adds	r3, r0, #1
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	d106      	bne.n	8007a3e <__sflush_r+0x66>
 8007a30:	6829      	ldr	r1, [r5, #0]
 8007a32:	291d      	cmp	r1, #29
 8007a34:	d82c      	bhi.n	8007a90 <__sflush_r+0xb8>
 8007a36:	4a2a      	ldr	r2, [pc, #168]	; (8007ae0 <__sflush_r+0x108>)
 8007a38:	40ca      	lsrs	r2, r1
 8007a3a:	07d6      	lsls	r6, r2, #31
 8007a3c:	d528      	bpl.n	8007a90 <__sflush_r+0xb8>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	6062      	str	r2, [r4, #4]
 8007a42:	04d9      	lsls	r1, r3, #19
 8007a44:	6922      	ldr	r2, [r4, #16]
 8007a46:	6022      	str	r2, [r4, #0]
 8007a48:	d504      	bpl.n	8007a54 <__sflush_r+0x7c>
 8007a4a:	1c42      	adds	r2, r0, #1
 8007a4c:	d101      	bne.n	8007a52 <__sflush_r+0x7a>
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	b903      	cbnz	r3, 8007a54 <__sflush_r+0x7c>
 8007a52:	6560      	str	r0, [r4, #84]	; 0x54
 8007a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a56:	602f      	str	r7, [r5, #0]
 8007a58:	2900      	cmp	r1, #0
 8007a5a:	d0ca      	beq.n	80079f2 <__sflush_r+0x1a>
 8007a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a60:	4299      	cmp	r1, r3
 8007a62:	d002      	beq.n	8007a6a <__sflush_r+0x92>
 8007a64:	4628      	mov	r0, r5
 8007a66:	f000 fd7f 	bl	8008568 <_free_r>
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a6e:	e7c1      	b.n	80079f4 <__sflush_r+0x1c>
 8007a70:	6a21      	ldr	r1, [r4, #32]
 8007a72:	2301      	movs	r3, #1
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b0      	blx	r6
 8007a78:	1c41      	adds	r1, r0, #1
 8007a7a:	d1c7      	bne.n	8007a0c <__sflush_r+0x34>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0c4      	beq.n	8007a0c <__sflush_r+0x34>
 8007a82:	2b1d      	cmp	r3, #29
 8007a84:	d001      	beq.n	8007a8a <__sflush_r+0xb2>
 8007a86:	2b16      	cmp	r3, #22
 8007a88:	d101      	bne.n	8007a8e <__sflush_r+0xb6>
 8007a8a:	602f      	str	r7, [r5, #0]
 8007a8c:	e7b1      	b.n	80079f2 <__sflush_r+0x1a>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a94:	81a3      	strh	r3, [r4, #12]
 8007a96:	e7ad      	b.n	80079f4 <__sflush_r+0x1c>
 8007a98:	690f      	ldr	r7, [r1, #16]
 8007a9a:	2f00      	cmp	r7, #0
 8007a9c:	d0a9      	beq.n	80079f2 <__sflush_r+0x1a>
 8007a9e:	0793      	lsls	r3, r2, #30
 8007aa0:	680e      	ldr	r6, [r1, #0]
 8007aa2:	bf08      	it	eq
 8007aa4:	694b      	ldreq	r3, [r1, #20]
 8007aa6:	600f      	str	r7, [r1, #0]
 8007aa8:	bf18      	it	ne
 8007aaa:	2300      	movne	r3, #0
 8007aac:	eba6 0807 	sub.w	r8, r6, r7
 8007ab0:	608b      	str	r3, [r1, #8]
 8007ab2:	f1b8 0f00 	cmp.w	r8, #0
 8007ab6:	dd9c      	ble.n	80079f2 <__sflush_r+0x1a>
 8007ab8:	6a21      	ldr	r1, [r4, #32]
 8007aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007abc:	4643      	mov	r3, r8
 8007abe:	463a      	mov	r2, r7
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	47b0      	blx	r6
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	dc06      	bgt.n	8007ad6 <__sflush_r+0xfe>
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ad4:	e78e      	b.n	80079f4 <__sflush_r+0x1c>
 8007ad6:	4407      	add	r7, r0
 8007ad8:	eba8 0800 	sub.w	r8, r8, r0
 8007adc:	e7e9      	b.n	8007ab2 <__sflush_r+0xda>
 8007ade:	bf00      	nop
 8007ae0:	20400001 	.word	0x20400001

08007ae4 <_fflush_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	690b      	ldr	r3, [r1, #16]
 8007ae8:	4605      	mov	r5, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	b913      	cbnz	r3, 8007af4 <_fflush_r+0x10>
 8007aee:	2500      	movs	r5, #0
 8007af0:	4628      	mov	r0, r5
 8007af2:	bd38      	pop	{r3, r4, r5, pc}
 8007af4:	b118      	cbz	r0, 8007afe <_fflush_r+0x1a>
 8007af6:	6983      	ldr	r3, [r0, #24]
 8007af8:	b90b      	cbnz	r3, 8007afe <_fflush_r+0x1a>
 8007afa:	f000 f887 	bl	8007c0c <__sinit>
 8007afe:	4b14      	ldr	r3, [pc, #80]	; (8007b50 <_fflush_r+0x6c>)
 8007b00:	429c      	cmp	r4, r3
 8007b02:	d11b      	bne.n	8007b3c <_fflush_r+0x58>
 8007b04:	686c      	ldr	r4, [r5, #4]
 8007b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0ef      	beq.n	8007aee <_fflush_r+0xa>
 8007b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b10:	07d0      	lsls	r0, r2, #31
 8007b12:	d404      	bmi.n	8007b1e <_fflush_r+0x3a>
 8007b14:	0599      	lsls	r1, r3, #22
 8007b16:	d402      	bmi.n	8007b1e <_fflush_r+0x3a>
 8007b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1a:	f000 f91a 	bl	8007d52 <__retarget_lock_acquire_recursive>
 8007b1e:	4628      	mov	r0, r5
 8007b20:	4621      	mov	r1, r4
 8007b22:	f7ff ff59 	bl	80079d8 <__sflush_r>
 8007b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b28:	07da      	lsls	r2, r3, #31
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	d4e0      	bmi.n	8007af0 <_fflush_r+0xc>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	059b      	lsls	r3, r3, #22
 8007b32:	d4dd      	bmi.n	8007af0 <_fflush_r+0xc>
 8007b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b36:	f000 f90d 	bl	8007d54 <__retarget_lock_release_recursive>
 8007b3a:	e7d9      	b.n	8007af0 <_fflush_r+0xc>
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <_fflush_r+0x70>)
 8007b3e:	429c      	cmp	r4, r3
 8007b40:	d101      	bne.n	8007b46 <_fflush_r+0x62>
 8007b42:	68ac      	ldr	r4, [r5, #8]
 8007b44:	e7df      	b.n	8007b06 <_fflush_r+0x22>
 8007b46:	4b04      	ldr	r3, [pc, #16]	; (8007b58 <_fflush_r+0x74>)
 8007b48:	429c      	cmp	r4, r3
 8007b4a:	bf08      	it	eq
 8007b4c:	68ec      	ldreq	r4, [r5, #12]
 8007b4e:	e7da      	b.n	8007b06 <_fflush_r+0x22>
 8007b50:	08008d58 	.word	0x08008d58
 8007b54:	08008d78 	.word	0x08008d78
 8007b58:	08008d38 	.word	0x08008d38

08007b5c <std>:
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	b510      	push	{r4, lr}
 8007b60:	4604      	mov	r4, r0
 8007b62:	e9c0 3300 	strd	r3, r3, [r0]
 8007b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b6a:	6083      	str	r3, [r0, #8]
 8007b6c:	8181      	strh	r1, [r0, #12]
 8007b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b70:	81c2      	strh	r2, [r0, #14]
 8007b72:	6183      	str	r3, [r0, #24]
 8007b74:	4619      	mov	r1, r3
 8007b76:	2208      	movs	r2, #8
 8007b78:	305c      	adds	r0, #92	; 0x5c
 8007b7a:	f7fe f993 	bl	8005ea4 <memset>
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <std+0x38>)
 8007b80:	6263      	str	r3, [r4, #36]	; 0x24
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <std+0x3c>)
 8007b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <std+0x40>)
 8007b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b8a:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <std+0x44>)
 8007b8c:	6224      	str	r4, [r4, #32]
 8007b8e:	6323      	str	r3, [r4, #48]	; 0x30
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	bf00      	nop
 8007b94:	08008765 	.word	0x08008765
 8007b98:	08008787 	.word	0x08008787
 8007b9c:	080087bf 	.word	0x080087bf
 8007ba0:	080087e3 	.word	0x080087e3

08007ba4 <_cleanup_r>:
 8007ba4:	4901      	ldr	r1, [pc, #4]	; (8007bac <_cleanup_r+0x8>)
 8007ba6:	f000 b8af 	b.w	8007d08 <_fwalk_reent>
 8007baa:	bf00      	nop
 8007bac:	08007ae5 	.word	0x08007ae5

08007bb0 <__sfmoreglue>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	1e4a      	subs	r2, r1, #1
 8007bb4:	2568      	movs	r5, #104	; 0x68
 8007bb6:	4355      	muls	r5, r2
 8007bb8:	460e      	mov	r6, r1
 8007bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bbe:	f000 fd23 	bl	8008608 <_malloc_r>
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	b140      	cbz	r0, 8007bd8 <__sfmoreglue+0x28>
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	e9c0 1600 	strd	r1, r6, [r0]
 8007bcc:	300c      	adds	r0, #12
 8007bce:	60a0      	str	r0, [r4, #8]
 8007bd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bd4:	f7fe f966 	bl	8005ea4 <memset>
 8007bd8:	4620      	mov	r0, r4
 8007bda:	bd70      	pop	{r4, r5, r6, pc}

08007bdc <__sfp_lock_acquire>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	; (8007be4 <__sfp_lock_acquire+0x8>)
 8007bde:	f000 b8b8 	b.w	8007d52 <__retarget_lock_acquire_recursive>
 8007be2:	bf00      	nop
 8007be4:	200002e8 	.word	0x200002e8

08007be8 <__sfp_lock_release>:
 8007be8:	4801      	ldr	r0, [pc, #4]	; (8007bf0 <__sfp_lock_release+0x8>)
 8007bea:	f000 b8b3 	b.w	8007d54 <__retarget_lock_release_recursive>
 8007bee:	bf00      	nop
 8007bf0:	200002e8 	.word	0x200002e8

08007bf4 <__sinit_lock_acquire>:
 8007bf4:	4801      	ldr	r0, [pc, #4]	; (8007bfc <__sinit_lock_acquire+0x8>)
 8007bf6:	f000 b8ac 	b.w	8007d52 <__retarget_lock_acquire_recursive>
 8007bfa:	bf00      	nop
 8007bfc:	200002e3 	.word	0x200002e3

08007c00 <__sinit_lock_release>:
 8007c00:	4801      	ldr	r0, [pc, #4]	; (8007c08 <__sinit_lock_release+0x8>)
 8007c02:	f000 b8a7 	b.w	8007d54 <__retarget_lock_release_recursive>
 8007c06:	bf00      	nop
 8007c08:	200002e3 	.word	0x200002e3

08007c0c <__sinit>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	4604      	mov	r4, r0
 8007c10:	f7ff fff0 	bl	8007bf4 <__sinit_lock_acquire>
 8007c14:	69a3      	ldr	r3, [r4, #24]
 8007c16:	b11b      	cbz	r3, 8007c20 <__sinit+0x14>
 8007c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1c:	f7ff bff0 	b.w	8007c00 <__sinit_lock_release>
 8007c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c24:	6523      	str	r3, [r4, #80]	; 0x50
 8007c26:	4b13      	ldr	r3, [pc, #76]	; (8007c74 <__sinit+0x68>)
 8007c28:	4a13      	ldr	r2, [pc, #76]	; (8007c78 <__sinit+0x6c>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c2e:	42a3      	cmp	r3, r4
 8007c30:	bf04      	itt	eq
 8007c32:	2301      	moveq	r3, #1
 8007c34:	61a3      	streq	r3, [r4, #24]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 f820 	bl	8007c7c <__sfp>
 8007c3c:	6060      	str	r0, [r4, #4]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f81c 	bl	8007c7c <__sfp>
 8007c44:	60a0      	str	r0, [r4, #8]
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 f818 	bl	8007c7c <__sfp>
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	60e0      	str	r0, [r4, #12]
 8007c50:	2104      	movs	r1, #4
 8007c52:	6860      	ldr	r0, [r4, #4]
 8007c54:	f7ff ff82 	bl	8007b5c <std>
 8007c58:	68a0      	ldr	r0, [r4, #8]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	2109      	movs	r1, #9
 8007c5e:	f7ff ff7d 	bl	8007b5c <std>
 8007c62:	68e0      	ldr	r0, [r4, #12]
 8007c64:	2202      	movs	r2, #2
 8007c66:	2112      	movs	r1, #18
 8007c68:	f7ff ff78 	bl	8007b5c <std>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	61a3      	str	r3, [r4, #24]
 8007c70:	e7d2      	b.n	8007c18 <__sinit+0xc>
 8007c72:	bf00      	nop
 8007c74:	08008c58 	.word	0x08008c58
 8007c78:	08007ba5 	.word	0x08007ba5

08007c7c <__sfp>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	4607      	mov	r7, r0
 8007c80:	f7ff ffac 	bl	8007bdc <__sfp_lock_acquire>
 8007c84:	4b1e      	ldr	r3, [pc, #120]	; (8007d00 <__sfp+0x84>)
 8007c86:	681e      	ldr	r6, [r3, #0]
 8007c88:	69b3      	ldr	r3, [r6, #24]
 8007c8a:	b913      	cbnz	r3, 8007c92 <__sfp+0x16>
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff ffbd 	bl	8007c0c <__sinit>
 8007c92:	3648      	adds	r6, #72	; 0x48
 8007c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	d503      	bpl.n	8007ca4 <__sfp+0x28>
 8007c9c:	6833      	ldr	r3, [r6, #0]
 8007c9e:	b30b      	cbz	r3, 8007ce4 <__sfp+0x68>
 8007ca0:	6836      	ldr	r6, [r6, #0]
 8007ca2:	e7f7      	b.n	8007c94 <__sfp+0x18>
 8007ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ca8:	b9d5      	cbnz	r5, 8007ce0 <__sfp+0x64>
 8007caa:	4b16      	ldr	r3, [pc, #88]	; (8007d04 <__sfp+0x88>)
 8007cac:	60e3      	str	r3, [r4, #12]
 8007cae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cb2:	6665      	str	r5, [r4, #100]	; 0x64
 8007cb4:	f000 f84c 	bl	8007d50 <__retarget_lock_init_recursive>
 8007cb8:	f7ff ff96 	bl	8007be8 <__sfp_lock_release>
 8007cbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cc4:	6025      	str	r5, [r4, #0]
 8007cc6:	61a5      	str	r5, [r4, #24]
 8007cc8:	2208      	movs	r2, #8
 8007cca:	4629      	mov	r1, r5
 8007ccc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cd0:	f7fe f8e8 	bl	8005ea4 <memset>
 8007cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cdc:	4620      	mov	r0, r4
 8007cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce0:	3468      	adds	r4, #104	; 0x68
 8007ce2:	e7d9      	b.n	8007c98 <__sfp+0x1c>
 8007ce4:	2104      	movs	r1, #4
 8007ce6:	4638      	mov	r0, r7
 8007ce8:	f7ff ff62 	bl	8007bb0 <__sfmoreglue>
 8007cec:	4604      	mov	r4, r0
 8007cee:	6030      	str	r0, [r6, #0]
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d1d5      	bne.n	8007ca0 <__sfp+0x24>
 8007cf4:	f7ff ff78 	bl	8007be8 <__sfp_lock_release>
 8007cf8:	230c      	movs	r3, #12
 8007cfa:	603b      	str	r3, [r7, #0]
 8007cfc:	e7ee      	b.n	8007cdc <__sfp+0x60>
 8007cfe:	bf00      	nop
 8007d00:	08008c58 	.word	0x08008c58
 8007d04:	ffff0001 	.word	0xffff0001

08007d08 <_fwalk_reent>:
 8007d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	4688      	mov	r8, r1
 8007d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d14:	2700      	movs	r7, #0
 8007d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d1a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d1e:	d505      	bpl.n	8007d2c <_fwalk_reent+0x24>
 8007d20:	6824      	ldr	r4, [r4, #0]
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d1f7      	bne.n	8007d16 <_fwalk_reent+0xe>
 8007d26:	4638      	mov	r0, r7
 8007d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d2c:	89ab      	ldrh	r3, [r5, #12]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d907      	bls.n	8007d42 <_fwalk_reent+0x3a>
 8007d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d36:	3301      	adds	r3, #1
 8007d38:	d003      	beq.n	8007d42 <_fwalk_reent+0x3a>
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	47c0      	blx	r8
 8007d40:	4307      	orrs	r7, r0
 8007d42:	3568      	adds	r5, #104	; 0x68
 8007d44:	e7e9      	b.n	8007d1a <_fwalk_reent+0x12>
	...

08007d48 <_localeconv_r>:
 8007d48:	4800      	ldr	r0, [pc, #0]	; (8007d4c <_localeconv_r+0x4>)
 8007d4a:	4770      	bx	lr
 8007d4c:	20000160 	.word	0x20000160

08007d50 <__retarget_lock_init_recursive>:
 8007d50:	4770      	bx	lr

08007d52 <__retarget_lock_acquire_recursive>:
 8007d52:	4770      	bx	lr

08007d54 <__retarget_lock_release_recursive>:
 8007d54:	4770      	bx	lr

08007d56 <__swhatbuf_r>:
 8007d56:	b570      	push	{r4, r5, r6, lr}
 8007d58:	460e      	mov	r6, r1
 8007d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5e:	2900      	cmp	r1, #0
 8007d60:	b096      	sub	sp, #88	; 0x58
 8007d62:	4614      	mov	r4, r2
 8007d64:	461d      	mov	r5, r3
 8007d66:	da07      	bge.n	8007d78 <__swhatbuf_r+0x22>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	602b      	str	r3, [r5, #0]
 8007d6c:	89b3      	ldrh	r3, [r6, #12]
 8007d6e:	061a      	lsls	r2, r3, #24
 8007d70:	d410      	bmi.n	8007d94 <__swhatbuf_r+0x3e>
 8007d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d76:	e00e      	b.n	8007d96 <__swhatbuf_r+0x40>
 8007d78:	466a      	mov	r2, sp
 8007d7a:	f000 fd59 	bl	8008830 <_fstat_r>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	dbf2      	blt.n	8007d68 <__swhatbuf_r+0x12>
 8007d82:	9a01      	ldr	r2, [sp, #4]
 8007d84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d8c:	425a      	negs	r2, r3
 8007d8e:	415a      	adcs	r2, r3
 8007d90:	602a      	str	r2, [r5, #0]
 8007d92:	e7ee      	b.n	8007d72 <__swhatbuf_r+0x1c>
 8007d94:	2340      	movs	r3, #64	; 0x40
 8007d96:	2000      	movs	r0, #0
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	b016      	add	sp, #88	; 0x58
 8007d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007da0 <__smakebuf_r>:
 8007da0:	898b      	ldrh	r3, [r1, #12]
 8007da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007da4:	079d      	lsls	r5, r3, #30
 8007da6:	4606      	mov	r6, r0
 8007da8:	460c      	mov	r4, r1
 8007daa:	d507      	bpl.n	8007dbc <__smakebuf_r+0x1c>
 8007dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	6123      	str	r3, [r4, #16]
 8007db4:	2301      	movs	r3, #1
 8007db6:	6163      	str	r3, [r4, #20]
 8007db8:	b002      	add	sp, #8
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	ab01      	add	r3, sp, #4
 8007dbe:	466a      	mov	r2, sp
 8007dc0:	f7ff ffc9 	bl	8007d56 <__swhatbuf_r>
 8007dc4:	9900      	ldr	r1, [sp, #0]
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 fc1d 	bl	8008608 <_malloc_r>
 8007dce:	b948      	cbnz	r0, 8007de4 <__smakebuf_r+0x44>
 8007dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd4:	059a      	lsls	r2, r3, #22
 8007dd6:	d4ef      	bmi.n	8007db8 <__smakebuf_r+0x18>
 8007dd8:	f023 0303 	bic.w	r3, r3, #3
 8007ddc:	f043 0302 	orr.w	r3, r3, #2
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	e7e3      	b.n	8007dac <__smakebuf_r+0xc>
 8007de4:	4b0d      	ldr	r3, [pc, #52]	; (8007e1c <__smakebuf_r+0x7c>)
 8007de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	6020      	str	r0, [r4, #0]
 8007dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	9b00      	ldr	r3, [sp, #0]
 8007df4:	6163      	str	r3, [r4, #20]
 8007df6:	9b01      	ldr	r3, [sp, #4]
 8007df8:	6120      	str	r0, [r4, #16]
 8007dfa:	b15b      	cbz	r3, 8007e14 <__smakebuf_r+0x74>
 8007dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e00:	4630      	mov	r0, r6
 8007e02:	f000 fd27 	bl	8008854 <_isatty_r>
 8007e06:	b128      	cbz	r0, 8007e14 <__smakebuf_r+0x74>
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	f023 0303 	bic.w	r3, r3, #3
 8007e0e:	f043 0301 	orr.w	r3, r3, #1
 8007e12:	81a3      	strh	r3, [r4, #12]
 8007e14:	89a0      	ldrh	r0, [r4, #12]
 8007e16:	4305      	orrs	r5, r0
 8007e18:	81a5      	strh	r5, [r4, #12]
 8007e1a:	e7cd      	b.n	8007db8 <__smakebuf_r+0x18>
 8007e1c:	08007ba5 	.word	0x08007ba5

08007e20 <malloc>:
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <malloc+0xc>)
 8007e22:	4601      	mov	r1, r0
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	f000 bbef 	b.w	8008608 <_malloc_r>
 8007e2a:	bf00      	nop
 8007e2c:	2000000c 	.word	0x2000000c

08007e30 <memcpy>:
 8007e30:	440a      	add	r2, r1
 8007e32:	4291      	cmp	r1, r2
 8007e34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e38:	d100      	bne.n	8007e3c <memcpy+0xc>
 8007e3a:	4770      	bx	lr
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e46:	4291      	cmp	r1, r2
 8007e48:	d1f9      	bne.n	8007e3e <memcpy+0xe>
 8007e4a:	bd10      	pop	{r4, pc}

08007e4c <_Balloc>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e50:	4604      	mov	r4, r0
 8007e52:	460d      	mov	r5, r1
 8007e54:	b976      	cbnz	r6, 8007e74 <_Balloc+0x28>
 8007e56:	2010      	movs	r0, #16
 8007e58:	f7ff ffe2 	bl	8007e20 <malloc>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6260      	str	r0, [r4, #36]	; 0x24
 8007e60:	b920      	cbnz	r0, 8007e6c <_Balloc+0x20>
 8007e62:	4b18      	ldr	r3, [pc, #96]	; (8007ec4 <_Balloc+0x78>)
 8007e64:	4818      	ldr	r0, [pc, #96]	; (8007ec8 <_Balloc+0x7c>)
 8007e66:	2166      	movs	r1, #102	; 0x66
 8007e68:	f7fd ffc2 	bl	8005df0 <__assert_func>
 8007e6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e70:	6006      	str	r6, [r0, #0]
 8007e72:	60c6      	str	r6, [r0, #12]
 8007e74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e76:	68f3      	ldr	r3, [r6, #12]
 8007e78:	b183      	cbz	r3, 8007e9c <_Balloc+0x50>
 8007e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e82:	b9b8      	cbnz	r0, 8007eb4 <_Balloc+0x68>
 8007e84:	2101      	movs	r1, #1
 8007e86:	fa01 f605 	lsl.w	r6, r1, r5
 8007e8a:	1d72      	adds	r2, r6, #5
 8007e8c:	0092      	lsls	r2, r2, #2
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 fb5a 	bl	8008548 <_calloc_r>
 8007e94:	b160      	cbz	r0, 8007eb0 <_Balloc+0x64>
 8007e96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e9a:	e00e      	b.n	8007eba <_Balloc+0x6e>
 8007e9c:	2221      	movs	r2, #33	; 0x21
 8007e9e:	2104      	movs	r1, #4
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 fb51 	bl	8008548 <_calloc_r>
 8007ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ea8:	60f0      	str	r0, [r6, #12]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e4      	bne.n	8007e7a <_Balloc+0x2e>
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}
 8007eb4:	6802      	ldr	r2, [r0, #0]
 8007eb6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ec0:	e7f7      	b.n	8007eb2 <_Balloc+0x66>
 8007ec2:	bf00      	nop
 8007ec4:	08008cae 	.word	0x08008cae
 8007ec8:	08008d98 	.word	0x08008d98

08007ecc <_Bfree>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ed0:	4605      	mov	r5, r0
 8007ed2:	460c      	mov	r4, r1
 8007ed4:	b976      	cbnz	r6, 8007ef4 <_Bfree+0x28>
 8007ed6:	2010      	movs	r0, #16
 8007ed8:	f7ff ffa2 	bl	8007e20 <malloc>
 8007edc:	4602      	mov	r2, r0
 8007ede:	6268      	str	r0, [r5, #36]	; 0x24
 8007ee0:	b920      	cbnz	r0, 8007eec <_Bfree+0x20>
 8007ee2:	4b09      	ldr	r3, [pc, #36]	; (8007f08 <_Bfree+0x3c>)
 8007ee4:	4809      	ldr	r0, [pc, #36]	; (8007f0c <_Bfree+0x40>)
 8007ee6:	218a      	movs	r1, #138	; 0x8a
 8007ee8:	f7fd ff82 	bl	8005df0 <__assert_func>
 8007eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ef0:	6006      	str	r6, [r0, #0]
 8007ef2:	60c6      	str	r6, [r0, #12]
 8007ef4:	b13c      	cbz	r4, 8007f06 <_Bfree+0x3a>
 8007ef6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ef8:	6862      	ldr	r2, [r4, #4]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f00:	6021      	str	r1, [r4, #0]
 8007f02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007f06:	bd70      	pop	{r4, r5, r6, pc}
 8007f08:	08008cae 	.word	0x08008cae
 8007f0c:	08008d98 	.word	0x08008d98

08007f10 <__multadd>:
 8007f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f14:	690e      	ldr	r6, [r1, #16]
 8007f16:	4607      	mov	r7, r0
 8007f18:	4698      	mov	r8, r3
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	f101 0014 	add.w	r0, r1, #20
 8007f20:	2300      	movs	r3, #0
 8007f22:	6805      	ldr	r5, [r0, #0]
 8007f24:	b2a9      	uxth	r1, r5
 8007f26:	fb02 8101 	mla	r1, r2, r1, r8
 8007f2a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007f2e:	0c2d      	lsrs	r5, r5, #16
 8007f30:	fb02 c505 	mla	r5, r2, r5, ip
 8007f34:	b289      	uxth	r1, r1
 8007f36:	3301      	adds	r3, #1
 8007f38:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007f3c:	429e      	cmp	r6, r3
 8007f3e:	f840 1b04 	str.w	r1, [r0], #4
 8007f42:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007f46:	dcec      	bgt.n	8007f22 <__multadd+0x12>
 8007f48:	f1b8 0f00 	cmp.w	r8, #0
 8007f4c:	d022      	beq.n	8007f94 <__multadd+0x84>
 8007f4e:	68a3      	ldr	r3, [r4, #8]
 8007f50:	42b3      	cmp	r3, r6
 8007f52:	dc19      	bgt.n	8007f88 <__multadd+0x78>
 8007f54:	6861      	ldr	r1, [r4, #4]
 8007f56:	4638      	mov	r0, r7
 8007f58:	3101      	adds	r1, #1
 8007f5a:	f7ff ff77 	bl	8007e4c <_Balloc>
 8007f5e:	4605      	mov	r5, r0
 8007f60:	b928      	cbnz	r0, 8007f6e <__multadd+0x5e>
 8007f62:	4602      	mov	r2, r0
 8007f64:	4b0d      	ldr	r3, [pc, #52]	; (8007f9c <__multadd+0x8c>)
 8007f66:	480e      	ldr	r0, [pc, #56]	; (8007fa0 <__multadd+0x90>)
 8007f68:	21b5      	movs	r1, #181	; 0xb5
 8007f6a:	f7fd ff41 	bl	8005df0 <__assert_func>
 8007f6e:	6922      	ldr	r2, [r4, #16]
 8007f70:	3202      	adds	r2, #2
 8007f72:	f104 010c 	add.w	r1, r4, #12
 8007f76:	0092      	lsls	r2, r2, #2
 8007f78:	300c      	adds	r0, #12
 8007f7a:	f7ff ff59 	bl	8007e30 <memcpy>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4638      	mov	r0, r7
 8007f82:	f7ff ffa3 	bl	8007ecc <_Bfree>
 8007f86:	462c      	mov	r4, r5
 8007f88:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007f8c:	3601      	adds	r6, #1
 8007f8e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007f92:	6126      	str	r6, [r4, #16]
 8007f94:	4620      	mov	r0, r4
 8007f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f9a:	bf00      	nop
 8007f9c:	08008d24 	.word	0x08008d24
 8007fa0:	08008d98 	.word	0x08008d98

08007fa4 <__hi0bits>:
 8007fa4:	0c03      	lsrs	r3, r0, #16
 8007fa6:	041b      	lsls	r3, r3, #16
 8007fa8:	b9d3      	cbnz	r3, 8007fe0 <__hi0bits+0x3c>
 8007faa:	0400      	lsls	r0, r0, #16
 8007fac:	2310      	movs	r3, #16
 8007fae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007fb2:	bf04      	itt	eq
 8007fb4:	0200      	lsleq	r0, r0, #8
 8007fb6:	3308      	addeq	r3, #8
 8007fb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007fbc:	bf04      	itt	eq
 8007fbe:	0100      	lsleq	r0, r0, #4
 8007fc0:	3304      	addeq	r3, #4
 8007fc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007fc6:	bf04      	itt	eq
 8007fc8:	0080      	lsleq	r0, r0, #2
 8007fca:	3302      	addeq	r3, #2
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	db05      	blt.n	8007fdc <__hi0bits+0x38>
 8007fd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007fd4:	f103 0301 	add.w	r3, r3, #1
 8007fd8:	bf08      	it	eq
 8007fda:	2320      	moveq	r3, #32
 8007fdc:	4618      	mov	r0, r3
 8007fde:	4770      	bx	lr
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e7e4      	b.n	8007fae <__hi0bits+0xa>

08007fe4 <__lo0bits>:
 8007fe4:	6803      	ldr	r3, [r0, #0]
 8007fe6:	f013 0207 	ands.w	r2, r3, #7
 8007fea:	4601      	mov	r1, r0
 8007fec:	d00b      	beq.n	8008006 <__lo0bits+0x22>
 8007fee:	07da      	lsls	r2, r3, #31
 8007ff0:	d424      	bmi.n	800803c <__lo0bits+0x58>
 8007ff2:	0798      	lsls	r0, r3, #30
 8007ff4:	bf49      	itett	mi
 8007ff6:	085b      	lsrmi	r3, r3, #1
 8007ff8:	089b      	lsrpl	r3, r3, #2
 8007ffa:	2001      	movmi	r0, #1
 8007ffc:	600b      	strmi	r3, [r1, #0]
 8007ffe:	bf5c      	itt	pl
 8008000:	600b      	strpl	r3, [r1, #0]
 8008002:	2002      	movpl	r0, #2
 8008004:	4770      	bx	lr
 8008006:	b298      	uxth	r0, r3
 8008008:	b9b0      	cbnz	r0, 8008038 <__lo0bits+0x54>
 800800a:	0c1b      	lsrs	r3, r3, #16
 800800c:	2010      	movs	r0, #16
 800800e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008012:	bf04      	itt	eq
 8008014:	0a1b      	lsreq	r3, r3, #8
 8008016:	3008      	addeq	r0, #8
 8008018:	071a      	lsls	r2, r3, #28
 800801a:	bf04      	itt	eq
 800801c:	091b      	lsreq	r3, r3, #4
 800801e:	3004      	addeq	r0, #4
 8008020:	079a      	lsls	r2, r3, #30
 8008022:	bf04      	itt	eq
 8008024:	089b      	lsreq	r3, r3, #2
 8008026:	3002      	addeq	r0, #2
 8008028:	07da      	lsls	r2, r3, #31
 800802a:	d403      	bmi.n	8008034 <__lo0bits+0x50>
 800802c:	085b      	lsrs	r3, r3, #1
 800802e:	f100 0001 	add.w	r0, r0, #1
 8008032:	d005      	beq.n	8008040 <__lo0bits+0x5c>
 8008034:	600b      	str	r3, [r1, #0]
 8008036:	4770      	bx	lr
 8008038:	4610      	mov	r0, r2
 800803a:	e7e8      	b.n	800800e <__lo0bits+0x2a>
 800803c:	2000      	movs	r0, #0
 800803e:	4770      	bx	lr
 8008040:	2020      	movs	r0, #32
 8008042:	4770      	bx	lr

08008044 <__i2b>:
 8008044:	b510      	push	{r4, lr}
 8008046:	460c      	mov	r4, r1
 8008048:	2101      	movs	r1, #1
 800804a:	f7ff feff 	bl	8007e4c <_Balloc>
 800804e:	4602      	mov	r2, r0
 8008050:	b928      	cbnz	r0, 800805e <__i2b+0x1a>
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <__i2b+0x24>)
 8008054:	4805      	ldr	r0, [pc, #20]	; (800806c <__i2b+0x28>)
 8008056:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800805a:	f7fd fec9 	bl	8005df0 <__assert_func>
 800805e:	2301      	movs	r3, #1
 8008060:	6144      	str	r4, [r0, #20]
 8008062:	6103      	str	r3, [r0, #16]
 8008064:	bd10      	pop	{r4, pc}
 8008066:	bf00      	nop
 8008068:	08008d24 	.word	0x08008d24
 800806c:	08008d98 	.word	0x08008d98

08008070 <__multiply>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4614      	mov	r4, r2
 8008076:	690a      	ldr	r2, [r1, #16]
 8008078:	6923      	ldr	r3, [r4, #16]
 800807a:	429a      	cmp	r2, r3
 800807c:	bfb8      	it	lt
 800807e:	460b      	movlt	r3, r1
 8008080:	460d      	mov	r5, r1
 8008082:	bfbc      	itt	lt
 8008084:	4625      	movlt	r5, r4
 8008086:	461c      	movlt	r4, r3
 8008088:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800808c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008090:	68ab      	ldr	r3, [r5, #8]
 8008092:	6869      	ldr	r1, [r5, #4]
 8008094:	eb0a 0709 	add.w	r7, sl, r9
 8008098:	42bb      	cmp	r3, r7
 800809a:	b085      	sub	sp, #20
 800809c:	bfb8      	it	lt
 800809e:	3101      	addlt	r1, #1
 80080a0:	f7ff fed4 	bl	8007e4c <_Balloc>
 80080a4:	b930      	cbnz	r0, 80080b4 <__multiply+0x44>
 80080a6:	4602      	mov	r2, r0
 80080a8:	4b42      	ldr	r3, [pc, #264]	; (80081b4 <__multiply+0x144>)
 80080aa:	4843      	ldr	r0, [pc, #268]	; (80081b8 <__multiply+0x148>)
 80080ac:	f240 115d 	movw	r1, #349	; 0x15d
 80080b0:	f7fd fe9e 	bl	8005df0 <__assert_func>
 80080b4:	f100 0614 	add.w	r6, r0, #20
 80080b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80080bc:	4633      	mov	r3, r6
 80080be:	2200      	movs	r2, #0
 80080c0:	4543      	cmp	r3, r8
 80080c2:	d31e      	bcc.n	8008102 <__multiply+0x92>
 80080c4:	f105 0c14 	add.w	ip, r5, #20
 80080c8:	f104 0314 	add.w	r3, r4, #20
 80080cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80080d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80080d4:	9202      	str	r2, [sp, #8]
 80080d6:	ebac 0205 	sub.w	r2, ip, r5
 80080da:	3a15      	subs	r2, #21
 80080dc:	f022 0203 	bic.w	r2, r2, #3
 80080e0:	3204      	adds	r2, #4
 80080e2:	f105 0115 	add.w	r1, r5, #21
 80080e6:	458c      	cmp	ip, r1
 80080e8:	bf38      	it	cc
 80080ea:	2204      	movcc	r2, #4
 80080ec:	9201      	str	r2, [sp, #4]
 80080ee:	9a02      	ldr	r2, [sp, #8]
 80080f0:	9303      	str	r3, [sp, #12]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d808      	bhi.n	8008108 <__multiply+0x98>
 80080f6:	2f00      	cmp	r7, #0
 80080f8:	dc55      	bgt.n	80081a6 <__multiply+0x136>
 80080fa:	6107      	str	r7, [r0, #16]
 80080fc:	b005      	add	sp, #20
 80080fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008102:	f843 2b04 	str.w	r2, [r3], #4
 8008106:	e7db      	b.n	80080c0 <__multiply+0x50>
 8008108:	f8b3 a000 	ldrh.w	sl, [r3]
 800810c:	f1ba 0f00 	cmp.w	sl, #0
 8008110:	d020      	beq.n	8008154 <__multiply+0xe4>
 8008112:	f105 0e14 	add.w	lr, r5, #20
 8008116:	46b1      	mov	r9, r6
 8008118:	2200      	movs	r2, #0
 800811a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800811e:	f8d9 b000 	ldr.w	fp, [r9]
 8008122:	b2a1      	uxth	r1, r4
 8008124:	fa1f fb8b 	uxth.w	fp, fp
 8008128:	fb0a b101 	mla	r1, sl, r1, fp
 800812c:	4411      	add	r1, r2
 800812e:	f8d9 2000 	ldr.w	r2, [r9]
 8008132:	0c24      	lsrs	r4, r4, #16
 8008134:	0c12      	lsrs	r2, r2, #16
 8008136:	fb0a 2404 	mla	r4, sl, r4, r2
 800813a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800813e:	b289      	uxth	r1, r1
 8008140:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008144:	45f4      	cmp	ip, lr
 8008146:	f849 1b04 	str.w	r1, [r9], #4
 800814a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800814e:	d8e4      	bhi.n	800811a <__multiply+0xaa>
 8008150:	9901      	ldr	r1, [sp, #4]
 8008152:	5072      	str	r2, [r6, r1]
 8008154:	9a03      	ldr	r2, [sp, #12]
 8008156:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800815a:	3304      	adds	r3, #4
 800815c:	f1b9 0f00 	cmp.w	r9, #0
 8008160:	d01f      	beq.n	80081a2 <__multiply+0x132>
 8008162:	6834      	ldr	r4, [r6, #0]
 8008164:	f105 0114 	add.w	r1, r5, #20
 8008168:	46b6      	mov	lr, r6
 800816a:	f04f 0a00 	mov.w	sl, #0
 800816e:	880a      	ldrh	r2, [r1, #0]
 8008170:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008174:	fb09 b202 	mla	r2, r9, r2, fp
 8008178:	4492      	add	sl, r2
 800817a:	b2a4      	uxth	r4, r4
 800817c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008180:	f84e 4b04 	str.w	r4, [lr], #4
 8008184:	f851 4b04 	ldr.w	r4, [r1], #4
 8008188:	f8be 2000 	ldrh.w	r2, [lr]
 800818c:	0c24      	lsrs	r4, r4, #16
 800818e:	fb09 2404 	mla	r4, r9, r4, r2
 8008192:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008196:	458c      	cmp	ip, r1
 8008198:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800819c:	d8e7      	bhi.n	800816e <__multiply+0xfe>
 800819e:	9a01      	ldr	r2, [sp, #4]
 80081a0:	50b4      	str	r4, [r6, r2]
 80081a2:	3604      	adds	r6, #4
 80081a4:	e7a3      	b.n	80080ee <__multiply+0x7e>
 80081a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d1a5      	bne.n	80080fa <__multiply+0x8a>
 80081ae:	3f01      	subs	r7, #1
 80081b0:	e7a1      	b.n	80080f6 <__multiply+0x86>
 80081b2:	bf00      	nop
 80081b4:	08008d24 	.word	0x08008d24
 80081b8:	08008d98 	.word	0x08008d98

080081bc <__pow5mult>:
 80081bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c0:	4615      	mov	r5, r2
 80081c2:	f012 0203 	ands.w	r2, r2, #3
 80081c6:	4606      	mov	r6, r0
 80081c8:	460f      	mov	r7, r1
 80081ca:	d007      	beq.n	80081dc <__pow5mult+0x20>
 80081cc:	4c25      	ldr	r4, [pc, #148]	; (8008264 <__pow5mult+0xa8>)
 80081ce:	3a01      	subs	r2, #1
 80081d0:	2300      	movs	r3, #0
 80081d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081d6:	f7ff fe9b 	bl	8007f10 <__multadd>
 80081da:	4607      	mov	r7, r0
 80081dc:	10ad      	asrs	r5, r5, #2
 80081de:	d03d      	beq.n	800825c <__pow5mult+0xa0>
 80081e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80081e2:	b97c      	cbnz	r4, 8008204 <__pow5mult+0x48>
 80081e4:	2010      	movs	r0, #16
 80081e6:	f7ff fe1b 	bl	8007e20 <malloc>
 80081ea:	4602      	mov	r2, r0
 80081ec:	6270      	str	r0, [r6, #36]	; 0x24
 80081ee:	b928      	cbnz	r0, 80081fc <__pow5mult+0x40>
 80081f0:	4b1d      	ldr	r3, [pc, #116]	; (8008268 <__pow5mult+0xac>)
 80081f2:	481e      	ldr	r0, [pc, #120]	; (800826c <__pow5mult+0xb0>)
 80081f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081f8:	f7fd fdfa 	bl	8005df0 <__assert_func>
 80081fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008200:	6004      	str	r4, [r0, #0]
 8008202:	60c4      	str	r4, [r0, #12]
 8008204:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008208:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800820c:	b94c      	cbnz	r4, 8008222 <__pow5mult+0x66>
 800820e:	f240 2171 	movw	r1, #625	; 0x271
 8008212:	4630      	mov	r0, r6
 8008214:	f7ff ff16 	bl	8008044 <__i2b>
 8008218:	2300      	movs	r3, #0
 800821a:	f8c8 0008 	str.w	r0, [r8, #8]
 800821e:	4604      	mov	r4, r0
 8008220:	6003      	str	r3, [r0, #0]
 8008222:	f04f 0900 	mov.w	r9, #0
 8008226:	07eb      	lsls	r3, r5, #31
 8008228:	d50a      	bpl.n	8008240 <__pow5mult+0x84>
 800822a:	4639      	mov	r1, r7
 800822c:	4622      	mov	r2, r4
 800822e:	4630      	mov	r0, r6
 8008230:	f7ff ff1e 	bl	8008070 <__multiply>
 8008234:	4639      	mov	r1, r7
 8008236:	4680      	mov	r8, r0
 8008238:	4630      	mov	r0, r6
 800823a:	f7ff fe47 	bl	8007ecc <_Bfree>
 800823e:	4647      	mov	r7, r8
 8008240:	106d      	asrs	r5, r5, #1
 8008242:	d00b      	beq.n	800825c <__pow5mult+0xa0>
 8008244:	6820      	ldr	r0, [r4, #0]
 8008246:	b938      	cbnz	r0, 8008258 <__pow5mult+0x9c>
 8008248:	4622      	mov	r2, r4
 800824a:	4621      	mov	r1, r4
 800824c:	4630      	mov	r0, r6
 800824e:	f7ff ff0f 	bl	8008070 <__multiply>
 8008252:	6020      	str	r0, [r4, #0]
 8008254:	f8c0 9000 	str.w	r9, [r0]
 8008258:	4604      	mov	r4, r0
 800825a:	e7e4      	b.n	8008226 <__pow5mult+0x6a>
 800825c:	4638      	mov	r0, r7
 800825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008262:	bf00      	nop
 8008264:	08008ee8 	.word	0x08008ee8
 8008268:	08008cae 	.word	0x08008cae
 800826c:	08008d98 	.word	0x08008d98

08008270 <__lshift>:
 8008270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	460c      	mov	r4, r1
 8008276:	6849      	ldr	r1, [r1, #4]
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800827e:	68a3      	ldr	r3, [r4, #8]
 8008280:	4607      	mov	r7, r0
 8008282:	4691      	mov	r9, r2
 8008284:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008288:	f108 0601 	add.w	r6, r8, #1
 800828c:	42b3      	cmp	r3, r6
 800828e:	db0b      	blt.n	80082a8 <__lshift+0x38>
 8008290:	4638      	mov	r0, r7
 8008292:	f7ff fddb 	bl	8007e4c <_Balloc>
 8008296:	4605      	mov	r5, r0
 8008298:	b948      	cbnz	r0, 80082ae <__lshift+0x3e>
 800829a:	4602      	mov	r2, r0
 800829c:	4b28      	ldr	r3, [pc, #160]	; (8008340 <__lshift+0xd0>)
 800829e:	4829      	ldr	r0, [pc, #164]	; (8008344 <__lshift+0xd4>)
 80082a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80082a4:	f7fd fda4 	bl	8005df0 <__assert_func>
 80082a8:	3101      	adds	r1, #1
 80082aa:	005b      	lsls	r3, r3, #1
 80082ac:	e7ee      	b.n	800828c <__lshift+0x1c>
 80082ae:	2300      	movs	r3, #0
 80082b0:	f100 0114 	add.w	r1, r0, #20
 80082b4:	f100 0210 	add.w	r2, r0, #16
 80082b8:	4618      	mov	r0, r3
 80082ba:	4553      	cmp	r3, sl
 80082bc:	db33      	blt.n	8008326 <__lshift+0xb6>
 80082be:	6920      	ldr	r0, [r4, #16]
 80082c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082c4:	f104 0314 	add.w	r3, r4, #20
 80082c8:	f019 091f 	ands.w	r9, r9, #31
 80082cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082d4:	d02b      	beq.n	800832e <__lshift+0xbe>
 80082d6:	f1c9 0e20 	rsb	lr, r9, #32
 80082da:	468a      	mov	sl, r1
 80082dc:	2200      	movs	r2, #0
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	fa00 f009 	lsl.w	r0, r0, r9
 80082e4:	4302      	orrs	r2, r0
 80082e6:	f84a 2b04 	str.w	r2, [sl], #4
 80082ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ee:	459c      	cmp	ip, r3
 80082f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80082f4:	d8f3      	bhi.n	80082de <__lshift+0x6e>
 80082f6:	ebac 0304 	sub.w	r3, ip, r4
 80082fa:	3b15      	subs	r3, #21
 80082fc:	f023 0303 	bic.w	r3, r3, #3
 8008300:	3304      	adds	r3, #4
 8008302:	f104 0015 	add.w	r0, r4, #21
 8008306:	4584      	cmp	ip, r0
 8008308:	bf38      	it	cc
 800830a:	2304      	movcc	r3, #4
 800830c:	50ca      	str	r2, [r1, r3]
 800830e:	b10a      	cbz	r2, 8008314 <__lshift+0xa4>
 8008310:	f108 0602 	add.w	r6, r8, #2
 8008314:	3e01      	subs	r6, #1
 8008316:	4638      	mov	r0, r7
 8008318:	612e      	str	r6, [r5, #16]
 800831a:	4621      	mov	r1, r4
 800831c:	f7ff fdd6 	bl	8007ecc <_Bfree>
 8008320:	4628      	mov	r0, r5
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008326:	f842 0f04 	str.w	r0, [r2, #4]!
 800832a:	3301      	adds	r3, #1
 800832c:	e7c5      	b.n	80082ba <__lshift+0x4a>
 800832e:	3904      	subs	r1, #4
 8008330:	f853 2b04 	ldr.w	r2, [r3], #4
 8008334:	f841 2f04 	str.w	r2, [r1, #4]!
 8008338:	459c      	cmp	ip, r3
 800833a:	d8f9      	bhi.n	8008330 <__lshift+0xc0>
 800833c:	e7ea      	b.n	8008314 <__lshift+0xa4>
 800833e:	bf00      	nop
 8008340:	08008d24 	.word	0x08008d24
 8008344:	08008d98 	.word	0x08008d98

08008348 <__mcmp>:
 8008348:	b530      	push	{r4, r5, lr}
 800834a:	6902      	ldr	r2, [r0, #16]
 800834c:	690c      	ldr	r4, [r1, #16]
 800834e:	1b12      	subs	r2, r2, r4
 8008350:	d10e      	bne.n	8008370 <__mcmp+0x28>
 8008352:	f100 0314 	add.w	r3, r0, #20
 8008356:	3114      	adds	r1, #20
 8008358:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800835c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008360:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008364:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008368:	42a5      	cmp	r5, r4
 800836a:	d003      	beq.n	8008374 <__mcmp+0x2c>
 800836c:	d305      	bcc.n	800837a <__mcmp+0x32>
 800836e:	2201      	movs	r2, #1
 8008370:	4610      	mov	r0, r2
 8008372:	bd30      	pop	{r4, r5, pc}
 8008374:	4283      	cmp	r3, r0
 8008376:	d3f3      	bcc.n	8008360 <__mcmp+0x18>
 8008378:	e7fa      	b.n	8008370 <__mcmp+0x28>
 800837a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800837e:	e7f7      	b.n	8008370 <__mcmp+0x28>

08008380 <__mdiff>:
 8008380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	460c      	mov	r4, r1
 8008386:	4606      	mov	r6, r0
 8008388:	4611      	mov	r1, r2
 800838a:	4620      	mov	r0, r4
 800838c:	4617      	mov	r7, r2
 800838e:	f7ff ffdb 	bl	8008348 <__mcmp>
 8008392:	1e05      	subs	r5, r0, #0
 8008394:	d110      	bne.n	80083b8 <__mdiff+0x38>
 8008396:	4629      	mov	r1, r5
 8008398:	4630      	mov	r0, r6
 800839a:	f7ff fd57 	bl	8007e4c <_Balloc>
 800839e:	b930      	cbnz	r0, 80083ae <__mdiff+0x2e>
 80083a0:	4b39      	ldr	r3, [pc, #228]	; (8008488 <__mdiff+0x108>)
 80083a2:	4602      	mov	r2, r0
 80083a4:	f240 2132 	movw	r1, #562	; 0x232
 80083a8:	4838      	ldr	r0, [pc, #224]	; (800848c <__mdiff+0x10c>)
 80083aa:	f7fd fd21 	bl	8005df0 <__assert_func>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80083b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b8:	bfa4      	itt	ge
 80083ba:	463b      	movge	r3, r7
 80083bc:	4627      	movge	r7, r4
 80083be:	4630      	mov	r0, r6
 80083c0:	6879      	ldr	r1, [r7, #4]
 80083c2:	bfa6      	itte	ge
 80083c4:	461c      	movge	r4, r3
 80083c6:	2500      	movge	r5, #0
 80083c8:	2501      	movlt	r5, #1
 80083ca:	f7ff fd3f 	bl	8007e4c <_Balloc>
 80083ce:	b920      	cbnz	r0, 80083da <__mdiff+0x5a>
 80083d0:	4b2d      	ldr	r3, [pc, #180]	; (8008488 <__mdiff+0x108>)
 80083d2:	4602      	mov	r2, r0
 80083d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80083d8:	e7e6      	b.n	80083a8 <__mdiff+0x28>
 80083da:	693e      	ldr	r6, [r7, #16]
 80083dc:	60c5      	str	r5, [r0, #12]
 80083de:	6925      	ldr	r5, [r4, #16]
 80083e0:	f107 0114 	add.w	r1, r7, #20
 80083e4:	f104 0914 	add.w	r9, r4, #20
 80083e8:	f100 0e14 	add.w	lr, r0, #20
 80083ec:	f107 0210 	add.w	r2, r7, #16
 80083f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80083f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80083f8:	46f2      	mov	sl, lr
 80083fa:	2700      	movs	r7, #0
 80083fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008400:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008404:	fa1f f883 	uxth.w	r8, r3
 8008408:	fa17 f78b 	uxtah	r7, r7, fp
 800840c:	0c1b      	lsrs	r3, r3, #16
 800840e:	eba7 0808 	sub.w	r8, r7, r8
 8008412:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008416:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800841a:	fa1f f888 	uxth.w	r8, r8
 800841e:	141f      	asrs	r7, r3, #16
 8008420:	454d      	cmp	r5, r9
 8008422:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008426:	f84a 3b04 	str.w	r3, [sl], #4
 800842a:	d8e7      	bhi.n	80083fc <__mdiff+0x7c>
 800842c:	1b2b      	subs	r3, r5, r4
 800842e:	3b15      	subs	r3, #21
 8008430:	f023 0303 	bic.w	r3, r3, #3
 8008434:	3304      	adds	r3, #4
 8008436:	3415      	adds	r4, #21
 8008438:	42a5      	cmp	r5, r4
 800843a:	bf38      	it	cc
 800843c:	2304      	movcc	r3, #4
 800843e:	4419      	add	r1, r3
 8008440:	4473      	add	r3, lr
 8008442:	469e      	mov	lr, r3
 8008444:	460d      	mov	r5, r1
 8008446:	4565      	cmp	r5, ip
 8008448:	d30e      	bcc.n	8008468 <__mdiff+0xe8>
 800844a:	f10c 0203 	add.w	r2, ip, #3
 800844e:	1a52      	subs	r2, r2, r1
 8008450:	f022 0203 	bic.w	r2, r2, #3
 8008454:	3903      	subs	r1, #3
 8008456:	458c      	cmp	ip, r1
 8008458:	bf38      	it	cc
 800845a:	2200      	movcc	r2, #0
 800845c:	441a      	add	r2, r3
 800845e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008462:	b17b      	cbz	r3, 8008484 <__mdiff+0x104>
 8008464:	6106      	str	r6, [r0, #16]
 8008466:	e7a5      	b.n	80083b4 <__mdiff+0x34>
 8008468:	f855 8b04 	ldr.w	r8, [r5], #4
 800846c:	fa17 f488 	uxtah	r4, r7, r8
 8008470:	1422      	asrs	r2, r4, #16
 8008472:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008476:	b2a4      	uxth	r4, r4
 8008478:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800847c:	f84e 4b04 	str.w	r4, [lr], #4
 8008480:	1417      	asrs	r7, r2, #16
 8008482:	e7e0      	b.n	8008446 <__mdiff+0xc6>
 8008484:	3e01      	subs	r6, #1
 8008486:	e7ea      	b.n	800845e <__mdiff+0xde>
 8008488:	08008d24 	.word	0x08008d24
 800848c:	08008d98 	.word	0x08008d98

08008490 <__d2b>:
 8008490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008494:	4689      	mov	r9, r1
 8008496:	2101      	movs	r1, #1
 8008498:	ec57 6b10 	vmov	r6, r7, d0
 800849c:	4690      	mov	r8, r2
 800849e:	f7ff fcd5 	bl	8007e4c <_Balloc>
 80084a2:	4604      	mov	r4, r0
 80084a4:	b930      	cbnz	r0, 80084b4 <__d2b+0x24>
 80084a6:	4602      	mov	r2, r0
 80084a8:	4b25      	ldr	r3, [pc, #148]	; (8008540 <__d2b+0xb0>)
 80084aa:	4826      	ldr	r0, [pc, #152]	; (8008544 <__d2b+0xb4>)
 80084ac:	f240 310a 	movw	r1, #778	; 0x30a
 80084b0:	f7fd fc9e 	bl	8005df0 <__assert_func>
 80084b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80084b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80084bc:	bb35      	cbnz	r5, 800850c <__d2b+0x7c>
 80084be:	2e00      	cmp	r6, #0
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	d028      	beq.n	8008516 <__d2b+0x86>
 80084c4:	4668      	mov	r0, sp
 80084c6:	9600      	str	r6, [sp, #0]
 80084c8:	f7ff fd8c 	bl	8007fe4 <__lo0bits>
 80084cc:	9900      	ldr	r1, [sp, #0]
 80084ce:	b300      	cbz	r0, 8008512 <__d2b+0x82>
 80084d0:	9a01      	ldr	r2, [sp, #4]
 80084d2:	f1c0 0320 	rsb	r3, r0, #32
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	430b      	orrs	r3, r1
 80084dc:	40c2      	lsrs	r2, r0
 80084de:	6163      	str	r3, [r4, #20]
 80084e0:	9201      	str	r2, [sp, #4]
 80084e2:	9b01      	ldr	r3, [sp, #4]
 80084e4:	61a3      	str	r3, [r4, #24]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf14      	ite	ne
 80084ea:	2202      	movne	r2, #2
 80084ec:	2201      	moveq	r2, #1
 80084ee:	6122      	str	r2, [r4, #16]
 80084f0:	b1d5      	cbz	r5, 8008528 <__d2b+0x98>
 80084f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084f6:	4405      	add	r5, r0
 80084f8:	f8c9 5000 	str.w	r5, [r9]
 80084fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008500:	f8c8 0000 	str.w	r0, [r8]
 8008504:	4620      	mov	r0, r4
 8008506:	b003      	add	sp, #12
 8008508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800850c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008510:	e7d5      	b.n	80084be <__d2b+0x2e>
 8008512:	6161      	str	r1, [r4, #20]
 8008514:	e7e5      	b.n	80084e2 <__d2b+0x52>
 8008516:	a801      	add	r0, sp, #4
 8008518:	f7ff fd64 	bl	8007fe4 <__lo0bits>
 800851c:	9b01      	ldr	r3, [sp, #4]
 800851e:	6163      	str	r3, [r4, #20]
 8008520:	2201      	movs	r2, #1
 8008522:	6122      	str	r2, [r4, #16]
 8008524:	3020      	adds	r0, #32
 8008526:	e7e3      	b.n	80084f0 <__d2b+0x60>
 8008528:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800852c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008530:	f8c9 0000 	str.w	r0, [r9]
 8008534:	6918      	ldr	r0, [r3, #16]
 8008536:	f7ff fd35 	bl	8007fa4 <__hi0bits>
 800853a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800853e:	e7df      	b.n	8008500 <__d2b+0x70>
 8008540:	08008d24 	.word	0x08008d24
 8008544:	08008d98 	.word	0x08008d98

08008548 <_calloc_r>:
 8008548:	b513      	push	{r0, r1, r4, lr}
 800854a:	434a      	muls	r2, r1
 800854c:	4611      	mov	r1, r2
 800854e:	9201      	str	r2, [sp, #4]
 8008550:	f000 f85a 	bl	8008608 <_malloc_r>
 8008554:	4604      	mov	r4, r0
 8008556:	b118      	cbz	r0, 8008560 <_calloc_r+0x18>
 8008558:	9a01      	ldr	r2, [sp, #4]
 800855a:	2100      	movs	r1, #0
 800855c:	f7fd fca2 	bl	8005ea4 <memset>
 8008560:	4620      	mov	r0, r4
 8008562:	b002      	add	sp, #8
 8008564:	bd10      	pop	{r4, pc}
	...

08008568 <_free_r>:
 8008568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800856a:	2900      	cmp	r1, #0
 800856c:	d048      	beq.n	8008600 <_free_r+0x98>
 800856e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008572:	9001      	str	r0, [sp, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	f1a1 0404 	sub.w	r4, r1, #4
 800857a:	bfb8      	it	lt
 800857c:	18e4      	addlt	r4, r4, r3
 800857e:	f000 f99d 	bl	80088bc <__malloc_lock>
 8008582:	4a20      	ldr	r2, [pc, #128]	; (8008604 <_free_r+0x9c>)
 8008584:	9801      	ldr	r0, [sp, #4]
 8008586:	6813      	ldr	r3, [r2, #0]
 8008588:	4615      	mov	r5, r2
 800858a:	b933      	cbnz	r3, 800859a <_free_r+0x32>
 800858c:	6063      	str	r3, [r4, #4]
 800858e:	6014      	str	r4, [r2, #0]
 8008590:	b003      	add	sp, #12
 8008592:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008596:	f000 b997 	b.w	80088c8 <__malloc_unlock>
 800859a:	42a3      	cmp	r3, r4
 800859c:	d90b      	bls.n	80085b6 <_free_r+0x4e>
 800859e:	6821      	ldr	r1, [r4, #0]
 80085a0:	1862      	adds	r2, r4, r1
 80085a2:	4293      	cmp	r3, r2
 80085a4:	bf04      	itt	eq
 80085a6:	681a      	ldreq	r2, [r3, #0]
 80085a8:	685b      	ldreq	r3, [r3, #4]
 80085aa:	6063      	str	r3, [r4, #4]
 80085ac:	bf04      	itt	eq
 80085ae:	1852      	addeq	r2, r2, r1
 80085b0:	6022      	streq	r2, [r4, #0]
 80085b2:	602c      	str	r4, [r5, #0]
 80085b4:	e7ec      	b.n	8008590 <_free_r+0x28>
 80085b6:	461a      	mov	r2, r3
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	b10b      	cbz	r3, 80085c0 <_free_r+0x58>
 80085bc:	42a3      	cmp	r3, r4
 80085be:	d9fa      	bls.n	80085b6 <_free_r+0x4e>
 80085c0:	6811      	ldr	r1, [r2, #0]
 80085c2:	1855      	adds	r5, r2, r1
 80085c4:	42a5      	cmp	r5, r4
 80085c6:	d10b      	bne.n	80085e0 <_free_r+0x78>
 80085c8:	6824      	ldr	r4, [r4, #0]
 80085ca:	4421      	add	r1, r4
 80085cc:	1854      	adds	r4, r2, r1
 80085ce:	42a3      	cmp	r3, r4
 80085d0:	6011      	str	r1, [r2, #0]
 80085d2:	d1dd      	bne.n	8008590 <_free_r+0x28>
 80085d4:	681c      	ldr	r4, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	6053      	str	r3, [r2, #4]
 80085da:	4421      	add	r1, r4
 80085dc:	6011      	str	r1, [r2, #0]
 80085de:	e7d7      	b.n	8008590 <_free_r+0x28>
 80085e0:	d902      	bls.n	80085e8 <_free_r+0x80>
 80085e2:	230c      	movs	r3, #12
 80085e4:	6003      	str	r3, [r0, #0]
 80085e6:	e7d3      	b.n	8008590 <_free_r+0x28>
 80085e8:	6825      	ldr	r5, [r4, #0]
 80085ea:	1961      	adds	r1, r4, r5
 80085ec:	428b      	cmp	r3, r1
 80085ee:	bf04      	itt	eq
 80085f0:	6819      	ldreq	r1, [r3, #0]
 80085f2:	685b      	ldreq	r3, [r3, #4]
 80085f4:	6063      	str	r3, [r4, #4]
 80085f6:	bf04      	itt	eq
 80085f8:	1949      	addeq	r1, r1, r5
 80085fa:	6021      	streq	r1, [r4, #0]
 80085fc:	6054      	str	r4, [r2, #4]
 80085fe:	e7c7      	b.n	8008590 <_free_r+0x28>
 8008600:	b003      	add	sp, #12
 8008602:	bd30      	pop	{r4, r5, pc}
 8008604:	200001fc 	.word	0x200001fc

08008608 <_malloc_r>:
 8008608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860a:	1ccd      	adds	r5, r1, #3
 800860c:	f025 0503 	bic.w	r5, r5, #3
 8008610:	3508      	adds	r5, #8
 8008612:	2d0c      	cmp	r5, #12
 8008614:	bf38      	it	cc
 8008616:	250c      	movcc	r5, #12
 8008618:	2d00      	cmp	r5, #0
 800861a:	4606      	mov	r6, r0
 800861c:	db01      	blt.n	8008622 <_malloc_r+0x1a>
 800861e:	42a9      	cmp	r1, r5
 8008620:	d903      	bls.n	800862a <_malloc_r+0x22>
 8008622:	230c      	movs	r3, #12
 8008624:	6033      	str	r3, [r6, #0]
 8008626:	2000      	movs	r0, #0
 8008628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800862a:	f000 f947 	bl	80088bc <__malloc_lock>
 800862e:	4921      	ldr	r1, [pc, #132]	; (80086b4 <_malloc_r+0xac>)
 8008630:	680a      	ldr	r2, [r1, #0]
 8008632:	4614      	mov	r4, r2
 8008634:	b99c      	cbnz	r4, 800865e <_malloc_r+0x56>
 8008636:	4f20      	ldr	r7, [pc, #128]	; (80086b8 <_malloc_r+0xb0>)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	b923      	cbnz	r3, 8008646 <_malloc_r+0x3e>
 800863c:	4621      	mov	r1, r4
 800863e:	4630      	mov	r0, r6
 8008640:	f000 f83c 	bl	80086bc <_sbrk_r>
 8008644:	6038      	str	r0, [r7, #0]
 8008646:	4629      	mov	r1, r5
 8008648:	4630      	mov	r0, r6
 800864a:	f000 f837 	bl	80086bc <_sbrk_r>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d123      	bne.n	800869a <_malloc_r+0x92>
 8008652:	230c      	movs	r3, #12
 8008654:	6033      	str	r3, [r6, #0]
 8008656:	4630      	mov	r0, r6
 8008658:	f000 f936 	bl	80088c8 <__malloc_unlock>
 800865c:	e7e3      	b.n	8008626 <_malloc_r+0x1e>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	1b5b      	subs	r3, r3, r5
 8008662:	d417      	bmi.n	8008694 <_malloc_r+0x8c>
 8008664:	2b0b      	cmp	r3, #11
 8008666:	d903      	bls.n	8008670 <_malloc_r+0x68>
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	441c      	add	r4, r3
 800866c:	6025      	str	r5, [r4, #0]
 800866e:	e004      	b.n	800867a <_malloc_r+0x72>
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	42a2      	cmp	r2, r4
 8008674:	bf0c      	ite	eq
 8008676:	600b      	streq	r3, [r1, #0]
 8008678:	6053      	strne	r3, [r2, #4]
 800867a:	4630      	mov	r0, r6
 800867c:	f000 f924 	bl	80088c8 <__malloc_unlock>
 8008680:	f104 000b 	add.w	r0, r4, #11
 8008684:	1d23      	adds	r3, r4, #4
 8008686:	f020 0007 	bic.w	r0, r0, #7
 800868a:	1ac2      	subs	r2, r0, r3
 800868c:	d0cc      	beq.n	8008628 <_malloc_r+0x20>
 800868e:	1a1b      	subs	r3, r3, r0
 8008690:	50a3      	str	r3, [r4, r2]
 8008692:	e7c9      	b.n	8008628 <_malloc_r+0x20>
 8008694:	4622      	mov	r2, r4
 8008696:	6864      	ldr	r4, [r4, #4]
 8008698:	e7cc      	b.n	8008634 <_malloc_r+0x2c>
 800869a:	1cc4      	adds	r4, r0, #3
 800869c:	f024 0403 	bic.w	r4, r4, #3
 80086a0:	42a0      	cmp	r0, r4
 80086a2:	d0e3      	beq.n	800866c <_malloc_r+0x64>
 80086a4:	1a21      	subs	r1, r4, r0
 80086a6:	4630      	mov	r0, r6
 80086a8:	f000 f808 	bl	80086bc <_sbrk_r>
 80086ac:	3001      	adds	r0, #1
 80086ae:	d1dd      	bne.n	800866c <_malloc_r+0x64>
 80086b0:	e7cf      	b.n	8008652 <_malloc_r+0x4a>
 80086b2:	bf00      	nop
 80086b4:	200001fc 	.word	0x200001fc
 80086b8:	20000200 	.word	0x20000200

080086bc <_sbrk_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d06      	ldr	r5, [pc, #24]	; (80086d8 <_sbrk_r+0x1c>)
 80086c0:	2300      	movs	r3, #0
 80086c2:	4604      	mov	r4, r0
 80086c4:	4608      	mov	r0, r1
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	f7f9 ffde 	bl	8002688 <_sbrk>
 80086cc:	1c43      	adds	r3, r0, #1
 80086ce:	d102      	bne.n	80086d6 <_sbrk_r+0x1a>
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	b103      	cbz	r3, 80086d6 <_sbrk_r+0x1a>
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	200002ec 	.word	0x200002ec

080086dc <_raise_r>:
 80086dc:	291f      	cmp	r1, #31
 80086de:	b538      	push	{r3, r4, r5, lr}
 80086e0:	4604      	mov	r4, r0
 80086e2:	460d      	mov	r5, r1
 80086e4:	d904      	bls.n	80086f0 <_raise_r+0x14>
 80086e6:	2316      	movs	r3, #22
 80086e8:	6003      	str	r3, [r0, #0]
 80086ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80086f2:	b112      	cbz	r2, 80086fa <_raise_r+0x1e>
 80086f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086f8:	b94b      	cbnz	r3, 800870e <_raise_r+0x32>
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 f830 	bl	8008760 <_getpid_r>
 8008700:	462a      	mov	r2, r5
 8008702:	4601      	mov	r1, r0
 8008704:	4620      	mov	r0, r4
 8008706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800870a:	f000 b817 	b.w	800873c <_kill_r>
 800870e:	2b01      	cmp	r3, #1
 8008710:	d00a      	beq.n	8008728 <_raise_r+0x4c>
 8008712:	1c59      	adds	r1, r3, #1
 8008714:	d103      	bne.n	800871e <_raise_r+0x42>
 8008716:	2316      	movs	r3, #22
 8008718:	6003      	str	r3, [r0, #0]
 800871a:	2001      	movs	r0, #1
 800871c:	e7e7      	b.n	80086ee <_raise_r+0x12>
 800871e:	2400      	movs	r4, #0
 8008720:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008724:	4628      	mov	r0, r5
 8008726:	4798      	blx	r3
 8008728:	2000      	movs	r0, #0
 800872a:	e7e0      	b.n	80086ee <_raise_r+0x12>

0800872c <raise>:
 800872c:	4b02      	ldr	r3, [pc, #8]	; (8008738 <raise+0xc>)
 800872e:	4601      	mov	r1, r0
 8008730:	6818      	ldr	r0, [r3, #0]
 8008732:	f7ff bfd3 	b.w	80086dc <_raise_r>
 8008736:	bf00      	nop
 8008738:	2000000c 	.word	0x2000000c

0800873c <_kill_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d07      	ldr	r5, [pc, #28]	; (800875c <_kill_r+0x20>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	4611      	mov	r1, r2
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	f7f9 ff15 	bl	8002578 <_kill>
 800874e:	1c43      	adds	r3, r0, #1
 8008750:	d102      	bne.n	8008758 <_kill_r+0x1c>
 8008752:	682b      	ldr	r3, [r5, #0]
 8008754:	b103      	cbz	r3, 8008758 <_kill_r+0x1c>
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	bd38      	pop	{r3, r4, r5, pc}
 800875a:	bf00      	nop
 800875c:	200002ec 	.word	0x200002ec

08008760 <_getpid_r>:
 8008760:	f7f9 bf02 	b.w	8002568 <_getpid>

08008764 <__sread>:
 8008764:	b510      	push	{r4, lr}
 8008766:	460c      	mov	r4, r1
 8008768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800876c:	f000 f8b2 	bl	80088d4 <_read_r>
 8008770:	2800      	cmp	r0, #0
 8008772:	bfab      	itete	ge
 8008774:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008776:	89a3      	ldrhlt	r3, [r4, #12]
 8008778:	181b      	addge	r3, r3, r0
 800877a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800877e:	bfac      	ite	ge
 8008780:	6563      	strge	r3, [r4, #84]	; 0x54
 8008782:	81a3      	strhlt	r3, [r4, #12]
 8008784:	bd10      	pop	{r4, pc}

08008786 <__swrite>:
 8008786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800878a:	461f      	mov	r7, r3
 800878c:	898b      	ldrh	r3, [r1, #12]
 800878e:	05db      	lsls	r3, r3, #23
 8008790:	4605      	mov	r5, r0
 8008792:	460c      	mov	r4, r1
 8008794:	4616      	mov	r6, r2
 8008796:	d505      	bpl.n	80087a4 <__swrite+0x1e>
 8008798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800879c:	2302      	movs	r3, #2
 800879e:	2200      	movs	r2, #0
 80087a0:	f000 f868 	bl	8008874 <_lseek_r>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ae:	81a3      	strh	r3, [r4, #12]
 80087b0:	4632      	mov	r2, r6
 80087b2:	463b      	mov	r3, r7
 80087b4:	4628      	mov	r0, r5
 80087b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087ba:	f000 b817 	b.w	80087ec <_write_r>

080087be <__sseek>:
 80087be:	b510      	push	{r4, lr}
 80087c0:	460c      	mov	r4, r1
 80087c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c6:	f000 f855 	bl	8008874 <_lseek_r>
 80087ca:	1c43      	adds	r3, r0, #1
 80087cc:	89a3      	ldrh	r3, [r4, #12]
 80087ce:	bf15      	itete	ne
 80087d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80087d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087da:	81a3      	strheq	r3, [r4, #12]
 80087dc:	bf18      	it	ne
 80087de:	81a3      	strhne	r3, [r4, #12]
 80087e0:	bd10      	pop	{r4, pc}

080087e2 <__sclose>:
 80087e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e6:	f000 b813 	b.w	8008810 <_close_r>
	...

080087ec <_write_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d07      	ldr	r5, [pc, #28]	; (800880c <_write_r+0x20>)
 80087f0:	4604      	mov	r4, r0
 80087f2:	4608      	mov	r0, r1
 80087f4:	4611      	mov	r1, r2
 80087f6:	2200      	movs	r2, #0
 80087f8:	602a      	str	r2, [r5, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	f7f9 fef3 	bl	80025e6 <_write>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_write_r+0x1e>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_write_r+0x1e>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	200002ec 	.word	0x200002ec

08008810 <_close_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d06      	ldr	r5, [pc, #24]	; (800882c <_close_r+0x1c>)
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	f7f9 feff 	bl	800261e <_close>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_close_r+0x1a>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_close_r+0x1a>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	200002ec 	.word	0x200002ec

08008830 <_fstat_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d07      	ldr	r5, [pc, #28]	; (8008850 <_fstat_r+0x20>)
 8008834:	2300      	movs	r3, #0
 8008836:	4604      	mov	r4, r0
 8008838:	4608      	mov	r0, r1
 800883a:	4611      	mov	r1, r2
 800883c:	602b      	str	r3, [r5, #0]
 800883e:	f7f9 fefa 	bl	8002636 <_fstat>
 8008842:	1c43      	adds	r3, r0, #1
 8008844:	d102      	bne.n	800884c <_fstat_r+0x1c>
 8008846:	682b      	ldr	r3, [r5, #0]
 8008848:	b103      	cbz	r3, 800884c <_fstat_r+0x1c>
 800884a:	6023      	str	r3, [r4, #0]
 800884c:	bd38      	pop	{r3, r4, r5, pc}
 800884e:	bf00      	nop
 8008850:	200002ec 	.word	0x200002ec

08008854 <_isatty_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d06      	ldr	r5, [pc, #24]	; (8008870 <_isatty_r+0x1c>)
 8008858:	2300      	movs	r3, #0
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	602b      	str	r3, [r5, #0]
 8008860:	f7f9 fef9 	bl	8002656 <_isatty>
 8008864:	1c43      	adds	r3, r0, #1
 8008866:	d102      	bne.n	800886e <_isatty_r+0x1a>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	b103      	cbz	r3, 800886e <_isatty_r+0x1a>
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	200002ec 	.word	0x200002ec

08008874 <_lseek_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d07      	ldr	r5, [pc, #28]	; (8008894 <_lseek_r+0x20>)
 8008878:	4604      	mov	r4, r0
 800887a:	4608      	mov	r0, r1
 800887c:	4611      	mov	r1, r2
 800887e:	2200      	movs	r2, #0
 8008880:	602a      	str	r2, [r5, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	f7f9 fef2 	bl	800266c <_lseek>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d102      	bne.n	8008892 <_lseek_r+0x1e>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	b103      	cbz	r3, 8008892 <_lseek_r+0x1e>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	200002ec 	.word	0x200002ec

08008898 <__ascii_mbtowc>:
 8008898:	b082      	sub	sp, #8
 800889a:	b901      	cbnz	r1, 800889e <__ascii_mbtowc+0x6>
 800889c:	a901      	add	r1, sp, #4
 800889e:	b142      	cbz	r2, 80088b2 <__ascii_mbtowc+0x1a>
 80088a0:	b14b      	cbz	r3, 80088b6 <__ascii_mbtowc+0x1e>
 80088a2:	7813      	ldrb	r3, [r2, #0]
 80088a4:	600b      	str	r3, [r1, #0]
 80088a6:	7812      	ldrb	r2, [r2, #0]
 80088a8:	1e10      	subs	r0, r2, #0
 80088aa:	bf18      	it	ne
 80088ac:	2001      	movne	r0, #1
 80088ae:	b002      	add	sp, #8
 80088b0:	4770      	bx	lr
 80088b2:	4610      	mov	r0, r2
 80088b4:	e7fb      	b.n	80088ae <__ascii_mbtowc+0x16>
 80088b6:	f06f 0001 	mvn.w	r0, #1
 80088ba:	e7f8      	b.n	80088ae <__ascii_mbtowc+0x16>

080088bc <__malloc_lock>:
 80088bc:	4801      	ldr	r0, [pc, #4]	; (80088c4 <__malloc_lock+0x8>)
 80088be:	f7ff ba48 	b.w	8007d52 <__retarget_lock_acquire_recursive>
 80088c2:	bf00      	nop
 80088c4:	200002e4 	.word	0x200002e4

080088c8 <__malloc_unlock>:
 80088c8:	4801      	ldr	r0, [pc, #4]	; (80088d0 <__malloc_unlock+0x8>)
 80088ca:	f7ff ba43 	b.w	8007d54 <__retarget_lock_release_recursive>
 80088ce:	bf00      	nop
 80088d0:	200002e4 	.word	0x200002e4

080088d4 <_read_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d07      	ldr	r5, [pc, #28]	; (80088f4 <_read_r+0x20>)
 80088d8:	4604      	mov	r4, r0
 80088da:	4608      	mov	r0, r1
 80088dc:	4611      	mov	r1, r2
 80088de:	2200      	movs	r2, #0
 80088e0:	602a      	str	r2, [r5, #0]
 80088e2:	461a      	mov	r2, r3
 80088e4:	f7f9 fe62 	bl	80025ac <_read>
 80088e8:	1c43      	adds	r3, r0, #1
 80088ea:	d102      	bne.n	80088f2 <_read_r+0x1e>
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	b103      	cbz	r3, 80088f2 <_read_r+0x1e>
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	200002ec 	.word	0x200002ec

080088f8 <__ascii_wctomb>:
 80088f8:	b149      	cbz	r1, 800890e <__ascii_wctomb+0x16>
 80088fa:	2aff      	cmp	r2, #255	; 0xff
 80088fc:	bf85      	ittet	hi
 80088fe:	238a      	movhi	r3, #138	; 0x8a
 8008900:	6003      	strhi	r3, [r0, #0]
 8008902:	700a      	strbls	r2, [r1, #0]
 8008904:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008908:	bf98      	it	ls
 800890a:	2001      	movls	r0, #1
 800890c:	4770      	bx	lr
 800890e:	4608      	mov	r0, r1
 8008910:	4770      	bx	lr
	...

08008914 <_init>:
 8008914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008916:	bf00      	nop
 8008918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891a:	bc08      	pop	{r3}
 800891c:	469e      	mov	lr, r3
 800891e:	4770      	bx	lr

08008920 <_fini>:
 8008920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008922:	bf00      	nop
 8008924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008926:	bc08      	pop	{r3}
 8008928:	469e      	mov	lr, r3
 800892a:	4770      	bx	lr
